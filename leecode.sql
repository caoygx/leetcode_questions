/*
Navicat MySQL Data Transfer

Source Server         : c7
Source Server Version : 50718
Source Host           : 192.168.26.118:3306
Source Database       : tool

Target Server Type    : MYSQL
Target Server Version : 50718
File Encoding         : 65001

Date: 2021-08-25 10:45:38
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for leecode
-- ----------------------------
DROP TABLE IF EXISTS `leecode`;
CREATE TABLE `leecode` (
  `title` varchar(255) DEFAULT NULL,
  `content` text COMMENT '排名'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of leecode
-- ----------------------------
INSERT INTO `leecode` VALUES ('1. 两数之和', '<p>给定一个整数数组 <code>nums</code>&nbsp;和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值 </strong><em><code>target</code></em>&nbsp; 的那&nbsp;<strong>两个</strong>&nbsp;整数，并返回它们的数组下标。</p> \n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p> \n<p>你可以按任意顺序返回答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [2,7,11,15], target = 9\n<strong>输出：</strong>[0,1]\n<strong>解释：</strong>因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [3,2,4], target = 6\n<strong>输出：</strong>[1,2]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [3,3], target = 6\n<strong>输出：</strong>[0,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li> \n <li><strong>只会存在一个有效答案</strong></li> \n</ul> \n<p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n<sup>2</sup>)</code> 的算法吗？</p>');
INSERT INTO `leecode` VALUES ('10. 正则表达式匹配', '<p>给你一个字符串&nbsp;<code>s</code>&nbsp;和一个字符规律&nbsp;<code>p</code>，请你来实现一个支持 <code>\'.\'</code>&nbsp;和&nbsp;<code>\'*\'</code>&nbsp;的正则表达式匹配。</p> \n<ul> \n <li><code>\'.\'</code> 匹配任意单个字符</li> \n <li><code>\'*\'</code> 匹配零个或多个前面的那一个元素</li> \n</ul> \n<p>所谓匹配，是要涵盖&nbsp;<strong>整个&nbsp;</strong>字符串&nbsp;<code>s</code>的，而不是部分字符串。</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"aa\" p = \"a\"\n<strong>输出：</strong>false\n<strong>解释：</strong>\"a\" 无法匹配 \"aa\" 整个字符串。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入：</strong>s = \"aa\" p = \"a*\"\n<strong>输出：</strong>true\n<strong>解释：</strong>因为 \'*\' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 \'a\'。因此，字符串 \"aa\" 可被视为 \'a\' 重复了一次。\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<pre><strong>输入：</strong>s = \"ab\" p = \".*\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\".*\" 表示可匹配零个或多个（\'*\'）任意字符（\'.\'）。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"aab\" p = \"c*a*b\"\n<strong>输出：</strong>true\n<strong>解释：</strong>因为 \'*\' 表示零个或多个，这里 \'c\' 为 0 个, \'a\' 被重复一次。因此可以匹配字符串 \"aab\"。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>s = \"mississippi\" p = \"mis*is*p*.\"\n<strong>输出：</strong>false</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s.length&nbsp;&lt;= 20</code></li> \n <li><code>0 &lt;= p.length&nbsp;&lt;= 30</code></li> \n <li><code>s</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母。</li> \n <li><code>p</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母，以及字符&nbsp;<code>.</code>&nbsp;和&nbsp;<code>*</code>。</li> \n <li>保证每次出现字符&nbsp;<code>*</code> 时，前面都匹配到有效的字符</li> \n</ul>');
INSERT INTO `leecode` VALUES ('100. 相同的树', '<p>给你两棵二叉树的根节点 <code>p</code> 和 <code>q</code> ，编写一个函数来检验这两棵树是否相同。</p> \n<p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 622px; height: 182px;\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>p = [1,2,3], q = [1,2,3]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 382px; height: 182px;\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>p = [1,2], q = [1,null,2]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 622px; height: 182px;\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>p = [1,2,1], q = [1,1,2]\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>两棵树上的节点数目都在范围 <code>[0, 100]</code> 内</li> \n <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1000. 合并石头的最低成本', '<p>有 <code>N</code> 堆石头排成一排，第 <code>i</code> 堆中有&nbsp;<code>stones[i]</code>&nbsp;块石头。</p> \n<p>每次<em>移动（move）</em>需要将<strong>连续的</strong>&nbsp;<code>K</code>&nbsp;堆石头合并为一堆，而这个移动的成本为这&nbsp;<code>K</code>&nbsp;堆石头的总数。</p> \n<p>找出把所有石头合并成一堆的最低成本。如果不可能，返回 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>stones = [3,2,4,1], K = 2\n<strong>输出：</strong>20\n<strong>解释：</strong>\n从 [3, 2, 4, 1] 开始。\n合并 [3, 2]，成本为 5，剩下 [5, 4, 1]。\n合并 [4, 1]，成本为 5，剩下 [5, 5]。\n合并 [5, 5]，成本为 10，剩下 [10]。\n总成本 20，这是可能的最小值。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>stones = [3,2,4,1], K = 3\n<strong>输出：</strong>-1\n<strong>解释：</strong>任何合并操作后，都会剩下 2 堆，我们无法再进行合并。所以这项任务是不可能完成的。.\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>stones = [3,5,1,2,6], K = 3\n<strong>输出：</strong>25\n<strong>解释：</strong>\n从 [3, 5, 1, 2, 6] 开始。\n合并 [5, 1, 2]，成本为 8，剩下 [3, 8, 6]。\n合并 [3, 8, 6]，成本为 17，剩下 [17]。\n总成本 25，这是可能的最小值。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= stones.length &lt;= 30</code></li> \n <li><code>2 &lt;= K &lt;= 30</code></li> \n <li><code>1 &lt;= stones[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1001. 网格照明', '<p>在&nbsp;<code>N x N</code>&nbsp;的网格 <code>grid</code> 上，每个单元格都有一盏灯，最初灯都处于 <strong>关闭</strong> 状态。</p> \n<p>数组&nbsp;<code>lamps</code> 表示打开的灯的位置。<code>lamps[i] = [row<sub>i</sub>, col<sub>i</sub>]</code> 表示 <strong>打开</strong> 位于 <code>grid[row<sub>i</sub>][col<sub>i</sub>]</code> 的第 <code>i</code> 盏灯 。每盏灯都照亮自身单元格以及同一行、同一列和两条对角线上的所有其他单元格。</p> \n<p>查询数组 <code>queries</code> 中，第 <code>i</code> 次查询&nbsp;<code>queries[i] = [row<sub>i</sub>, col<sub>i</sub>]</code>，如果单元格 <code>[row<sub>i</sub>, col<sub>i</sub>]</code> 是被照亮的，则查询结果为 <code>1</code> ，否则为 <code>0</code> 。在第 <code>i</code> 次查询之后 [按照查询的顺序] ，<strong>关闭</strong> 位于单元格 <code>grid[row<sub>i</sub>][col<sub>i</sub>]</code> 上或其相邻 8 个方向上（与单元格 <code>grid[row<sub>i</sub>][col<sub>i</sub>]</code> 共享角或边）的任何灯。</p> \n<p>返回答案数组 <code>ans</code> ， <code>answer[i]</code> 应等于第 <code>i</code>&nbsp;次查询&nbsp;<code>queries[i]</code>&nbsp;的结果，<code>1</code> 表示照亮，<code>0</code> 表示未照亮。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 750px; height: 209px;\" src=\"https://assets.leetcode.com/uploads/2020/08/19/illu_1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]\n<strong>输出：</strong>[1,0]\n<strong>解释：</strong>最初所有灯都是关闭的。在执行查询之前，打开位于 [0, 0] 和 [4, 4] 的灯。第 0&nbsp;次查询检查 grid[1][1] 是否被照亮（蓝色方框）。该单元格被照亮，所以 ans[0] = 1 。然后，关闭红色方框中的所有灯。\n<img style=\"width: 500px; height: 218px;\" src=\"https://assets.leetcode.com/uploads/2020/08/19/illu_step1.jpg\" alt=\"\">\n第 1&nbsp;次查询检查 grid[1][0] 是否被照亮（蓝色方框）。该单元格没有被照亮，所以 ans[1] = 0 。然后，关闭红色矩形中的所有灯。\n<img style=\"width: 500px; height: 219px;\" src=\"https://assets.leetcode.com/uploads/2020/08/19/illu_step2.jpg\" alt=\"\">\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]\n<strong>输出：</strong>[1,1]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>N = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]\n<strong>输出：</strong>[1,1,0]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= N &lt;= 10<sup>9</sup></code></li> \n <li><code>0 &lt;= lamps.length &lt;= 20000</code></li> \n <li><code>lamps[i].length == 2</code></li> \n <li><code>0 &lt;= lamps[i][j] &lt; N</code></li> \n <li><code>0 &lt;= queries.length &lt;= 20000</code></li> \n <li><code>queries[i].length == 2</code></li> \n <li><code>0 &lt;= queries[i][j] &lt; N</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1002. 查找常用字符', '<p>给定仅有小写字母组成的字符串数组 <code>A</code>，返回列表中的每个字符串中都显示的全部字符（<strong>包括重复字符</strong>）组成的列表。例如，如果一个字符在每个字符串中出现 3 次，但不是 4 次，则需要在最终答案中包含该字符 3 次。</p> \n<p>你可以按任意顺序返回答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[\"bella\",\"label\",\"roller\"]\n<strong>输出：</strong>[\"e\",\"l\",\"l\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[\"cool\",\"lock\",\"cook\"]\n<strong>输出：</strong>[\"c\",\"o\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 100</code></li> \n <li><code>1 &lt;= A[i].length &lt;= 100</code></li> \n <li><code>A[i][j]</code> 是小写字母</li> \n</ol>');
INSERT INTO `leecode` VALUES ('1003. 检查替换后的词是否有效', '给你一个字符串 \n<code>s</code> ，请你判断它是否 \n<strong>有效</strong> 。 \n<p>字符串 <code>s</code> <strong>有效</strong> 需要满足：假设开始有一个空字符串 <code>t = \"\"</code> ，你可以执行 <strong>任意次</strong> 下述操作将<strong> </strong><code>t</code><strong> 转换为 </strong><code>s</code> ：</p> \n<ul> \n <li>将字符串 <code>\"abc\"</code> 插入到 <code>t</code> 中的任意位置。形式上，<code>t</code> 变为 <code>t<sub>left</sub> + \"abc\" + t<sub>right</sub></code>，其中 <code>t == t<sub>left</sub> + t<sub>right</sub></code> 。注意，<code>t<sub>left</sub></code> 和 <code>t<sub>right</sub></code> 可能为 <strong>空</strong> 。</li> \n</ul> \n<p>如果字符串 <code>s</code> 有效，则返回 <code>true</code>；否则，返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"aabcbc\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\n\"\" -&gt; \"<strong>abc</strong>\" -&gt; \"a<strong>abc</strong>bc\"\n因此，\"aabcbc\" 有效。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abcabcababcc\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\n\"\" -&gt; \"<strong>abc</strong>\" -&gt; \"abc<strong>abc</strong>\" -&gt; \"abcabc<strong>abc</strong>\" -&gt; \"abcabcab<strong>abc</strong>c\"\n因此，\"abcabcababcc\" 有效。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"abccba\"\n<strong>输出：</strong>false\n<strong>解释：</strong>执行操作无法得到 \"abccba\" 。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"cababc\"\n<strong>输出：</strong>false\n<strong>解释：</strong>执行操作无法得到 \"cababc\" 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>s</code> 由字母 <code>\'a\'</code>、<code>\'b\'</code> 和 <code>\'c\'</code> 组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1004. 最大连续1的个数 III', '<p>给定一个由若干 <code>0</code> 和 <code>1</code> 组成的数组&nbsp;<code>A</code>，我们最多可以将&nbsp;<code>K</code>&nbsp;个值从 0 变成 1 。</p> \n<p>返回仅包含 1 的最长（连续）子数组的长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = [1,1,1,0,0,0,1,1,1,1,0], K = 2\n<strong>输出：</strong>6\n<strong>解释： </strong>\n[1,1,1,0,0,<strong>1</strong>,1,1,1,1,<strong>1</strong>]\n粗体数字从 0 翻转到 1，最长的子数组长度为 6。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3\n<strong>输出：</strong>10\n<strong>解释：</strong>\n[0,0,1,1,<strong>1</strong>,<strong>1</strong>,1,1,1,<strong>1</strong>,1,1,0,0,0,1,1,1,1]\n粗体数字从 0 翻转到 1，最长的子数组长度为 10。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 20000</code></li> \n <li><code>0 &lt;= K &lt;= A.length</code></li> \n <li><code>A[i]</code> 为&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code>&nbsp;</li> \n</ol>');
INSERT INTO `leecode` VALUES ('1005. K 次取反后最大化的数组和', '<p>给定一个整数数组 A，我们<strong>只能</strong>用以下方法修改该数组：我们选择某个索引 <code>i</code>&nbsp;并将 <code>A[i]</code> 替换为 <code>-A[i]</code>，然后总共重复这个过程 <code>K</code> 次。（我们可以多次选择同一个索引 <code>i</code>。）</p> \n<p>以这种方式修改数组后，返回数组可能的最大和。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = [4,2,3], K = 1\n<strong>输出：</strong>5\n<strong>解释：</strong>选择索引 (1,) ，然后 A 变为 [4,-2,3]。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = [3,-1,0,2], K = 3\n<strong>输出：</strong>6\n<strong>解释：</strong>选择索引 (1, 2, 2) ，然后 A 变为 [3,1,0,2]。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>A = [2,-3,-1,5,-4], K = 2\n<strong>输出：</strong>13\n<strong>解释：</strong>选择索引 (1, 4) ，然后 A 变为 [2,3,-1,5,4]。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 10000</code></li> \n <li><code>1 &lt;= K &lt;= 10000</code></li> \n <li><code>-100 &lt;= A[i] &lt;= 100</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1006. 笨阶乘', '<p>通常，正整数 <code>n</code> 的阶乘是所有小于或等于 <code>n</code> 的正整数的乘积。例如，<code>factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1</code>。</p> \n<p>相反，我们设计了一个笨阶乘 <code>clumsy</code>：在整数的递减序列中，我们以一个固定顺序的操作符序列来依次替换原有的乘法操作符：乘法(*)，除法(/)，加法(+)和减法(-)。</p> \n<p>例如，<code>clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1</code>。然而，这些运算仍然使用通常的算术运算顺序：我们在任何加、减步骤之前执行所有的乘法和除法步骤，并且按从左到右处理乘法和除法步骤。</p> \n<p>另外，我们使用的除法是地板除法（<em>floor division</em>），所以&nbsp;<code>10 * 9 / 8</code>&nbsp;等于&nbsp;<code>11</code>。这保证结果是一个整数。</p> \n<p>实现上面定义的笨函数：给定一个整数 <code>N</code>，它返回 <code>N</code> 的笨阶乘。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>4\n<strong>输出：</strong>7\n<strong>解释：</strong>7 = 4 * 3 / 2 + 1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>10\n<strong>输出：</strong>12\n<strong>解释：</strong>12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= N &lt;= 10000</code></li> \n <li><code>-2^31 &lt;= answer &lt;= 2^31 - 1</code>&nbsp; （答案保证符合 32 位整数。）</li> \n</ol>');
INSERT INTO `leecode` VALUES ('1007. 行相等的最少多米诺旋转', '<p>在一排多米诺骨牌中，<code>A[i]</code> 和 <code>B[i]</code>&nbsp;分别代表第 i 个多米诺骨牌的上半部分和下半部分。（一个多米诺是两个从 1 到 6 的数字同列平铺形成的&nbsp;—— 该平铺的每一半上都有一个数字。）</p> \n<p>我们可以旋转第&nbsp;<code>i</code>&nbsp;张多米诺，使得&nbsp;<code>A[i]</code> 和&nbsp;<code>B[i]</code>&nbsp;的值交换。</p> \n<p>返回能使 <code>A</code> 中所有值或者 <code>B</code> 中所有值都相同的最小旋转次数。</p> \n<p>如果无法做到，返回&nbsp;<code>-1</code>.</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 161px; width: 200px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/03/08/domino.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>A = [2,1,2,4,2,2], B = [5,2,6,2,3,2]\n<strong>输出：</strong>2\n<strong>解释：</strong>\n图一表示：在我们旋转之前， A 和 B 给出的多米诺牌。\n如果我们旋转第二个和第四个多米诺骨牌，我们可以使上面一行中的每个值都等于 2，如图二所示。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = [3,5,1,2,3], B = [3,6,3,3,4]\n<strong>输出：</strong>-1\n<strong>解释：</strong>\n在这种情况下，不可能旋转多米诺牌使一行的值相等。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A[i], B[i] &lt;= 6</code></li> \n <li><code>2 &lt;= A.length == B.length &lt;= 20000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1008. 前序遍历构造二叉搜索树', '<p>返回与给定前序遍历&nbsp;<code>preorder</code> 相匹配的二叉搜索树（binary <strong>search</strong> tree）的根结点。</p> \n<p><em>(回想一下，二叉搜索树是二叉树的一种，其每个节点都满足以下规则，对于&nbsp;<code>node.left</code>&nbsp;的任何后代，值总 <code>&lt; node.val</code>，而 <code>node.right</code> 的任何后代，值总 <code>&gt; node.val</code>。此外，前序遍历首先显示节点&nbsp;<code>node</code> 的值，然后遍历 <code>node.left</code>，接着遍历 <code>node.right</code>。）</em></p> \n<p>题目保证，对于给定的测试用例，总能找到满足要求的二叉搜索树。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[8,5,1,7,10,12]\n<strong>输出：</strong>[8,5,10,1,7,null,12]\n<img style=\"height: 200px; width: 306px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/03/08/1266.png\" alt=\"\">\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= preorder.length &lt;= 100</code></li> \n <li><code>1 &lt;= preorder[i]&nbsp;&lt;= 10^8</code></li> \n <li><code>preorder</code> 中的值互不相同</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1009. 十进制整数的反码', '<p>每个非负整数&nbsp;<code>N</code>&nbsp;都有其二进制表示。例如，&nbsp;<code>5</code>&nbsp;可以被表示为二进制&nbsp;<code>\"101\"</code>，<code>11</code> 可以用二进制&nbsp;<code>\"1011\"</code>&nbsp;表示，依此类推。注意，除&nbsp;<code>N = 0</code>&nbsp;外，任何二进制表示中都不含前导零。</p> \n<p>二进制的反码表示是将每个&nbsp;<code>1</code>&nbsp;改为&nbsp;<code>0</code>&nbsp;且每个&nbsp;<code>0</code>&nbsp;变为&nbsp;<code>1</code>。例如，二进制数&nbsp;<code>\"101\"</code>&nbsp;的二进制反码为&nbsp;<code>\"010\"</code>。</p> \n<p>给你一个十进制数&nbsp;<code>N</code>，请你返回其二进制表示的反码所对应的十进制整数。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>5\n<strong>输出：</strong>2\n<strong>解释：</strong>5 的二进制表示为 \"101\"，其二进制反码为 \"010\"，也就是十进制中的 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>7\n<strong>输出：</strong>0\n<strong>解释：</strong>7 的二进制表示为 \"111\"，其二进制反码为 \"000\"，也就是十进制中的 0 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>10\n<strong>输出：</strong>5\n<strong>解释：</strong>10 的二进制表示为 \"1010\"，其二进制反码为 \"0101\"，也就是十进制中的 5 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= N &lt; 10^9</code></li> \n <li>本题与 476：<a href=\"https://leetcode-cn.com/problems/number-complement/\">https://leetcode-cn.com/problems/number-complement/</a> 相同</li> \n</ol>');
INSERT INTO `leecode` VALUES ('101. 对称二叉树', '<p>给定一个二叉树，检查它是否是镜像对称的。</p> \n<p>&nbsp;</p> \n<p>例如，二叉树&nbsp;<code>[1,2,2,3,4,4,3]</code> 是对称的。</p> \n<pre>    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n</pre> \n<p>&nbsp;</p> \n<p>但是下面这个&nbsp;<code>[1,2,2,null,3,null,3]</code> 则不是镜像对称的:</p> \n<pre>    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n</pre> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<p>你可以运用递归和迭代两种方法解决这个问题吗？</p>');
INSERT INTO `leecode` VALUES ('1010. 总持续时间可被 60 整除的歌曲', '<p>在歌曲列表中，第 <code>i</code> 首歌曲的持续时间为 <code>time[i]</code> 秒。</p> \n<p>返回其总持续时间（以秒为单位）可被 <code>60</code> 整除的歌曲对的数量。形式上，我们希望索引的数字 <code>i</code> 和 <code>j</code> 满足&nbsp; <code>i &lt; j</code> 且有&nbsp;<code>(time[i] + time[j]) % 60 == 0</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[30,20,150,100,40]\n<strong>输出：</strong>3\n<strong>解释：</strong>这三对的总持续时间可被 60 整数：\n(time[0] = 30, time[2] = 150): 总持续时间 180\n(time[1] = 20, time[3] = 100): 总持续时间 120\n(time[1] = 20, time[4] = 40): 总持续时间 60\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[60,60,60]\n<strong>输出：</strong>3\n<strong>解释：</strong>所有三对的总持续时间都是 120，可以被 60 整数。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= time.length &lt;= 60000</code></li> \n <li><code>1 &lt;= time[i] &lt;= 500</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1011. 在 D 天内送达包裹的能力', '<p>传送带上的包裹必须在 D 天内从一个港口运送到另一个港口。</p> \n<p>传送带上的第 <code>i</code>&nbsp;个包裹的重量为&nbsp;<code>weights[i]</code>。每一天，我们都会按给出重量的顺序往传送带上装载包裹。我们装载的重量不会超过船的最大运载重量。</p> \n<p>返回能在 <code>D</code> 天内将传送带上的所有包裹送达的船的最低运载能力。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>weights = [1,2,3,4,5,6,7,8,9,10], D = 5\n<strong>输出：</strong>15\n<strong>解释：</strong>\n船舶最低载重 15 就能够在 5 天内送达所有包裹，如下所示：\n第 1 天：1, 2, 3, 4, 5\n第 2 天：6, 7\n第 3 天：8\n第 4 天：9\n第 5 天：10\n\n请注意，货物必须按照给定的顺序装运，因此使用载重能力为 14 的船舶并将包装分成 (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) 是不允许的。 \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>weights = [3,2,2,4,1,4], D = 3\n<strong>输出：</strong>6\n<strong>解释：</strong>\n船舶最低载重 6 就能够在 3 天内送达所有包裹，如下所示：\n第 1 天：3, 2\n第 2 天：2, 4\n第 3 天：1, 4\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>weights = [1,2,3,1,1], D = 4\n<strong>输出：</strong>3\n<strong>解释：</strong>\n第 1 天：1\n第 2 天：2\n第 3 天：3\n第 4 天：1, 1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= D &lt;= weights.length &lt;= 5 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= weights[i] &lt;= 500</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1012. 至少有 1 位重复的数字', '<p>给定正整数&nbsp;<code>N</code>，返回小于等于 <code>N</code>&nbsp;且具有至少 1 位重复数字的正整数的个数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>20\n<strong>输出：</strong>1\n<strong>解释：</strong>具有至少 1 位重复数字的正数（&lt;= 20）只有 11 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>100\n<strong>输出：</strong>10\n<strong>解释：</strong>具有至少 1 位重复数字的正数（&lt;= 100）有 11，22，33，44，55，66，77，88，99 和 100 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>1000\n<strong>输出：</strong>262\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= N &lt;= 10^9</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1013. 将数组分成和相等的三个部分', '<p>给你一个整数数组 <code>arr</code>，只有可以将其划分为三个和相等的 <strong>非空</strong> 部分时才返回&nbsp;<code>true</code>，否则返回 <code>false</code>。</p> \n<p>形式上，如果可以找出索引&nbsp;<code>i + 1 &lt; j</code>&nbsp;且满足&nbsp;<code>(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])</code>&nbsp;就可以将数组三等分。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [0,2,1,-6,6,-7,9,1,2,0,1]\n<strong>输出：</strong>true\n<strong>解释：</strong>0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [0,2,1,-6,6,7,9,-1,2,0,1]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [3,3,6,5,-2,2,5,1,-9,4]\n<strong>输出：</strong>true\n<strong>解释：</strong>3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= arr.length &lt;= 5 * 10<sup>4</sup></code></li> \n <li><code>-10<sup>4</sup> &lt;= arr[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1014. 最佳观光组合', '<p>给你一个正整数数组 <code>values</code>，其中 <code>values[i]</code>&nbsp;表示第 <code>i</code> 个观光景点的评分，并且两个景点&nbsp;<code>i</code> 和&nbsp;<code>j</code>&nbsp;之间的 <strong>距离</strong> 为&nbsp;<code>j - i</code>。</p> \n<p>一对景点（<code>i &lt; j</code>）组成的观光组合的得分为 <code>values[i] + values[j] + i - j</code> ，也就是景点的评分之和<strong> 减去 </strong>它们两者之间的距离。</p> \n<p>返回一对观光景点能取得的最高分。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>values = [8,1,5,2,6]\n<strong>输出：</strong>11\n<strong>解释：</strong>i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>values = [1,2]\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= values.length &lt;= 5 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= values[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1015. 可被 K 整除的最小整数', '<p>给定正整数&nbsp;<code>K</code>，你需要找出可以被 K 整除的、仅包含数字 <strong>1</strong> 的最小正整数 N。</p> \n<p>返回&nbsp;<code>N</code>&nbsp;的长度。如果不存在这样的&nbsp;<code>N</code>，就返回 <code>-1</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>1\n<strong>输出：</strong>1\n<strong>解释：</strong>最小的答案是 N = 1，其长度为 1。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>2\n<strong>输出：</strong>-1\n<strong>解释：</strong>不存在可被 2 整除的正整数 N 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>3\n<strong>输出：</strong>3\n<strong>解释：</strong>最小的答案是 N = 111，其长度为 3。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= K &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1016. 子串能表示从 1 到 N 数字的二进制串', '<p>给定一个二进制字符串&nbsp;<code>S</code>（一个仅由若干&nbsp;\'0\' 和 \'1\' 构成的字符串）和一个正整数&nbsp;<code>N</code>，如果对于从 <code>1</code> 到 <code>N</code> 的每个整数 <code>X</code>，其二进制表示都是&nbsp;<code>S</code> 的子串，就返回 <code>true</code>，否则返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>S = \"0110\", N = 3\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>S = \"0110\", N = 4\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= S.length &lt;= 1000</code></li> \n <li><code>1 &lt;= N &lt;= 10^9</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1017. 负二进制转换', '<p>给出数字&nbsp;<code>N</code>，返回由若干&nbsp;<code>\"0\"</code>&nbsp;和&nbsp;<code>\"1\"</code>组成的字符串，该字符串为 <code>N</code>&nbsp;的<strong>负二进制（<code>base -2</code>）</strong>表示。</p> \n<p>除非字符串就是&nbsp;<code>\"0\"</code>，否则返回的字符串中不能含有前导零。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>2\n<strong>输出：</strong>\"110\"\n<strong>解释：</strong>(-2) ^ 2 + (-2) ^ 1 = 2\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>3\n<strong>输出：</strong>\"111\"\n<strong>解释：</strong>(-2) ^ 2 + (-2) ^ 1 + (-2) ^ 0 = 3\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>4\n<strong>输出：</strong>\"100\"\n<strong>解释：</strong>(-2) ^ 2 = 4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= N &lt;= 10^9</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1018. 可被 5 整除的二进制前缀', '<p>给定由若干&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;组成的数组 <code>A</code>。我们定义&nbsp;<code>N_i</code>：从&nbsp;<code>A[0]</code> 到&nbsp;<code>A[i]</code>&nbsp;的第 <code>i</code>&nbsp;个子数组被解释为一个二进制数（从最高有效位到最低有效位）。</p> \n<p>返回布尔值列表&nbsp;<code>answer</code>，只有当&nbsp;<code>N_i</code>&nbsp;可以被 <code>5</code>&nbsp;整除时，答案&nbsp;<code>answer[i]</code> 为&nbsp;<code>true</code>，否则为 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[0,1,1]\n<strong>输出：</strong>[true,false,false]\n<strong>解释：</strong>\n输入数字为 0, 01, 011；也就是十进制中的 0, 1, 3 。只有第一个数可以被 5 整除，因此 answer[0] 为真。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[1,1,1]\n<strong>输出：</strong>[false,false,false]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[0,1,1,1,1,1]\n<strong>输出：</strong>[true,false,false,false,true,false]\n</pre> \n<p><strong>示例&nbsp;4：</strong></p> \n<pre><strong>输入：</strong>[1,1,1,0,1]\n<strong>输出：</strong>[false,false,false,false,false]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 30000</code></li> \n <li><code>A[i]</code> 为&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1019. 链表中的下一个更大节点', '<p>给出一个以头节点&nbsp;<code>head</code>&nbsp;作为第一个节点的链表。链表中的节点分别编号为：<code>node_1, node_2, node_3, ...</code> 。</p> \n<p>每个节点都可能有下一个更大值（<em>next larger</em> <strong>value</strong>）：对于&nbsp;<code>node_i</code>，如果其&nbsp;<code>next_larger(node_i)</code>&nbsp;是&nbsp;<code>node_j.val</code>，那么就有&nbsp;<code>j &gt; i</code>&nbsp;且&nbsp;&nbsp;<code>node_j.val &gt; node_i.val</code>，而&nbsp;<code>j</code>&nbsp;是可能的选项中最小的那个。如果不存在这样的&nbsp;<code>j</code>，那么下一个更大值为&nbsp;<code>0</code>&nbsp;。</p> \n<p>返回整数答案数组&nbsp;<code>answer</code>，其中&nbsp;<code>answer[i] = next_larger(node_{i+1})</code>&nbsp;。</p> \n<p><strong><em>注意：</em></strong>在下面的示例中，诸如 <code>[2,1,5]</code> 这样的<strong>输入</strong>（不是输出）是链表的序列化表示，其头节点的值为&nbsp;2，第二个节点值为 1，第三个节点值为&nbsp;5 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[2,1,5]\n<strong>输出：</strong>[5,5,0]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[2,7,4,3,5]\n<strong>输出：</strong>[7,0,5,5,0]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[1,7,5,1,9,2,5,1]\n<strong>输出：</strong>[7,9,9,9,0,5,0,0]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>对于链表中的每个节点，<code>1 &lt;= node.val&nbsp;&lt;= 10^9</code></li> \n <li>给定列表的长度在 <code>[0, 10000]</code>&nbsp;范围内</li> \n</ol>');
INSERT INTO `leecode` VALUES ('102. 二叉树的层序遍历', '<p>给你一个二叉树，请你返回其按 <strong>层序遍历</strong> 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong><br> 二叉树：<code>[3,9,20,null,null,15,7]</code>,</p> \n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre> \n<p>返回其层序遍历结果：</p> \n<pre>[\n  [3],\n  [9,20],\n  [15,7]\n]\n</pre>');
INSERT INTO `leecode` VALUES ('1020. 飞地的数量', '<p>给出一个二维数组&nbsp;<code>A</code>，每个单元格为 0（代表海）或 1（代表陆地）。</p> \n<p>移动是指在陆地上从一个地方走到另一个地方（朝四个方向之一）或离开网格的边界。</p> \n<p>返回网格中<strong>无法</strong>在任意次数的移动中离开网格边界的陆地单元格的数量。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n<strong>输出：</strong>3\n<strong>解释： </strong>\n有三个 1 被 0 包围。一个 1 没有被包围，因为它在边界上。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n所有 1 都在边界上或可以到达边界。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 500</code></li> \n <li><code>1 &lt;= A[i].length &lt;= 500</code></li> \n <li><code>0 &lt;= A[i][j] &lt;= 1</code></li> \n <li>所有行的大小都相同</li> \n</ol>');
INSERT INTO `leecode` VALUES ('1021. 删除最外层的括号', '<p>有效括号字符串为空 <code>\"\"</code>、<code>\"(\" + A + \")\"</code>&nbsp;或&nbsp;<code>A + B</code> ，其中&nbsp;<code>A</code> 和&nbsp;<code>B</code>&nbsp;都是有效的括号字符串，<code>+</code>&nbsp;代表字符串的连接。</p> \n<ul> \n <li>例如，<code>\"\"</code>，<code>\"()\"</code>，<code>\"(())()\"</code>&nbsp;和&nbsp;<code>\"(()(()))\"</code>&nbsp;都是有效的括号字符串。</li> \n</ul> \n<p>如果有效字符串 <code>s</code> 非空，且不存在将其拆分为 <code>s = A + B</code>&nbsp;的方法，我们称其为<strong>原语（primitive）</strong>，其中&nbsp;<code>A</code> 和&nbsp;<code>B</code>&nbsp;都是非空有效括号字符串。</p> \n<p>给出一个非空有效字符串 <code>s</code>，考虑将其进行原语化分解，使得：<code>s = P_1 + P_2 + ... + P_k</code>，其中&nbsp;<code>P_i</code>&nbsp;是有效括号字符串原语。</p> \n<p>对 <code>s</code> 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 <code>s</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"(()())(())\"\n<strong>输出：</strong>\"()()()\"\n<strong>解释：\n</strong>输入字符串为 \"(()())(())\"，原语化分解得到 \"(()())\" + \"(())\"，\n删除每个部分中的最外层括号后得到 \"()()\" + \"()\" = \"()()()\"。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"(()())(())(()(()))\"\n<strong>输出：</strong>\"()()()()(())\"\n<strong>解释：</strong>\n输入字符串为 \"(()())(())(()(()))\"，原语化分解得到 \"(()())\" + \"(())\" + \"(()(()))\"，\n删除每个部分中的最外层括号后得到 \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\"。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"()()\"\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>\n输入字符串为 \"()()\"，原语化分解得到 \"()\" + \"()\"，\n删除每个部分中的最外层括号后得到 \"\" + \"\" = \"\"。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s[i]</code> 为 <code>\'(\'</code> 或 <code>\')\'</code></li> \n <li><code>s</code> 是一个有效括号字符串</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1022. 从根到叶的二进制数之和', '<p>给出一棵二叉树，其上每个结点的值都是&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code>&nbsp;。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。例如，如果路径为&nbsp;<code>0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1</code>，那么它表示二进制数&nbsp;<code>01101</code>，也就是&nbsp;<code>13</code>&nbsp;。</p> \n<p>对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。</p> \n<p>返回这些数字之和。题目数据保证答案是一个 <strong>32 位 </strong>整数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 450px; height: 296px;\" src=\"https://assets.leetcode.com/uploads/2019/04/04/sum-of-root-to-leaf-binary-numbers.png\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,0,1,0,1,0,1]\n<strong>输出：</strong>22\n<strong>解释：</strong>(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = [0]\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [1]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>root = [1,1]\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中的结点数介于 <code>1</code> 和 <code>1000</code> 之间。</li> \n <li><code>Node.val</code> 为 <code>0</code> 或 <code>1</code> 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1023. 驼峰式匹配', '<p>如果我们可以将<strong>小写字母</strong>插入模式串&nbsp;<code>pattern</code>&nbsp;得到待查询项&nbsp;<code>query</code>，那么待查询项与给定模式串匹配。（我们可以在任何位置插入每个字符，也可以插入 0 个字符。）</p> \n<p>给定待查询列表&nbsp;<code>queries</code>，和模式串&nbsp;<code>pattern</code>，返回由布尔值组成的答案列表&nbsp;<code>answer</code>。只有在待查项&nbsp;<code>queries[i]</code> 与模式串&nbsp;<code>pattern</code> 匹配时，&nbsp;<code>answer[i]</code>&nbsp;才为 <code>true</code>，否则为 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\"\n<strong>输出：</strong>[true,false,true,true,false]\n<strong>示例：</strong>\n\"FooBar\" 可以这样生成：\"F\" + \"oo\" + \"B\" + \"ar\"。\n\"FootBall\" 可以这样生成：\"F\" + \"oot\" + \"B\" + \"all\".\n\"FrameBuffer\" 可以这样生成：\"F\" + \"rame\" + \"B\" + \"uffer\".</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\"\n<strong>输出：</strong>[true,false,true,false,false]\n<strong>解释：</strong>\n\"FooBar\" 可以这样生成：\"Fo\" + \"o\" + \"Ba\" + \"r\".\n\"FootBall\" 可以这样生成：\"Fo\" + \"ot\" + \"Ba\" + \"ll\".\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输出：</strong>queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\"\n<strong>输入：</strong>[false,true,false,false,false]\n<strong>解释： </strong>\n\"FooBarTest\" 可以这样生成：\"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\".\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= queries.length &lt;= 100</code></li> \n <li><code>1 &lt;= queries[i].length &lt;= 100</code></li> \n <li><code>1 &lt;= pattern.length &lt;= 100</code></li> \n <li>所有字符串都仅由大写和小写英文字母组成。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('1024. 视频拼接', '<p>你将会获得一系列视频片段，这些片段来自于一项持续时长为&nbsp;<code>T</code>&nbsp;秒的体育赛事。这些片段可能有所重叠，也可能长度不一。</p> \n<p>视频片段&nbsp;<code>clips[i]</code>&nbsp;都用区间进行表示：开始于&nbsp;<code>clips[i][0]</code>&nbsp;并于&nbsp;<code>clips[i][1]</code>&nbsp;结束。我们甚至可以对这些片段自由地再剪辑，例如片段&nbsp;<code>[0, 7]</code>&nbsp;可以剪切成&nbsp;<code>[0, 1] +&nbsp;[1, 3] + [3, 7]</code>&nbsp;三部分。</p> \n<p>我们需要将这些片段进行再剪辑，并将剪辑后的内容拼接成覆盖整个运动过程的片段（<code>[0, T]</code>）。返回所需片段的最小数目，如果无法完成该任务，则返回&nbsp;<code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10\n<strong>输出：</strong>3\n<strong>解释：</strong>\n我们选中 [0,2], [8,10], [1,9] 这三个片段。\n然后，按下面的方案重制比赛片段：\n将 [1,9] 再剪辑为 [1,2] + [2,8] + [8,9] 。\n现在我们手上有 [0,2] + [2,8] + [8,10]，而这些涵盖了整场比赛 [0, 10]。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>clips = [[0,1],[1,2]], T = 5\n<strong>输出：</strong>-1\n<strong>解释：</strong>\n我们无法只用 [0,1] 和 [1,2] 覆盖 [0,5] 的整个过程。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9\n<strong>输出：</strong>3\n<strong>解释： </strong>\n我们选取片段 [0,4], [4,7] 和 [6,9] 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>clips = [[0,4],[2,8]], T = 5\n<strong>输出：</strong>2\n<strong>解释：</strong>\n注意，你可能录制超过比赛结束时间的视频。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= clips.length &lt;= 100</code></li> \n <li><code>0 &lt;= clips[i][0] &lt;=&nbsp;clips[i][1] &lt;= 100</code></li> \n <li><code>0 &lt;= T &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1025. 除数博弈', '<p>爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。</p> \n<p>最初，黑板上有一个数字&nbsp;<code>N</code>&nbsp;。在每个玩家的回合，玩家需要执行以下操作：</p> \n<ul> \n <li>选出任一&nbsp;<code>x</code>，满足&nbsp;<code>0 &lt; x &lt; N</code> 且&nbsp;<code>N % x == 0</code>&nbsp;。</li> \n <li>用 <code>N - x</code>&nbsp;替换黑板上的数字 <code>N</code> 。</li> \n</ul> \n<p>如果玩家无法执行这些操作，就会输掉游戏。</p> \n<p>只有在爱丽丝在游戏中取得胜利时才返回&nbsp;<code>True</code>，否则返回 <code>False</code>。假设两个玩家都以最佳状态参与游戏。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>2\n<strong>输出：</strong>true\n<strong>解释：</strong>爱丽丝选择 1，鲍勃无法进行操作。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>3\n<strong>输出：</strong>false\n<strong>解释：</strong>爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= N &lt;= 1000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1026. 节点与其祖先之间的最大差值', '<p>给定二叉树的根节点&nbsp;<code>root</code>，找出存在于 <strong>不同</strong> 节点&nbsp;<code>A</code> 和&nbsp;<code>B</code>&nbsp;之间的最大值 <code>V</code>，其中&nbsp;<code>V = |A.val - B.val|</code>，且&nbsp;<code>A</code>&nbsp;是&nbsp;<code>B</code>&nbsp;的祖先。</p> \n<p>（如果 A 的任何子节点之一为 B，或者 A 的任何子节点是 B 的祖先，那么我们认为 A 是 B 的祖先）</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 400px; height: 390px;\" src=\"https://assets.leetcode.com/uploads/2020/11/09/tmp-tree.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [8,3,10,1,6,null,14,null,null,4,7,13]\n<strong>输出：</strong>7\n<strong>解释： </strong>\n我们有大量的节点与其祖先的差值，其中一些如下：\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\n在所有可能的差值中，最大值 7 由 |8 - 1| = 7 得出。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 250px; height: 349px;\" src=\"https://assets.leetcode.com/uploads/2020/11/09/tmp-tree-1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,null,2,null,0,3]\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中的节点数在&nbsp;<code>2</code>&nbsp;到&nbsp;<code>5000</code>&nbsp;之间。</li> \n <li><code>0 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1027. 最长等差数列', '<p>给定一个整数数组&nbsp;<code>A</code>，返回 <code>A</code>&nbsp;中最长等差子序列的<strong>长度</strong>。</p> \n<p>回想一下，<code>A</code>&nbsp;的子序列是列表&nbsp;<code>A[i_1], A[i_2], ..., A[i_k]</code> 其中&nbsp;<code>0 &lt;= i_1 &lt; i_2 &lt; ... &lt; i_k &lt;= A.length - 1</code>。并且如果&nbsp;<code>B[i+1] - B[i]</code>(&nbsp;<code>0 &lt;= i &lt; B.length - 1</code>) 的值都相同，那么序列&nbsp;<code>B</code>&nbsp;是等差的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[3,6,9,12]\n<strong>输出：</strong>4\n<strong>解释： </strong>\n整个数组是公差为 3 的等差数列。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[9,4,7,2,10]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n最长的等差子序列是 [4,7,10]。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[20,1,15,3,10,5,8]\n<strong>输出：</strong>4\n<strong>解释：</strong>\n最长的等差子序列是 [20,15,10,5]。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>2 &lt;= A.length &lt;= 2000</code></li> \n <li><code>0 &lt;= A[i] &lt;= 10000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1028. 从先序遍历还原二叉树', '<p>我们从二叉树的根节点 <code>root</code>&nbsp;开始进行深度优先搜索。</p> \n<p>在遍历中的每个节点处，我们输出&nbsp;<code>D</code>&nbsp;条短划线（其中&nbsp;<code>D</code>&nbsp;是该节点的深度），然后输出该节点的值。（<em>如果节点的深度为 <code>D</code>，则其直接子节点的深度为 <code>D + 1</code>。根节点的深度为 <code>0</code>）。</em></p> \n<p>如果节点只有一个子节点，那么保证该子节点为左子节点。</p> \n<p>给出遍历输出&nbsp;<code>S</code>，还原树并返回其根节点&nbsp;<code>root</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 200px; width: 320px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/12/recover-a-tree-from-preorder-traversal.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>\"1-2--3--4-5--6--7\"\n<strong>输出：</strong>[1,2,5,3,4,6,7]\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 250px; width: 256px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/12/screen-shot-2019-04-10-at-114101-pm.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>\"1-2--3---4-5--6---7\"\n<strong>输出：</strong>[1,2,5,3,null,6,null,4,null,7]\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 250px; width: 276px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/12/screen-shot-2019-04-10-at-114955-pm.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>\"1-401--349---90--88\"\n<strong>输出：</strong>[1,401,null,349,88,90]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>原始树中的节点数介于 <code>1</code> 和 <code>1000</code> 之间。</li> \n <li>每个节点的值介于 <code>1</code> 和 <code>10 ^ 9</code> 之间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1029. 两地调度', '<p>公司计划面试 <code>2n</code> 人。给你一个数组 <code>costs</code> ，其中 <code>costs[i] = [aCost<sub>i</sub>, bCost<sub>i</sub>]</code> 。第 <code>i</code> 人飞往 <code>a</code> 市的费用为 <code>aCost<sub>i</sub></code> ，飞往 <code>b</code> 市的费用为 <code>bCost<sub>i</sub></code> 。</p> \n<p>返回将每个人都飞到 <code>a</code> 、<code>b</code> 中某座城市的最低费用，要求每个城市都有 <code>n</code> 人抵达<strong>。</strong></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>costs = [[10,20],[30,200],[400,50],[30,20]]\n<strong>输出：</strong>110\n<strong>解释：</strong>\n第一个人去 a 市，费用为 10。\n第二个人去 a 市，费用为 30。\n第三个人去 b 市，费用为 50。\n第四个人去 b 市，费用为 20。\n\n最低总费用为 10 + 30 + 50 + 20 = 110，每个城市都有一半的人在面试。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]\n<strong>输出：</strong>1859\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]\n<strong>输出：</strong>3086\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 * n == costs.length</code></li> \n <li><code>2 &lt;= costs.length &lt;= 100</code></li> \n <li><code>costs.length</code> 为偶数</li> \n <li><code>1 &lt;= aCost<sub>i</sub>, bCost<sub>i</sub> &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('103. 二叉树的锯齿形层序遍历', '<p>给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p> \n<p>例如：<br> 给定二叉树&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p> \n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre> \n<p>返回锯齿形层序遍历如下：</p> \n<pre>[\n  [3],\n  [20,9],\n  [15,7]\n]\n</pre>');
INSERT INTO `leecode` VALUES ('1030. 距离顺序排列矩阵单元格', '<p>给出 <code>R</code> 行 <code>C</code> 列的矩阵，其中的单元格的整数坐标为 <code>(r, c)</code>，满足 <code>0 &lt;= r &lt; R</code> 且 <code>0 &lt;= c &lt; C</code>。</p> \n<p>另外，我们在该矩阵中给出了一个坐标为&nbsp;<code>(r0, c0)</code> 的单元格。</p> \n<p>返回矩阵中的所有单元格的坐标，并按到 <code>(r0, c0)</code> 的距离从最小到最大的顺序排，其中，两单元格<code>(r1, c1)</code> 和 <code>(r2, c2)</code> 之间的距离是曼哈顿距离，<code>|r1 - r2| + |c1 - c2|</code>。（你可以按任何满足此条件的顺序返回答案。）</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>R = 1, C = 2, r0 = 0, c0 = 0\n<strong>输出：</strong>[[0,0],[0,1]]\n<strong>解释</strong>：从 (r0, c0) 到其他单元格的距离为：[0,1]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>R = 2, C = 2, r0 = 0, c0 = 1\n<strong>输出：</strong>[[0,1],[0,0],[1,1],[1,0]]\n<strong>解释</strong>：从 (r0, c0) 到其他单元格的距离为：[0,1,1,2]\n[[0,1],[1,1],[0,0],[1,0]] 也会被视作正确答案。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>R = 2, C = 3, r0 = 1, c0 = 2\n<strong>输出：</strong>[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]\n<strong>解释</strong>：从 (r0, c0) 到其他单元格的距离为：[0,1,1,2,2,3]\n其他满足题目要求的答案也会被视为正确，例如 [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= R &lt;= 100</code></li> \n <li><code>1 &lt;= C &lt;= 100</code></li> \n <li><code>0 &lt;= r0 &lt; R</code></li> \n <li><code>0 &lt;= c0 &lt; C</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1031. 两个非重叠子数组的最大和', '<p>给出非负整数数组 <code>A</code> ，返回两个非重叠（连续）子数组中元素的最大和，子数组的长度分别为 <code>L</code> 和 <code>M</code>。（这里需要澄清的是，长为 L 的子数组可以出现在长为 M 的子数组之前或之后。）</p> \n<p>从形式上看，返回最大的 <code>V</code>，而 <code>V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1])</code> 并满足下列条件之一：</p> \n<p>&nbsp;</p> \n<ul> \n <li><code>0 &lt;= i &lt; i + L - 1 &lt; j &lt; j + M - 1 &lt; A.length</code>, <strong>或</strong></li> \n <li><code>0 &lt;= j &lt; j + M - 1 &lt; i &lt; i + L - 1 &lt; A.length</code>.</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = [0,6,5,2,2,5,1,9,4], L = 1, M = 2\n<strong>输出：</strong>20\n<strong>解释：</strong>子数组的一种选择中，[9] 长度为 1，[6,5] 长度为 2。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = [3,8,1,3,2,1,8,9,0], L = 3, M = 2\n<strong>输出：</strong>29\n<strong>解释：</strong>子数组的一种选择中，[3,8,1] 长度为 3，[8,9] 长度为 2。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>A = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3\n<strong>输出：</strong>31\n<strong>解释：</strong>子数组的一种选择中，[5,6,0,9] 长度为 4，[0,3,8] 长度为 3。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>L &gt;= 1</code></li> \n <li><code>M &gt;= 1</code></li> \n <li><code>L + M &lt;= A.length &lt;= 1000</code></li> \n <li><code>0 &lt;= A[i] &lt;= 1000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1032. 字符流', '<p>按下述要求实现 <code>StreamChecker</code> 类：</p> \n<ul> \n <li><code>StreamChecker(words)</code>：构造函数，用给定的字词初始化数据结构。</li> \n <li><code>query(letter)</code>：如果存在某些 <code>k &gt;= 1</code>，可以用查询的最后 <code>k</code>个字符（按从旧到新顺序，包括刚刚查询的字母）拼写出给定字词表中的某一字词时，返回 <code>true</code>。否则，返回 <code>false</code>。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre>StreamChecker streamChecker = new StreamChecker([\"cd\",\"f\",\"kl\"]); // 初始化字典\nstreamChecker.query(\'a\');          // 返回 false\nstreamChecker.query(\'b\');          // 返回 false\nstreamChecker.query(\'c\');          // 返回 false\nstreamChecker.query(\'d\');          // 返回 true，因为 \'cd\' 在字词表中\nstreamChecker.query(\'e\');          // 返回 false\nstreamChecker.query(\'f\');          // 返回 true，因为 \'f\' 在字词表中\nstreamChecker.query(\'g\');          // 返回 false\nstreamChecker.query(\'h\');          // 返回 false\nstreamChecker.query(\'i\');          // 返回 false\nstreamChecker.query(\'j\');          // 返回 false\nstreamChecker.query(\'k\');          // 返回 false\nstreamChecker.query(\'l\');          // 返回 true，因为 \'kl\' 在字词表中。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 2000</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 2000</code></li> \n <li>字词只包含小写英文字母。</li> \n <li>待查项只包含小写英文字母。</li> \n <li>待查项最多 40000 个。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1033. 移动石子直到连续', '<p>三枚石子放置在数轴上，位置分别为 <code>a</code>，<code>b</code>，<code>c</code>。</p> \n<p>每一回合，你可以从两端之一拿起一枚石子（位置最大或最小），并将其放入两端之间的任一空闲位置。形式上，假设这三枚石子当前分别位于位置 <code>x, y, z</code> 且 <code>x &lt; y &lt; z</code>。那么就可以从位置 <code>x</code> 或者是位置 <code>z</code> 拿起一枚石子，并将该石子移动到某一整数位置 <code>k</code> 处，其中 <code>x &lt; k &lt; z</code> 且 <code>k != y</code>。</p> \n<p>当你无法进行任何移动时，即，这些石子的位置连续时，游戏结束。</p> \n<p>要使游戏结束，你可以执行的最小和最大移动次数分别是多少？ 以长度为 2 的数组形式返回答案：<code>answer = [minimum_moves, maximum_moves]</code></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>a = 1, b = 2, c = 5\n<strong>输出：</strong>[1, 2]\n<strong>解释：</strong>将石子从 5 移动到 4 再移动到 3，或者我们可以直接将石子移动到 3。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>a = 4, b = 3, c = 2\n<strong>输出：</strong>[0, 0]\n<strong>解释：</strong>我们无法进行任何移动。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= a &lt;= 100</code></li> \n <li><code>1 &lt;= b &lt;= 100</code></li> \n <li><code>1 &lt;= c &lt;= 100</code></li> \n <li><code>a != b, b != c, c != a</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1034. 边框着色', '<p>给出一个二维整数网格&nbsp;<code>grid</code>，网格中的每个值表示该位置处的网格块的颜色。</p> \n<p>只有当两个网格块的颜色相同，而且在四个方向中任意一个方向上相邻时，它们属于同一<strong>连通分量</strong>。</p> \n<p>连通分量的<strong>边界</strong>是指连通分量中的所有与不在分量中的正方形相邻（四个方向上）的所有正方形，或者在网格的边界上（第一行/列或最后一行/列）的所有正方形。</p> \n<p>给出位于&nbsp;<code>(r0, c0)</code>&nbsp;的网格块和颜色&nbsp;<code>color</code>，使用指定颜色&nbsp;<code>color</code>&nbsp;为所给网格块的连通分量的边界进行着色，并返回最终的网格&nbsp;<code>grid</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,1],[1,2]], r0 = 0, c0 = 0, color = 3\n<strong>输出：</strong>[[3, 3], [3, 2]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,2,2],[2,3,2]], r0 = 0, c0 = 1, color = 3\n<strong>输出：</strong>[[1, 3, 3], [2, 3, 3]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,1,1],[1,1,1],[1,1,1]], r0 = 1, c0 = 1, color = 2\n<strong>输出：</strong>[[2, 2, 2], [2, 1, 2], [2, 2, 2]]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= grid.length &lt;= 50</code></li> \n <li><code>1 &lt;= grid[0].length &lt;= 50</code></li> \n <li><code>1 &lt;= grid[i][j] &lt;= 1000</code></li> \n <li><code>0 &lt;= r0 &lt; grid.length</code></li> \n <li><code>0 &lt;= c0 &lt; grid[0].length</code></li> \n <li><code>1 &lt;= color &lt;= 1000</code></li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('1035. 不相交的线', '<p>在两条独立的水平线上按给定的顺序写下 <code>nums1</code> 和 <code>nums2</code> 中的整数。</p> \n<p>现在，可以绘制一些连接两个数字 <code>nums1[i]</code>&nbsp;和 <code>nums2[j]</code>&nbsp;的直线，这些直线需要同时满足满足：</p> \n<ul> \n <li>&nbsp;<code>nums1[i] == nums2[j]</code></li> \n <li>且绘制的直线不与任何其他连线（非水平线）相交。</li> \n</ul> \n<p>请注意，连线即使在端点也不能相交：每个数字只能属于一条连线。</p> \n<p>以这种方法绘制线条，并返回可以绘制的最大连线数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<strong><img style=\"height: 72px; width: 100px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/28/142.png\" alt=\"\"></strong> \n<pre><strong>输入：</strong>nums1 = <span id=\"example-input-1-1\">[1,4,2]</span>, nums2 = <span id=\"example-input-1-2\">[1,2,4]</span>\n<strong>输出：</strong><span id=\"example-output-1\">2</span>\n<strong>解释：</strong>可以画出两条不交叉的线，如上图所示。 \n但无法画出第三条不相交的直线，因为从 nums1[1]=4 到 nums2[2]=4 的直线将与从 nums1[2]=2 到 nums2[1]=2 的直线相交。\n</pre> \n<div> \n <p><strong>示例 2：</strong></p> \n <pre><strong>输入：</strong>nums1 = <span id=\"example-input-2-1\">[2,5,1,2,5]</span>, nums2 = <span id=\"example-input-2-2\">[10,5,2,1,5,2]</span>\n<strong>输出：</strong><span id=\"example-output-2\">3</span>\n</pre> \n <div> \n  <p><strong>示例 3：</strong></p> \n  <pre><strong>输入：</strong>nums1 = <span id=\"example-input-3-1\">[1,3,7,1,7,5]</span>, nums2 = <span id=\"example-input-3-2\">[1,9,2,5,1]</span>\n<strong>输出：</strong><span id=\"example-output-3\">2</span></pre> \n  <p>&nbsp;</p> \n </div> \n</div> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums1.length &lt;= 500</code></li> \n <li><code>1 &lt;= nums2.length &lt;= 500</code></li> \n <li><code><font face=\"monospace\">1 &lt;= nums1[i], nums2[i] &lt;= 2000</font></code></li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('1036. 逃离大迷宫', '<p>在一个 10<sup>6</sup> x 10<sup>6</sup> 的网格中，每个网格上方格的坐标为&nbsp;<code>(x, y)</code> 。</p> \n<p>现在从源方格&nbsp;<code>source = [s<sub>x</sub>, s<sub>y</sub>]</code>&nbsp;开始出发，意图赶往目标方格&nbsp;<code>target = [t<sub>x</sub>, t<sub>y</sub>]</code> 。数组 <code>blocked</code> 是封锁的方格列表，其中每个 <code>blocked[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> 表示坐标为 <code>(x<sub>i</sub>, y<sub>i</sub>)</code> 的方格是禁止通行的。</p> \n<p>每次移动，都可以走到网格中在四个方向上相邻的方格，只要该方格 <strong>不</strong> 在给出的封锁列表&nbsp;<code>blocked</code>&nbsp;上。同时，不允许走出网格。</p> \n<p>只有在可以通过一系列的移动从源方格&nbsp;<code>source</code> 到达目标方格&nbsp;<code>target</code> 时才返回&nbsp;<code>true</code>。否则，返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]\n<strong>输出：</strong>false\n<strong>解释：</strong>\n从源方格无法到达目标方格，因为我们无法在网格中移动。\n无法向北或者向东移动是因为方格禁止通行。\n无法向南或者向西移动是因为不能走出网格。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>blocked = [], source = [0,0], target = [999999,999999]\n<strong>输出：</strong>true\n<strong>解释：</strong>\n因为没有方格被封锁，所以一定可以到达目标方格。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= blocked.length &lt;= 200</code></li> \n <li><code>blocked[i].length == 2</code></li> \n <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt; 10<sup>6</sup></code></li> \n <li><code>source.length == target.length == 2</code></li> \n <li><code>0 &lt;= s<sub>x</sub>, s<sub>y</sub>, t<sub>x</sub>, t<sub>y</sub> &lt; 10<sup>6</sup></code></li> \n <li><code>source != target</code></li> \n <li>题目数据保证 <code>source</code> 和 <code>target</code> 不在封锁列表内</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1037. 有效的回旋镖', '<p>回旋镖定义为一组三个点，这些点各不相同且<strong>不</strong>在一条直线上。</p> \n<p>给出平面上三个点组成的列表，判断这些点是否可以构成回旋镖。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[[1,1],[2,3],[3,2]]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[[1,1],[2,2],[3,3]]\n<strong>输出：</strong>false</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>points.length == 3</code></li> \n <li><code>points[i].length == 2</code></li> \n <li><code>0 &lt;= points[i][j] &lt;= 100</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1038. 把二叉搜索树转换为累加树', '<p><span style=\"font-size:10.5pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:10.5000pt\"><span style=\"font-family:宋体\"><font face=\"宋体\">给定一个二叉搜索树，请将它的每个</font></span></span></span></span>节点<span style=\"font-size:10.5pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:10.5000pt\"><span style=\"font-family:宋体\"><font face=\"宋体\">的值替换成树中大于或者等于该</font></span></span></span></span>节点<span style=\"font-size:10.5pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:10.5000pt\"><span style=\"font-family:宋体\"><font face=\"宋体\">值的所有</font></span></span></span></span>节点<span style=\"font-size:10.5pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:10.5000pt\"><span style=\"font-family:宋体\"><font face=\"宋体\">值之和。</font></span></span></span></span></p> \n<p>提醒一下，二叉搜索树满足下列约束条件：</p> \n<ul> \n <li>节点的左子树仅包含键<strong> 小于 </strong>节点键的节点。</li> \n <li>节点的右子树仅包含键<strong> 大于</strong> 节点键的节点。</li> \n <li>左右子树也必须是二叉搜索树。</li> \n</ul> \n<p><strong>注意：</strong>该题目与 538:&nbsp;<a href=\"https://leetcode-cn.com/problems/convert-bst-to-greater-tree/\">https://leetcode-cn.com/problems/convert-bst-to-greater-tree/&nbsp; </a>相同</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 364px; width: 534px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/05/03/tree.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\n<strong>输出：</strong>[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = [0,null,1]\n<strong>输出：</strong>[1,null,1]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [1,0,2]\n<strong>输出：</strong>[3,3,2]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>root = [3,2,4,1]\n<strong>输出：</strong>[7,9,4,10]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中的节点数介于 <code>1</code> 和 <code>100</code> 之间。</li> \n <li>每个节点的值介于&nbsp;<code>0</code> 和&nbsp;<code>100</code>&nbsp;之间。</li> \n <li>树中的所有值 <strong>互不相同</strong> 。</li> \n <li>给定的树为二叉搜索树。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1039. 多边形三角剖分的最低得分', '<p>给定&nbsp;<code>N</code>，想象一个凸&nbsp;<code>N</code>&nbsp;边多边形，其顶点按顺时针顺序依次标记为&nbsp;<code>A[0], A[i], ..., A[N-1]</code>。</p> \n<p>假设您将多边形剖分为 <code>N-2</code> 个三角形。对于每个三角形，该三角形的值是顶点标记的<strong>乘积</strong>，三角剖分的分数是进行三角剖分后所有 <code>N-2</code> 个三角形的值之和。</p> \n<p>返回多边形进行三角剖分后可以得到的最低分。<br> &nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1,2,3]\n<strong>输出：</strong>6\n<strong>解释：</strong>多边形已经三角化，唯一三角形的分数为 6。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 150px; width: 253px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/05/03/minimum-score-triangulation-of-polygon-1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>[3,7,4,5]\n<strong>输出：</strong>144\n<strong>解释：</strong>有两种三角剖分，可能得分分别为：3*7*5 + 4*5*7 = 245，或 3*4*5 + 3*4*7 = 144。最低分数为 144。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[1,3,1,4,1,5]\n<strong>输出：</strong>13\n<strong>解释：</strong>最低分数三角剖分的得分情况为 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>3 &lt;= A.length &lt;= 50</code></li> \n <li><code>1 &lt;= A[i] &lt;= 100</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('104. 二叉树的最大深度', '<p>给定一个二叉树，找出其最大深度。</p> \n<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p> \n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p> \n<p><strong>示例：</strong><br> 给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p> \n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7</pre> \n<p>返回它的最大深度&nbsp;3 。</p>');
INSERT INTO `leecode` VALUES ('1040. 移动石子直到连续 II', '<p>在一个长度 <strong>无限 </strong>的数轴上，第 <code>i</code> 颗石子的位置为&nbsp;<code>stones[i]</code>。如果一颗石子的位置最小/最大，那么该石子被称作 <strong>端点石子 </strong>。</p> \n<p>每个回合，你可以将一颗端点石子拿起并移动到一个未占用的位置，使得该石子不再是一颗端点石子。</p> \n<p>值得注意的是，如果石子像&nbsp;<code>stones = [1,2,5]</code>&nbsp;这样，你将 <strong>无法 </strong>移动位于位置 5 的端点石子，因为无论将它移动到任何位置（例如 0 或 3），该石子都仍然会是端点石子。</p> \n<p>当你无法进行任何移动时，即，这些石子的位置连续时，游戏结束。</p> \n<p>要使游戏结束，你可以执行的最小和最大移动次数分别是多少？ 以长度为 2 的数组形式返回答案：<code>answer = [minimum_moves, maximum_moves]</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[7,4,9]\n<strong>输出：</strong>[1,2]\n<strong>解释：</strong>\n我们可以移动一次，4 -&gt; 8，游戏结束。\n或者，我们可以移动两次 9 -&gt; 5，4 -&gt; 6，游戏结束。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>[6,5,4,3,10]\n<strong>输出：</strong>[2,3]\n<strong>解释：</strong>\n我们可以移动 3 -&gt; 8，接着是 10 -&gt; 7，游戏结束。\n或者，我们可以移动 3 -&gt; 7, 4 -&gt; 8, 5 -&gt; 9，游戏结束。\n注意，我们无法进行 10 -&gt; 2 这样的移动来结束游戏，因为这是不合要求的移动。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[100,101,104,102,103]\n<strong>输出：</strong>[0,0]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= stones.length &lt;= 10^4</code></li> \n <li><code>1 &lt;= stones[i] &lt;= 10^9</code></li> \n <li><code>stones[i]</code>&nbsp;的值各不相同。</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('1041. 困于环中的机器人', '<p>在无限的平面上，机器人最初位于&nbsp;<code>(0, 0)</code>&nbsp;处，面朝北方。机器人可以接受下列三条指令之一：</p> \n<ul> \n <li><code>\"G\"</code>：直走 1 个单位</li> \n <li><code>\"L\"</code>：左转 90 度</li> \n <li><code>\"R\"</code>：右转 90 度</li> \n</ul> \n<p>机器人按顺序执行指令&nbsp;<code>instructions</code>，并一直重复它们。</p> \n<p>只有在平面中存在环使得机器人永远无法离开时，返回&nbsp;<code>true</code>。否则，返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\"GGLLGG\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\n机器人从 (0,0) 移动到 (0,2)，转 180 度，然后回到 (0,0)。\n重复这些指令，机器人将保持在以原点为中心，2 为半径的环中进行移动。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\"GG\"\n<strong>输出：</strong>false\n<strong>解释：</strong>\n机器人无限向北移动。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>\"GL\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\n机器人按 (0, 0) -&gt; (0, 1) -&gt; (-1, 1) -&gt; (-1, 0) -&gt; (0, 0) -&gt; ... 进行移动。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= instructions.length &lt;= 100</code></li> \n <li><code>instructions[i]</code> 在&nbsp;<code>{\'G\', \'L\', \'R\'}</code>&nbsp;中</li> \n</ol>');
INSERT INTO `leecode` VALUES ('1042. 不邻接植花', '<p>有 <code>n</code> 个花园，按从&nbsp;<code>1</code>&nbsp;到 <code>n</code> 标记。另有数组 <code>paths</code> ，其中 <code>paths[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>&nbsp;描述了花园&nbsp;<code>x<sub>i</sub></code> 到花园&nbsp;<code>y<sub>i</sub></code> 的双向路径。在每个花园中，你打算种下四种花之一。</p> \n<p>另外，所有花园 <strong>最多</strong> 有 3 条路径可以进入或离开.</p> \n<p>你需要为每个花园选择一种花，使得通过路径相连的任何两个花园中的花的种类互不相同。</p> \n<p>以数组形式返回 <strong>任一</strong> 可行的方案作为答案&nbsp;<code>answer</code>，其中&nbsp;<code>answer[i]</code>&nbsp;为在第&nbsp;<code>(i+1)</code>&nbsp;个花园中种植的花的种类。花的种类用 &nbsp;1、2、3、4 表示。保证存在答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 3, paths = [[1,2],[2,3],[3,1]]\n<strong>输出：</strong>[1,2,3]\n<strong>解释：</strong>\n花园 1 和 2 花的种类不同。\n花园 2 和 3 花的种类不同。\n花园 3 和 1 花的种类不同。\n因此，[1,2,3] 是一个满足题意的答案。其他满足题意的答案有 [1,2,4]、[1,4,2] 和 [3,2,1]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 4, paths = [[1,2],[3,4]]\n<strong>输出：</strong>[1,2,1,2]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]\n<strong>输出：</strong>[1,2,3,4]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= paths.length &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>paths[i].length == 2</code></li> \n <li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= n</code></li> \n <li><code>x<sub>i</sub> != y<sub>i</sub></code></li> \n <li>每个花园 <strong>最多</strong> 有 3 条路径可以进入或离开</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1043. 分隔数组以得到最大和', '<p>给你一个整数数组 <code>arr</code>，请你将该数组分隔为长度最多为 k 的一些（连续）子数组。分隔完成后，每个子数组的中的所有值都会变为该子数组中的最大值。</p> \n<p>返回将数组分隔变换后能够得到的元素最大和。</p> \n<p>&nbsp;</p> \n<p><strong>注意，</strong>原数组和分隔后的数组对应顺序应当一致，也就是说，你只能选择分隔数组的位置而不能调整数组中的顺序。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [1,15,7,9,2,5,10], k = 3\n<strong>输出：</strong>84\n<strong>解释：</strong>\n因为 k=3 可以分隔成 [1,15,7] [9] [2,5,10]，结果为 [15,15,15,9,10,10,10]，和为 84，是该数组所有分隔变换后元素总和最大的。\n若是分隔成 [1] [15,7,9] [2,5,10]，结果就是 [1, 15, 15, 15, 10, 10, 10] 但这种分隔方式的元素总和（76）小于上一种。 </pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4\n<strong>输出：</strong>83\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [1], k = 1\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 500</code></li> \n <li><code>0 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>1 &lt;= k &lt;= arr.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1044. 最长重复子串', '<p>给出一个字符串&nbsp;<code>S</code>，考虑其所有<strong>重复子串</strong>（<code>S</code> 的连续子串，出现两次或多次，可能会有重叠）。</p> \n<p>返回<strong>任何</strong>具有最长可能长度的重复子串。（如果 <code>S</code>&nbsp;不含重复子串，那么答案为&nbsp;<code>\"\"</code>。）</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\"banana\"\n<strong>输出：</strong>\"ana\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\"abcd\"\n<strong>输出：</strong>\"\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>2 &lt;= S.length &lt;= 10^5</code></li> \n <li><code>S</code> 由小写英文字母组成。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('1046. 最后一块石头的重量', '<p>有一堆石头，每块石头的重量都是正整数。</p> \n<p>每一回合，从中选出两块<strong> 最重的</strong> 石头，然后将它们一起粉碎。假设石头的重量分别为&nbsp;<code>x</code> 和&nbsp;<code>y</code>，且&nbsp;<code>x &lt;= y</code>。那么粉碎的可能结果如下：</p> \n<ul> \n <li>如果&nbsp;<code>x == y</code>，那么两块石头都会被完全粉碎；</li> \n <li>如果&nbsp;<code>x != y</code>，那么重量为&nbsp;<code>x</code>&nbsp;的石头将会完全粉碎，而重量为&nbsp;<code>y</code>&nbsp;的石头新重量为&nbsp;<code>y-x</code>。</li> \n</ul> \n<p>最后，最多只会剩下一块石头。返回此石头的重量。如果没有石头剩下，就返回 <code>0</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[2,7,4,1,8,1]\n<strong>输出：</strong>1\n<strong>解释：</strong>\n先选出 7 和 8，得到 1，所以数组转换为 [2,4,1,1,1]，\n再选出 2 和 4，得到 2，所以数组转换为 [2,1,1,1]，\n接着是 2 和 1，得到 1，所以数组转换为 [1,1,1]，\n最后选出 1 和 1，得到 0，最终数组转换为 [1]，这就是最后剩下那块石头的重量。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= stones.length &lt;= 30</code></li> \n <li><code>1 &lt;= stones[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1047. 删除字符串中的所有相邻重复项', '<p>给出由小写字母组成的字符串&nbsp;<code>S</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们。</p> \n<p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p> \n<p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\"abbaca\"\n<strong>输出：</strong>\"ca\"\n<strong>解释：</strong>\n例如，在 \"abbaca\" 中，我们可以删除 \"bb\" 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 \"aaca\"，其中又只有 \"aa\" 可以执行重复项删除操作，所以最后的字符串为 \"ca\"。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= S.length &lt;= 20000</code></li> \n <li><code>S</code> 仅由小写英文字母组成。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('1048. 最长字符串链', '<p>给出一个单词列表，其中每个单词都由小写英文字母组成。</p> \n<p>如果我们可以在&nbsp;<code>word1</code>&nbsp;的任何地方添加一个字母使其变成&nbsp;<code>word2</code>，那么我们认为&nbsp;<code>word1</code>&nbsp;是&nbsp;<code>word2</code>&nbsp;的前身。例如，<code>\"abc\"</code>&nbsp;是&nbsp;<code>\"abac\"</code>&nbsp;的前身。</p> \n<p><strong>词链</strong>是单词&nbsp;<code>[word_1, word_2, ..., word_k]</code>&nbsp;组成的序列，<code>k &gt;= 1</code>，其中&nbsp;<code>word_1</code>&nbsp;是&nbsp;<code>word_2</code>&nbsp;的前身，<code>word_2</code>&nbsp;是&nbsp;<code>word_3</code>&nbsp;的前身，依此类推。</p> \n<p>从给定单词列表 <code>words</code> 中选择单词组成词链，返回词链的最长可能长度。<br> &nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]\n<strong>输出：</strong>4\n<strong>解释：</strong>最长单词链之一为 \"a\",\"ba\",\"bda\",\"bdca\"。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= words.length &lt;= 1000</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 16</code></li> \n <li><code>words[i]</code>&nbsp;仅由小写英文字母组成。</li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('1049. 最后一块石头的重量 II', '<p>有一堆石头，用整数数组&nbsp;<code>stones</code> 表示。其中&nbsp;<code>stones[i]</code> 表示第 <code>i</code> 块石头的重量。</p> \n<p>每一回合，从中选出<strong>任意两块石头</strong>，然后将它们一起粉碎。假设石头的重量分别为&nbsp;<code>x</code> 和&nbsp;<code>y</code>，且&nbsp;<code>x &lt;= y</code>。那么粉碎的可能结果如下：</p> \n<ul> \n <li>如果&nbsp;<code>x == y</code>，那么两块石头都会被完全粉碎；</li> \n <li>如果&nbsp;<code>x != y</code>，那么重量为&nbsp;<code>x</code>&nbsp;的石头将会完全粉碎，而重量为&nbsp;<code>y</code>&nbsp;的石头新重量为&nbsp;<code>y-x</code>。</li> \n</ul> \n<p>最后，<strong>最多只会剩下一块 </strong>石头。返回此石头 <strong>最小的可能重量 </strong>。如果没有石头剩下，就返回 <code>0</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>stones = [2,7,4,1,8,1]\n<strong>输出：</strong>1\n<strong>解释：</strong>\n组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，\n组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，\n组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，\n组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>stones = [31,26,33,21,40]\n<strong>输出：</strong>5\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>stones = [1,2]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= stones.length &lt;= 30</code></li> \n <li><code>1 &lt;= stones[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('105. 从前序与中序遍历序列构造二叉树', '<p>给定一棵树的前序遍历&nbsp;<code>preorder</code> 与中序遍历&nbsp; <code>inorder</code>。请构造二叉树并返回其根节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<img src=\"https://assets.leetcode.com/uploads/2021/02/19/tree.jpg\" alt=\"\"> \n<pre><strong>Input:</strong> preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n<strong>Output:</strong> [3,9,20,null,null,15,7]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>Input:</strong> preorder = [-1], inorder = [-1]\n<strong>Output:</strong> [-1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= preorder.length &lt;= 3000</code></li> \n <li><code>inorder.length == preorder.length</code></li> \n <li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li> \n <li><code>preorder</code>&nbsp;和&nbsp;<code>inorder</code>&nbsp;均无重复元素</li> \n <li><code>inorder</code>&nbsp;均出现在&nbsp;<code>preorder</code></li> \n <li><code>preorder</code>&nbsp;保证为二叉树的前序遍历序列</li> \n <li><code>inorder</code>&nbsp;保证为二叉树的中序遍历序列</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1051. 高度检查器', '<p>学校打算为全体学生拍一张年度纪念照。根据要求，学生需要按照 <strong>非递减</strong> 的高度顺序排成一行。</p> \n<p>排序后的高度情况用整数数组 <code>expected</code> 表示，其中 <code>expected[i]</code> 是预计排在这一行中第 <code>i</code> 位的学生的高度（<strong>下标从 0 开始</strong>）。</p> \n<p>给你一个整数数组 <code>heights</code> ，表示 <strong>当前学生站位</strong> 的高度情况。<code>heights[i]</code> 是这一行中第 <code>i</code> 位学生的高度（<strong>下标从 0 开始</strong>）。</p> \n<p>返回满足<em> </em><code>heights[i] != expected[i]</code> 的 <strong>下标数量</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>heights =&nbsp;[1,1,4,2,1,3]\n<strong>输出：</strong>3 \n<strong>解释：</strong>\n高度：[1,1,<em><strong>4</strong></em>,2,<em><strong>1</strong></em>,<em><strong>3</strong></em>]\n预期：[1,1,<em><strong>1</strong></em>,2,<em><strong>3</strong></em>,<em><strong>4</strong></em>]\n下标 2 、4 、5 处的学生高度不匹配。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>heights = [5,1,2,3,4]\n<strong>输出：</strong>5\n<strong>解释：</strong>\n高度：[<em><strong>5</strong></em>,<em><strong>1</strong></em>,<em><strong>2</strong></em>,<em><strong>3</strong></em>,<em><strong>4</strong></em>]\n预期：[<em><strong>1</strong></em>,<em><strong>2</strong></em>,<em><strong>3</strong></em>,<em><strong>4</strong></em>,<em><strong>5</strong></em>]\n所有下标的对应学生高度都不匹配。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>heights = [1,2,3,4,5]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n高度：[1,2,3,4,5]\n预期：[1,2,3,4,5]\n所有下标的对应学生高度都匹配。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= heights.length &lt;= 100</code></li> \n <li><code>1 &lt;= heights[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1052. 爱生气的书店老板', '<p>今天，书店老板有一家店打算试营业&nbsp;<code>customers.length</code>&nbsp;分钟。每分钟都有一些顾客（<code>customers[i]</code>）会进入书店，所有这些顾客都会在那一分钟结束后离开。</p> \n<p>在某些时候，书店老板会生气。 如果书店老板在第 <code>i</code> 分钟生气，那么 <code>grumpy[i] = 1</code>，否则 <code>grumpy[i] = 0</code>。 当书店老板生气时，那一分钟的顾客就会不满意，不生气则他们是满意的。</p> \n<p>书店老板知道一个秘密技巧，能抑制自己的情绪，可以让自己连续&nbsp;<code>X</code> 分钟不生气，但却只能使用一次。</p> \n<p>请你返回这一天营业下来，最多有多少客户能够感到满意。<br> &nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3\n<strong>输出：</strong>16\n<strong>解释：\n</strong>书店老板在最后 3 分钟保持冷静。\n感到满意的最大客户数量 = 1 + 1 + 1 + 1 + 7 + 5 = 16.\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= X &lt;=&nbsp;customers.length ==&nbsp;grumpy.length &lt;= 20000</code></li> \n <li><code>0 &lt;=&nbsp;customers[i] &lt;= 1000</code></li> \n <li><code>0 &lt;=&nbsp;grumpy[i] &lt;= 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1053. 交换一次的先前排列', '<p>给你一个正整数的数组 <code>A</code>（其中的元素不一定完全不同），请你返回可在&nbsp;<strong>一次交换</strong>（交换两数字 <code>A[i]</code> 和 <code>A[j]</code> 的位置）后得到的、按字典序排列小于 <code>A</code> 的最大可能排列。</p> \n<p>如果无法这么操作，就请返回原数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [3,2,1]\n<strong>输出：</strong>[3,1,2]\n<strong>解释：</strong>交换 2 和 1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,1,5]\n<strong>输出：</strong>[1,1,5]\n<strong>解释：</strong>已经是最小排列\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [1,9,4,6,7]\n<strong>输出：</strong>[1,7,4,6,9]\n<strong>解释：</strong>交换 9 和 7\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [3,1,1,3]\n<strong>输出：</strong>[1,3,1,3]\n<strong>解释：</strong>交换 1 和 3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= arr[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1054. 距离相等的条形码', '<p>在一个仓库里，有一排条形码，其中第 <code>i</code> 个条形码为&nbsp;<code>barcodes[i]</code>。</p> \n<p>请你重新排列这些条形码，使其中两个相邻的条形码 <strong>不能</strong> 相等。 你可以返回任何满足该要求的答案，此题保证存在答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1,1,1,2,2,2]\n<strong>输出：</strong>[2,1,2,1,2,1]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[1,1,1,1,2,2,3,3]\n<strong>输出：</strong>[1,3,1,3,2,1,2,1]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= barcodes.length &lt;= 10000</code></li> \n <li><code>1 &lt;= barcodes[i] &lt;= 10000</code></li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('106. 从中序与后序遍历序列构造二叉树', '<p>根据一棵树的中序遍历与后序遍历构造二叉树。</p> \n<p><strong>注意:</strong><br> 你可以假设树中没有重复的元素。</p> \n<p>例如，给出</p> \n<pre>中序遍历 inorder =&nbsp;[9,3,15,20,7]\n后序遍历 postorder = [9,15,7,20,3]</pre> \n<p>返回如下的二叉树：</p> \n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>');
INSERT INTO `leecode` VALUES ('107. 二叉树的层序遍历 II', '<p>给定一个二叉树，返回其节点值自底向上的层序遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p> \n<p>例如：<br> 给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p> \n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre> \n<p>返回其自底向上的层序遍历为：</p> \n<pre>[\n  [15,7],\n  [9,20],\n  [3]\n]\n</pre>');
INSERT INTO `leecode` VALUES ('1071. 字符串的最大公因子', '<p>对于字符串&nbsp;<code>S</code> 和&nbsp;<code>T</code>，只有在 <code>S = T + ... + T</code>（<code>T</code> 自身连接 1 次或多次）时，我们才认定&nbsp;“<code>T</code> 能除尽 <code>S</code>”。</p> \n<p>返回最长字符串&nbsp;<code>X</code>，要求满足&nbsp;<code>X</code> 能除尽 <code>str1</code> 且&nbsp;<code>X</code> 能除尽 <code>str2</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>str1 = \"ABCABC\", str2 = \"ABC\"\n<strong>输出：</strong>\"ABC\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>str1 = \"ABABAB\", str2 = \"ABAB\"\n<strong>输出：</strong>\"AB\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>str1 = \"LEET\", str2 = \"CODE\"\n<strong>输出：</strong>\"\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= str1.length &lt;= 1000</code></li> \n <li><code>1 &lt;= str2.length &lt;= 1000</code></li> \n <li><code>str1[i]</code> 和&nbsp;<code>str2[i]</code> 为大写英文字母</li> \n</ol>');
INSERT INTO `leecode` VALUES ('1072. 按列翻转得到最大值等行数', '<p>给定由若干 0 和 1 组成的矩阵&nbsp;<code>matrix</code>，从中选出任意数量的列并翻转其上的&nbsp;<strong>每个&nbsp;</strong>单元格。翻转后，单元格的值从 0 变成 1，或者从 1 变为 0 。</p> \n<p>回经过一些翻转后，行与行之间所有值都相等的最大行数。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[[0,1],[1,1]]\n<strong>输出：</strong>1\n<strong>解释：</strong>不进行翻转，有 1 行所有值都相等。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[[0,1],[1,0]]\n<strong>输出：</strong>2\n<strong>解释：</strong>翻转第一列的值之后，这两行都由相等的值组成。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[[0,0,0],[0,0,1],[1,1,0]]\n<strong>输出：</strong>2\n<strong>解释：</strong>翻转前两列的值之后，后两行由相等的值组成。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= matrix.length &lt;= 300</code></li> \n <li><code>1 &lt;= matrix[i].length &lt;= 300</code></li> \n <li>所有 <code>matrix[i].length</code>&nbsp;都相等</li> \n <li><code>matrix[i][j]</code> 为&nbsp;<code>0</code> 或&nbsp;<code>1</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1073. 负二进制数相加', '<p>给出基数为 <strong>-2</strong>&nbsp;的两个数&nbsp;<code>arr1</code> 和&nbsp;<code>arr2</code>，返回两数相加的结果。</p> \n<p>数字以&nbsp;<strong>数组形式&nbsp;</strong>给出：数组由若干 0 和 1 组成，按最高有效位到最低有效位的顺序排列。例如，<code>arr&nbsp;= [1,1,0,1]</code>&nbsp;表示数字&nbsp;<code>(-2)^3&nbsp;+ (-2)^2 + (-2)^0 = -3</code>。<strong>数组形式&nbsp;</strong>的数字也同样不含前导零：以 <code>arr</code> 为例，这意味着要么&nbsp;<code>arr == [0]</code>，要么&nbsp;<code>arr[0] == 1</code>。</p> \n<p>返回相同表示形式的 <code>arr1</code> 和 <code>arr2</code> 相加的结果。两数的表示形式为：不含前导零、由若干 0 和 1 组成的数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>arr1 = [1,1,1,1,1], arr2 = [1,0,1]\n<strong>输出：</strong>[1,0,0,0,0]\n<strong>解释：</strong>arr1 表示 11，arr2 表示 5，输出表示 16 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= arr1.length &lt;= 1000</code></li> \n <li><code>1 &lt;= arr2.length &lt;= 1000</code></li> \n <li><code>arr1</code> 和&nbsp;<code>arr2</code>&nbsp;都不含前导零</li> \n <li><code>arr1[i]</code> 为&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code></li> \n <li><code>arr2[i]</code>&nbsp;为&nbsp;<code>0</code> 或&nbsp;<code>1</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1074. 元素和为目标值的子矩阵数量', '<p>给出矩阵&nbsp;<code>matrix</code>&nbsp;和目标值&nbsp;<code>target</code>，返回元素总和等于目标值的非空子矩阵的数量。</p> \n<p>子矩阵&nbsp;<code>x1, y1, x2, y2</code>&nbsp;是满足 <code>x1 &lt;= x &lt;= x2</code>&nbsp;且&nbsp;<code>y1 &lt;= y &lt;= y2</code>&nbsp;的所有单元&nbsp;<code>matrix[x][y]</code>&nbsp;的集合。</p> \n<p>如果&nbsp;<code>(x1, y1, x2, y2)</code> 和&nbsp;<code>(x1\', y1\', x2\', y2\')</code>&nbsp;两个子矩阵中部分坐标不同（如：<code>x1 != x1\'</code>），那么这两个子矩阵也不同。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 242px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/09/02/mate1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0\n<strong>输出：</strong>4\n<strong>解释：</strong>四个只含 0 的 1x1 子矩阵。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>matrix = [[1,-1],[-1,1]], target = 0\n<strong>输出：</strong>5\n<strong>解释：</strong>两个 1x2 子矩阵，加上两个 2x1 子矩阵，再加上一个 2x2 子矩阵。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>matrix = [[904]], target = 0\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong><strong>提示：</strong></strong></p> \n<ul> \n <li><code>1 &lt;= matrix.length &lt;= 100</code></li> \n <li><code>1 &lt;= matrix[0].length &lt;= 100</code></li> \n <li><code>-1000 &lt;= matrix[i] &lt;= 1000</code></li> \n <li><code>-10^8 &lt;= target &lt;= 10^8</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1078. Bigram 分词', '<p>给出第一个词&nbsp;<code>first</code> 和第二个词&nbsp;<code>second</code>，考虑在某些文本&nbsp;<code>text</code>&nbsp;中可能以 \"<code>first second third</code>\" 形式出现的情况，其中&nbsp;<code>second</code>&nbsp;紧随&nbsp;<code>first</code>&nbsp;出现，<code>third</code>&nbsp;紧随&nbsp;<code>second</code>&nbsp;出现。</p> \n<p>对于每种这样的情况，将第三个词 \"<code>third</code>\" 添加到答案中，并返回答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"\n<strong>输出：</strong>[\"girl\",\"student\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>text = \"we will we will rock you\", first = \"we\", second = \"will\"\n<strong>输出：</strong>[\"we\",\"rock\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= text.length &lt;= 1000</code></li> \n <li><code>text</code>&nbsp;由一些用空格分隔的单词组成，每个单词都由小写英文字母组成</li> \n <li><code>1 &lt;= first.length, second.length &lt;= 10</code></li> \n <li><code>first</code> 和&nbsp;<code>second</code>&nbsp;由小写英文字母组成</li> \n</ol>');
INSERT INTO `leecode` VALUES ('1079. 活字印刷', '<p>你有一套活字字模&nbsp;<code>tiles</code>，其中每个字模上都刻有一个字母&nbsp;<code>tiles[i]</code>。返回你可以印出的非空字母序列的数目。</p> \n<p><strong>注意：</strong>本题中，每个活字字模只能使用一次。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\"AAB\"\n<strong>输出：</strong>8\n<strong>解释：</strong>可能的序列为 \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\"。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\"AAABBC\"\n<strong>输出：</strong>188\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= tiles.length &lt;= 7</code></li> \n <li><code>tiles</code> 由大写英文字母组成</li> \n</ol>');
INSERT INTO `leecode` VALUES ('108. 将有序数组转换为二叉搜索树', '<p>给你一个整数数组 <code>nums</code> ，其中元素已经按 <strong>升序</strong> 排列，请你将其转换为一棵 <strong>高度平衡</strong> 二叉搜索树。</p> \n<p><strong>高度平衡 </strong>二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 302px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>nums = [-10,-3,0,5,9]\n<strong>输出：</strong>[0,-3,9,-10,null,5]\n<strong>解释：</strong>[0,-10,5,null,-3,null,9] 也将被视为正确答案：\n<img style=\"width: 302px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg\" alt=\"\">\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 342px; height: 142px;\" src=\"https://assets.leetcode.com/uploads/2021/02/18/btree.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>nums = [1,3]\n<strong>输出：</strong>[3,1]\n<strong>解释：</strong>[1,3] 和 [3,1] 都是高度平衡二叉搜索树。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n <li><code>nums</code> 按 <strong>严格递增</strong> 顺序排列</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1080. 根到叶路径上的不足节点', '<p>给定一棵二叉树的根 <code>root</code>，请你考虑它所有&nbsp;<strong>从根到叶的路径</strong>：从根到任何叶的路径。（所谓一个叶子节点，就是一个没有子节点的节点）</p> \n<p>假如通过节点 <code>node</code> 的每种可能的 “根-叶” 路径上值的总和全都小于给定的 <code>limit</code>，则该节点被称之为「不足节点」，需要被删除。</p> \n<p>请你删除所有不足节点，并返回生成的二叉树的根。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong><img style=\"height: 200px; width: 482px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/08/insufficient-1.png\" alt=\"\">\n输入：</strong>root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1\n<strong><img style=\"height: 200px; width: 258px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/08/insufficient-2.png\" alt=\"\">\n输出：</strong>[1,2,3,4,null,null,7,8,9,null,14]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong><img style=\"height: 200px; width: 292px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/08/insufficient-3.png\" alt=\"\">\n输入：</strong>root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22\n<strong><img style=\"height: 200px; width: 264px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/08/insufficient-4.png\" alt=\"\">\n输出：</strong>[5,4,8,11,null,17,4,7,null,null,null,5]</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong><img style=\"height: 100px; width: 140px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/08/insufficient-5.png\" alt=\"\">\n输入：</strong>root = [5,-6,-6], limit = 0<strong>\n输出：</strong>[]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>给定的树有&nbsp;<code>1</code>&nbsp;到&nbsp;<code>5000</code>&nbsp;个节点</li> \n <li><code>-10^5&nbsp;&lt;= node.val &lt;= 10^5</code></li> \n <li><code>-10^9 &lt;= limit&nbsp;&lt;= 10^9</code></li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('1081. 不同字符的最小子序列', '<p>返回 <code>s</code> 字典序最小的子序列，该子序列包含 <code>s</code> 的所有不同字符，且只包含一次。</p> \n<p><strong>注意：</strong>该题与 316 <a href=\"https://leetcode.com/problems/remove-duplicate-letters/\">https://leetcode.com/problems/remove-duplicate-letters/</a> 相同</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong><code>s = \"bcabc\"</code>\n<strong>输出<code>：</code></strong><code>\"abc\"</code>\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong><code>s = \"cbacdcbc\"</code>\n<strong>输出：</strong><code>\"acdb\"</code></pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 1000</code></li> \n <li><code>s</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1089. 复写零', '<p>给你一个长度固定的整数数组&nbsp;<code>arr</code>，请你将该数组中出现的每个零都复写一遍，并将其余的元素向右平移。</p> \n<p>注意：请不要在超过该数组长度的位置写入元素。</p> \n<p>要求：请对输入的数组&nbsp;<strong>就地&nbsp;</strong>进行上述修改，不要从函数返回任何东西。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1,0,2,3,0,4,5,0]\n<strong>输出：</strong>null\n<strong>解释：</strong>调用函数后，<strong>输入</strong>的数组将被修改为：[1,0,0,2,3,0,0,4]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[1,2,3]\n<strong>输出：</strong>null\n<strong>解释：</strong>调用函数后，<strong>输入</strong>的数组将被修改为：[1,2,3]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= arr.length &lt;= 10000</code></li> \n <li><code>0 &lt;= arr[i] &lt;= 9</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('109. 有序链表转换二叉搜索树', '<p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。</p> \n<p>本题中，一个高度平衡二叉树是指一个二叉树<em>每个节点&nbsp;</em>的左右两个子树的高度差的绝对值不超过 1。</p> \n<p><strong>示例:</strong></p> \n<pre>给定的有序链表： [-10, -3, 0, 5, 9],\n\n一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n</pre>');
INSERT INTO `leecode` VALUES ('1090. 受标签影响的最大值', '<p>我们有一个项的集合，其中第&nbsp;<code>i</code>&nbsp;项的值为&nbsp;<code>values[i]</code>，标签为&nbsp;<code>labels[i]</code>。</p> \n<p>我们从这些项中选出一个子集&nbsp;<code>S</code>，这样一来：</p> \n<ul> \n <li><code>|S| &lt;= num_wanted</code></li> \n <li>对于任意的标签 <code>L</code>，子集 <code>S</code> 中标签为 <code>L</code>&nbsp;的项的数目总满足&nbsp;<code>&lt;= use_limit</code>。</li> \n</ul> \n<p>返回子集&nbsp;<code>S</code>&nbsp;的最大可能的&nbsp;<strong>和</strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>values = [5,4,3,2,1], labels = [1,1,2,2,3], <code>num_wanted </code>= 3, use_limit = 1\n<strong>输出：</strong>9\n<strong>解释：</strong>选出的子集是第一项，第三项和第五项。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>values = [5,4,3,2,1], labels = [1,3,3,3,2], <code>num_wanted </code>= 3, use_limit = 2\n<strong>输出：</strong>12\n<strong>解释：</strong>选出的子集是第一项，第二项和第三项。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>values = [9,8,8,7,6], labels = [0,0,0,1,1], <code>num_wanted </code>= 3, use_limit = 1\n<strong>输出：</strong>16\n<strong>解释：</strong>选出的子集是第一项和第四项。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>values = [9,8,8,7,6], labels = [0,0,0,1,1], <code>num_wanted </code>= 3, use_limit = 2\n<strong>输出：</strong>24\n<strong>解释：</strong>选出的子集是第一项，第二项和第四项。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= values.length == labels.length &lt;= 20000</code></li> \n <li><code>0 &lt;= values[i], labels[i]&nbsp;&lt;= 20000</code></li> \n <li><code>1 &lt;= num_wanted, use_limit&nbsp;&lt;= values.length</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1091. 二进制矩阵中的最短路径', '<p>给你一个 <code>n x n</code> 的二进制矩阵 <code>grid</code> 中，返回矩阵中最短 <strong>畅通路径</strong> 的长度。如果不存在这样的路径，返回 <code>-1</code> 。</p> \n<p>二进制矩阵中的 畅通路径 是一条从 <strong>左上角</strong> 单元格（即，<code>(0, 0)</code>）到 右下角 单元格（即，<code>(n - 1, n - 1)</code>）的路径，该路径同时满足下述要求：</p> \n<ul> \n <li>路径途经的所有单元格都的值都是 <code>0</code> 。</li> \n <li>路径中所有相邻的单元格应当在 <strong>8 个方向之一</strong> 上连通（即，相邻两单元之间彼此不同且共享一条边或者一个角）。</li> \n</ul> \n<p><strong>畅通路径的长度</strong> 是该路径途经的单元格总数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 500px; height: 234px;\" src=\"https://assets.leetcode.com/uploads/2021/02/18/example1_1.png\" alt=\"\"> \n<pre><strong>输入：</strong>grid = [[0,1],[1,0]]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"height: 216px; width: 500px;\" src=\"https://assets.leetcode.com/uploads/2021/02/18/example2_1.png\" alt=\"\"> \n<pre><strong>输入：</strong>grid = [[0,0,0],[1,1,0],[1,1,0]]\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,0,0],[1,1,0],[1,1,0]]\n<strong>输出：</strong>-1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>grid[i][j]</code> 为 <code>0</code> 或 <code>1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1092. 最短公共超序列', '<p>给出两个字符串&nbsp;<code>str1</code> 和&nbsp;<code>str2</code>，返回同时以&nbsp;<code>str1</code>&nbsp;和&nbsp;<code>str2</code>&nbsp;作为子序列的最短字符串。如果答案不止一个，则可以返回满足条件的任意一个答案。</p> \n<p>（如果从字符串 T 中删除一些字符（也可能不删除，并且选出的这些字符可以位于 T 中的&nbsp;<strong>任意位置</strong>），可以得到字符串 S，那么&nbsp;S 就是&nbsp;T 的子序列）</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>str1 = \"abac\", str2 = \"cab\"\n<strong>输出：</strong>\"cabac\"\n<strong>解释：</strong>\nstr1 = \"abac\" 是 \"cabac\" 的一个子串，因为我们可以删去 \"cabac\" 的第一个 \"c\"得到 \"abac\"。 \nstr2 = \"cab\" 是 \"cabac\" 的一个子串，因为我们可以删去 \"cabac\" 末尾的 \"ac\" 得到 \"cab\"。\n最终我们给出的答案是满足上述属性的最短字符串。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= str1.length, str2.length &lt;= 1000</code></li> \n <li><code>str1</code> 和&nbsp;<code>str2</code>&nbsp;都由小写英文字母组成。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('1093. 大样本统计', '<p>我们对&nbsp;<code>0</code>&nbsp;到&nbsp;<code>255</code>&nbsp;之间的整数进行采样，并将结果存储在数组&nbsp;<code>count</code>&nbsp;中：<code>count[k]</code>&nbsp;就是整数&nbsp;<code>k</code> 的采样个数。</p> \n<p>我们以&nbsp;<strong>浮点数&nbsp;</strong>数组的形式，分别返回样本的最小值、最大值、平均值、中位数和众数。其中，众数是保证唯一的。</p> \n<p>我们先来回顾一下中位数的知识：</p> \n<ul> \n <li>如果样本中的元素有序，并且元素数量为奇数时，中位数为最中间的那个元素；</li> \n <li>如果样本中的元素有序，并且元素数量为偶数时，中位数为中间的两个元素的平均值。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n<strong>输出：</strong>[1.00000,3.00000,2.37500,2.50000,3.00000]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n<strong>输出：</strong>[1.00000,4.00000,2.18182,2.00000,1.00000]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>count.length == 256</code></li> \n <li><code>1 &lt;= sum(count) &lt;= 10^9</code></li> \n <li>计数表示的众数是唯一的</li> \n <li>答案与真实值误差在&nbsp;<code>10^-5</code>&nbsp;以内就会被视为正确答案</li> \n</ol>');
INSERT INTO `leecode` VALUES ('1094. 拼车', '<p>假设你是一位顺风车司机，车上最初有&nbsp;<code>capacity</code>&nbsp;个空座位可以用来载客。由于道路的限制，车&nbsp;<strong>只能&nbsp;</strong>向一个方向行驶（也就是说，<strong>不允许掉头或改变方向</strong>，你可以将其想象为一个向量）。</p> \n<p>这儿有一份乘客行程计划表&nbsp;<code>trips[][]</code>，其中&nbsp;<code>trips[i] = [num_passengers, start_location, end_location]</code>&nbsp;包含了第 <code>i</code> 组乘客的行程信息：</p> \n<ul> \n <li>必须接送的乘客数量；</li> \n <li>乘客的上车地点；</li> \n <li>以及乘客的下车地点。</li> \n</ul> \n<p>这些给出的地点位置是从你的&nbsp;<strong>初始&nbsp;</strong>出发位置向前行驶到这些地点所需的距离（它们一定在你的行驶方向上）。</p> \n<p>请你根据给出的行程计划表和车子的座位数，来判断你的车是否可以顺利完成接送所有乘客的任务（当且仅当你可以在所有给定的行程中接送所有乘客时，返回&nbsp;<code>true</code>，否则请返回 <code>false</code>）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>trips = [[2,1,5],[3,3,7]], capacity = 4\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>trips = [[2,1,5],[3,3,7]], capacity = 5\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>trips = [[2,1,5],[3,5,7]], capacity = 3\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>trips = [[3,2,7],[3,7,9],[8,3,9]], capacity = 11\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>你可以假设乘客会自觉遵守 “<strong>先下后上</strong>” 的良好素质</li> \n <li><code>trips.length &lt;= 1000</code></li> \n <li><code>trips[i].length == 3</code></li> \n <li><code>1 &lt;= trips[i][0] &lt;= 100</code></li> \n <li><code>0 &lt;= trips[i][1] &lt; trips[i][2] &lt;= 1000</code></li> \n <li><code>1 &lt;=&nbsp;capacity &lt;= 100000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1095. 山脉数组中查找目标值', '<p>（这是一个 <strong>交互式问题&nbsp;</strong>）</p> \n<p>给你一个 <strong>山脉数组</strong>&nbsp;<code>mountainArr</code>，请你返回能够使得&nbsp;<code>mountainArr.get(index)</code>&nbsp;<strong>等于</strong>&nbsp;<code>target</code>&nbsp;<strong>最小</strong>&nbsp;的下标 <code>index</code>&nbsp;值。</p> \n<p>如果不存在这样的下标 <code>index</code>，就请返回&nbsp;<code>-1</code>。</p> \n<p>&nbsp;</p> \n<p>何为山脉数组？如果数组&nbsp;<code>A</code> 是一个山脉数组的话，那它满足如下条件：</p> \n<p><strong>首先</strong>，<code>A.length &gt;= 3</code></p> \n<p><strong>其次</strong>，在&nbsp;<code>0 &lt; i&nbsp;&lt; A.length - 1</code>&nbsp;条件下，存在 <code>i</code> 使得：</p> \n<ul> \n <li><code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i]</code></li> \n <li><code>A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>你将&nbsp;<strong>不能直接访问该山脉数组</strong>，必须通过&nbsp;<code>MountainArray</code>&nbsp;接口来获取数据：</p> \n<ul> \n <li><code>MountainArray.get(k)</code>&nbsp;- 会返回数组中索引为<code>k</code>&nbsp;的元素（下标从 0 开始）</li> \n <li><code>MountainArray.length()</code>&nbsp;- 会返回该数组的长度</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>注意：</strong></p> \n<p>对&nbsp;<code>MountainArray.get</code>&nbsp;发起超过 <code>100</code> 次调用的提交将被视为错误答案。此外，任何试图规避判题系统的解决方案都将会导致比赛资格被取消。</p> \n<p>为了帮助大家更好地理解交互式问题，我们准备了一个样例 “<strong>答案</strong>”：<a href=\"https://leetcode-cn.com/playground/RKhe3ave\">https://leetcode-cn.com/playground/RKhe3ave</a>，请注意这 <strong>不是一个正确答案</strong>。</p> \n<ol> \n</ol> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>array = [1,2,3,4,5,3,1], target = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>3 在数组中出现了两次，下标分别为 2 和 5，我们返回最小的下标 2。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>array = [0,1,2,4,2,1], target = 3\n<strong>输出：</strong>-1\n<strong>解释：</strong>3 在数组中没有出现，返回 -1。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= mountain_arr.length() &lt;= 10000</code></li> \n <li><code>0 &lt;= target &lt;= 10^9</code></li> \n <li><code>0 &lt;= mountain_arr.get(index) &lt;=&nbsp;10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1096. 花括号展开 II', '<p>如果你熟悉 Shell 编程，那么一定了解过花括号展开，它可以用来生成任意字符串。</p> \n<p>花括号展开的表达式可以看作一个由 <strong>花括号</strong>、<strong>逗号</strong> 和 <strong>小写英文字母</strong> 组成的字符串，定义下面几条语法规则：</p> \n<ul> \n <li>如果只给出单一的元素&nbsp;<code>x</code>，那么表达式表示的字符串就只有&nbsp;<code>\"x\"</code>。<code>R(x) = {x}</code> \n  <ul> \n   <li>例如，表达式 <code>{\"a\"}</code>&nbsp;表示字符串 <code>\"a\"</code>。</li> \n   <li>而表达式 <code>{\"w\"}</code>&nbsp;就表示字符串 <code>\"w\"</code>。</li> \n  </ul> </li> \n <li>当两个或多个表达式并列，以逗号分隔时，我们取这些表达式中元素的并集。<code>R({e_1,e_2,...}) = R(e_1)&nbsp;∪ R(e_2)&nbsp;∪ ...</code> \n  <ul> \n   <li>例如，表达式 <code>\"{a,b,c}\"</code> 表示字符串&nbsp;<code>\"a\",\"b\",\"c\"</code>。</li> \n   <li>而表达式 <code>\"{{a,b},{b,c}}\"</code> 也可以表示字符串&nbsp;<code>\"a\",\"b\",\"c\"</code>。</li> \n  </ul> </li> \n <li>要是两个或多个表达式相接，中间没有隔开时，我们从这些表达式中各取一个元素依次连接形成字符串。<code>R(e_1 + e_2) = {a + b for (a, b) in&nbsp;R(e_1)&nbsp;× R(e_2)}</code> \n  <ul> \n   <li>例如，表达式 <code>\"{a,b}{c,d}\"</code> 表示字符串&nbsp;<code>\"ac\",\"ad\",\"bc\",\"bd\"</code>。</li> \n  </ul> </li> \n <li>表达式之间允许嵌套，单一元素与表达式的连接也是允许的。 \n  <ul> \n   <li>例如，表达式 <code>\"a{b,c,d}\"</code> 表示字符串&nbsp;<code>\"ab\",\"ac\",\"ad\"​​​​​​</code>。</li> \n   <li>例如，表达式 <code>\"a{b,c}{d,e}f{g,h}\"</code> 可以表示字符串&nbsp;<code>\"abdfg\", \"abdfh\", \"abefg\", \"abefh\", \"acdfg\", \"acdfh\", \"acefg\", \"acefh\"</code>。</li> \n  </ul> </li> \n</ul> \n<p>给出表示基于给定语法规则的表达式&nbsp;<code>expression</code>，返回它所表示的所有字符串组成的有序列表。</p> \n<p>假如你希望以「集合」的概念了解此题，也可以通过点击 “<strong>显示英文描述</strong>” 获取详情。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\"{a,b}{c,{d,e}}\"\n<strong>输出：</strong>[\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\"{{a,z},a{b,c},{ab,z}}\"\n<strong>输出：</strong>[\"a\",\"ab\",\"ac\",\"z\"]\n<strong>解释：</strong>输出中 <strong>不应 </strong>出现重复的组合结果。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= expression.length &lt;= 50</code></li> \n <li><code>expression[i]</code> 由 <code>\'{\'</code>，<code>\'}\'</code>，<code>\',\'</code>&nbsp;或小写英文字母组成</li> \n <li>给出的表达式&nbsp;<code>expression</code>&nbsp;用以表示一组基于题目描述中语法构造的字符串</li> \n</ol>');
INSERT INTO `leecode` VALUES ('11. 盛最多水的容器', '<p>给你 <code>n</code> 个非负整数 <code>a<sub>1</sub>，a<sub>2，</sub>...，a</code><sub><code>n</code>，</sub>每个数代表坐标中的一个点&nbsp;<code>(i,&nbsp;a<sub>i</sub>)</code> 。在坐标内画 <code>n</code> 条垂直线，垂直线 <code>i</code>&nbsp;的两个端点分别为&nbsp;<code>(i,&nbsp;a<sub>i</sub>)</code> 和 <code>(i, 0)</code> 。找出其中的两条线，使得它们与&nbsp;<code>x</code>&nbsp;轴共同构成的容器可以容纳最多的水。</p> \n<p><strong>说明：</strong>你不能倾斜容器。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 287px; width: 600px;\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>[1,8,6,2,5,4,8,3,7]\n<strong>输出：</strong>49 \n<strong>解释：</strong>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为&nbsp;49。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>height = [1,1]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>height = [4,3,2,1,4]\n<strong>输出：</strong>16\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>height = [1,2,1]\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n = height.length</code></li> \n <li><code>2 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>0 &lt;= height[i] &lt;= 3 * 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('110. 平衡二叉树', '<p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p> \n<p>本题中，一棵高度平衡二叉树定义为：</p> \n<blockquote> \n <p>一个二叉树<em>每个节点&nbsp;</em>的左右两个子树的高度差的绝对值不超过 1 。</p> \n</blockquote> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 342px; height: 221px;\" src=\"https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [3,9,20,null,null,15,7]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 452px; height: 301px;\" src=\"https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,2,2,3,3,null,null,4,4]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = []\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中的节点数在范围 <code>[0, 5000]</code> 内</li> \n <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1103. 分糖果 II', '<p>排排坐，分糖果。</p> \n<p>我们买了一些糖果 <code>candies</code>，打算把它们分给排好队的 <strong><code>n = num_people</code></strong> 个小朋友。</p> \n<p>给第一个小朋友 1 颗糖果，第二个小朋友 2 颗，依此类推，直到给最后一个小朋友 <code>n</code>&nbsp;颗糖果。</p> \n<p>然后，我们再回到队伍的起点，给第一个小朋友 <code>n&nbsp;+ 1</code> 颗糖果，第二个小朋友 <code>n&nbsp;+ 2</code> 颗，依此类推，直到给最后一个小朋友 <code>2 * n</code>&nbsp;颗糖果。</p> \n<p>重复上述过程（每次都比上一次多给出一颗糖果，当到达队伍终点后再次从队伍起点开始），直到我们分完所有的糖果。注意，就算我们手中的剩下糖果数不够（不比前一次发出的糖果多），这些糖果也会全部发给当前的小朋友。</p> \n<p>返回一个长度为 <code>num_people</code>、元素之和为 <code>candies</code> 的数组，以表示糖果的最终分发情况（即 <code>ans[i]</code> 表示第 <code>i</code> 个小朋友分到的糖果数）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>candies = 7, num_people = 4\n<strong>输出：</strong>[1,2,3,1]\n<strong>解释：</strong>\n第一次，ans[0] += 1，数组变为 [1,0,0,0]。\n第二次，ans[1] += 2，数组变为 [1,2,0,0]。\n第三次，ans[2] += 3，数组变为 [1,2,3,0]。\n第四次，ans[3] += 1（因为此时只剩下 1 颗糖果），最终数组变为 [1,2,3,1]。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>candies = 10, num_people = 3\n<strong>输出：</strong>[5,2,3]\n<strong>解释：</strong>\n第一次，ans[0] += 1，数组变为 [1,0,0]。\n第二次，ans[1] += 2，数组变为 [1,2,0]。\n第三次，ans[2] += 3，数组变为 [1,2,3]。\n第四次，ans[0] += 4，最终数组变为 [5,2,3]。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= candies &lt;= 10^9</code></li> \n <li><code>1 &lt;= num_people &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1104. 二叉树寻路', '<p>在一棵无限的二叉树上，每个节点都有两个子节点，树中的节点 <strong>逐行</strong> 依次按&nbsp;“之” 字形进行标记。</p> \n<p>如下图所示，在奇数行（即，第一行、第三行、第五行……）中，按从左到右的顺序进行标记；</p> \n<p>而偶数行（即，第二行、第四行、第六行……）中，按从右到左的顺序进行标记。</p> \n<p><img style=\"height: 138px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/28/tree.png\" alt=\"\"></p> \n<p>给你树上某一个节点的标号 <code>label</code>，请你返回从根节点到该标号为 <code>label</code> 节点的路径，该路径是由途经的节点标号所组成的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>label = 14\n<strong>输出：</strong>[1,3,4,14]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>label = 26\n<strong>输出：</strong>[1,2,6,10,26]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= label &lt;= 10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1105. 填充书架', '<p>附近的家居城促销，你买回了一直心仪的可调节书架，打算把自己的书都整理到新的书架上。</p> \n<p>你把要摆放的书 <code>books</code>&nbsp;都整理好，叠成一摞：从上往下，第 <code>i</code>&nbsp;本书的厚度为 <code>books[i][0]</code>，高度为 <code>books[i][1]</code>。</p> \n<p><strong>按顺序</strong>&nbsp;将这些书摆放到总宽度为&nbsp;<code>shelf_width</code> 的书架上。</p> \n<p>先选几本书放在书架上（它们的厚度之和小于等于书架的宽度 <code>shelf_width</code>），然后再建一层书架。重复这个过程，直到把所有的书都放在书架上。</p> \n<p>需要注意的是，在上述过程的每个步骤中，<strong>摆放书的顺序与你整理好的顺序相同</strong>。 例如，如果这里有 5 本书，那么可能的一种摆放情况是：第一和第二本书放在第一层书架上，第三本书放在第二层书架上，第四和第五本书放在最后一层书架上。</p> \n<p>每一层所摆放的书的最大高度就是这一层书架的层高，书架整体的高度为各层高之和。</p> \n<p>以这种方式布置书架，返回书架整体可能的最小高度。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<p><img style=\"width: 150px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/28/shelves.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4\n<strong>输出：</strong>6\n<strong>解释：</strong>\n3 层书架的高度和为 1 + 3 + 2 = 6 。\n第 2 本书不必放在第一层书架上。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= books.length &lt;= 1000</code></li> \n <li><code>1 &lt;= books[i][0] &lt;= shelf_width &lt;= 1000</code></li> \n <li><code>1 &lt;= books[i][1] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1106. 解析布尔表达式', '<p>给你一个以字符串形式表述的&nbsp;<a href=\"https://baike.baidu.com/item/%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F/1574380?fr=aladdin\">布尔表达式</a>（boolean） <code>expression</code>，返回该式的运算结果。</p> \n<p>有效的表达式需遵循以下约定：</p> \n<ul> \n <li><code>\"t\"</code>，运算结果为 <code>True</code></li> \n <li><code>\"f\"</code>，运算结果为 <code>False</code></li> \n <li><code>\"!(expr)\"</code>，运算过程为对内部表达式 <code>expr</code> 进行逻辑 <strong>非的运算</strong>（NOT）</li> \n <li><code>\"&amp;(expr1,expr2,...)\"</code>，运算过程为对 2 个或以上内部表达式 <code>expr1, expr2, ...</code> 进行逻辑 <strong>与的运算</strong>（AND）</li> \n <li><code>\"|(expr1,expr2,...)\"</code>，运算过程为对 2 个或以上内部表达式 <code>expr1, expr2, ...</code> 进行逻辑 <strong>或的运算</strong>（OR）</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>expression = \"!(f)\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>expression = \"|(f,t)\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>expression = \"&amp;(t,f)\"\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>expression = \"|(&amp;(t,f,t),!(t))\"\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= expression.length &lt;= 20000</code></li> \n <li><code>expression[i]</code> 由 <code>{\'(\', \')\', \'&amp;\', \'|\', \'!\', \'t\', \'f\', \',\'}</code> 中的字符组成。</li> \n <li><code>expression</code> 是以上述形式给出的有效表达式，表示一个布尔值。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1108. IP 地址无效化', '<p>给你一个有效的 <a href=\"https://baike.baidu.com/item/IPv4\">IPv4</a> 地址&nbsp;<code>address</code>，返回这个 IP 地址的无效化版本。</p> \n<p>所谓无效化&nbsp;IP 地址，其实就是用&nbsp;<code>\"[.]\"</code>&nbsp;代替了每个 <code>\".\"</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>address = \"1.1.1.1\"\n<strong>输出：</strong>\"1[.]1[.]1[.]1\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>address = \"255.100.50.0\"\n<strong>输出：</strong>\"255[.]100[.]50[.]0\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>给出的&nbsp;<code>address</code>&nbsp;是一个有效的 IPv4 地址</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1109. 航班预订统计', '<p>这里有&nbsp;<code>n</code>&nbsp;个航班，它们分别从 <code>1</code> 到 <code>n</code> 进行编号。</p> \n<p>有一份航班预订表&nbsp;<code>bookings</code> ，表中第&nbsp;<code>i</code>&nbsp;条预订记录&nbsp;<code>bookings[i] = [first<sub>i</sub>, last<sub>i</sub>, seats<sub>i</sub>]</code>&nbsp;意味着在从 <code>first<sub>i</sub></code>&nbsp;到 <code>last<sub>i</sub></code> （<strong>包含</strong> <code>first<sub>i</sub></code> 和 <code>last<sub>i</sub></code> ）的 <strong>每个航班</strong> 上预订了 <code>seats<sub>i</sub></code>&nbsp;个座位。</p> \n<p>请你返回一个长度为 <code>n</code> 的数组&nbsp;<code>answer</code>，其中 <code>answer[i]</code> 是航班 <code>i</code> 上预订的座位总数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5\n<strong>输出：</strong>[10,55,45,25,25]\n<strong>解释：</strong>\n航班编号        1   2   3   4   5\n预订记录 1 ：   10  10\n预订记录 2 ：       20  20\n预订记录 3 ：       25  25  25  25\n总座位数：      10  55  45  25  25\n因此，answer = [10,55,45,25,25]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>bookings = [[1,2,10],[2,2,15]], n = 2\n<strong>输出：</strong>[10,25]\n<strong>解释：</strong>\n航班编号        1   2\n预订记录 1 ：   10  10\n预订记录 2 ：       15\n总座位数：      10  25\n因此，answer = [10,25]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= bookings.length &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>bookings[i].length == 3</code></li> \n <li><code>1 &lt;= first<sub>i</sub> &lt;= last<sub>i</sub> &lt;= n</code></li> \n <li><code>1 &lt;= seats<sub>i</sub> &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('111. 二叉树的最小深度', '<p>给定一个二叉树，找出其最小深度。</p> \n<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p> \n<p><strong>说明：</strong>叶子节点是指没有子节点的节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 432px; height: 302px;\" src=\"https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [3,9,20,null,null,15,7]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = [2,null,3,null,4,null,5,null,6]\n<strong>输出：</strong>5\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点数的范围在 <code>[0, 10<sup>5</sup>]</code> 内</li> \n <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1110. 删点成林', '<p>给出二叉树的根节点&nbsp;<code>root</code>，树上每个节点都有一个不同的值。</p> \n<p>如果节点值在&nbsp;<code>to_delete</code>&nbsp;中出现，我们就把该节点从树上删去，最后得到一个森林（一些不相交的树构成的集合）。</p> \n<p>返回森林中的每棵树。你可以按任意顺序组织答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<p><strong><img style=\"height: 150px; width: 237px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/07/05/screen-shot-2019-07-01-at-53836-pm.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [1,2,3,4,5,6,7], to_delete = [3,5]\n<strong>输出：</strong>[[1,2,null,4],[6],[7]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中的节点数最大为&nbsp;<code>1000</code>。</li> \n <li>每个节点都有一个介于&nbsp;<code>1</code> 到&nbsp;<code>1000</code>&nbsp;之间的值，且各不相同。</li> \n <li><code>to_delete.length &lt;= 1000</code></li> \n <li><code>to_delete</code> 包含一些从&nbsp;<code>1</code> 到&nbsp;<code>1000</code>、各不相同的值。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1111. 有效括号的嵌套深度', '<p><strong>有效括号字符串 </strong>定义：对于每个左括号，都能找到与之对应的右括号，反之亦然。详情参见题末「<strong>有效括号字符串</strong>」部分。</p> \n<p><strong>嵌套深度</strong> <code>depth</code> 定义：即有效括号字符串嵌套的层数，<code>depth(A)</code> 表示有效括号字符串 <code>A</code> 的嵌套深度。详情参见题末「<strong>嵌套深度</strong>」部分。</p> \n<p>有效括号字符串类型与对应的嵌套深度计算方法如下图所示：</p> \n<p><img style=\"height: 152px; width: 600px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/04/01/1111.png\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p>给你一个「有效括号字符串」 <code>seq</code>，请你将其分成两个不相交的有效括号字符串，<code>A</code> 和&nbsp;<code>B</code>，并使这两个字符串的深度最小。</p> \n<ul> \n <li>不相交：每个 <code>seq[i]</code> 只能分给 <code>A</code> 和 <code>B</code> 二者中的一个，不能既属于 <code>A</code> 也属于 <code>B</code> 。</li> \n <li><code>A</code> 或 <code>B</code> 中的元素在原字符串中可以不连续。</li> \n <li><code>A.length + B.length = seq.length</code></li> \n <li>深度最小：<code>max(depth(A), depth(B))</code>&nbsp;的可能取值最小。&nbsp;</li> \n</ul> \n<p>划分方案用一个长度为 <code>seq.length</code> 的答案数组 <code>answer</code> 表示，编码规则如下：</p> \n<ul> \n <li><code>answer[i] = 0</code>，<code>seq[i]</code> 分给 <code>A</code> 。</li> \n <li><code>answer[i] = 1</code>，<code>seq[i]</code> 分给 <code>B</code> 。</li> \n</ul> \n<p>如果存在多个满足要求的答案，只需返回其中任意 <strong>一个 </strong>即可。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>seq = \"(()())\"\n<strong>输出：</strong>[0,1,1,1,1,0]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>seq = \"()(())()\"\n<strong>输出：</strong>[0,0,0,1,1,0,1,1]\n<strong>解释：</strong>本示例答案不唯一。\n按此输出 A = \"()()\", B = \"()()\", max(depth(A), depth(B)) = 1，它们的深度最小。\n像 [1,1,1,0,0,1,1,1]，也是正确结果，其中 A = \"()()()\", B = \"()\", max(depth(A), depth(B)) = 1 。 \n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;&nbsp;seq.size &lt;= 10000</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>有效括号字符串：</strong></p> \n<pre>仅由&nbsp;<code>\"(\"</code> 和&nbsp;<code>\")\"</code>&nbsp;构成的字符串，对于每个左括号，都能找到与之对应的右括号，反之亦然。\n下述几种情况同样属于有效括号字符串：\n\n  1. 空字符串\n  2. 连接，可以记作&nbsp;<code>AB</code>（<code>A</code> 与 <code>B</code> 连接），其中&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;都是有效括号字符串\n  3. 嵌套，可以记作&nbsp;<code>(A)</code>，其中&nbsp;<code>A</code>&nbsp;是有效括号字符串\n</pre> \n<p><strong>嵌套深度：</strong></p> \n<pre>类似地，我们可以定义任意有效括号字符串 <code>s</code> 的 <strong>嵌套深度</strong>&nbsp;<code>depth(S)</code>：\n\n  1.<code> s</code> 为空时，<code>depth(\"\") = 0</code>\n<code>  2. s</code> 为 <code>A</code> 与 <code>B</code> 连接时，<code>depth(A + B) = max(depth(A), depth(B))</code>，其中&nbsp;<code>A</code> 和&nbsp;<code>B</code>&nbsp;都是有效括号字符串\n<code>  3. s</code> 为嵌套情况，<code>depth(\"(\" + A + \")\") = 1 + depth(A)</code>，其中 <code>A</code> 是有效括号字符串\n\n例如：<code>\"\"</code>，<code>\"()()\"</code>，和&nbsp;<code>\"()(()())\"</code>&nbsp;都是有效括号字符串，嵌套深度分别为 0，1，2，而&nbsp;<code>\")(\"</code> 和&nbsp;<code>\"(()\"</code>&nbsp;都不是有效括号字符串。\n</pre>');
INSERT INTO `leecode` VALUES ('1114. 按序打印', '<p>我们提供了一个类：</p> \n<pre>public class Foo {\n&nbsp; public void first() { print(\"first\"); }\n&nbsp; public void second() { print(\"second\"); }\n&nbsp; public void third() { print(\"third\"); }\n}</pre> \n<p>三个不同的线程 A、B、C 将会共用一个&nbsp;<code>Foo</code>&nbsp;实例。</p> \n<ul> \n <li>一个将会调用 <code>first()</code> 方法</li> \n <li>一个将会调用&nbsp;<code>second()</code> 方法</li> \n <li>还有一个将会调用 <code>third()</code> 方法</li> \n</ul> \n<p>请设计修改程序，以确保 <code>second()</code> 方法在 <code>first()</code> 方法之后被执行，<code>third()</code> 方法在 <code>second()</code> 方法之后被执行。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [1,2,3]\n<strong>输出:</strong> \"firstsecondthird\"\n<strong>解释:</strong> \n有三个线程会被异步启动。\n输入 [1,2,3] 表示线程 A 将会调用 first() 方法，线程 B 将会调用 second() 方法，线程 C 将会调用 third() 方法。\n正确的输出是 \"firstsecondthird\"。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> [1,3,2]\n<strong>输出:</strong> \"firstsecondthird\"\n<strong>解释:</strong> \n输入 [1,3,2] 表示线程 A 将会调用 first() 方法，线程 B 将会调用 third() 方法，线程 C 将会调用 second() 方法。\n正确的输出是 \"firstsecondthird\"。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>尽管输入中的数字似乎暗示了顺序，但是我们并不保证线程在操作系统中的调度顺序。</li> \n <li>你看到的输入格式主要是为了确保测试的全面性。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1115. 交替打印FooBar', '<p>我们提供一个类：</p> \n<pre>class FooBar {\n  public void foo() {\n&nbsp; &nbsp; for (int i = 0; i &lt; n; i++) {\n&nbsp; &nbsp; &nbsp; print(\"foo\");\n&nbsp;   }\n  }\n\n  public void bar() {\n&nbsp; &nbsp; for (int i = 0; i &lt; n; i++) {\n&nbsp; &nbsp; &nbsp; print(\"bar\");\n&nbsp; &nbsp; }\n  }\n}\n</pre> \n<p>两个不同的线程将会共用一个 <code>FooBar</code>&nbsp;实例。其中一个线程将会调用&nbsp;<code>foo()</code>&nbsp;方法，另一个线程将会调用&nbsp;<code>bar()</code>&nbsp;方法。</p> \n<p>请设计修改程序，以确保 \"foobar\" 被输出 n 次。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> n = 1\n<strong>输出:</strong> \"foobar\"\n<strong>解释:</strong> 这里有两个线程被异步启动。其中一个调用 foo() 方法, 另一个调用 bar() 方法，\"foobar\" 将被输出一次。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> n = 2\n<strong>输出:</strong> \"foobarfoobar\"\n<strong>解释:</strong> \"foobar\" 将被输出两次。\n</pre>');
INSERT INTO `leecode` VALUES ('1116. 打印零与奇偶数', '<p>假设有这么一个类：</p> \n<pre>class ZeroEvenOdd {\n&nbsp; public ZeroEvenOdd(int n) { ... }&nbsp;     // 构造函数\n  public void zero(printNumber) { ... }  // 仅打印出 0\n  public void even(printNumber) { ... }  // 仅打印出 偶数\n  public void odd(printNumber) { ... }   // 仅打印出 奇数\n}\n</pre> \n<p>相同的一个&nbsp;<code>ZeroEvenOdd</code>&nbsp;类实例将会传递给三个不同的线程：</p> \n<ol> \n <li>线程 A 将调用&nbsp;<code>zero()</code>，它只输出 0 。</li> \n <li>线程 B 将调用&nbsp;<code>even()</code>，它只输出偶数。</li> \n <li>线程 C 将调用&nbsp;<code>odd()</code>，它只输出奇数。</li> \n</ol> \n<p>每个线程都有一个&nbsp;<code>printNumber</code> 方法来输出一个整数。请修改给出的代码以输出整数序列&nbsp;<code>010203040506</code>... ，其中序列的长度必须为 2<em>n</em>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>\"0102\"\n<strong>说明：</strong>三条线程异步执行，其中一个调用 zero()，另一个线程调用 even()，最后一个线程调用odd()。正确的输出为 \"0102\"。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 5\n<strong>输出：</strong>\"0102030405\"\n</pre>');
INSERT INTO `leecode` VALUES ('1117. H2O 生成', '<p>现在有两种线程，氧 <code>oxygen</code> 和氢 <code>hydrogen</code>，你的目标是组织这两种线程来产生水分子。</p> \n<p>存在一个屏障（barrier）使得每个线程必须等候直到一个完整水分子能够被产生出来。</p> \n<p>氢和氧线程会被分别给予 <code>releaseHydrogen</code> 和 <code>releaseOxygen</code> 方法来允许它们突破屏障。</p> \n<p>这些线程应该三三成组突破屏障并能立即组合产生一个水分子。</p> \n<p>你必须保证产生一个水分子所需线程的结合必须发生在下一个水分子产生之前。</p> \n<p>换句话说:</p> \n<ul> \n <li>如果一个氧线程到达屏障时没有氢线程到达，它必须等候直到两个氢线程到达。</li> \n <li>如果一个氢线程到达屏障时没有其它线程到达，它必须等候直到一个氧线程和另一个氢线程到达。</li> \n</ul> \n<p>书写满足这些限制条件的氢、氧线程同步代码。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>\"HOH\"\n<strong>输出: </strong>\"HHO\"\n<strong>解释:</strong> \"HOH\" 和 \"OHH\" 依然都是有效解。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>\"OOHHHH\"\n<strong>输出: </strong>\"HHOHHO\"\n<strong>解释:</strong> \"HOHHHO\", \"OHHHHO\", \"HHOHOH\", \"HOHHOH\", \"OHHHOH\", \"HHOOHH\", \"HOHOHH\" 和 \"OHHOHH\" 依然都是有效解。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>输入字符串的总长将会是 3<em>n</em>, 1 ≤&nbsp;<em>n</em>&nbsp;≤ 50；</li> \n <li>输入字符串中的 “H” 总数将会是 2n 。</li> \n <li>输入字符串中的 “O” 总数将会是 n 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('112. 路径总和', '<p>给你二叉树的根节点&nbsp;<code>root</code> 和一个表示目标和的整数&nbsp;<code>targetSum</code> ，判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和&nbsp;<code>targetSum</code> 。</p> \n<p><strong>叶子节点</strong> 是指没有子节点的节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 500px; height: 356px;\" src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<img src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,2,3], targetSum = 5\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [1,2], targetSum = 0\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点的数目在范围 <code>[0, 5000]</code> 内</li> \n <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> \n <li><code>-1000 &lt;= targetSum &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1122. 数组的相对排序', '<p>给你两个数组，<code>arr1</code> 和&nbsp;<code>arr2</code>，</p> \n<ul> \n <li><code>arr2</code>&nbsp;中的元素各不相同</li> \n <li><code>arr2</code> 中的每个元素都出现在&nbsp;<code>arr1</code>&nbsp;中</li> \n</ul> \n<p>对 <code>arr1</code>&nbsp;中的元素进行排序，使 <code>arr1</code> 中项的相对顺序和&nbsp;<code>arr2</code>&nbsp;中的相对顺序相同。未在&nbsp;<code>arr2</code>&nbsp;中出现过的元素需要按照升序放在&nbsp;<code>arr1</code>&nbsp;的末尾。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]\n<strong>输出：</strong>[2,2,2,1,4,3,3,9,6,7,19]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr1.length, arr2.length &lt;= 1000</code></li> \n <li><code>0 &lt;= arr1[i], arr2[i] &lt;= 1000</code></li> \n <li><code>arr2</code>&nbsp;中的元素&nbsp;<code>arr2[i]</code>&nbsp;各不相同</li> \n <li><code>arr2</code> 中的每个元素&nbsp;<code>arr2[i]</code>&nbsp;都出现在&nbsp;<code>arr1</code>&nbsp;中</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1123. 最深叶节点的最近公共祖先', '<p>给你一个有根节点的二叉树，找到它最深的叶节点的最近公共祖先。</p> \n<p>回想一下：</p> \n<ul> \n <li><strong>叶节点</strong> 是二叉树中没有子节点的节点</li> \n <li>树的根节点的&nbsp;<strong>深度&nbsp;</strong>为&nbsp;<code>0</code>，如果某一节点的深度为&nbsp;<code>d</code>，那它的子节点的深度就是&nbsp;<code>d+1</code></li> \n <li>如果我们假定 <code>A</code> 是一组节点&nbsp;<code>S</code>&nbsp;的 <strong>最近公共祖先</strong>，<code>S</code>&nbsp;中的每个节点都在以 <code>A</code> 为根节点的子树中，且 <code>A</code>&nbsp;的深度达到此条件下可能的最大值。</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与力扣 865 重复：<a href=\"https://leetcode-cn.com/problems/smallest-subtree-with-all-the-deepest-nodes/\">https://leetcode-cn.com/problems/smallest-subtree-with-all-the-deepest-nodes/</a></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 600px; height: 510px;\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png\" alt=\"\"> \n<pre><strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4]\n<strong>输出：</strong>[2,7,4]\n<strong>解释：</strong>\n我们返回值为 2 的节点，在图中用黄色标记。\n在图中用蓝色标记的是树的最深的节点。\n注意，节点 6、0 和 8 也是叶节点，但是它们的深度是 2 ，而节点 7 和 4 的深度是 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = [1]\n<strong>输出：</strong>[1]\n<strong>解释：</strong>根节点是树中最深的节点，它是它本身的最近公共祖先。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [0,1,3,null,2]\n<strong>输出：</strong>[2]\n<strong>解释：</strong>树中最深的叶节点是 2 ，最近公共祖先是它自己。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>给你的树中将有&nbsp;1 到 1000 个节点。</li> \n <li>树中每个节点的值都在 1 到 1000 之间。</li> \n <li>每个节点的值都是独一无二的。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1124. 表现良好的最长时间段', '<p>给你一份工作时间表&nbsp;<code>hours</code>，上面记录着某一位员工每天的工作小时数。</p> \n<p>我们认为当员工一天中的工作小时数大于&nbsp;<code>8</code> 小时的时候，那么这一天就是「<strong>劳累的一天</strong>」。</p> \n<p>所谓「表现良好的时间段」，意味在这段时间内，「劳累的天数」是严格<strong> 大于</strong>「不劳累的天数」。</p> \n<p>请你返回「表现良好时间段」的最大长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>hours = [9,9,6,0,6,6,9]\n<strong>输出：</strong>3\n<strong>解释：</strong>最长的表现良好时间段是 [9,9,6]。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= hours.length &lt;= 10000</code></li> \n <li><code>0 &lt;= hours[i] &lt;= 16</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1125. 最小的必要团队', '<p>作为项目经理，你规划了一份需求的技能清单&nbsp;<code>req_skills</code>，并打算从备选人员名单&nbsp;<code>people</code>&nbsp;中选出些人组成一个「必要团队」（ 编号为&nbsp;<code>i</code>&nbsp;的备选人员&nbsp;<code>people[i]</code>&nbsp;含有一份该备选人员掌握的技能列表）。</p> \n<p>所谓「必要团队」，就是在这个团队中，对于所需求的技能列表&nbsp;<code>req_skills</code> 中列出的每项技能，团队中至少有一名成员已经掌握。可以用每个人的编号来表示团队中的成员：</p> \n<ul> \n <li>例如，团队&nbsp;<code>team = [0, 1, 3]</code>&nbsp;表示掌握技能分别为&nbsp;<code>people[0]</code>，<code>people[1]</code>，和&nbsp;<code>people[3]</code>&nbsp;的备选人员。</li> \n</ul> \n<p>请你返回 <strong>任一</strong>&nbsp;规模最小的必要团队，团队成员用人员编号表示。你可以按 <strong>任意顺序</strong> 返回答案，题目数据保证答案存在。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]\n<strong>输出：</strong>[0,2]\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]]\n<strong>输出：</strong>[1,2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= req_skills.length &lt;= 16</code></li> \n <li><code>1 &lt;= req_skills[i].length &lt;= 16</code></li> \n <li><code>req_skills[i]</code> 由小写英文字母组成</li> \n <li><code>req_skills</code> 中的所有字符串 <strong>互不相同</strong></li> \n <li><code>1 &lt;= people.length &lt;= 60</code></li> \n <li><code>0 &lt;= people[i].length &lt;= 16</code></li> \n <li><code>1 &lt;= people[i][j].length &lt;= 16</code></li> \n <li><code>people[i][j]</code> 由小写英文字母组成</li> \n <li><code>people[i]</code> 中的所有字符串 <strong>互不相同</strong></li> \n <li><code>people[i]</code> 中的每个技能是 <code>req_skills</code> 中的技能</li> \n <li>题目数据保证「必要团队」一定存在</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1128. 等价多米诺骨牌对的数量', '<p>给你一个由一些多米诺骨牌组成的列表&nbsp;<code>dominoes</code>。</p> \n<p>如果其中某一张多米诺骨牌可以通过旋转 <code>0</code>&nbsp;度或 <code>180</code> 度得到另一张多米诺骨牌，我们就认为这两张牌是等价的。</p> \n<p>形式上，<code>dominoes[i] = [a, b]</code>&nbsp;和&nbsp;<code>dominoes[j] = [c, d]</code>&nbsp;等价的前提是&nbsp;<code>a==c</code>&nbsp;且&nbsp;<code>b==d</code>，或是&nbsp;<code>a==d</code> 且&nbsp;<code>b==c</code>。</p> \n<p>在&nbsp;<code>0 &lt;= i &lt; j &lt; dominoes.length</code>&nbsp;的前提下，找出满足&nbsp;<code>dominoes[i]</code> 和&nbsp;<code>dominoes[j]</code>&nbsp;等价的骨牌对 <code>(i, j)</code> 的数量。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>dominoes = [[1,2],[2,1],[3,4],[5,6]]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= dominoes.length &lt;= 40000</code></li> \n <li><code>1 &lt;= dominoes[i][j] &lt;= 9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1129. 颜色交替的最短路径', '<p>在一个有向图中，节点分别标记为&nbsp;<code>0, 1, ..., n-1</code>。这个图中的每条边不是红色就是蓝色，且存在自环或平行边。</p> \n<p><code>red_edges</code>&nbsp;中的每一个&nbsp;<code>[i, j]</code>&nbsp;对表示从节点 <code>i</code> 到节点 <code>j</code> 的红色有向边。类似地，<code>blue_edges</code>&nbsp;中的每一个&nbsp;<code>[i, j]</code>&nbsp;对表示从节点 <code>i</code> 到节点 <code>j</code> 的蓝色有向边。</p> \n<p>返回长度为 <code>n</code> 的数组&nbsp;<code>answer</code>，其中&nbsp;<code>answer[X]</code>&nbsp;是从节点&nbsp;<code>0</code>&nbsp;到节点&nbsp;<code>X</code>&nbsp;的红色边和蓝色边交替出现的最短路径的长度。如果不存在这样的路径，那么 <code>answer[x] = -1</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 3, red_edges = [[0,1],[1,2]], blue_edges = []\n<strong>输出：</strong>[0,1,-1]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]\n<strong>输出：</strong>[0,1,-1]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]\n<strong>输出：</strong>[0,-1,-1]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]\n<strong>输出：</strong>[0,1,2]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]\n<strong>输出：</strong>[0,1,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>red_edges.length &lt;= 400</code></li> \n <li><code>blue_edges.length &lt;= 400</code></li> \n <li><code>red_edges[i].length == blue_edges[i].length == 2</code></li> \n <li><code>0 &lt;= red_edges[i][j], blue_edges[i][j] &lt; n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('113. 路径总和 II', '<p>给你二叉树的根节点 <code>root</code> 和一个整数目标和 <code>targetSum</code> ，找出所有 <strong>从根节点到叶子节点</strong> 路径总和等于给定目标和的路径。</p> \n<p><strong>叶子节点</strong> 是指没有子节点的节点。</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <img style=\"width: 500px; height: 356px;\" src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n<strong>输出：</strong>[[5,4,11,2],[5,8,4,5]]\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <img style=\"width: 212px; height: 181px;\" src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>root = [1,2,3], targetSum = 5\n<strong>输出：</strong>[]\n</pre> \n  <p><strong>示例 3：</strong></p> \n  <pre><strong>输入：</strong>root = [1,2], targetSum = 0\n<strong>输出：</strong>[]\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li>树中节点总数在范围 <code>[0, 5000]</code> 内</li> \n   <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> \n   <li><code>-1000 &lt;= targetSum &lt;= 1000</code></li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('1130. 叶值的最小代价生成树', '<p>给你一个正整数数组&nbsp;<code>arr</code>，考虑所有满足以下条件的二叉树：</p> \n<ul> \n <li>每个节点都有 0 个或是 2 个子节点。</li> \n <li>数组&nbsp;<code>arr</code>&nbsp;中的值与树的中序遍历中每个叶节点的值一一对应。（知识回顾：如果一个节点有 0 个子节点，那么该节点为叶节点。）</li> \n <li>每个非叶节点的值等于其左子树和右子树中叶节点的最大值的乘积。</li> \n</ul> \n<p>在所有这样的二叉树中，返回每个非叶节点的值的最小可能总和。这个和的值是一个&nbsp;32 位整数。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>arr = [6,2,4]\n<strong>输出：</strong>32\n<strong>解释：</strong>\n有两种可能的树，第一种的非叶节点的总和为 36，第二种非叶节点的总和为 32。\n\n    24            24\n   /  \\          /  \\\n  12   4        6    8\n /  \\               / \\\n6    2             2   4</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= arr.length &lt;= 40</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 15</code></li> \n <li>答案保证是一个 32 位带符号整数，即小于&nbsp;<code>2^31</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1131. 绝对值表达式的最大值', '<p>给你两个长度相等的整数数组，返回下面表达式的最大值：</p> \n<p><code>|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|</code></p> \n<p>其中下标 <code>i</code>，<code>j</code> 满足&nbsp;<code>0 &lt;= i, j &lt; arr1.length</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr1 = [1,2,3,4], arr2 = [-1,4,5,6]\n<strong>输出：</strong>13\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]\n<strong>输出：</strong>20</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= arr1.length == arr2.length &lt;= 40000</code></li> \n <li><code>-10^6 &lt;= arr1[i], arr2[i] &lt;= 10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1137. 第 N 个泰波那契数', '<p>泰波那契序列&nbsp;T<sub>n</sub>&nbsp;定义如下：&nbsp;</p> \n<p>T<sub>0</sub> = 0, T<sub>1</sub> = 1, T<sub>2</sub> = 1, 且在 n &gt;= 0&nbsp;的条件下 T<sub>n+3</sub> = T<sub>n</sub> + T<sub>n+1</sub> + T<sub>n+2</sub></p> \n<p>给你整数&nbsp;<code>n</code>，请返回第 n 个泰波那契数&nbsp;T<sub>n </sub>的值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 4\n<strong>输出：</strong>4\n<strong>解释：</strong>\nT_3 = 0 + 1 + 1 = 2\nT_4 = 1 + 1 + 2 = 4\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 25\n<strong>输出：</strong>1389537\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= n &lt;= 37</code></li> \n <li>答案保证是一个 32 位整数，即&nbsp;<code>answer &lt;= 2^31 - 1</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1138. 字母板上的路径', '<p>我们从一块字母板上的位置&nbsp;<code>(0, 0)</code>&nbsp;出发，该坐标对应的字符为&nbsp;<code>board[0][0]</code>。</p> \n<p>在本题里，字母板为<code>board = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"]</code>，如下所示。</p> \n<p><img style=\"width: 300px;\" src=\"https://assets.leetcode.com/uploads/2019/07/28/azboard.png\" alt=\"\"></p> \n<p>我们可以按下面的指令规则行动：</p> \n<ul> \n <li>如果方格存在，<code>\'U\'</code>&nbsp;意味着将我们的位置上移一行；</li> \n <li>如果方格存在，<code>\'D\'</code>&nbsp;意味着将我们的位置下移一行；</li> \n <li>如果方格存在，<code>\'L\'</code>&nbsp;意味着将我们的位置左移一列；</li> \n <li>如果方格存在，<code>\'R\'</code>&nbsp;意味着将我们的位置右移一列；</li> \n <li><code>\'!\'</code>&nbsp;会把在我们当前位置 <code>(r, c)</code> 的字符&nbsp;<code>board[r][c]</code>&nbsp;添加到答案中。</li> \n</ul> \n<p>（注意，字母板上只存在有字母的位置。）</p> \n<p>返回指令序列，用最小的行动次数让答案和目标&nbsp;<code>target</code>&nbsp;相同。你可以返回任何达成目标的路径。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>target = \"leet\"\n<strong>输出：</strong>\"DDR!UURRR!!DDD!\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>target = \"code\"\n<strong>输出：</strong>\"RR!DDRR!UUL!R!\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= target.length &lt;= 100</code></li> \n <li><code>target</code>&nbsp;仅含有小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1139. 最大的以 1 为边界的正方形', '<p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的二维网格&nbsp;<code>grid</code>，请你找出边界全部由 <code>1</code> 组成的最大 <strong>正方形</strong> 子网格，并返回该子网格中的元素数量。如果不存在，则返回 <code>0</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,1,1],[1,0,1],[1,1,1]]\n<strong>输出：</strong>9\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,1,0,0]]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= grid.length &lt;= 100</code></li> \n <li><code>1 &lt;= grid[0].length &lt;= 100</code></li> \n <li><code>grid[i][j]</code> 为&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('114. 二叉树展开为链表', '<p>给你二叉树的根结点 <code>root</code> ，请你将它展开为一个单链表：</p> \n<ul> \n <li>展开后的单链表应该同样使用 <code>TreeNode</code> ，其中 <code>right</code> 子指针指向链表中下一个结点，而左子指针始终为 <code>null</code> 。</li> \n <li>展开后的单链表应该与二叉树 <a href=\"https://baike.baidu.com/item/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/6442839?fr=aladdin\"><strong>先序遍历</strong></a> 顺序相同。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 500px; height: 226px;\" src=\"https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,2,5,3,4,null,6]\n<strong>输出：</strong>[1,null,2,null,3,null,4,null,5,null,6]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = []\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [0]\n<strong>输出：</strong>[0]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中结点数在范围 <code>[0, 2000]</code> 内</li> \n <li><code>-100 &lt;= Node.val &lt;= 100</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你可以使用原地算法（<code>O(1)</code> 额外空间）展开这棵树吗？</p>');
INSERT INTO `leecode` VALUES ('1140. 石子游戏 II', '<p>亚历克斯和李继续他们的石子游戏。许多堆石子&nbsp;<strong>排成一行</strong>，每堆都有正整数颗石子&nbsp;<code>piles[i]</code>。游戏以谁手中的石子最多来决出胜负。</p> \n<p>亚历克斯和李轮流进行，亚历克斯先开始。最初，<code>M = 1</code>。</p> \n<p>在每个玩家的回合中，该玩家可以拿走剩下的&nbsp;<strong>前</strong>&nbsp;<code>X</code>&nbsp;堆的所有石子，其中&nbsp;<code>1 &lt;= X &lt;= 2M</code>。然后，令&nbsp;<code>M = max(M, X)</code>。</p> \n<p>游戏一直持续到所有石子都被拿走。</p> \n<p>假设亚历克斯和李都发挥出最佳水平，返回亚历克斯可以得到的最大数量的石头。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>piles = [2,7,9,4,4]\n<strong>输出：</strong>10\n<strong>解释：\n</strong>如果亚历克斯在开始时拿走一堆石子，李拿走两堆，接着亚历克斯也拿走两堆。在这种情况下，亚历克斯可以拿到 2 + 4 + 4 = 10 颗石子。 \n如果亚历克斯在开始时拿走两堆石子，那么李就可以拿走剩下全部三堆石子。在这种情况下，亚历克斯可以拿到 2 + 7 = 9 颗石子。\n所以我们返回更大的 10。 \n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= piles.length &lt;= 100</code></li> \n <li><code>1 &lt;= piles[i]&nbsp;&lt;= 10 ^ 4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1143. 最长公共子序列', '<p>给定两个字符串&nbsp;<code>text1</code> 和&nbsp;<code>text2</code>，返回这两个字符串的最长 <strong>公共子序列</strong> 的长度。如果不存在 <strong>公共子序列</strong> ，返回 <code>0</code> 。</p> \n<p>一个字符串的&nbsp;<strong>子序列</strong><em>&nbsp;</em>是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p> \n<ul> \n <li>例如，<code>\"ace\"</code> 是 <code>\"abcde\"</code> 的子序列，但 <code>\"aec\"</code> 不是 <code>\"abcde\"</code> 的子序列。</li> \n</ul> \n<p>两个字符串的 <strong>公共子序列</strong> 是这两个字符串所共同拥有的子序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>text1 = \"abcde\", text2 = \"ace\" \n<strong>输出：</strong>3  \n<strong>解释：</strong>最长公共子序列是 \"ace\" ，它的长度为 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>text1 = \"abc\", text2 = \"abc\"\n<strong>输出：</strong>3\n<strong>解释：</strong>最长公共子序列是 \"abc\" ，它的长度为 3 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>text1 = \"abc\", text2 = \"def\"\n<strong>输出：</strong>0\n<strong>解释：</strong>两个字符串没有公共子序列，返回 0 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li> \n <li><code>text1</code> 和&nbsp;<code>text2</code> 仅由小写英文字符组成。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1144. 递减元素使数组呈锯齿状', '<p>给你一个整数数组&nbsp;<code>nums</code>，每次 <strong>操作</strong>&nbsp;会从中选择一个元素并 <strong>将该元素的值减少&nbsp;1</strong>。</p> \n<p>如果符合下列情况之一，则数组&nbsp;<code>A</code>&nbsp;就是 <strong>锯齿数组</strong>：</p> \n<ul> \n <li>每个偶数索引对应的元素都大于相邻的元素，即&nbsp;<code>A[0] &gt; A[1] &lt; A[2] &gt; A[3] &lt; A[4] &gt; ...</code></li> \n <li>或者，每个奇数索引对应的元素都大于相邻的元素，即&nbsp;<code>A[0] &lt; A[1] &gt; A[2] &lt; A[3] &gt; A[4] &lt; ...</code></li> \n</ul> \n<p>返回将数组&nbsp;<code>nums</code>&nbsp;转换为锯齿数组所需的最小操作次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3]\n<strong>输出：</strong>2\n<strong>解释：</strong>我们可以把 2 递减到 0，或把 3 递减到 1。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [9,6,1,6,2]\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 1000</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1145. 二叉树着色游戏', '<p>有两位极客玩家参与了一场「二叉树着色」的游戏。游戏中，给出二叉树的根节点&nbsp;<code>root</code>，树上总共有 <code>n</code> 个节点，且 <code>n</code> 为奇数，其中每个节点上的值从&nbsp;<code>1</code> 到&nbsp;<code>n</code>&nbsp;各不相同。</p> \n<p>&nbsp;</p> \n<p>游戏从「一号」玩家开始（「一号」玩家为红色，「二号」玩家为蓝色），最开始时，</p> \n<p>「一号」玩家从 <code>[1, n]</code>&nbsp;中取一个值&nbsp;<code>x</code>（<code>1 &lt;= x &lt;= n</code>）；</p> \n<p>「二号」玩家也从&nbsp;<code>[1, n]</code>&nbsp;中取一个值&nbsp;<code>y</code>（<code>1 &lt;= y &lt;= n</code>）且&nbsp;<code>y != x</code>。</p> \n<p>「一号」玩家给值为&nbsp;<code>x</code>&nbsp;的节点染上红色，而「二号」玩家给值为&nbsp;<code>y</code>&nbsp;的节点染上蓝色。</p> \n<p>&nbsp;</p> \n<p>之后两位玩家轮流进行操作，每一回合，玩家选择一个他之前涂好颜色的节点，将所选节点一个 <strong>未着色 </strong>的邻节点（即左右子节点、或父节点）进行染色。</p> \n<p>如果当前玩家无法找到这样的节点来染色时，他的回合就会被跳过。</p> \n<p>若两个玩家都没有可以染色的节点时，游戏结束。着色节点最多的那位玩家获得胜利 ✌️。</p> \n<p>&nbsp;</p> \n<p>现在，假设你是「二号」玩家，根据所给出的输入，假如存在一个&nbsp;<code>y</code>&nbsp;值可以确保你赢得这场游戏，则返回&nbsp;<code>true</code>；若无法获胜，就请返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<p><strong><img style=\"height: 186px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/08/04/1480-binary-tree-coloring-game.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3\n<strong>输出：</strong>True\n<strong>解释：</strong>第二个玩家可以选择值为 2 的节点。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>二叉树的根节点为&nbsp;<code>root</code>，树上由 <code>n</code> 个节点，节点上的值从 <code>1</code> 到 <code>n</code> 各不相同。</li> \n <li><code>n</code> 为奇数。</li> \n <li><code>1 &lt;= x &lt;= n&nbsp;&lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1146. 快照数组', '<p>实现支持下列接口的「快照数组」-&nbsp;SnapshotArray：</p> \n<ul> \n <li><code>SnapshotArray(int length)</code>&nbsp;- 初始化一个与指定长度相等的 类数组 的数据结构。<strong>初始时，每个元素都等于</strong><strong>&nbsp;0</strong>。</li> \n <li><code>void set(index, val)</code>&nbsp;- 会将指定索引&nbsp;<code>index</code>&nbsp;处的元素设置为&nbsp;<code>val</code>。</li> \n <li><code>int snap()</code>&nbsp;- 获取该数组的快照，并返回快照的编号&nbsp;<code>snap_id</code>（快照号是调用&nbsp;<code>snap()</code>&nbsp;的总次数减去&nbsp;<code>1</code>）。</li> \n <li><code>int get(index, snap_id)</code>&nbsp;- 根据指定的&nbsp;<code>snap_id</code>&nbsp;选择快照，并返回该快照指定索引 <code>index</code>&nbsp;的值。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]\n     [[3],[0,5],[],[0,6],[0,0]]\n<strong>输出：</strong>[null,null,0,null,5]\n<strong>解释：\n</strong>SnapshotArray snapshotArr = new SnapshotArray(3); // 初始化一个长度为 3 的快照数组\nsnapshotArr.set(0,5);  // 令 array[0] = 5\nsnapshotArr.snap();  // 获取快照，返回 snap_id = 0\nsnapshotArr.set(0,6);\nsnapshotArr.get(0,0);  // 获取 snap_id = 0 的快照中 array[0] 的值，返回 5</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= length&nbsp;&lt;= 50000</code></li> \n <li>题目最多进行<code>50000</code> 次<code>set</code>，<code>snap</code>，和&nbsp;<code>get</code>的调用 。</li> \n <li><code>0 &lt;= index&nbsp;&lt;&nbsp;length</code></li> \n <li><code>0 &lt;=&nbsp;snap_id &lt;&nbsp;</code>我们调用&nbsp;<code>snap()</code>&nbsp;的总次数</li> \n <li><code>0 &lt;=&nbsp;val &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1147. 段式回文', '<p>段式回文 其实与 一般回文 类似，只不过是最小的单位是 一段字符&nbsp;而不是 单个字母。</p> \n<p>举个例子，对于一般回文 \"<code>abcba</code>\" 是回文，而 \"<code>volvo</code>\" 不是，但如果我们把&nbsp;\"<code>volvo</code>\" 分为 \"<code>vo</code>\"、\"<code>l</code>\"、\"<code>vo</code>\" 三段，则可以认为 “<code>(vo)(l)(vo)</code>” 是段式回文（分为 3 段）。</p> \n<p>&nbsp;</p> \n<p>给你一个字符串&nbsp;<code>text</code>，在确保它满足段式回文的前提下，请你返回 <strong>段</strong> 的&nbsp;<strong>最大数量</strong>&nbsp;<code>k</code>。</p> \n<p>如果段的最大数量为&nbsp;<code>k</code>，那么存在满足以下条件的&nbsp;<code>a_1, a_2, ..., a_k</code>：</p> \n<ul> \n <li>每个&nbsp;<code>a_i</code>&nbsp;都是一个非空字符串；</li> \n <li>将这些字符串首位相连的结果&nbsp;<code>a_1 + a_2 + ... + a_k</code>&nbsp;和原始字符串&nbsp;<code>text</code>&nbsp;相同；</li> \n <li>对于所有<code>1 &lt;= i &lt;= k</code>，都有&nbsp;<code>a_i = a_{k+1 - i}</code>。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>text = \"ghiabcdefhelloadamhelloabcdefghi\"\n<strong>输出：</strong>7\n<strong>解释：</strong>我们可以把字符串拆分成 \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\"。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>text = \"merchant\"\n<strong>输出：</strong>1\n<strong>解释：</strong>我们可以把字符串拆分成 \"(merchant)\"。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>text = \"antaprezatepzapreanta\"\n<strong>输出：</strong>11\n<strong>解释：</strong>我们可以把字符串拆分成 \"(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)\"。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>text = \"aaa\"\n<strong>输出：</strong>3\n<strong>解释：</strong>我们可以把字符串拆分成 \"(a)(a)(a)\"。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>text</code>&nbsp;仅由小写英文字符组成。</li> \n <li><code>1 &lt;= text.length &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('115. 不同的子序列', '<p>给定一个字符串 <code>s</code><strong> </strong>和一个字符串 <code>t</code> ，计算在 <code>s</code> 的子序列中 <code>t</code> 出现的个数。</p> \n<p>字符串的一个 <strong>子序列</strong> 是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，<code>\"ACE\"</code>&nbsp;是&nbsp;<code>\"ABCDE\"</code>&nbsp;的一个子序列，而&nbsp;<code>\"AEC\"</code>&nbsp;不是）</p> \n<p>题目数据保证答案符合 32 位带符号整数范围。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>s = \"rabbbit\", t = \"rabbit\"<code>\n<strong>输出</strong></code><strong>：</strong><code>3\n</code><strong>解释：</strong>\n如下图所示, 有 3 种可以从 s 中得到 <code>\"rabbit\" 的方案</code>。\n<code><strong><u>rabb</u></strong>b<strong><u>it</u></strong></code>\n<code><strong><u>ra</u></strong>b<strong><u>bbit</u></strong></code>\n<code><strong><u>rab</u></strong>b<strong><u>bit</u></strong></code></pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>s = \"babgbag\", t = \"bag\"\n<code><strong>输出</strong></code><strong>：</strong><code>5\n</code><strong>解释：</strong>\n如下图所示, 有 5 种可以从 s 中得到 <code>\"bag\" 的方案</code>。 \n<code><strong><u>ba</u></strong>b<u><strong>g</strong></u>bag</code>\n<code><strong><u>ba</u></strong>bgba<strong><u>g</u></strong></code>\n<code><u><strong>b</strong></u>abgb<strong><u>ag</u></strong></code>\n<code>ba<u><strong>b</strong></u>gb<u><strong>ag</strong></u></code>\n<code>babg<strong><u>bag</u></strong></code>\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s.length, t.length &lt;= 1000</code></li> \n <li><code>s</code> 和 <code>t</code> 由英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1154. 一年中的第几天', '<p>给你一个按 <code>YYYY-MM-DD</code> 格式表示日期的字符串&nbsp;<code>date</code>，请你计算并返回该日期是当年的第几天。</p> \n<p>通常情况下，我们认为 1 月 1 日是每年的第 1 天，1 月 2 日是每年的第 2 天，依此类推。每个月的天数与现行公元纪年法（格里高利历）一致。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>date = \"2019-01-09\"\n<strong>输出：</strong>9\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>date = \"2019-02-10\"\n<strong>输出：</strong>41\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>date = \"2003-03-01\"\n<strong>输出：</strong>60\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>date = \"2004-03-01\"\n<strong>输出：</strong>61</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>date.length == 10</code></li> \n <li><code>date[4] == date[7] == \'-\'</code>，其他的&nbsp;<code>date[i]</code>&nbsp;都是数字。</li> \n <li><code>date</code> 表示的范围从 1900 年 1 月 1 日至 2019 年 12 月 31 日。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1155. 掷骰子的N种方法', '<p>这里有&nbsp;<code>d</code>&nbsp;个一样的骰子，每个骰子上都有&nbsp;<code>f</code>&nbsp;个面，分别标号为&nbsp;<code>1, 2, ..., f</code>。</p> \n<p>我们约定：掷骰子的得到总点数为各骰子面朝上的数字的总和。</p> \n<p>如果需要掷出的总点数为&nbsp;<code>target</code>，请你计算出有多少种不同的组合情况（所有的组合情况总共有 <code>f^d</code> 种），<strong>模&nbsp;<code>10^9 + 7</code></strong>&nbsp;后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>d = 1, f = 6, target = 3\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>d = 2, f = 6, target = 7\n<strong>输出：</strong>6\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>d = 2, f = 5, target = 10\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>d = 1, f = 2, target = 3\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>d = 30, f = 30, target = 500\n<strong>输出：</strong>222616187</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= d, f &lt;= 30</code></li> \n <li><code>1 &lt;= target &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1156. 单字符重复子串的最大长度', '<p>如果字符串中的所有字符都相同，那么这个字符串是单字符重复的字符串。</p> \n<p>给你一个字符串&nbsp;<code>text</code>，你只能交换其中两个字符一次或者什么都不做，然后得到一些单字符重复的子串。返回其中最长的子串的长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>text = \"ababa\"\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>text = \"aaabaaa\"\n<strong>输出：</strong>6\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>text = \"aaabbaaa\"\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>text = \"aaaaa\"\n<strong>输出：</strong>5\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>text = \"abcdef\"\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= text.length &lt;= 20000</code></li> \n <li><code>text</code> 仅由小写英文字母组成。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1157. 子数组中占绝大多数的元素', '<p>实现一个&nbsp;<code>MajorityChecker</code>&nbsp;的类，它应该具有下述几个 API：</p> \n<ul> \n <li><code>MajorityChecker(int[] arr)</code>&nbsp;会用给定的数组 <code>arr</code>&nbsp;来构造一个 <code>MajorityChecker</code> 的实例。</li> \n <li><code>int query(int left, int right, int threshold)</code>&nbsp;有这么几个参数： \n  <ul> \n   <li><code>0 &lt;= left&nbsp;&lt;= right&nbsp;&lt; arr.length</code> 表示数组&nbsp;<code>arr</code>&nbsp;的子数组的长度。</li> \n   <li><code>2 * threshold &gt; right - left + 1</code>，也就是说阈值 <code>threshold</code>&nbsp;始终比子序列长度的一半还要大。</li> \n  </ul> </li> \n</ul> \n<p>每次查询&nbsp;<code>query(...)</code>&nbsp;会返回在&nbsp;<code>arr[left], arr[left+1], ..., arr[right]</code>&nbsp;中至少出现阈值次数&nbsp;<code>threshold</code>&nbsp;的元素，如果不存在这样的元素，就返回&nbsp;<code>-1</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre>MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);\nmajorityChecker.query(0,5,4); // 返回 1\nmajorityChecker.query(0,3,3); // 返回 -1\nmajorityChecker.query(2,3,2); // 返回 2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;=&nbsp;20000</code></li> \n <li><code>1 &lt;= arr[i]&nbsp;&lt;=&nbsp;20000</code></li> \n <li>对于每次查询，<code>0 &lt;= left &lt;= right &lt; len(arr)</code></li> \n <li>对于每次查询，<code>2 * threshold &gt; right - left + 1</code></li> \n <li>查询次数最多为 <code>10000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('116. 填充每个节点的下一个右侧节点指针', '<p>给定一个&nbsp;<strong>完美二叉树&nbsp;</strong>，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：</p> \n<pre>struct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}</pre> \n<p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 <code>NULL</code>。</p> \n<p>初始状态下，所有&nbsp;next 指针都被设置为 <code>NULL</code>。</p> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你只能使用常量级额外空间。</li> \n <li>使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<p><img style=\"height: 205px; width: 600px;\" src=\"https://assets.leetcode.com/uploads/2019/02/14/116_sample.png\" alt=\"\"></p> \n<pre><b>输入：</b>root = [1,2,3,4,5,6,7]\n<b>输出：</b>[1,#,2,3,#,4,5,6,7,#]\n<b>解释：</b>给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。序列化的输出按层序遍历排列，同一层节点由 next 指针连接，\'#\' 标志着每一层的结束。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点的数量少于&nbsp;<code>4096</code></li> \n <li><code>-1000 &lt;= node.val &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1160. 拼写单词', '<p>给你一份『词汇表』（字符串数组）&nbsp;<code>words</code>&nbsp;和一张『字母表』（字符串）&nbsp;<code>chars</code>。</p> \n<p>假如你可以用&nbsp;<code>chars</code>&nbsp;中的『字母』（字符）拼写出 <code>words</code>&nbsp;中的某个『单词』（字符串），那么我们就认为你掌握了这个单词。</p> \n<p>注意：每次拼写（指拼写词汇表中的一个单词）时，<code>chars</code> 中的每个字母都只能用一次。</p> \n<p>返回词汇表&nbsp;<code>words</code>&nbsp;中你掌握的所有单词的 <strong>长度之和</strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"\n<strong>输出：</strong>6\n<strong>解释： </strong>\n可以形成字符串 \"cat\" 和 \"hat\"，所以答案是 3 + 3 = 6。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"\n<strong>输出：</strong>10\n<strong>解释：</strong>\n可以形成字符串 \"hello\" 和 \"world\"，所以答案是 5 + 5 = 10。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= words.length &lt;= 1000</code></li> \n <li><code>1 &lt;= words[i].length, chars.length&nbsp;&lt;= 100</code></li> \n <li>所有字符串中都仅包含小写英文字母</li> \n</ol>');
INSERT INTO `leecode` VALUES ('1161. 最大层内元素和', '<p>给你一个二叉树的根节点&nbsp;<code>root</code>。设根节点位于二叉树的第 <code>1</code> 层，而根节点的子节点位于第 <code>2</code> 层，依此类推。</p> \n<p>请你找出层内元素之和 <strong>最大</strong> 的那几层（可能只有一层）的层号，并返回其中&nbsp;<strong>最小</strong> 的那个。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 175px; width: 200px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/08/17/capture.jpeg\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [1,7,0,7,-8,null,null]\n<strong>输出：</strong>2\n<strong>解释：</strong>\n第 1 层各元素之和为 1，\n第 2 层各元素之和为 7 + 0 = 7，\n第 3 层各元素之和为 7 + -8 = -1，\n所以我们返回第 2 层的层号，它的层内元素之和最大。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = [989,null,10250,98693,-89388,null,null,null,-32127]\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中的节点数介于&nbsp;<code>1</code>&nbsp;和&nbsp;<code>10^4</code>&nbsp;之间</li> \n <li><code>-10^5 &lt;= node.val &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1162. 地图分析', '<p>你现在手里有一份大小为&nbsp;N x N 的 网格 <code>grid</code>，上面的每个 单元格 都用&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;标记好了。其中&nbsp;<code>0</code>&nbsp;代表海洋，<code>1</code>&nbsp;代表陆地，请你找出一个海洋单元格，这个海洋单元格到离它最近的陆地单元格的距离是最大的。</p> \n<p>我们这里说的距离是「曼哈顿距离」（&nbsp;Manhattan Distance）：<code>(x0, y0)</code> 和&nbsp;<code>(x1, y1)</code>&nbsp;这两个单元格之间的距离是&nbsp;<code>|x0 - x1| + |y0 - y1|</code>&nbsp;。</p> \n<p>如果网格上只有陆地或者海洋，请返回&nbsp;<code>-1</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 87px; width: 185px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/08/17/1336_ex1.jpeg\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>[[1,0,1],[0,0,0],[1,0,1]]\n<strong>输出：</strong>2\n<strong>解释： </strong>\n海洋单元格 (1, 1) 和所有陆地单元格之间的距离都达到最大，最大距离为 2。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 87px; width: 184px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/08/17/1336_ex2.jpeg\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>[[1,0,0],[0,0,0],[0,0,0]]\n<strong>输出：</strong>4\n<strong>解释： </strong>\n海洋单元格 (2, 2) 和所有陆地单元格之间的距离都达到最大，最大距离为 4。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= grid.length == grid[0].length&nbsp;&lt;= 100</code></li> \n <li><code>grid[i][j]</code>&nbsp;不是&nbsp;<code>0</code>&nbsp;就是&nbsp;<code>1</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('1163. 按字典序排在最后的子串', '<p>给你一个字符串&nbsp;<code>s</code>，找出它的所有子串并按字典序排列，返回排在最后的那个子串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\"abab\"\n<strong>输出：</strong>\"bab\"\n<strong>解释：</strong>我们可以找出 7 个子串 [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]。按字典序排在最后的子串是 \"bab\"。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>\"leetcode\"\n<strong>输出：</strong>\"tcode\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= s.length &lt;= 4 * 10^5</code></li> \n <li>s 仅含有小写英文字符。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('1169. 查询无效交易', '<p>如果出现下述两种情况，交易 <strong>可能无效</strong>：</p> \n<ul> \n <li>交易金额超过 ¥1000</li> \n <li>或者，它和另一个城市中同名的另一笔交易相隔不超过 60 分钟（包含 60 分钟整）</li> \n</ul> \n<p>每个交易字符串&nbsp;<code>transactions[i]</code>&nbsp;由一些用逗号分隔的值组成，这些值分别表示交易的名称，时间（以分钟计），金额以及城市。</p> \n<p>给你一份交易清单&nbsp;<code>transactions</code>，返回可能无效的交易列表。你可以按任何顺序返回答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\n<strong>输出：</strong>[\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\n<strong>解释：</strong>第一笔交易是无效的，因为第二笔交易和它间隔不超过 60 分钟、名称相同且发生在不同的城市。同样，第二笔交易也是无效的。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]\n<strong>输出：</strong>[\"alice,50,1200,mtv\"]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]\n<strong>输出：</strong>[\"bob,50,1200,mtv\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>transactions.length &lt;= 1000</code></li> \n <li>每笔交易&nbsp;<code>transactions[i]</code>&nbsp;按&nbsp;<code>\"{name},{time},{amount},{city}\"</code>&nbsp;的格式进行记录</li> \n <li>每个交易名称&nbsp;<code>{name}</code>&nbsp;和城市&nbsp;<code>{city}</code>&nbsp;都由小写英文字母组成，长度在&nbsp;<code>1</code>&nbsp;到&nbsp;<code>10</code>&nbsp;之间</li> \n <li>每个交易时间&nbsp;<code>{time}</code>&nbsp;由一些数字组成，表示一个&nbsp;<code>0</code>&nbsp;到&nbsp;<code>1000</code>&nbsp;之间的整数</li> \n <li>每笔交易金额&nbsp;<code>{amount}</code>&nbsp;由一些数字组成，表示一个&nbsp;<code>0</code> 到&nbsp;<code>2000</code>&nbsp;之间的整数</li> \n</ul>');
INSERT INTO `leecode` VALUES ('117. 填充每个节点的下一个右侧节点指针 II', '<p>给定一个二叉树</p> \n<pre>struct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}</pre> \n<p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 <code>NULL</code>。</p> \n<p>初始状态下，所有&nbsp;next 指针都被设置为 <code>NULL</code>。</p> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你只能使用常量级额外空间。</li> \n <li>使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<p><img style=\"height: 218px; width: 640px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/15/117_sample.png\" alt=\"\"></p> \n<pre><strong>输入</strong>：root = [1,2,3,4,5,null,7]\n<strong>输出：</strong>[1,#,2,3,#,4,5,7,#]\n<strong>解释：</strong>给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。序列化输出按层序遍历顺序（由 next 指针连接），\'#\' 表示每层的末尾。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中的节点数小于 <code>6000</code></li> \n <li><code>-100&nbsp;&lt;= node.val &lt;= 100</code></li> \n</ul> \n<p>&nbsp;</p> \n<ul> \n</ul>');
INSERT INTO `leecode` VALUES ('1170. 比较字符串最小字母出现频次', '<p>定义一个函数&nbsp;<code>f(s)</code>，统计&nbsp;<code>s</code> &nbsp;中<strong>（按字典序比较）最小字母的出现频次</strong> ，其中 <code>s</code>&nbsp;是一个非空字符串。</p> \n<p>例如，若&nbsp;<code>s = \"dcce\"</code>，那么&nbsp;<code>f(s) = 2</code>，因为字典序最小字母是&nbsp;<code>\"c\"</code>，它出现了&nbsp;2 次。</p> \n<p>现在，给你两个字符串数组待查表&nbsp;<code>queries</code>&nbsp;和词汇表&nbsp;<code>words</code> 。对于每次查询&nbsp;<code>queries[i]</code> ，需统计 <code>words</code> 中满足&nbsp;<code>f(queries[i])</code>&nbsp;&lt; <code>f(W)</code>&nbsp;的<strong> 词的数目</strong> ，<code>W</code> 表示词汇表&nbsp;<code>words</code>&nbsp;中的每个词。</p> \n<p>请你返回一个整数数组&nbsp;<code>answer</code>&nbsp;作为答案，其中每个&nbsp;<code>answer[i]</code>&nbsp;是第 <code>i</code> 次查询的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>queries = [\"cbd\"], words = [\"zaaaz\"]\n<strong>输出：</strong>[1]\n<strong>解释：</strong>查询 f(\"cbd\") = 1，而 f(\"zaaaz\") = 3 所以 f(\"cbd\") &lt; f(\"zaaaz\")。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\n<strong>输出：</strong>[1,2]\n<strong>解释：</strong>第一个查询 f(\"bbb\") &lt; f(\"aaaa\")，第二个查询 f(\"aaa\") 和 f(\"aaaa\") 都 &gt; f(\"cc\")。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= queries.length &lt;= 2000</code></li> \n <li><code>1 &lt;= words.length &lt;= 2000</code></li> \n <li><code>1 &lt;= queries[i].length, words[i].length &lt;= 10</code></li> \n <li><code>queries[i][j]</code>、<code>words[i][j]</code> 都由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1171. 从链表中删去总和值为零的连续节点', '<p>给你一个链表的头节点&nbsp;<code>head</code>，请你编写代码，反复删去链表中由 <strong>总和</strong>&nbsp;值为 <code>0</code> 的连续节点组成的序列，直到不存在这样的序列为止。</p> \n<p>删除完毕后，请你返回最终结果链表的头节点。</p> \n<p>&nbsp;</p> \n<p>你可以返回任何满足题目要求的答案。</p> \n<p>（注意，下面示例中的所有序列，都是对&nbsp;<code>ListNode</code>&nbsp;对象序列化的表示。）</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>head = [1,2,-3,3,1]\n<strong>输出：</strong>[3,1]\n<strong>提示：</strong>答案 [1,2,1] 也是正确的。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>head = [1,2,3,-3,4]\n<strong>输出：</strong>[1,2,4]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>head = [1,2,3,-3,-2]\n<strong>输出：</strong>[1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>给你的链表中可能有 <code>1</code> 到&nbsp;<code>1000</code>&nbsp;个节点。</li> \n <li>对于链表中的每个节点，节点的值：<code>-1000 &lt;= node.val &lt;= 1000</code>.</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1172. 餐盘栈', '<p>我们把无限数量 ∞ 的栈排成一行，按从左到右的次序从 0 开始编号。每个栈的的最大容量&nbsp;<code>capacity</code> 都相同。</p> \n<p>实现一个叫「餐盘」的类&nbsp;<code>DinnerPlates</code>：</p> \n<ul> \n <li><code>DinnerPlates(int capacity)</code>&nbsp;- 给出栈的最大容量&nbsp;<code>capacity</code>。</li> \n <li><code>void push(int val)</code>&nbsp;- 将给出的正整数&nbsp;<code>val</code>&nbsp;推入&nbsp;<strong>从左往右第一个&nbsp;</strong>没有满的栈。</li> \n <li><code>int pop()</code>&nbsp;- 返回&nbsp;<strong>从右往左第一个&nbsp;</strong>非空栈顶部的值，并将其从栈中删除；如果所有的栈都是空的，请返回&nbsp;<code>-1</code>。</li> \n <li><code>int popAtStack(int index)</code>&nbsp;- 返回编号&nbsp;<code>index</code>&nbsp;的栈顶部的值，并将其从栈中删除；如果编号&nbsp;<code>index</code>&nbsp;的栈是空的，请返回 <code>-1</code>。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入： </strong>\n[\"DinnerPlates\",\"push\",\"push\",\"push\",\"push\",\"push\",\"popAtStack\",\"push\",\"push\",\"popAtStack\",\"popAtStack\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]\n<strong>输出：</strong>\n[null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]\n\n<strong>解释：</strong>\nDinnerPlates D = DinnerPlates(2);  // 初始化，栈最大容量 capacity = 2\nD.push(1);\nD.push(2);\nD.push(3);\nD.push(4);\nD.push(5);         // 栈的现状为：    2 &nbsp;4\n&nbsp;                                   1 &nbsp;3 &nbsp;5\n                                    ﹈ ﹈ ﹈\nD.popAtStack(0);   // 返回 2。栈的现状为：     &nbsp;4\n            &nbsp;                             1 &nbsp;3 &nbsp;5\n                                          ﹈ ﹈ ﹈\nD.push(20);        // 栈的现状为：  20  4\n&nbsp;                                  1 &nbsp;3 &nbsp;5\n                                   ﹈ ﹈ ﹈\nD.push(21);        // 栈的现状为：  20  4 21\n&nbsp;                                  1 &nbsp;3 &nbsp;5\n                                   ﹈ ﹈ ﹈\nD.popAtStack(0);   // 返回 20。栈的现状为：       4 21\n             &nbsp;                              1 &nbsp;3 &nbsp;5\n                                            ﹈ ﹈ ﹈\nD.popAtStack(2);   // 返回 21。栈的现状为：       4\n             &nbsp;                              1 &nbsp;3 &nbsp;5\n                                            ﹈ ﹈ ﹈ \nD.pop()            // 返回 5。栈的现状为：        4\n             &nbsp;                              1 &nbsp;3 \n                                            ﹈ ﹈  \nD.pop()            // 返回 4。栈的现状为：    1  3 \n                                           ﹈ ﹈   \nD.pop()            // 返回 3。栈的现状为：    1 \n                                           ﹈   \nD.pop()            // 返回 1。现在没有栈。\nD.pop()            // 返回 -1。仍然没有栈。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= capacity&nbsp;&lt;= 20000</code></li> \n <li><code>1 &lt;= val&nbsp;&lt;= 20000</code></li> \n <li><code>0 &lt;= index&nbsp;&lt;= 100000</code></li> \n <li>最多会对&nbsp;<code>push</code>，<code>pop</code>，和&nbsp;<code>popAtStack</code>&nbsp;进行 <code>200000</code> 次调用。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1175. 质数排列', '<p>请你帮忙给从 <code>1</code> 到 <code>n</code>&nbsp;的数设计排列方案，使得所有的「质数」都应该被放在「质数索引」（索引从 1 开始）上；你需要返回可能的方案总数。</p> \n<p>让我们一起来回顾一下「质数」：质数一定是大于 1 的，并且不能用两个小于它的正整数的乘积来表示。</p> \n<p>由于答案可能会很大，所以请你返回答案 <strong>模 mod&nbsp;<code>10^9 + 7</code></strong>&nbsp;之后的结果即可。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 5\n<strong>输出：</strong>12\n<strong>解释：</strong>举个例子，[1,2,5,4,3] 是一个有效的排列，但 [5,2,3,4,1] 不是，因为在第二种情况里质数 5 被错误地放在索引为 1 的位置上。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 100\n<strong>输出：</strong>682289015\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1177. 构建回文串检测', '<p>给你一个字符串&nbsp;<code>s</code>，请你对&nbsp;<code>s</code>&nbsp;的子串进行检测。</p> \n<p>每次检测，待检子串都可以表示为&nbsp;<code>queries[i] = [left, right, k]</code>。我们可以 <strong>重新排列</strong> 子串&nbsp;<code>s[left], ..., s[right]</code>，并从中选择 <strong>最多</strong> <code>k</code>&nbsp;项替换成任何小写英文字母。&nbsp;</p> \n<p>如果在上述检测过程中，子串可以变成回文形式的字符串，那么检测结果为&nbsp;<code>true</code>，否则结果为&nbsp;<code>false</code>。</p> \n<p>返回答案数组&nbsp;<code>answer[]</code>，其中&nbsp;<code>answer[i]</code>&nbsp;是第&nbsp;<code>i</code>&nbsp;个待检子串&nbsp;<code>queries[i]</code>&nbsp;的检测结果。</p> \n<p>注意：在替换时，子串中的每个字母都必须作为 <strong>独立的</strong> 项进行计数，也就是说，如果&nbsp;<code>s[left..right] = \"aaa\"</code>&nbsp;且&nbsp;<code>k = 2</code>，我们只能替换其中的两个字母。（另外，任何检测都不会修改原始字符串 <code>s</code>，可以认为每次检测都是独立的）</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>s = \"abcda\", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]\n<strong>输出：</strong>[true,false,false,true,true]\n<strong>解释：</strong>\nqueries[0] : 子串 = \"d\"，回文。\nqueries[1] :&nbsp;子串 = \"bc\"，不是回文。\nqueries[2] :&nbsp;子串 = \"abcd\"，只替换 1 个字符是变不成回文串的。\nqueries[3] :&nbsp;子串 = \"abcd\"，可以变成回文的 \"abba\"。 也可以变成 \"baab\"，先重新排序变成 \"bacd\"，然后把 \"cd\" 替换为 \"ab\"。\nqueries[4] :&nbsp;子串 = \"abcda\"，可以变成回文的 \"abcba\"。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length,&nbsp;queries.length&nbsp;&lt;= 10^5</code></li> \n <li><code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt;&nbsp;s.length</code></li> \n <li><code>0 &lt;= queries[i][2] &lt;= s.length</code></li> \n <li><code>s</code> 中只有小写英文字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1178. 猜字谜', '<p>外国友人仿照中国字谜设计了一个英文版猜字谜小游戏，请你来猜猜看吧。</p> \n<p>字谜的迷面&nbsp;<code>puzzle</code> 按字符串形式给出，如果一个单词&nbsp;<code>word</code>&nbsp;符合下面两个条件，那么它就可以算作谜底：</p> \n<ul> \n <li>单词&nbsp;<code>word</code>&nbsp;中包含谜面&nbsp;<code>puzzle</code>&nbsp;的第一个字母。</li> \n <li>单词&nbsp;<code>word</code>&nbsp;中的每一个字母都可以在谜面&nbsp;<code>puzzle</code>&nbsp;中找到。<br> 例如，如果字谜的谜面是 \"abcdefg\"，那么可以作为谜底的单词有 \"faced\", \"cabbage\", 和 \"baggage\"；而 \"beefed\"（不含字母 \"a\"）以及&nbsp;\"based\"（其中的 \"s\" 没有出现在谜面中）都不能作为谜底。</li> \n</ul> \n<p>返回一个答案数组&nbsp;<code>answer</code>，数组中的每个元素&nbsp;<code>answer[i]</code>&nbsp;是在给出的单词列表 <code>words</code> 中可以作为字谜迷面&nbsp;<code>puzzles[i]</code>&nbsp;所对应的谜底的单词数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\nwords = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"], \npuzzles = [\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"]\n<strong>输出：</strong>[1,1,3,2,4,0]\n<strong>解释：</strong>\n1 个单词可以作为 \"aboveyz\" 的谜底 : \"aaaa\" \n1 个单词可以作为 \"abrodyz\" 的谜底 : \"aaaa\"\n3 个单词可以作为 \"abslute\" 的谜底 : \"aaaa\", \"asas\", \"able\"\n2 个单词可以作为&nbsp;\"absoryz\" 的谜底 : \"aaaa\", \"asas\"\n4 个单词可以作为&nbsp;\"actresz\" 的谜底 : \"aaaa\", \"asas\", \"actt\", \"access\"\n没有单词可以作为&nbsp;\"gaswxyz\" 的谜底，因为列表中的单词都不含字母 \'g\'。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 10^5</code></li> \n <li><code>4 &lt;= words[i].length &lt;= 50</code></li> \n <li><code>1 &lt;= puzzles.length &lt;= 10^4</code></li> \n <li><code>puzzles[i].length == 7</code></li> \n <li><code>words[i][j]</code>, <code>puzzles[i][j]</code>&nbsp;都是小写英文字母。</li> \n <li>每个&nbsp;<code>puzzles[i]</code>&nbsp;所包含的字符都不重复。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1179. 重新格式化部门表', '<p>部门表&nbsp;<code>Department</code>：</p> \n<pre>+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| revenue       | int     |\n| month         | varchar |\n+---------------+---------+\n(id, month) 是表的联合主键。\n这个表格有关于每个部门每月收入的信息。\n月份（month）可以取下列值 [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]。\n</pre> \n<p>&nbsp;</p> \n<p>编写一个 SQL 查询来重新格式化表，使得新的表中有一个部门 id 列和一些对应&nbsp;<strong>每个月 </strong>的收入（revenue）列。</p> \n<p>查询结果格式如下面的示例所示：</p> \n<pre>Department 表：\n+------+---------+-------+\n| id   | revenue | month |\n+------+---------+-------+\n| 1    | 8000    | Jan   |\n| 2    | 9000    | Jan   |\n| 3    | 10000   | Feb   |\n| 1    | 7000    | Feb   |\n| 1    | 6000    | Mar   |\n+------+---------+-------+\n\n查询得到的结果表：\n+------+-------------+-------------+-------------+-----+-------------+\n| id   | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |\n+------+-------------+-------------+-------------+-----+-------------+\n| 1    | 8000        | 7000        | 6000        | ... | null        |\n| 2    | 9000        | null        | null        | ... | null        |\n| 3    | null        | 10000       | null        | ... | null        |\n+------+-------------+-------------+-------------+-----+-------------+\n\n注意，结果表有 13 列 (1个部门 id 列 + 12个月份的收入列)。\n</pre>');
INSERT INTO `leecode` VALUES ('118. 杨辉三角', '<p>给定一个非负整数&nbsp;<em><code>numRows</code>，</em>生成「杨辉三角」的前&nbsp;<em><code>numRows</code>&nbsp;</em>行。</p> \n<p><small>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</small></p> \n<p><img src=\"https://pic.leetcode-cn.com/1626927345-DZmfxB-PascalTriangleAnimated2.gif\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> numRows = 5\n<strong>输出:</strong> [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> numRows = 1\n<strong>输出:</strong> [[1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= numRows &lt;= 30</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1184. 公交站间的距离', '<p>环形公交路线上有&nbsp;<code>n</code>&nbsp;个站，按次序从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;进行编号。我们已知每一对相邻公交站之间的距离，<code>distance[i]</code>&nbsp;表示编号为&nbsp;<code>i</code>&nbsp;的车站和编号为&nbsp;<code>(i + 1) % n</code>&nbsp;的车站之间的距离。</p> \n<p>环线上的公交车都可以按顺时针和逆时针的方向行驶。</p> \n<p>返回乘客从出发点&nbsp;<code>start</code>&nbsp;到目的地&nbsp;<code>destination</code>&nbsp;之间的最短距离。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 240px; width: 388px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/08/untitled-diagram-1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>distance = [1,2,3,4], start = 0, destination = 1\n<strong>输出：</strong>1\n<strong>解释：</strong>公交站 0 和 1 之间的距离是 1 或 9，最小值是 1。</pre> \n<p>&nbsp;</p> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 240px; width: 388px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/08/untitled-diagram-1-1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>distance = [1,2,3,4], start = 0, destination = 2\n<strong>输出：</strong>3\n<strong>解释：</strong>公交站 0 和 2 之间的距离是 3 或 7，最小值是 3。\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 240px; width: 388px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/08/untitled-diagram-1-2.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>distance = [1,2,3,4], start = 0, destination = 3\n<strong>输出：</strong>4\n<strong>解释：</strong>公交站 0 和 3 之间的距离是 6 或 4，最小值是 4。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n&nbsp;&lt;= 10^4</code></li> \n <li><code>distance.length == n</code></li> \n <li><code>0 &lt;= start, destination &lt; n</code></li> \n <li><code>0 &lt;= distance[i] &lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1185. 一周中的第几天', '<p>给你一个日期，请你设计一个算法来判断它是对应一周中的哪一天。</p> \n<p>输入为三个整数：<code>day</code>、<code>month</code> 和&nbsp;<code>year</code>，分别表示日、月、年。</p> \n<p>您返回的结果必须是这几个值中的一个&nbsp;<code>{\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>day = 31, month = 8, year = 2019\n<strong>输出：</strong>\"Saturday\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>day = 18, month = 7, year = 1999\n<strong>输出：</strong>\"Sunday\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>day = 15, month = 8, year = 1993\n<strong>输出：</strong>\"Sunday\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>给出的日期一定是在&nbsp;<code>1971</code> 到&nbsp;<code>2100</code>&nbsp;年之间的有效日期。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1186. 删除一次得到子数组最大和', '<p>给你一个整数数组，返回它的某个&nbsp;<strong>非空</strong> 子数组（连续元素）在执行一次可选的删除操作后，所能得到的最大元素总和。</p> \n<p>换句话说，你可以从原数组中选出一个子数组，并可以决定要不要从中删除一个元素（只能删一次哦），（删除后）子数组中至少应当有一个元素，然后该子数组（剩下）的元素总和是所有子数组之中最大的。</p> \n<p>注意，删除一个元素后，子数组 <strong>不能为空</strong>。</p> \n<p>请看示例：</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [1,-2,0,3]\n<strong>输出：</strong>4\n<strong>解释：</strong>我们可以选出 [1, -2, 0, 3]，然后删掉 -2，这样得到 [1, 0, 3]，和最大。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,-2,-2,3]\n<strong>输出：</strong>3\n<strong>解释：</strong>我们直接选出 [3]，这就是最大和。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [-1,-1,-1,-1]\n<strong>输出：</strong>-1\n<strong>解释：</strong>最后得到的子数组不能为空，所以我们不能选择 [-1] 并从中删去 -1 来得到 0。\n     我们应该直接选择 [-1]，或者选择 [-1, -1] 再从中删去一个 -1。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10^5</code></li> \n <li><code>-10^4 &lt;= arr[i] &lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1187. 使数组严格递增', '<p>给你两个整数数组&nbsp;<code>arr1</code> 和 <code>arr2</code>，返回使&nbsp;<code>arr1</code>&nbsp;严格递增所需要的最小「操作」数（可能为 0）。</p> \n<p>每一步「操作」中，你可以分别从 <code>arr1</code> 和 <code>arr2</code> 中各选出一个索引，分别为&nbsp;<code>i</code> 和&nbsp;<code>j</code>，<code>0 &lt;=&nbsp;i &lt; arr1.length</code>&nbsp;和&nbsp;<code>0 &lt;= j &lt; arr2.length</code>，然后进行赋值运算&nbsp;<code>arr1[i] = arr2[j]</code>。</p> \n<p>如果无法让&nbsp;<code>arr1</code>&nbsp;严格递增，请返回&nbsp;<code>-1</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]\n<strong>输出：</strong>1\n<strong>解释：</strong>用 2 来替换 <code>5，之后</code> <code>arr1 = [1, 2, 3, 6, 7]</code>。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr1 = [1,5,3,6,7], arr2 = [4,3,1]\n<strong>输出：</strong>2\n<strong>解释：</strong>用 3 来替换 <code>5，然后</code>用 4 来替换 3<code>，得到</code> <code>arr1 = [1, 3, 4, 6, 7]</code>。\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<pre><strong>输入：</strong>arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]\n<strong>输出：</strong>-1\n<strong>解释：</strong>无法使 <code>arr1 严格递增</code>。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr1.length, arr2.length &lt;= 2000</code></li> \n <li><code>0 &lt;= arr1[i], arr2[i] &lt;= 10^9</code></li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('1189. “气球” 的最大数量', '<p>给你一个字符串&nbsp;<code>text</code>，你需要使用 <code>text</code> 中的字母来拼凑尽可能多的单词&nbsp;<strong>\"balloon\"（气球）</strong>。</p> \n<p>字符串&nbsp;<code>text</code> 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词&nbsp;<strong>\"balloon\"</strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 35px; width: 154px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/14/1536_ex1_upd.jpeg\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>text = \"nlaebolko\"\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 35px; width: 233px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/14/1536_ex2_upd.jpeg\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>text = \"loonbalxballpoon\"\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>text = \"leetcode\"\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= text.length &lt;= 10^4</code></li> \n <li><code>text</code>&nbsp;全部由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('119. 杨辉三角 II', '<p>给定一个非负索引 <code>rowIndex</code>，返回「杨辉三角」的第 <code>rowIndex</code><em>&nbsp;</em>行。</p> \n<p><small>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</small></p> \n<p><img src=\"https://pic.leetcode-cn.com/1626927345-DZmfxB-PascalTriangleAnimated2.gif\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> rowIndex = 3\n<strong>输出:</strong> [1,3,3,1]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> rowIndex = 0\n<strong>输出:</strong> [1]\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> rowIndex = 1\n<strong>输出:</strong> [1,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>0 &lt;= rowIndex &lt;= 33</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<p>你可以优化你的算法到 <code><em>O</em>(<i>rowIndex</i>)</code> 空间复杂度吗？</p>');
INSERT INTO `leecode` VALUES ('1190. 反转每对括号间的子串', '<p>给出一个字符串&nbsp;<code>s</code>（仅含有小写英文字母和括号）。</p> \n<p>请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。</p> \n<p>注意，您的结果中 <strong>不应</strong> 包含任何括号。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"(abcd)\"\n<strong>输出：</strong>\"dcba\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"(u(love)i)\"\n<strong>输出：</strong>\"iloveu\"\n<strong>解释：</strong>先反转子字符串 \"love\" ，然后反转整个字符串。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"(ed(et(oc))el)\"\n<strong>输出：</strong>\"leetcode\"\n<strong>解释：</strong>先反转子字符串 \"oc\" ，接着反转 \"etco\" ，然后反转整个字符串。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"a(bcdefghijkl(mno)p)q\"\n<strong>输出：</strong>\"apmnolkjihgfedcbq\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s.length &lt;= 2000</code></li> \n <li><code>s</code> 中只有小写英文字母和括号</li> \n <li>题目测试用例确保所有括号都是成对出现的</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1191. K 次串联后最大子数组之和', '<p>给你一个整数数组&nbsp;<code>arr</code>&nbsp;和一个整数&nbsp;<code>k</code>。</p> \n<p>首先，我们要对该数组进行修改，即把原数组 <code>arr</code> 重复&nbsp;<code>k</code>&nbsp;次。</p> \n<blockquote> \n <p>举个例子，如果&nbsp;<code>arr&nbsp;= [1, 2]</code> 且 <code>k = 3</code>，那么修改后的数组就是&nbsp;<code>[1, 2, 1, 2, 1, 2]</code>。</p> \n</blockquote> \n<p>然后，请你返回修改后的数组中的最大的子数组之和。</p> \n<p>注意，子数组长度可以是 <code>0</code>，在这种情况下它的总和也是 <code>0</code>。</p> \n<p>由于&nbsp;<strong>结果可能会很大</strong>，所以需要 <strong>模（mod）</strong>&nbsp;<code>10^9 + 7</code>&nbsp;后再返回。&nbsp;</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2], k = 3\n<strong>输出：</strong>9\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,-2,1], k = 5\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [-1,-2], k = 7\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= k &lt;= 10^5</code></li> \n <li><code>-10^4 &lt;= arr[i] &lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1192. 查找集群内的「关键连接」', '<p>力扣数据中心有&nbsp;<code>n</code>&nbsp;台服务器，分别按从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>&nbsp;的方式进行了编号。</p> \n<p>它们之间以「服务器到服务器」点对点的形式相互连接组成了一个内部集群，其中连接&nbsp;<code>connections</code> 是无向的。</p> \n<p>从形式上讲，<code>connections[i] = [a, b]</code>&nbsp;表示服务器 <code>a</code>&nbsp;和 <code>b</code>&nbsp;之间形成连接。任何服务器都可以直接或者间接地通过网络到达任何其他服务器。</p> \n<p>「关键连接」是在该集群中的重要连接，也就是说，假如我们将它移除，便会导致某些服务器无法访问其他服务器。</p> \n<p>请你以任意顺序返回该集群内的所有 「关键连接」。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"width: 150px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/critical-connections-in-a-network.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]\n<strong>输出：</strong>[[1,3]]\n<strong>解释：</strong>[[3,1]] 也是正确的。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^5</code></li> \n <li><code>n-1 &lt;= connections.length &lt;= 10^5</code></li> \n <li><code>connections[i][0] != connections[i][1]</code></li> \n <li>不存在重复的连接</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1195. 交替打印字符串', '<p>编写一个可以从 1 到 n 输出代表这个数字的字符串的程序，但是：</p> \n<ul> \n <li>如果这个数字可以被 3 整除，输出 \"fizz\"。</li> \n <li>如果这个数字可以被 5 整除，输出&nbsp;\"buzz\"。</li> \n <li>如果这个数字可以同时被 3 和 5 整除，输出 \"fizzbuzz\"。</li> \n</ul> \n<p>例如，当&nbsp;<code>n = 15</code>，输出：&nbsp;<code>1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz</code>。</p> \n<p>假设有这么一个类：</p> \n<pre>class FizzBuzz {\n&nbsp; public FizzBuzz(int n) { ... }&nbsp;              // constructor\n  public void fizz(printFizz) { ... }          // only output \"fizz\"\n  public void buzz(printBuzz) { ... }          // only output \"buzz\"\n  public void fizzbuzz(printFizzBuzz) { ... }  // only output \"fizzbuzz\"\n  public void number(printNumber) { ... }      // only output the numbers\n}</pre> \n<p>请你实现一个有四个线程的多线程版&nbsp;&nbsp;<code>FizzBuzz</code>，&nbsp;同一个&nbsp;<code>FizzBuzz</code>&nbsp;实例会被如下四个线程使用：</p> \n<ol> \n <li>线程A将调用&nbsp;<code>fizz()</code>&nbsp;来判断是否能被 3 整除，如果可以，则输出&nbsp;<code>fizz</code>。</li> \n <li>线程B将调用&nbsp;<code>buzz()</code>&nbsp;来判断是否能被 5 整除，如果可以，则输出&nbsp;<code>buzz</code>。</li> \n <li>线程C将调用&nbsp;<code>fizzbuzz()</code>&nbsp;来判断是否同时能被 3 和 5 整除，如果可以，则输出&nbsp;<code>fizzbuzz</code>。</li> \n <li>线程D将调用&nbsp;<code>number()</code>&nbsp;来实现输出既不能被 3 整除也不能被 5 整除的数字。</li> \n</ol> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>本题已经提供了打印字符串的相关方法，如 <code>printFizz()</code> 等，具体方法名请参考答题模板中的注释部分。</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('12. 整数转罗马数字', '<p>罗马数字包含以下七种字符：&nbsp;<code>I</code>，&nbsp;<code>V</code>，&nbsp;<code>X</code>，&nbsp;<code>L</code>，<code>C</code>，<code>D</code>&nbsp;和&nbsp;<code>M</code>。</p> \n<pre><strong>字符</strong>          <strong>数值</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre> \n<p>例如， 罗马数字 2 写做&nbsp;<code>II</code>&nbsp;，即为两个并列的 1。12 写做&nbsp;<code>XII</code>&nbsp;，即为&nbsp;<code>X</code>&nbsp;+&nbsp;<code>II</code>&nbsp;。 27 写做&nbsp;&nbsp;<code>XXVII</code>, 即为&nbsp;<code>XX</code>&nbsp;+&nbsp;<code>V</code>&nbsp;+&nbsp;<code>II</code>&nbsp;。</p> \n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做&nbsp;<code>IIII</code>，而是&nbsp;<code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为&nbsp;<code>IX</code>。这个特殊的规则只适用于以下六种情况：</p> \n<ul> \n <li><code>I</code>&nbsp;可以放在&nbsp;<code>V</code>&nbsp;(5) 和&nbsp;<code>X</code>&nbsp;(10) 的左边，来表示 4 和 9。</li> \n <li><code>X</code>&nbsp;可以放在&nbsp;<code>L</code>&nbsp;(50) 和&nbsp;<code>C</code>&nbsp;(100) 的左边，来表示 40 和&nbsp;90。&nbsp;</li> \n <li><code>C</code>&nbsp;可以放在&nbsp;<code>D</code>&nbsp;(500) 和&nbsp;<code>M</code>&nbsp;(1000) 的左边，来表示&nbsp;400 和&nbsp;900。</li> \n</ul> \n<p>给你一个整数，将其转为罗马数字。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong>&nbsp;num = 3\n<strong>输出:</strong> \"III\"</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong>&nbsp;num = 4\n<strong>输出:</strong> \"IV\"</pre> \n<p><strong>示例&nbsp;3:</strong></p> \n<pre><strong>输入:</strong>&nbsp;num = 9\n<strong>输出:</strong> \"IX\"</pre> \n<p><strong>示例&nbsp;4:</strong></p> \n<pre><strong>输入:</strong>&nbsp;num = 58\n<strong>输出:</strong> \"LVIII\"\n<strong>解释:</strong> L = 50, V = 5, III = 3.\n</pre> \n<p><strong>示例&nbsp;5:</strong></p> \n<pre><strong>输入:</strong>&nbsp;num = 1994\n<strong>输出:</strong> \"MCMXCIV\"\n<strong>解释:</strong> M = 1000, CM = 900, XC = 90, IV = 4.</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= num &lt;= 3999</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('120. 三角形最小路径和', '<p>给定一个三角形 <code>triangle</code> ，找出自顶向下的最小路径和。</p> \n<p>每一步只能移动到下一行中相邻的结点上。<strong>相邻的结点 </strong>在这里指的是 <strong>下标</strong> 与 <strong>上一层结点下标</strong> 相同或者等于 <strong>上一层结点下标 + 1</strong> 的两个结点。也就是说，如果正位于当前行的下标 <code>i</code> ，那么下一步可以移动到下一行的下标 <code>i</code> 或 <code>i + 1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n<strong>输出：</strong>11\n<strong>解释：</strong>如下面简图所示：\n   <strong>2</strong>\n  <strong>3</strong> 4\n 6 <strong>5</strong> 7\n4 <strong>1</strong> 8 3\n自顶向下的最小路径和为&nbsp;11（即，2&nbsp;+&nbsp;3&nbsp;+&nbsp;5&nbsp;+&nbsp;1&nbsp;= 11）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>triangle = [[-10]]\n<strong>输出：</strong>-10\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= triangle.length &lt;= 200</code></li> \n <li><code>triangle[0].length == 1</code></li> \n <li><code>triangle[i].length == triangle[i - 1].length + 1</code></li> \n <li><code>-10<sup>4</sup> &lt;= triangle[i][j] &lt;= 10<sup>4</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你可以只使用 <code>O(n)</code>&nbsp;的额外空间（<code>n</code> 为三角形的总行数）来解决这个问题吗？</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1200. 最小绝对差', '<p>给你个整数数组&nbsp;<code>arr</code>，其中每个元素都 <strong>不相同</strong>。</p> \n<p>请你找到所有具有最小绝对差的元素对，并且按升序的顺序返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [4,2,1,3]\n<strong>输出：</strong>[[1,2],[2,3],[3,4]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,3,6,10,15]\n<strong>输出：</strong>[[1,3]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [3,8,-10,23,19,-4,-14,27]\n<strong>输出：</strong>[[-14,-10],[19,23],[23,27]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= arr.length &lt;= 10^5</code></li> \n <li><code>-10^6 &lt;= arr[i] &lt;= 10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1201. 丑数 III', '<p>给你四个整数：<code>n</code> 、<code>a</code> 、<code>b</code> 、<code>c</code> ，请你设计一个算法来找出第&nbsp;<code>n</code>&nbsp;个丑数。</p> \n<p>丑数是可以被&nbsp;<code>a</code>&nbsp;<strong>或</strong>&nbsp;<code>b</code>&nbsp;<strong>或</strong> <code>c</code>&nbsp;整除的 <strong>正整数</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 3, a = 2, b = 3, c = 5\n<strong>输出：</strong>4\n<strong>解释：</strong>丑数序列为 2, 3, 4, 5, 6, 8, 9, 10... 其中第 3 个是 4。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 4, a = 2, b = 3, c = 4\n<strong>输出：</strong>6\n<strong>解释：</strong>丑数序列为 2, 3, 4, 6, 8, 9, 10, 12... 其中第 4 个是 6。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 5, a = 2, b = 11, c = 13\n<strong>输出：</strong>10\n<strong>解释：</strong>丑数序列为 2, 4, 6, 8, 10, 11, 12, 13... 其中第 5 个是 10。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 1000000000, a = 2, b = 217983653, c = 336916467\n<strong>输出：</strong>1999999984\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n, a, b, c &lt;= 10^9</code></li> \n <li><code>1 &lt;= a * b * c &lt;= 10^18</code></li> \n <li>本题结果在&nbsp;<code>[1,&nbsp;2 * 10^9]</code>&nbsp;的范围内</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1202. 交换字符串中的元素', '<p>给你一个字符串&nbsp;<code>s</code>，以及该字符串中的一些「索引对」数组&nbsp;<code>pairs</code>，其中&nbsp;<code>pairs[i] =&nbsp;[a, b]</code>&nbsp;表示字符串中的两个索引（编号从 0 开始）。</p> \n<p>你可以 <strong>任意多次交换</strong> 在&nbsp;<code>pairs</code>&nbsp;中任意一对索引处的字符。</p> \n<p>返回在经过若干次交换后，<code>s</code>&nbsp;可以变成的按字典序最小的字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入：</strong>s = \"dcab\", pairs = [[0,3],[1,2]]\n<strong>输出：</strong>\"bacd\"\n<strong>解释：</strong> \n交换 s[0] 和 s[3], s = \"bcad\"\n交换 s[1] 和 s[2], s = \"bacd\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"dcab\", pairs = [[0,3],[1,2],[0,2]]\n<strong>输出：</strong>\"abcd\"\n<strong>解释：</strong>\n交换 s[0] 和 s[3], s = \"bcad\"\n交换 s[0] 和 s[2], s = \"acbd\"\n交换 s[1] 和 s[2], s = \"abcd\"</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"cba\", pairs = [[0,1],[1,2]]\n<strong>输出：</strong>\"abc\"\n<strong>解释：</strong>\n交换 s[0] 和 s[1], s = \"bca\"\n交换 s[1] 和 s[2], s = \"bac\"\n交换 s[0] 和 s[1], s = \"abc\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10^5</code></li> \n <li><code>0 &lt;= pairs.length &lt;= 10^5</code></li> \n <li><code>0 &lt;= pairs[i][0], pairs[i][1] &lt;&nbsp;s.length</code></li> \n <li><code>s</code>&nbsp;中只含有小写英文字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1203. 项目管理', '<p>有 <code>n</code> 个项目，每个项目或者不属于任何小组，或者属于 <code>m</code> 个小组之一。<code>group[i]</code> 表示第 <code>i</code> 个项目所属的小组，如果第 <code>i</code> 个项目不属于任何小组，则 <code>group[i]</code> 等于 <code>-1</code>。项目和小组都是从零开始编号的。可能存在小组不负责任何项目，即没有任何项目属于这个小组。</p> \n<p>请你帮忙按要求安排这些项目的进度，并返回排序后的项目列表：</p> \n<ul> \n <li>同一小组的项目，排序后在列表中彼此相邻。</li> \n <li>项目之间存在一定的依赖关系，我们用一个列表 <code>beforeItems</code>&nbsp;来表示，其中&nbsp;<code>beforeItems[i]</code>&nbsp;表示在进行第&nbsp;<code>i</code>&nbsp;个项目前（位于第 <code>i</code>&nbsp;个项目左侧）应该完成的所有项目。</li> \n</ul> \n<p>如果存在多个解决方案，只需要返回其中任意一个即可。如果没有合适的解决方案，就请返回一个 <strong>空列表 </strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 181px; width: 191px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/22/1359_ex1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]\n<strong>输出：</strong>[6,3,4,1,5,2,0,7]\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]\n<strong>输出：</strong>[]\n<strong>解释：</strong>与示例 1 大致相同，但是在排序后的列表中，4 必须放在 6 的前面。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= m &lt;= n &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>group.length == beforeItems.length == n</code></li> \n <li><code>-1 &lt;= group[i] &lt;= m - 1</code></li> \n <li><code>0 &lt;= beforeItems[i].length &lt;= n - 1</code></li> \n <li><code>0 &lt;= beforeItems[i][j] &lt;= n - 1</code></li> \n <li><code>i != beforeItems[i][j]</code></li> \n <li><code>beforeItems[i]</code> 不含重复元素</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1206. 设计跳表', '<p>不使用任何库函数，设计一个跳表。</p> \n<p>跳表是在 O(log(n)) 时间内完成增加、删除、搜索操作的数据结构。跳表相比于树堆与红黑树，其功能与性能相当，并且跳表的代码长度相较下更短，其设计思想与链表相似。</p> \n<p>例如，一个跳表包含 [30, 40, 50, 60, 70, 90]，然后增加 80、45 到跳表中，以下图的方式操作：</p> \n<p><img style=\"width: 500px;\" src=\"https://assets.leetcode.com/uploads/2019/09/27/1506_skiplist.gif\" alt=\"\"><br> <small>Artyom Kalinin [CC BY-SA 3.0], via <a title=\"Artyom Kalinin [CC BY-SA 3.0 (https://creativecommons.org/licenses/by-sa/3.0)], via Wikimedia Commons\" href=\"https://commons.wikimedia.org/wiki/File:Skip_list_add_element-en.gif\">Wikimedia Commons</a></small></p> \n<p>跳表中有很多层，每一层是一个短的链表。在第一层的作用下，增加、删除和搜索操作的时间复杂度不超过 O(n)。跳表的每一个操作的平均时间复杂度是 O(log(n))，空间复杂度是 O(n)。</p> \n<p>在本题中，你的设计应该要包含这些函数：</p> \n<ul> \n <li><code>bool search(int target)</code> : 返回target是否存在于跳表中。</li> \n <li><code>void add(int num)</code>:&nbsp;插入一个元素到跳表。</li> \n <li><code>bool erase(int num)</code>: 在跳表中删除一个值，如果&nbsp;<code>num</code>&nbsp;不存在，直接返回false. 如果存在多个&nbsp;<code>num</code>&nbsp;，删除其中任意一个即可。</li> \n</ul> \n<p>了解更多 :&nbsp;<a href=\"https://en.wikipedia.org/wiki/Skip_list\">https://en.wikipedia.org/wiki/Skip_list</a></p> \n<p>注意，跳表中可能存在多个相同的值，你的代码需要处理这种情况。</p> \n<p><strong>样例:</strong></p> \n<pre>Skiplist skiplist = new Skiplist();\n\nskiplist.add(1);\nskiplist.add(2);\nskiplist.add(3);\nskiplist.search(0);   // 返回 false\nskiplist.add(4);\nskiplist.search(1);   // 返回 true\nskiplist.erase(0);    // 返回 false，0 不在跳表中\nskiplist.erase(1);    // 返回 true\nskiplist.search(1);   // 返回 false，1 已被擦除\n</pre> \n<p><strong>约束条件:</strong></p> \n<ul> \n <li><code>0 &lt;= num, target&nbsp;&lt;= 20000</code></li> \n <li>最多调用&nbsp;<code>50000</code>&nbsp;次&nbsp;<code>search</code>, <code>add</code>, 以及&nbsp;<code>erase</code>操作。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1207. 独一无二的出现次数', '<p>给你一个整数数组&nbsp;<code>arr</code>，请你帮忙统计数组中每个数的出现次数。</p> \n<p>如果每个数的出现次数都是独一无二的，就返回&nbsp;<code>true</code>；否则返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,2,1,1,3]\n<strong>输出：</strong>true\n<strong>解释：</strong>在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [-3,0,1,-3,1,1,1,-3,10,0]\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length&nbsp;&lt;= 1000</code></li> \n <li><code>-1000 &lt;= arr[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1208. 尽可能使字符串相等', '<p>给你两个长度相同的字符串，<code>s</code> 和 <code>t</code>。</p> \n<p>将 <code>s</code>&nbsp;中的第&nbsp;<code>i</code>&nbsp;个字符变到&nbsp;<code>t</code>&nbsp;中的第 <code>i</code> 个字符需要&nbsp;<code>|s[i] - t[i]|</code>&nbsp;的开销（开销可能为 0），也就是两个字符的 ASCII 码值的差的绝对值。</p> \n<p>用于变更字符串的最大预算是&nbsp;<code>maxCost</code>。在转化字符串时，总开销应当小于等于该预算，这也意味着字符串的转化可能是不完全的。</p> \n<p>如果你可以将 <code>s</code> 的子字符串转化为它在 <code>t</code> 中对应的子字符串，则返回可以转化的最大长度。</p> \n<p>如果 <code>s</code> 中没有子字符串可以转化成 <code>t</code> 中对应的子字符串，则返回 <code>0</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"abcd\", t = \"bcdf\", maxCost = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>s<strong> </strong>中的<strong> </strong>\"abc\" 可以变为 \"bcd\"。开销为 3，所以最大长度为 3。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abcd\", t = \"cdef\", maxCost = 3\n<strong>输出：</strong>1\n<strong>解释：</strong>s 中的任一字符要想变成 t 中对应的字符，其开销都是 2。因此，最大长度为<code> 1。</code>\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"abcd\", t = \"acde\", maxCost = 0\n<strong>输出：</strong>1\n<strong>解释：</strong>a -&gt; a, cost = 0，字符串未发生变化，所以最大长度为 1。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length, t.length &lt;= 10^5</code></li> \n <li><code>0 &lt;= maxCost &lt;= 10^6</code></li> \n <li><code>s</code> 和&nbsp;<code>t</code>&nbsp;都只含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1209. 删除字符串中的所有相邻重复项 II', '<p>给你一个字符串&nbsp;<code>s</code>，「<code>k</code> 倍重复项删除操作」将会从 <code>s</code>&nbsp;中选择&nbsp;<code>k</code>&nbsp;个相邻且相等的字母，并删除它们，使被删去的字符串的左侧和右侧连在一起。</p> \n<p>你需要对&nbsp;<code>s</code>&nbsp;重复进行无限次这样的删除操作，直到无法继续为止。</p> \n<p>在执行完所有删除操作后，返回最终得到的字符串。</p> \n<p>本题答案保证唯一。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"abcd\", k = 2\n<strong>输出：</strong>\"abcd\"\n<strong>解释：</strong>没有要删除的内容。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"deeedbbcccbdaa\", k = 3\n<strong>输出：</strong>\"aa\"\n<strong>解释： \n</strong>先删除 \"eee\" 和 \"ccc\"，得到 \"ddbbbdaa\"\n再删除 \"bbb\"，得到 \"dddaa\"\n最后删除 \"ddd\"，得到 \"aa\"</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"pbbcggttciiippooaais\", k = 2\n<strong>输出：</strong>\"ps\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10^5</code></li> \n <li><code>2 &lt;= k &lt;= 10^4</code></li> \n <li><code>s</code>&nbsp;中只含有小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('121. 买卖股票的最佳时机', '<p>给定一个数组 <code>prices</code> ，它的第&nbsp;<code>i</code> 个元素&nbsp;<code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p> \n<p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p> \n<p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[7,1,5,3,6,4]\n<strong>输出：</strong>5\n<strong>解释：</strong>在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>prices = [7,6,4,3,1]\n<strong>输出：</strong>0\n<strong>解释：</strong>在这种情况下, 没有交易完成, 所以最大利润为 0。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= prices[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1210. 穿过迷宫的最少移动次数', '<p>你还记得那条风靡全球的贪吃蛇吗？</p> \n<p>我们在一个&nbsp;<code>n*n</code>&nbsp;的网格上构建了新的迷宫地图，蛇的长度为 2，也就是说它会占去两个单元格。蛇会从左上角（<code>(0, 0)</code>&nbsp;和&nbsp;<code>(0, 1)</code>）开始移动。我们用 <code>0</code> 表示空单元格，用 1 表示障碍物。蛇需要移动到迷宫的右下角（<code>(n-1, n-2)</code>&nbsp;和&nbsp;<code>(n-1, n-1)</code>）。</p> \n<p>每次移动，蛇可以这样走：</p> \n<ul> \n <li>如果没有障碍，则向右移动一个单元格。并仍然保持身体的水平／竖直状态。</li> \n <li>如果没有障碍，则向下移动一个单元格。并仍然保持身体的水平／竖直状态。</li> \n <li>如果它处于水平状态并且其下面的两个单元都是空的，就顺时针旋转 90 度。蛇从（<code>(r, c)</code>、<code>(r, c+1)</code>）移动到 （<code>(r, c)</code>、<code>(r+1, c)</code>）。<br> <img style=\"height: 134px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/28/image-2.png\" alt=\"\"></li> \n <li>如果它处于竖直状态并且其右面的两个单元都是空的，就逆时针旋转 90 度。蛇从（<code>(r, c)</code>、<code>(r+1, c)</code>）移动到（<code>(r, c)</code>、<code>(r, c+1)</code>）。<br> <img style=\"height: 121px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/28/image-1.png\" alt=\"\"></li> \n</ul> \n<p>返回蛇抵达目的地所需的最少移动次数。</p> \n<p>如果无法到达目的地，请返回&nbsp;<code>-1</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 439px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/28/image.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>grid = [[0,0,0,0,0,1],\n               [1,1,0,0,1,0],\n&nbsp;              [0,0,0,0,1,1],\n&nbsp;              [0,0,1,0,1,0],\n&nbsp;              [0,1,1,0,0,0],\n&nbsp;              [0,1,1,0,0,0]]\n<strong>输出：</strong>11\n<strong>解释：\n</strong>一种可能的解决方案是 [右, 右, 顺时针旋转, 右, 下, 下, 下, 下, 逆时针旋转, 右, 下]。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>grid = [[0,0,1,1,1,1],\n&nbsp;              [0,0,0,0,1,1],\n&nbsp;              [1,1,0,0,0,1],\n&nbsp;              [1,1,1,0,0,1],\n&nbsp;              [1,1,1,0,0,1],\n&nbsp;              [1,1,1,0,0,0]]\n<strong>输出：</strong>9\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 100</code></li> \n <li><code>0 &lt;= grid[i][j] &lt;= 1</code></li> \n <li>蛇保证从空单元格开始出发。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1217. 玩筹码', '<p>数轴上放置了一些筹码，每个筹码的位置存在数组&nbsp;<code>chips</code>&nbsp;当中。</p> \n<p>你可以对 <strong>任何筹码</strong> 执行下面两种操作之一（<strong>不限操作次数</strong>，0 次也可以）：</p> \n<ul> \n <li>将第 <code>i</code> 个筹码向左或者右移动 2 个单位，代价为 <strong>0</strong>。</li> \n <li>将第 <code>i</code> 个筹码向左或者右移动 1 个单位，代价为 <strong>1</strong>。</li> \n</ul> \n<p>最开始的时候，同一位置上也可能放着两个或者更多的筹码。</p> \n<p>返回将所有筹码移动到同一位置（任意位置）上所需要的最小代价。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>chips = [1,2,3]\n<strong>输出：</strong>1\n<strong>解释：</strong>第二个筹码移动到位置三的代价是 1，第一个筹码移动到位置三的代价是 0，总代价为 1。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>chips = [2,2,2,3,3]\n<strong>输出：</strong>2\n<strong>解释：</strong>第四和第五个筹码移动到位置二的代价都是 1，所以最小总代价为 2。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= chips.length &lt;= 100</code></li> \n <li><code>1 &lt;= chips[i] &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1218. 最长定差子序列', '<p>给你一个整数数组&nbsp;<code>arr</code>&nbsp;和一个整数&nbsp;<code>difference</code>，请你找出并返回 <code>arr</code>&nbsp;中最长等差子序列的长度，该子序列中相邻元素之间的差等于 <code>difference</code> 。</p> \n<p><strong>子序列</strong> 是指在不改变其余元素顺序的情况下，通过删除一些元素或不删除任何元素而从 <code>arr</code> 派生出来的序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,3,4], difference = 1\n<strong>输出：</strong>4\n<strong>解释：</strong>最长的等差子序列是 [1,2,3,4]。</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,3,5,7], difference = 1\n<strong>输出：</strong>1\n<strong>解释：</strong>最长的等差子序列是任意单个元素。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [1,5,7,8,5,3,4,2,1], difference = -2\n<strong>输出：</strong>4\n<strong>解释：</strong>最长的等差子序列是 [7,5,3,1]。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> \n <li><code>-10<sup>4</sup> &lt;= arr[i], difference &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1219. 黄金矿工', '<p>你要开发一座金矿，地质勘测学家已经探明了这座金矿中的资源分布，并用大小为&nbsp;<code>m * n</code> 的网格 <code>grid</code> 进行了标注。每个单元格中的整数就表示这一单元格中的黄金数量；如果该单元格是空的，那么就是 <code>0</code>。</p> \n<p>为了使收益最大化，矿工需要按以下规则来开采黄金：</p> \n<ul> \n <li>每当矿工进入一个单元，就会收集该单元格中的所有黄金。</li> \n <li>矿工每次可以从当前位置向上下左右四个方向走。</li> \n <li>每个单元格只能被开采（进入）一次。</li> \n <li><strong>不得开采</strong>（进入）黄金数目为 <code>0</code> 的单元格。</li> \n <li>矿工可以从网格中 <strong>任意一个</strong> 有黄金的单元格出发或者是停止。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>grid = [[0,6,0],[5,8,7],[0,9,0]]\n<strong>输出：</strong>24\n<strong>解释：</strong>\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\n一种收集最多黄金的路线是：9 -&gt; 8 -&gt; 7。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\n<strong>输出：</strong>28\n<strong>解释：</strong>\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\n一种收集最多黄金的路线是：1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= grid.length,&nbsp;grid[i].length &lt;= 15</code></li> \n <li><code>0 &lt;= grid[i][j] &lt;= 100</code></li> \n <li>最多 <strong>25 </strong>个单元格中有黄金。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('122. 买卖股票的最佳时机 II', '<p>给定一个数组 <code>prices</code> ，其中&nbsp;<code>prices[i]</code> 是一支给定股票第 <code>i</code> 天的价格。</p> \n<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p> \n<p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> prices = [7,1,5,3,6,4]\n<strong>输出:</strong> 7\n<strong>解释:</strong> 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n&nbsp;    随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> prices = [1,2,3,4,5]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n&nbsp;    注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。\n</pre> \n<p><strong>示例&nbsp;3:</strong></p> \n<pre><strong>输入:</strong> prices = [7,6,4,3,1]\n<strong>输出:</strong> 0\n<strong>解释:</strong> 在这种情况下, 没有交易完成, 所以最大利润为 0。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= prices.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>0 &lt;= prices[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1220. 统计元音字母序列的数目', '<p>给你一个整数&nbsp;<code>n</code>，请你帮忙统计一下我们可以按下述规则形成多少个长度为&nbsp;<code>n</code>&nbsp;的字符串：</p> \n<ul> \n <li>字符串中的每个字符都应当是小写元音字母（<code>\'a\'</code>, <code>\'e\'</code>, <code>\'i\'</code>, <code>\'o\'</code>, <code>\'u\'</code>）</li> \n <li>每个元音&nbsp;<code>\'a\'</code>&nbsp;后面都只能跟着&nbsp;<code>\'e\'</code></li> \n <li>每个元音&nbsp;<code>\'e\'</code>&nbsp;后面只能跟着&nbsp;<code>\'a\'</code>&nbsp;或者是&nbsp;<code>\'i\'</code></li> \n <li>每个元音&nbsp;<code>\'i\'</code>&nbsp;后面&nbsp;<strong>不能</strong> 再跟着另一个&nbsp;<code>\'i\'</code></li> \n <li>每个元音&nbsp;<code>\'o\'</code>&nbsp;后面只能跟着&nbsp;<code>\'i\'</code>&nbsp;或者是&nbsp;<code>\'u\'</code></li> \n <li>每个元音&nbsp;<code>\'u\'</code>&nbsp;后面只能跟着&nbsp;<code>\'a\'</code></li> \n</ul> \n<p>由于答案可能会很大，所以请你返回 模&nbsp;<code>10^9 + 7</code>&nbsp;之后的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>5\n<strong>解释：</strong>所有可能的字符串分别是：\"a\", \"e\", \"i\" , \"o\" 和 \"u\"。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>10\n<strong>解释：</strong>所有可能的字符串分别是：\"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" 和 \"ua\"。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 5\n<strong>输出：</strong>68</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 2 * 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1221. 分割平衡字符串', '<p>在一个 <strong>平衡字符串</strong> 中，<code>\'L\'</code> 和 <code>\'R\'</code> 字符的数量是相同的。</p> \n<p>给你一个平衡字符串&nbsp;<code>s</code>，请你将它分割成尽可能多的平衡字符串。</p> \n<p><strong>注意：</strong>分割得到的每个字符串都必须是平衡字符串。</p> \n<p>返回可以通过分割得到的平衡字符串的 <strong>最大数量</strong> <strong>。</strong></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"RLRRLLRLRL\"\n<strong>输出：</strong>4\n<strong>解释：</strong>s 可以分割为 \"RL\"、\"RRLL\"、\"RL\"、\"RL\" ，每个子字符串中都包含相同数量的 \'L\' 和 \'R\' 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"RLLLLRRRLR\"\n<strong>输出：</strong>3\n<strong>解释：</strong>s 可以分割为 \"RL\"、\"LLLRRR\"、\"LR\" ，每个子字符串中都包含相同数量的 \'L\' 和 \'R\' 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"LLLLRRRR\"\n<strong>输出：</strong>1\n<strong>解释：</strong>s 只能保持原样 \"LLLLRRRR\".\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"RLRRRLLRLL\"\n<strong>输出：</strong>2\n<strong>解释：</strong>s 可以分割为 \"RL\"、\"RRRLLRLL\" ，每个子字符串中都包含相同数量的 \'L\' 和 \'R\' 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 1000</code></li> \n <li><code>s[i] = \'L\' 或 \'R\'</code></li> \n <li><code>s</code> 是一个 <strong>平衡</strong> 字符串</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1222. 可以攻击国王的皇后', '<p>在一个&nbsp;<strong>8x8</strong>&nbsp;的棋盘上，放置着若干「黑皇后」和一个「白国王」。</p> \n<p>「黑皇后」在棋盘上的位置分布用整数坐标数组&nbsp;<code>queens</code>&nbsp;表示，「白国王」的坐标用数组 <code>king</code> 表示。</p> \n<p>「黑皇后」的行棋规定是：横、直、斜都可以走，步数不受限制，但是，不能越子行棋。</p> \n<p>请你返回可以直接攻击到「白国王」的所有「黑皇后」的坐标（任意顺序）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 250px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/13/untitled-diagram.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]\n<strong>输出：</strong>[[0,1],[1,0],[3,3]]\n<strong>解释：</strong> \n[0,1] 的皇后可以攻击到国王，因为他们在同一行上。 \n[1,0] 的皇后可以攻击到国王，因为他们在同一列上。 \n[3,3] 的皇后可以攻击到国王，因为他们在同一条对角线上。 \n[0,4] 的皇后无法攻击到国王，因为她被位于 [0,1] 的皇后挡住了。 \n[4,0] 的皇后无法攻击到国王，因为她被位于 [1,0] 的皇后挡住了。 \n[2,4] 的皇后无法攻击到国王，因为她和国王不在同一行/列/对角线上。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 321px; width: 321px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/13/untitled-diagram-1.jpg\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]\n<strong>输出：</strong>[[2,2],[3,4],[4,4]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"height: 321px; width: 321px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/13/untitled-diagram-2.jpg\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]\n<strong>输出：</strong>[[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= queens.length&nbsp;&lt;= 63</code></li> \n <li><code>queens[i].length == 2</code></li> \n <li><code>0 &lt;= queens[i][j] &lt;&nbsp;8</code></li> \n <li><code>king.length == 2</code></li> \n <li><code>0 &lt;= king[0], king[1] &lt; 8</code></li> \n <li>一个棋盘格上最多只能放置一枚棋子。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1223. 掷骰子模拟', '<p>有一个骰子模拟器会每次投掷的时候生成一个 1 到 6 的随机数。</p> \n<p>不过我们在使用它时有个约束，就是使得投掷骰子时，<strong>连续</strong> 掷出数字&nbsp;<code>i</code>&nbsp;的次数不能超过&nbsp;<code>rollMax[i]</code>（<code>i</code>&nbsp;从 1 开始编号）。</p> \n<p>现在，给你一个整数数组&nbsp;<code>rollMax</code>&nbsp;和一个整数&nbsp;<code>n</code>，请你来计算掷&nbsp;<code>n</code>&nbsp;次骰子可得到的不同点数序列的数量。</p> \n<p>假如两个序列中至少存在一个元素不同，就认为这两个序列是不同的。由于答案可能很大，所以请返回 <strong>模&nbsp;<code>10^9 + 7</code></strong>&nbsp;之后的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2, rollMax = [1,1,2,2,2,3]\n<strong>输出：</strong>34\n<strong>解释：</strong>我们掷 2 次骰子，如果没有约束的话，共有 6 * 6 = 36 种可能的组合。但是根据 rollMax 数组，数字 1 和 2 最多连续出现一次，所以不会出现序列 (1,1) 和 (2,2)。因此，最终答案是 36-2 = 34。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2, rollMax = [1,1,1,1,1,1]\n<strong>输出：</strong>30\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 3, rollMax = [1,1,1,2,2,3]\n<strong>输出：</strong>181\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 5000</code></li> \n <li><code>rollMax.length == 6</code></li> \n <li><code>1 &lt;= rollMax[i] &lt;= 15</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1224. 最大相等频率', '<p>给出一个正整数数组&nbsp;<code>nums</code>，请你帮忙从该数组中找出能满足下面要求的 <strong>最长</strong> 前缀，并返回其长度：</p> \n<ul> \n <li>从前缀中 <strong>删除一个</strong> 元素后，使得所剩下的每个数字的出现次数相同。</li> \n</ul> \n<p>如果删除这个元素后没有剩余元素存在，仍可认为每个数字都具有相同的出现次数（也就是 0 次）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [2,2,1,1,5,3,3,5]\n<strong>输出：</strong>7\n<strong>解释：</strong>对于长度为 7 的子数组 [2,2,1,1,5,3,3]，如果我们从中删去 nums[4]=5，就可以得到 [2,2,1,1,3,3]，里面每个数字都出现了两次。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]\n<strong>输出：</strong>13\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,1,2,2,2]\n<strong>输出：</strong>5\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [10,2,8,9,3,8,1,5,2,3,7,6]\n<strong>输出：</strong>8\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= nums.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1226. 哲学家进餐', '<p>5 个沉默寡言的哲学家围坐在圆桌前，每人面前一盘意面。叉子放在哲学家之间的桌面上。（5 个哲学家，5 根叉子）</p> \n<p>所有的哲学家都只会在思考和进餐两种行为间交替。哲学家只有同时拿到左边和右边的叉子才能吃到面，而同一根叉子在同一时间只能被一个哲学家使用。每个哲学家吃完面后都需要把叉子放回桌面以供其他哲学家吃面。只要条件允许，哲学家可以拿起左边或者右边的叉子，但在没有同时拿到左右叉子时不能进食。</p> \n<p>假设面的数量没有限制，哲学家也能随便吃，不需要考虑吃不吃得下。</p> \n<p>设计一个进餐规则（并行算法）使得每个哲学家都不会挨饿；也就是说，在没有人知道别人什么时候想吃东西或思考的情况下，每个哲学家都可以在吃饭和思考之间一直交替下去。</p> \n<p><img style=\"height: 415px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/23/an_illustration_of_the_dining_philosophers_problem.png\" alt=\"\"></p> \n<p><em>问题描述和图片来自维基百科&nbsp;<a href=\"https://en.wikipedia.org/wiki/Dining_philosophers_problem\">wikipedia.org</a></em></p> \n<p>&nbsp;</p> \n<p>哲学家从&nbsp;<strong>0</strong> 到 <strong>4</strong> 按 <strong>顺时针</strong> 编号。请实现函数&nbsp;<code>void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork)</code>：</p> \n<ul> \n <li><code>philosopher</code>&nbsp;哲学家的编号。</li> \n <li><code>pickLeftFork</code>&nbsp;和&nbsp;<code>pickRightFork</code>&nbsp;表示拿起左边或右边的叉子。</li> \n <li><code>eat</code>&nbsp;表示吃面。</li> \n <li><code>putLeftFork</code>&nbsp;和&nbsp;<code>putRightFork</code>&nbsp;表示放下左边或右边的叉子。</li> \n <li>由于哲学家不是在吃面就是在想着啥时候吃面，所以思考这个方法没有对应的回调。</li> \n</ul> \n<p>给你 5 个线程，每个都代表一个哲学家，请你使用类的同一个对象来模拟这个过程。在最后一次调用结束之前，可能会为同一个哲学家多次调用该函数。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>[[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]\n<strong>解释:</strong>\nn 表示每个哲学家需要进餐的次数。\n输出数组描述了叉子的控制和进餐的调用，它的格式如下：\noutput[i] = [a, b, c] (3个整数)\n- a 哲学家编号。\n- b 指定叉子：{1 : 左边, 2 : 右边}.\n- c 指定行为：{1 : 拿起, 2 : 放下, 3 : 吃面}。\n如 [4,2,1] 表示 4 号哲学家拿起了右边的叉子。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 60</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1227. 飞机座位分配概率', '<p>有 <code>n</code> 位乘客即将登机，飞机正好有 <code>n</code> 个座位。第一位乘客的票丢了，他随便选了一个座位坐下。</p> \n<p>剩下的乘客将会：</p> \n<ul> \n <li> <p>如果他们自己的座位还空着，就坐到自己的座位上，</p> </li> \n <li>当他们自己的座位被占用时，随机选择其他座位</li> \n</ul> \n<p>第 <code>n</code>&nbsp;位乘客坐在自己的座位上的概率是多少？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>1.00000\n<strong>解释：</strong>第一个人只会坐在自己的位置上。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> n = 2\n<strong>输出:</strong> 0.50000\n<strong>解释：</strong>在第一个人选好座位坐下后，第二个人坐在自己的座位上的概率是 0.5。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('123. 买卖股票的最佳时机 III', '<p>给定一个数组，它的第<em> </em><code>i</code> 个元素是一支给定的股票在第 <code>i</code><em> </em>天的价格。</p> \n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成&nbsp;<strong>两笔&nbsp;</strong>交易。</p> \n<p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入：</strong>prices = [3,3,5,0,0,3,1,4]\n<strong>输出：</strong>6\n<strong>解释：</strong>在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。\n&nbsp;    随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>prices = [1,2,3,4,5]\n<strong>输出：</strong>4\n<strong>解释：</strong>在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 &nbsp; \n&nbsp;    注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。 &nbsp; \n&nbsp;    因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>prices = [7,6,4,3,1] \n<strong>输出：</strong>0 \n<strong>解释：</strong>在这个情况下, 没有交易完成, 所以最大利润为 0。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>prices = [1]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;prices.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;=&nbsp;prices[i] &lt;=&nbsp;10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1232. 缀点成线', '<p>在一个&nbsp;XY 坐标系中有一些点，我们用数组&nbsp;<code>coordinates</code>&nbsp;来分别记录它们的坐标，其中&nbsp;<code>coordinates[i] = [x, y]</code>&nbsp;表示横坐标为 <code>x</code>、纵坐标为 <code>y</code>&nbsp;的点。</p> \n<p>请你来判断，这些点是否在该坐标系中属于同一条直线上，是则返回 <code>true</code>，否则请返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 336px; width: 336px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/19/untitled-diagram-2.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 336px; width: 348px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/19/untitled-diagram-1.jpg\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;=&nbsp;coordinates.length &lt;= 1000</code></li> \n <li><code>coordinates[i].length == 2</code></li> \n <li><code>-10^4 &lt;=&nbsp;coordinates[i][0],&nbsp;coordinates[i][1] &lt;= 10^4</code></li> \n <li><code>coordinates</code>&nbsp;中不含重复的点</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1233. 删除子文件夹', '<p>你是一位系统管理员，手里有一份文件夹列表 <code>folder</code>，你的任务是要删除该列表中的所有 <strong>子文件夹</strong>，并以 <strong>任意顺序</strong> 返回剩下的文件夹。</p> \n<p>我们这样定义「子文件夹」：</p> \n<ul> \n <li>如果文件夹&nbsp;<code>folder[i]</code>&nbsp;位于另一个文件夹&nbsp;<code>folder[j]</code>&nbsp;下，那么&nbsp;<code>folder[i]</code>&nbsp;就是&nbsp;<code>folder[j]</code>&nbsp;的子文件夹。</li> \n</ul> \n<p>文件夹的「路径」是由一个或多个按以下格式串联形成的字符串：</p> \n<ul> \n <li><code>/</code>&nbsp;后跟一个或者多个小写英文字母。</li> \n</ul> \n<p>例如，<code>/leetcode</code>&nbsp;和&nbsp;<code>/leetcode/problems</code>&nbsp;都是有效的路径，而空字符串和&nbsp;<code>/</code>&nbsp;不是。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>folder = [\"/a\",\"/a/b\",\"/c/d\",\"/c/d/e\",\"/c/f\"]\n<strong>输出：</strong>[\"/a\",\"/c/d\",\"/c/f\"]\n<strong>解释：</strong>\"/a/b/\" 是 \"/a\" 的子文件夹，而 \"/c/d/e\" 是 \"/c/d\" 的子文件夹。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>folder = [\"/a\",\"/a/b/c\",\"/a/b/d\"]\n<strong>输出：</strong>[\"/a\"]\n<strong>解释：</strong>文件夹 \"/a/b/c\" 和 \"/a/b/d/\" 都会被删除，因为它们都是 \"/a\" 的子文件夹。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>folder = [\"/a/b/c\",\"/a/b/d\",\"/a/b/ca\"]\n<strong>输出：</strong>[\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= folder.length&nbsp;&lt;= 4 * 10^4</code></li> \n <li><code>2 &lt;= folder[i].length &lt;= 100</code></li> \n <li><code>folder[i]</code>&nbsp;只包含小写字母和 <code>/</code></li> \n <li><code>folder[i]</code>&nbsp;总是以字符 <code>/</code>&nbsp;起始</li> \n <li>每个文件夹名都是唯一的</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1234. 替换子串得到平衡字符串', '<p>有一个只含有&nbsp;<code>\'Q\', \'W\', \'E\',&nbsp;\'R\'</code>&nbsp;四种字符，且长度为 <code>n</code>&nbsp;的字符串。</p> \n<p>假如在该字符串中，这四个字符都恰好出现&nbsp;<code>n/4</code>&nbsp;次，那么它就是一个「平衡字符串」。</p> \n<p>&nbsp;</p> \n<p>给你一个这样的字符串 <code>s</code>，请通过「替换一个子串」的方式，使原字符串 <code>s</code> 变成一个「平衡字符串」。</p> \n<p>你可以用和「待替换子串」长度相同的&nbsp;<strong>任何</strong> 其他字符串来完成替换。</p> \n<p>请返回待替换子串的最小可能长度。</p> \n<p>如果原字符串自身就是一个平衡字符串，则返回 <code>0</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"QWER\"\n<strong>输出：</strong>0\n<strong>解释：</strong>s 已经是平衡的了。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"QQWE\"\n<strong>输出：</strong>1\n<strong>解释：</strong>我们需要把一个 \'Q\' 替换成 \'R\'，这样得到的 \"RQWE\" (或 \"QRWE\") 是平衡的。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"QQQW\"\n<strong>输出：</strong>2\n<strong>解释：</strong>我们可以把前面的 \"QQ\" 替换成 \"ER\"。 \n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"QQQQ\"\n<strong>输出：</strong>3\n<strong>解释：</strong>我们可以替换后 3 个 \'Q\'，使 s = \"QWER\"。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10^5</code></li> \n <li><code>s.length</code>&nbsp;是&nbsp;<code>4</code>&nbsp;的倍数</li> \n <li><code>s</code>&nbsp;中只含有&nbsp;<code>\'Q\'</code>, <code>\'W\'</code>, <code>\'E\'</code>,&nbsp;<code>\'R\'</code>&nbsp;四种字符</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1235. 规划兼职工作', '<p>你打算利用空闲时间来做兼职工作赚些零花钱。</p> \n<p>这里有&nbsp;<code>n</code>&nbsp;份兼职工作，每份工作预计从&nbsp;<code>startTime[i]</code>&nbsp;开始到&nbsp;<code>endTime[i]</code>&nbsp;结束，报酬为&nbsp;<code>profit[i]</code>。</p> \n<p>给你一份兼职工作表，包含开始时间&nbsp;<code>startTime</code>，结束时间&nbsp;<code>endTime</code>&nbsp;和预计报酬&nbsp;<code>profit</code>&nbsp;三个数组，请你计算并返回可以获得的最大报酬。</p> \n<p>注意，时间上出现重叠的 2 份工作不能同时进行。</p> \n<p>如果你选择的工作在时间&nbsp;<code>X</code>&nbsp;结束，那么你可以立刻进行在时间&nbsp;<code>X</code>&nbsp;开始的下一份工作。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/19/sample1_1584.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]\n<strong>输出：</strong>120\n<strong>解释：\n</strong>我们选出第 1 份和第 4 份工作， \n时间范围是 [1-3]+[3-6]，共获得报酬 120 = 50 + 70。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 112px; width: 600px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/19/sample22_1584.png\" alt=\"\"> </strong></p> \n<pre><strong>输入：</strong>startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]\n<strong>输出：</strong>150\n<strong>解释：\n</strong>我们选择第 1，4，5 份工作。 \n共获得报酬 150 = 20 + 70 + 60。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"height: 112px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/19/sample3_1584.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]\n<strong>输出：</strong>6\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= startTime.length == endTime.length ==&nbsp;profit.length&nbsp;&lt;= 5 * 10^4</code></li> \n <li><code>1 &lt;=&nbsp;startTime[i] &lt;&nbsp;endTime[i] &lt;= 10^9</code></li> \n <li><code>1 &lt;=&nbsp;profit[i] &lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1237. 找出给定方程的正整数解', '<p>给你一个函数&nbsp;&nbsp;<code>f(x, y)</code>&nbsp;和一个目标结果&nbsp;<code>z</code>，函数公式未知，请你计算方程&nbsp;<code>f(x,y) == z</code>&nbsp;所有可能的正整数 <strong>数对</strong>&nbsp;<code>x</code> 和 <code>y</code>。满足条件的结果数对可以按任意顺序返回。</p> \n<p>尽管函数的具体式子未知，但它是单调递增函数，也就是说：</p> \n<ul> \n <li><code>f(x, y) &lt; f(x + 1, y)</code></li> \n <li><code>f(x, y) &lt; f(x, y + 1)</code></li> \n</ul> \n<p>函数接口定义如下：</p> \n<pre>interface CustomFunction {\npublic:\n  // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.\n  int f(int x, int y);\n};</pre> \n<p>你的解决方案将按如下规则进行评判：</p> \n<ul> \n <li>判题程序有一个由 <code>CustomFunction</code> 的 <code>9</code> 种实现组成的列表，以及一种为特定的 <code>z</code> 生成所有有效数对的答案的方法。</li> \n <li>判题程序接受两个输入：<code>function_id</code>（决定使用哪种实现测试你的代码）以及目标结果 <code>z</code> 。</li> \n <li>判题程序将会调用你实现的 <code>findSolution</code> 并将你的结果与答案进行比较。</li> \n <li>如果你的结果与答案相符，那么解决方案将被视作正确答案，即 <code>Accepted</code> 。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>function_id = 1, z = 5\n<strong>输出：</strong>[[1,4],[2,3],[3,2],[4,1]]\n<strong>解释：</strong>function_id = 1 暗含的函数式子为 f(x, y) = x + y\n以下 x 和 y 满足 f(x, y) 等于 5：\nx=1, y=4 -&gt; f(1, 4) = 1 + 4 = 5\nx=2, y=3 -&gt; f(2, 3) = 2 + 3 = 5\nx=3, y=2 -&gt; f(3, 2) = 3 + 2 = 5\nx=4, y=1 -&gt; f(4, 1) = 4 + 1 = 5\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>function_id = 2, z = 5\n<strong>输出：</strong>[[1,5],[5,1]]\n<strong>解释：</strong>function_id = 2 暗含的函数式子为 f(x, y) = x * y\n以下 x 和 y 满足 f(x, y) 等于 5：\nx=1, y=5 -&gt; f(1, 5) = 1 * 5 = 5\nx=5, y=1 -&gt; f(5, 1) = 5 * 1 = 5</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= function_id &lt;= 9</code></li> \n <li><code>1 &lt;= z &lt;= 100</code></li> \n <li>题目保证&nbsp;<code>f(x, y) == z</code>&nbsp;的解处于&nbsp;<code>1 &lt;= x, y &lt;= 1000</code>&nbsp;的范围内。</li> \n <li>在 <code>1 &lt;= x, y &lt;= 1000</code>&nbsp;的前提下，题目保证&nbsp;<code>f(x, y)</code>&nbsp;是一个&nbsp;32 位有符号整数。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1238. 循环码排列', '<p>给你两个整数&nbsp;<code>n</code> 和 <code>start</code>。你的任务是返回任意 <code>(0,1,2,,...,2^n-1)</code> 的排列 <code>p</code>，并且满足：</p> \n<ul> \n <li><code>p[0] = start</code></li> \n <li><code>p[i]</code> 和 <code>p[i+1]</code>&nbsp;的二进制表示形式只有一位不同</li> \n <li><code>p[0]</code> 和 <code>p[2^n -1]</code>&nbsp;的二进制表示形式也只有一位不同</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2, start = 3\n<strong>输出：</strong>[3,2,0,1]\n<strong>解释：</strong>这个排列的二进制表示是 (11,10,00,01)\n     所有的相邻元素都有一位是不同的，另一个有效的排列是 [3,1,0,2]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输出：</strong>n = 3, start = 2\n<strong>输出：</strong>[2,6,7,5,4,0,1,3]\n<strong>解释：</strong>这个排列的二进制表示是 (010,110,111,101,100,000,001,011)\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 16</code></li> \n <li><code>0 &lt;= start&nbsp;&lt;&nbsp;2^n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1239. 串联字符串的最大长度', '<p>给定一个字符串数组 <code>arr</code>，字符串 <code>s</code> 是将 <code>arr</code> 某一子序列字符串连接所得的字符串，如果 <code>s</code> 中的每一个字符都只出现过一次，那么它就是一个可行解。</p> \n<p>请返回所有可行解 <code>s</code> 中最长长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [\"un\",\"iq\",\"ue\"]\n<strong>输出：</strong>4\n<strong>解释：</strong>所有可能的串联组合是 \"\",\"un\",\"iq\",\"ue\",\"uniq\" 和 \"ique\"，最大长度为 4。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [\"cha\",\"r\",\"act\",\"ers\"]\n<strong>输出：</strong>6\n<strong>解释：</strong>可能的解答有 \"chaers\" 和 \"acters\"。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [\"abcdefghijklmnopqrstuvwxyz\"]\n<strong>输出：</strong>26\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 16</code></li> \n <li><code>1 &lt;= arr[i].length &lt;= 26</code></li> \n <li><code>arr[i]</code>&nbsp;中只含有小写英文字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('124. 二叉树中的最大路径和', '<p><strong>路径</strong> 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 <strong>至多出现一次</strong> 。该路径<strong> 至少包含一个 </strong>节点，且不一定经过根节点。</p> \n<p><strong>路径和</strong> 是路径中各节点值的总和。</p> \n<p>给你一个二叉树的根节点 <code>root</code> ，返回其 <strong>最大路径和</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 322px; height: 182px;\" src=\"https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,2,3]\n<strong>输出：</strong>6\n<strong>解释：</strong>最优路径是 2 -&gt; 1 -&gt; 3 ，路径和为 2 + 1 + 3 = 6</pre> \n<p><strong>示例 2：</strong></p> \n<img src=\"https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [-10,9,20,null,null,15,7]\n<strong>输出：</strong>42\n<strong>解释：</strong>最优路径是 15 -&gt; 20 -&gt; 7 ，路径和为 15 + 20 + 7 = 42\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点数目范围是 <code>[1, 3 * 10<sup>4</sup>]</code></li> \n <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1240. 铺瓷砖', '<p>你是一位施工队的工长，根据设计师的要求准备为一套设计风格独特的房子进行室内装修。</p> \n<p>房子的客厅大小为&nbsp;<code>n</code>&nbsp;x <code>m</code>，为保持极简的风格，需要使用尽可能少的 <strong>正方形</strong> 瓷砖来铺盖地面。</p> \n<p>假设正方形瓷砖的规格不限，边长都是整数。</p> \n<p>请你帮设计师计算一下，最少需要用到多少块方形瓷砖？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 106px; width: 154px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/25/sample_11_1592.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 2, m = 3\n<strong>输出：</strong>3\n<code><strong>解释：</strong>3</code> 块地砖就可以铺满卧室。\n<code>     2</code> 块 <code>1x1 地砖</code>\n<code>     1</code> 块 <code>2x2 地砖</code></pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 126px; width: 224px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/25/sample_22_1592.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 5, m = 8\n<strong>输出：</strong>5\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 189px; width: 224px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/25/sample_33_1592.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 11, m = 13\n<strong>输出：</strong>6\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 13</code></li> \n <li><code>1 &lt;= m&nbsp;&lt;=&nbsp;13</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1247. 交换字符使得字符串相同', '<p>有两个长度相同的字符串&nbsp;<code>s1</code> 和&nbsp;<code>s2</code>，且它们其中&nbsp;<strong>只含有</strong>&nbsp;字符&nbsp;<code>\"x\"</code> 和&nbsp;<code>\"y\"</code>，你需要通过「交换字符」的方式使这两个字符串相同。</p> \n<p>每次「交换字符」的时候，你都可以在两个字符串中各选一个字符进行交换。</p> \n<p>交换只能发生在两个不同的字符串之间，绝对不能发生在同一个字符串内部。也就是说，我们可以交换&nbsp;<code>s1[i]</code> 和&nbsp;<code>s2[j]</code>，但不能交换&nbsp;<code>s1[i]</code> 和&nbsp;<code>s1[j]</code>。</p> \n<p>最后，请你返回使 <code>s1</code> 和 <code>s2</code> 相同的最小交换次数，如果没有方法能够使得这两个字符串相同，则返回&nbsp;<code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s1 = \"xx\", s2 = \"yy\"\n<strong>输出：</strong>1\n<strong>解释：\n</strong>交换 s1[0] 和 s2[1]，得到 s1 = \"yx\"，s2 = \"yx\"。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s1 = \"xy\", s2 = \"yx\"\n<strong>输出：</strong>2\n<strong>解释：\n</strong>交换 s1[0] 和 s2[0]，得到 s1 = \"yy\"，s2 = \"xx\" 。\n交换 s1[0] 和 s2[1]，得到 s1 = \"xy\"，s2 = \"xy\" 。\n注意，你不能交换 s1[0] 和 s1[1] 使得 s1 变成 \"yx\"，因为我们只能交换属于两个不同字符串的字符。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s1 = \"xx\", s2 = \"xy\"\n<strong>输出：</strong>-1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s1 = \"xxyyxyxyxx\", s2 = \"xyyxyxxxyx\"\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s1.length, s2.length &lt;= 1000</code></li> \n <li><code>s1, s2</code>&nbsp;只包含&nbsp;<code>\'x\'</code>&nbsp;或&nbsp;<code>\'y\'</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1248. 统计「优美子数组」', '<p>给你一个整数数组&nbsp;<code>nums</code> 和一个整数 <code>k</code>。</p> \n<p>如果某个 <strong>连续</strong> 子数组中恰好有 <code>k</code> 个奇数数字，我们就认为这个子数组是「<strong>优美子数组</strong>」。</p> \n<p>请返回这个数组中「优美子数组」的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,2,1,1], k = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>包含 3 个奇数的子数组是 [1,1,2,1] 和 [1,2,1,1] 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [2,4,6], k = 1\n<strong>输出：</strong>0\n<strong>解释：</strong>数列中不包含任何奇数，所以不存在优美子数组。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [2,2,2,1,2,2,1,2,2,2], k = 2\n<strong>输出：</strong>16\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 50000</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10^5</code></li> \n <li><code>1 &lt;= k &lt;= nums.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1249. 移除无效的括号', '<p>给你一个由 <code>\'(\'</code>、<code>\')\'</code> 和小写字母组成的字符串 <code>s</code>。</p> \n<p>你需要从字符串中删除最少数目的 <code>\'(\'</code> 或者 <code>\')\'</code>&nbsp;（可以删除任意位置的括号)，使得剩下的「括号字符串」有效。</p> \n<p>请返回任意一个合法字符串。</p> \n<p>有效「括号字符串」应当符合以下&nbsp;<strong>任意一条&nbsp;</strong>要求：</p> \n<ul> \n <li>空字符串或只包含小写字母的字符串</li> \n <li>可以被写作&nbsp;<code>AB</code>（<code>A</code>&nbsp;连接&nbsp;<code>B</code>）的字符串，其中&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;都是有效「括号字符串」</li> \n <li>可以被写作&nbsp;<code>(A)</code>&nbsp;的字符串，其中&nbsp;<code>A</code>&nbsp;是一个有效的「括号字符串」</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"lee(t(c)o)de)\"\n<strong>输出：</strong>\"lee(t(c)o)de\"\n<strong>解释：</strong>\"lee(t(co)de)\" , \"lee(t(c)ode)\" 也是一个可行答案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"a)b(c)d\"\n<strong>输出：</strong>\"ab(c)d\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"))((\"\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>空字符串也是有效的\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"(a(b(c)d)\"\n<strong>输出：</strong>\"a(b(c)d)\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10^5</code></li> \n <li><code>s[i]</code>&nbsp;可能是&nbsp;<code>\'(\'</code>、<code>\')\'</code>&nbsp;或英文小写字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('125. 验证回文串', '<p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p> \n<p><strong>说明：</strong>本题中，我们将空字符串定义为有效的回文串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> \"A man, a plan, a canal: Panama\"\n<strong>输出:</strong> true\n<strong>解释：</strong>\"amanaplanacanalpanama\" 是回文串\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> \"race a car\"\n<strong>输出:</strong> false\n<strong>解释：</strong>\"raceacar\" 不是回文串\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li> \n <li>字符串 <code>s</code> 由 ASCII 字符组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1250. 检查「好数组」', '<p>给你一个正整数数组 <code>nums</code>，你需要从中任选一些子集，然后将子集中每一个数乘以一个 <strong>任意整数</strong>，并求出他们的和。</p> \n<p>假如该和结果为&nbsp;<code>1</code>，那么原数组就是一个「<strong>好数组</strong>」，则返回 <code>True</code>；否则请返回 <code>False</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [12,5,7,23]\n<strong>输出：</strong>true\n<strong>解释：</strong>挑选数字 5 和 7。\n5*3 + 7*(-2) = 1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [29,6,10]\n<strong>输出：</strong>true\n<strong>解释：</strong>挑选数字 29, 6 和 10。\n29*1 + 6*(-3) + 10*(-1) = 1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [3,6]\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1252. 奇数值单元格的数目', '<p>给你一个 <code>m x n</code> 的矩阵，最开始的时候，每个单元格中的值都是 <code>0</code>。</p> \n<p>另有一个二维索引数组&nbsp;<code>indices</code>，<code>indices[i] = [ri, ci]</code> 指向矩阵中的某个位置，其中 <code>ri</code> 和 <code>ci</code> 分别表示指定的行和列（<strong>从 <code>0</code> 开始编号</strong>）。</p> \n<p>对 <code>indices[i]</code> 所指向的每个位置，应同时执行下述增量操作：</p> \n<ol> \n <li><code>r<sub>i</sub></code> 行上的所有单元格，加 <code>1</code> 。</li> \n <li><code>c<sub>i</sub></code> 列上的所有单元格，加 <code>1</code> 。</li> \n</ol> \n<p>给你 <code>m</code>、<code>n</code> 和 <code>indices</code> 。请你在执行完所有&nbsp;<code>indices</code>&nbsp;指定的增量操作后，返回矩阵中 <strong>奇数值单元格</strong> 的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 118px; width: 600px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/06/e1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>m = 2, n = 3, indices = [[0,1],[1,1]]\n<strong>输出：</strong>6\n<strong>解释：</strong>最开始的矩阵是 [[0,0,0],[0,0,0]]。\n第一次增量操作后得到 [[1,2,1],[0,1,0]]。\n最后的矩阵是 [[1,3,1],[1,3,1]]，里面有 6 个奇数。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 150px; width: 600px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/06/e2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>m = 2, n = 2, indices = [[1,1],[0,0]]\n<strong>输出：</strong>0\n<strong>解释：</strong>最后的矩阵是 [[2,2],[2,2]]，里面没有奇数。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= m, n &lt;= 50</code></li> \n <li><code>1 &lt;= indices.length &lt;= 100</code></li> \n <li><code>0 &lt;= r<sub>i</sub> &lt; m</code></li> \n <li><code>0 &lt;= c<sub>i</sub> &lt; n</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你可以设计一个时间复杂度为 <code>O(n + m + indices.length)</code> 且仅用 <code>O(n + m)</code> 额外空间的算法来解决此问题吗？</p>');
INSERT INTO `leecode` VALUES ('1253. 重构 2 行二进制矩阵', '<p>给你一个&nbsp;<code>2</code>&nbsp;行 <code>n</code> 列的二进制数组：</p> \n<ul> \n <li>矩阵是一个二进制矩阵，这意味着矩阵中的每个元素不是&nbsp;<code>0</code>&nbsp;就是&nbsp;<code>1</code>。</li> \n <li>第 <code>0</code> 行的元素之和为&nbsp;<code>upper</code>。</li> \n <li>第 <code>1</code> 行的元素之和为 <code>lower</code>。</li> \n <li>第 <code>i</code> 列（从 <code>0</code> 开始编号）的元素之和为&nbsp;<code>colsum[i]</code>，<code>colsum</code>&nbsp;是一个长度为&nbsp;<code>n</code>&nbsp;的整数数组。</li> \n</ul> \n<p>你需要利用&nbsp;<code>upper</code>，<code>lower</code>&nbsp;和&nbsp;<code>colsum</code>&nbsp;来重构这个矩阵，并以二维整数数组的形式返回它。</p> \n<p>如果有多个不同的答案，那么任意一个都可以通过本题。</p> \n<p>如果不存在符合要求的答案，就请返回一个空的二维数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>upper = 2, lower = 1, colsum = [1,1,1]\n<strong>输出：</strong>[[1,1,0],[0,0,1]]\n<strong>解释：</strong>[[1,0,1],[0,1,0]] 和 [[0,1,1],[1,0,0]] 也是正确答案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>upper = 2, lower = 3, colsum = [2,2,1,1]\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]\n<strong>输出：</strong>[[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= colsum.length &lt;= 10^5</code></li> \n <li><code>0 &lt;= upper, lower &lt;= colsum.length</code></li> \n <li><code>0 &lt;= colsum[i] &lt;= 2</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1254. 统计封闭岛屿的数目', '<p>有一个二维矩阵 <code>grid</code>&nbsp;，每个位置要么是陆地（记号为&nbsp;<code>0</code> ）要么是水域（记号为&nbsp;<code>1</code> ）。</p> \n<p>我们从一块陆地出发，每次可以往上下左右&nbsp;4 个方向相邻区域走，能走到的所有陆地区域，我们将其称为一座「<strong>岛屿</strong>」。</p> \n<p>如果一座岛屿&nbsp;<strong>完全</strong>&nbsp;由水域包围，即陆地边缘上下左右所有相邻区域都是水域，那么我们将其称为 「<strong>封闭岛屿</strong>」。</p> \n<p>请返回封闭岛屿的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/07/sample_3_1610.png\"></p> \n<pre><strong>输入：</strong>grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]\n<strong>输出：</strong>2\n<strong>解释：</strong>\n灰色区域的岛屿是封闭岛屿，因为这座岛屿完全被水域包围（即被 1 区域包围）。</pre> \n<p><strong>示例 2：</strong></p> \n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/07/sample_4_1610.png\"></p> \n<pre><strong>输入：</strong>grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,1,1,1,1,1,1],\n&nbsp;            [1,0,0,0,0,0,1],\n&nbsp;            [1,0,1,1,1,0,1],\n&nbsp;            [1,0,1,0,1,0,1],\n&nbsp;            [1,0,1,1,1,0,1],\n&nbsp;            [1,0,0,0,0,0,1],\n             [1,1,1,1,1,1,1]]\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= grid.length, grid[0].length &lt;= 100</code></li> \n <li><code>0 &lt;= grid[i][j] &lt;=1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1255. 得分最高的单词集合', '<p>你将会得到一份单词表&nbsp;<code>words</code>，一个字母表&nbsp;<code>letters</code>&nbsp;（可能会有重复字母），以及每个字母对应的得分情况表&nbsp;<code>score</code>。</p> \n<p>请你帮忙计算玩家在单词拼写游戏中所能获得的「最高得分」：能够由&nbsp;<code>letters</code>&nbsp;里的字母拼写出的&nbsp;<strong>任意</strong>&nbsp;属于 <code>words</code>&nbsp;单词子集中，分数最高的单词集合的得分。</p> \n<p>单词拼写游戏的规则概述如下：</p> \n<ul> \n <li>玩家需要用字母表&nbsp;<code>letters</code> 里的字母来拼写单词表&nbsp;<code>words</code>&nbsp;中的单词。</li> \n <li>可以只使用字母表&nbsp;<code>letters</code> 中的部分字母，但是每个字母最多被使用一次。</li> \n <li>单词表 <code>words</code>&nbsp;中每个单词只能计分（使用）一次。</li> \n <li>根据字母得分情况表<code>score</code>，字母 <code>\'a\'</code>,&nbsp;<code>\'b\'</code>,&nbsp;<code>\'c\'</code>, ... ,&nbsp;<code>\'z\'</code> 对应的得分分别为 <code>score[0]</code>, <code>score[1]</code>,&nbsp;...,&nbsp;<code>score[25]</code>。</li> \n <li>本场游戏的「得分」是指：玩家所拼写出的单词集合里包含的所有字母的得分之和。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]\n<strong>输出：</strong>23\n<strong>解释：</strong>\n字母得分为  a=1, c=9, d=5, g=3, o=2\n使用给定的字母表 letters，我们可以拼写单词 \"dad\" (5+1+5)和 \"good\" (3+2+2+5)，得分为 23 。\n而单词 \"dad\" 和 \"dog\" 只能得到 21 分。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]\n<strong>输出：</strong>27\n<strong>解释：</strong>\n字母得分为  a=4, b=4, c=4, x=5, z=10\n使用给定的字母表 letters，我们可以组成单词 \"ax\" (4+5)， \"bx\" (4+5) 和 \"cx\" (4+5) ，总得分为 27 。\n单词 \"xxxz\" 的得分仅为 25 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n字母 \"e\" 在字母表 letters 中只出现了一次，所以无法组成单词表 words 中的单词。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 14</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 15</code></li> \n <li><code>1 &lt;= letters.length &lt;= 100</code></li> \n <li><code>letters[i].length == 1</code></li> \n <li><code>score.length ==&nbsp;26</code></li> \n <li><code>0 &lt;= score[i] &lt;= 10</code></li> \n <li><code>words[i]</code>&nbsp;和&nbsp;<code>letters[i]</code>&nbsp;只包含小写的英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('126. 单词接龙 II', '<p>按字典&nbsp;<code>wordList</code> 完成从单词 <code>beginWord</code> 到单词 <code>endWord</code> 转化，一个表示此过程的 <strong>转换序列</strong> 是形式上像 <code>beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> 这样的单词序列，并满足：</p> \n<div class=\"original__bRMd\"> \n <div> \n  <ul> \n   <li>每对相邻的单词之间仅有单个字母不同。</li> \n   <li>转换过程中的每个单词 <code>s<sub>i</sub></code>（<code>1 &lt;= i &lt;= k</code>）必须是字典&nbsp;<code>wordList</code> 中的单词。注意，<code>beginWord</code> 不必是字典 <code>wordList</code> 中的单词。</li> \n   <li><code>s<sub>k</sub> == endWord</code></li> \n  </ul> \n  <p>给你两个单词 <code>beginWord</code> 和 <code>endWord</code> ，以及一个字典 <code>wordList</code> 。请你找出并返回所有从 <code>beginWord</code> 到 <code>endWord</code> 的 <strong>最短转换序列</strong> ，如果不存在这样的转换序列，返回一个空列表。每个序列都应该以单词列表<em> </em><code>[beginWord, s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub>]</code> 的形式返回。</p> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <pre><strong>输入：</strong>beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n<strong>输出：</strong>[[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\n<strong>解释：</strong>存在 2 种最短的转换序列：\n\"hit\" -&gt; \"hot\" -&gt; \"dot\" -&gt; \"dog\" -&gt; \"cog\"\n\"hit\" -&gt; \"hot\" -&gt; \"lot\" -&gt; \"log\" -&gt; \"cog\"\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n<strong>输出：</strong>[]\n<strong>解释：</strong>endWord \"cog\" 不在字典 wordList 中，所以不存在符合要求的转换序列。\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>1 &lt;= beginWord.length &lt;= 7</code></li> \n   <li><code>endWord.length == beginWord.length</code></li> \n   <li><code>1 &lt;= wordList.length &lt;= 5000</code></li> \n   <li><code>wordList[i].length == beginWord.length</code></li> \n   <li><code>beginWord</code>、<code>endWord</code> 和 <code>wordList[i]</code> 由小写英文字母组成</li> \n   <li><code>beginWord != endWord</code></li> \n   <li><code>wordList</code> 中的所有单词 <strong>互不相同</strong></li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('1260. 二维网格迁移', '<p>给你一个 <code>m</code> 行 <code>n</code>&nbsp;列的二维网格&nbsp;<code>grid</code>&nbsp;和一个整数&nbsp;<code>k</code>。你需要将&nbsp;<code>grid</code>&nbsp;迁移&nbsp;<code>k</code>&nbsp;次。</p> \n<p>每次「迁移」操作将会引发下述活动：</p> \n<ul> \n <li>位于 <code>grid[i][j]</code>&nbsp;的元素将会移动到&nbsp;<code>grid[i][j + 1]</code>。</li> \n <li>位于&nbsp;<code>grid[i][n&nbsp;- 1]</code> 的元素将会移动到&nbsp;<code>grid[i + 1][0]</code>。</li> \n <li>位于 <code>grid[m&nbsp;- 1][n - 1]</code>&nbsp;的元素将会移动到&nbsp;<code>grid[0][0]</code>。</li> \n</ul> \n<p>请你返回&nbsp;<code>k</code> 次迁移操作后最终得到的 <strong>二维网格</strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 158px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/16/e1-1.png\" alt=\"\"></p> \n<pre><code><strong>输入：</strong>grid</code> = [[1,2,3],[4,5,6],[7,8,9]], k = 1\n<strong>输出：</strong>[[9,1,2],[3,4,5],[6,7,8]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 166px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/16/e2-1.png\" alt=\"\"></p> \n<pre><code><strong>输入：</strong>grid</code> = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4\n<strong>输出：</strong>[[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><code><strong>输入：</strong>grid</code> = [[1,2,3],[4,5,6],[7,8,9]], k = 9\n<strong>输出：</strong>[[1,2,3],[4,5,6],[7,8,9]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m ==&nbsp;grid.length</code></li> \n <li><code>n ==&nbsp;grid[i].length</code></li> \n <li><code>1 &lt;= m &lt;= 50</code></li> \n <li><code>1 &lt;= n &lt;= 50</code></li> \n <li><code>-1000 &lt;= grid[i][j] &lt;= 1000</code></li> \n <li><code>0 &lt;= k &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1261. 在受污染的二叉树中查找元素', '<p>给出一个满足下述规则的二叉树：</p> \n<ol> \n <li><code>root.val == 0</code></li> \n <li>如果 <code>treeNode.val == x</code> 且&nbsp;<code>treeNode.left != null</code>，那么&nbsp;<code>treeNode.left.val == 2 * x + 1</code></li> \n <li>如果 <code>treeNode.val == x</code> 且 <code>treeNode.right != null</code>，那么&nbsp;<code>treeNode.right.val == 2 * x + 2</code></li> \n</ol> \n<p>现在这个二叉树受到「污染」，所有的&nbsp;<code>treeNode.val</code>&nbsp;都变成了&nbsp;<code>-1</code>。</p> \n<p>请你先还原二叉树，然后实现&nbsp;<code>FindElements</code>&nbsp;类：</p> \n<ul> \n <li><code>FindElements(TreeNode* root)</code>&nbsp;用受污染的二叉树初始化对象，你需要先把它还原。</li> \n <li><code>bool find(int target)</code>&nbsp;判断目标值&nbsp;<code>target</code>&nbsp;是否存在于还原后的二叉树中并返回结果。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 119px; width: 320px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/16/untitled-diagram-4-1.jpg\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>\n[\"FindElements\",\"find\",\"find\"]\n[[[-1,null,-1]],[1],[2]]\n<strong>输出：</strong>\n[null,false,true]\n<strong>解释：</strong>\nFindElements findElements = new FindElements([-1,null,-1]); \nfindElements.find(1); // return False \nfindElements.find(2); // return True </pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 198px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/16/untitled-diagram-4.jpg\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>\n[\"FindElements\",\"find\",\"find\",\"find\"]\n[[[-1,-1,-1,-1,-1]],[1],[3],[5]]\n<strong>输出：</strong>\n[null,true,true,false]\n<strong>解释：</strong>\nFindElements findElements = new FindElements([-1,-1,-1,-1,-1]);\nfindElements.find(1); // return True\nfindElements.find(3); // return True\nfindElements.find(5); // return False</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"height: 274px; width: 306px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/16/untitled-diagram-4-1-1.jpg\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>\n[\"FindElements\",\"find\",\"find\",\"find\",\"find\"]\n[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]\n<strong>输出：</strong>\n[null,true,false,false,true]\n<strong>解释：</strong>\nFindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);\nfindElements.find(2); // return True\nfindElements.find(3); // return False\nfindElements.find(4); // return False\nfindElements.find(5); // return True\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>TreeNode.val == -1</code></li> \n <li>二叉树的高度不超过&nbsp;<code>20</code></li> \n <li>节点的总数在&nbsp;<code>[1,&nbsp;10^4]</code>&nbsp;之间</li> \n <li>调用&nbsp;<code>find()</code>&nbsp;的总次数在&nbsp;<code>[1,&nbsp;10^4]</code>&nbsp;之间</li> \n <li><code>0 &lt;= target &lt;= 10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1262. 可被三整除的最大和', '<p>给你一个整数数组&nbsp;<code>nums</code>，请你找出并返回能被三整除的元素最大和。</p> \n<ol> \n</ol> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [3,6,5,1,8]\n<strong>输出：</strong>18\n<strong>解释：</strong>选出数字 3, 6, 1 和 8，它们的和是 18（可被 3 整除的最大和）。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [4]\n<strong>输出：</strong>0\n<strong>解释：</strong>4 不能被 3 整除，所以无法选出数字，返回 0。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4,4]\n<strong>输出：</strong>12\n<strong>解释：</strong>选出数字 1, 3, 4 以及 4，它们的和是 12（可被 3 整除的最大和）。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 4 * 10^4</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1263. 推箱子', '<p>「推箱子」是一款风靡全球的益智小游戏，玩家需要将箱子推到仓库中的目标位置。</p> \n<p>游戏地图用大小为 <code>n * m</code> 的网格 <code>grid</code> 表示，其中每个元素可以是墙、地板或者是箱子。</p> \n<p>现在你将作为玩家参与游戏，按规则将箱子&nbsp;<code>\'B\'</code>&nbsp;移动到目标位置&nbsp;<code>\'T\'</code> ：</p> \n<ul> \n <li>玩家用字符&nbsp;<code>\'S\'</code>&nbsp;表示，只要他在地板上，就可以在网格中向上、下、左、右四个方向移动。</li> \n <li>地板用字符&nbsp;<code>\'.\'</code>&nbsp;表示，意味着可以自由行走。</li> \n <li>墙用字符&nbsp;<code>\'#\'</code>&nbsp;表示，意味着障碍物，不能通行。&nbsp;</li> \n <li>箱子仅有一个，用字符&nbsp;<code>\'B\'</code>&nbsp;表示。相应地，网格上有一个目标位置&nbsp;<code>\'T\'</code>。</li> \n <li>玩家需要站在箱子旁边，然后沿着箱子的方向进行移动，此时箱子会被移动到相邻的地板单元格。记作一次「推动」。</li> \n <li>玩家无法越过箱子。</li> \n</ul> \n<p>返回将箱子推到目标位置的最小 <strong>推动</strong> 次数，如果无法做到，请返回&nbsp;<code>-1</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 349px; width: 520px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/16/sample_1_1620.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n             [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n&nbsp;            [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n&nbsp;            [\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n&nbsp;            [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n&nbsp;            [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n<strong>输出：</strong>3\n<strong>解释：</strong>我们只需要返回推箱子的次数。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n             [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n&nbsp;            [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n&nbsp;            [\"#\",\"#\",\"#\",\"#\",\".\",\"#\"],\n&nbsp;            [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n&nbsp;            [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n<strong>输出：</strong>-1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n&nbsp;            [\"#\",\"T\",\".\",\".\",\"#\",\"#\"],\n&nbsp;            [\"#\",\".\",\"#\",\"B\",\".\",\"#\"],\n&nbsp;            [\"#\",\".\",\".\",\".\",\".\",\"#\"],\n&nbsp;            [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n&nbsp;            [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n<strong>输出：</strong>5\n<strong>解释：</strong>向下、向左、向左、向上再向上。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n&nbsp;            [\"#\",\"S\",\"#\",\".\",\"B\",\"T\",\"#\"],\n&nbsp;            [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n<strong>输出：</strong>-1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= grid.length &lt;= 20</code></li> \n <li><code>1 &lt;= grid[i].length &lt;= 20</code></li> \n <li><code>grid</code> 仅包含字符&nbsp;<code>\'.\'</code>, <code>\'#\'</code>,&nbsp; <code>\'S\'</code> , <code>\'T\'</code>, 以及&nbsp;<code>\'B\'</code>。</li> \n <li><code>grid</code>&nbsp;中&nbsp;<code>\'S\'</code>, <code>\'B\'</code>&nbsp;和&nbsp;<code>\'T\'</code>&nbsp;各只能出现一个。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1266. 访问所有点的最小时间', '<p>平面上有&nbsp;<code>n</code>&nbsp;个点，点的位置用整数坐标表示 <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> 。请你计算访问所有这些点需要的 <strong>最小时间</strong>（以秒为单位）。</p> \n<p>你需要按照下面的规则在平面上移动：</p> \n<ul> \n <li>每一秒内，你可以： \n  <ul> \n   <li>沿水平方向移动一个单位长度，或者</li> \n   <li>沿竖直方向移动一个单位长度，或者</li> \n   <li>跨过对角线移动 <code>sqrt(2)</code> 个单位长度（可以看作在一秒内向水平和竖直方向各移动一个单位长度）。</li> \n  </ul> </li> \n <li>必须按照数组中出现的顺序来访问这些点。</li> \n <li>在访问某个点时，可以经过该点后面出现的点，但经过的那些点不算作有效访问。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 428px; width: 500px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/24/1626_example_1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>points = [[1,1],[3,4],[-1,0]]\n<strong>输出：</strong>7\n<strong>解释：</strong>一条最佳的访问路径是： <strong>[1,1]</strong> -&gt; [2,2] -&gt; [3,3] -&gt; <strong>[3,4] </strong>-&gt; [2,3] -&gt; [1,2] -&gt; [0,1] -&gt; <strong>[-1,0]</strong>   \n从 [1,1] 到 [3,4] 需要 3 秒 \n从 [3,4] 到 [-1,0] 需要 4 秒\n一共需要 7 秒</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>points = [[3,2],[-2,2]]\n<strong>输出：</strong>5\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>points.length == n</code></li> \n <li><code>1 &lt;= n&nbsp;&lt;= 100</code></li> \n <li><code>points[i].length == 2</code></li> \n <li><code>-1000&nbsp;&lt;= points[i][0], points[i][1]&nbsp;&lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1267. 统计参与通信的服务器', '<p>这里有一幅服务器分布图，服务器的位置标识在&nbsp;<code>m * n</code>&nbsp;的整数矩阵网格&nbsp;<code>grid</code>&nbsp;中，1 表示单元格上有服务器，0 表示没有。</p> \n<p>如果两台服务器位于同一行或者同一列，我们就认为它们之间可以进行通信。</p> \n<p>请你统计并返回能够与至少一台其他服务器进行通信的服务器的数量。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 203px; width: 202px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/24/untitled-diagram-6.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>grid = [[1,0],[0,1]]\n<strong>输出：</strong>0\n<strong>解释：</strong>没有一台服务器能与其他服务器进行通信。</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 203px; width: 203px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/24/untitled-diagram-4-1.jpg\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>grid = [[1,0],[1,1]]\n<strong>输出：</strong>3\n<strong>解释：</strong>所有这些服务器都至少可以与一台别的服务器进行通信。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 443px; width: 443px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/24/untitled-diagram-1-3.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]\n<strong>输出：</strong>4\n<strong>解释：</strong>第一行的两台服务器互相通信，第三列的两台服务器互相通信，但右下角的服务器无法与其他服务器通信。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= m &lt;= 250</code></li> \n <li><code>1 &lt;= n &lt;= 250</code></li> \n <li><code>grid[i][j] == 0 or 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1268. 搜索推荐系统', '<p>给你一个产品数组&nbsp;<code>products</code>&nbsp;和一个字符串&nbsp;<code>searchWord</code>&nbsp;，<code>products</code>&nbsp; 数组中每个产品都是一个字符串。</p> \n<p>请你设计一个推荐系统，在依次输入单词&nbsp;<code>searchWord</code> 的每一个字母后，推荐&nbsp;<code>products</code> 数组中前缀与&nbsp;<code>searchWord</code> 相同的最多三个产品。如果前缀相同的可推荐产品超过三个，请按字典序返回最小的三个。</p> \n<p>请你以二维列表的形式，返回在输入&nbsp;<code>searchWord</code>&nbsp;每个字母后相应的推荐产品的列表。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>products = [\"mobile\",\"mouse\",\"moneypot\",\"monitor\",\"mousepad\"], searchWord = \"mouse\"\n<strong>输出：</strong>[\n[\"mobile\",\"moneypot\",\"monitor\"],\n[\"mobile\",\"moneypot\",\"monitor\"],\n[\"mouse\",\"mousepad\"],\n[\"mouse\",\"mousepad\"],\n[\"mouse\",\"mousepad\"]\n]\n<strong>解释：</strong>按字典序排序后的产品列表是 [\"mobile\",\"moneypot\",\"monitor\",\"mouse\",\"mousepad\"]\n输入 m 和 mo，由于所有产品的前缀都相同，所以系统返回字典序最小的三个产品 [\"mobile\",\"moneypot\",\"monitor\"]\n输入 mou， mous 和 mouse 后系统都返回 [\"mouse\",\"mousepad\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>products = [\"havana\"], searchWord = \"havana\"\n<strong>输出：</strong>[[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>products = [\"bags\",\"baggage\",\"banner\",\"box\",\"cloths\"], searchWord = \"bags\"\n<strong>输出：</strong>[[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\"],[\"bags\"]]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>products = [\"havana\"], searchWord = \"tatiana\"\n<strong>输出：</strong>[[],[],[],[],[],[],[]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= products.length &lt;= 1000</code></li> \n <li><code>1 &lt;= Σ products[i].length &lt;= 2 * 10^4</code></li> \n <li><code>products[i]</code>&nbsp;中所有的字符都是小写英文字母。</li> \n <li><code>1 &lt;= searchWord.length &lt;= 1000</code></li> \n <li><code>searchWord</code>&nbsp;中所有字符都是小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1269. 停在原地的方案数', '<p>有一个长度为&nbsp;<code>arrLen</code>&nbsp;的数组，开始有一个指针在索引&nbsp;<code>0</code> 处。</p> \n<p>每一步操作中，你可以将指针向左或向右移动 1 步，或者停在原地（指针不能被移动到数组范围外）。</p> \n<p>给你两个整数&nbsp;<code>steps</code> 和&nbsp;<code>arrLen</code> ，请你计算并返回：在恰好执行&nbsp;<code>steps</code>&nbsp;次操作以后，指针仍然指向索引&nbsp;<code>0</code> 处的方案数。</p> \n<p>由于答案可能会很大，请返回方案数 <strong>模</strong>&nbsp;<code>10^9 + 7</code> 后的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>steps = 3, arrLen = 2\n<strong>输出：</strong>4\n<strong>解释：</strong>3 步后，总共有 4 种不同的方法可以停在索引 0 处。\n向右，向左，不动\n不动，向右，向左\n向右，不动，向左\n不动，不动，不动\n</pre> \n<p><strong>示例&nbsp; 2：</strong></p> \n<pre><strong>输入：</strong>steps = 2, arrLen = 4\n<strong>输出：</strong>2\n<strong>解释：</strong>2 步后，总共有 2 种不同的方法可以停在索引 0 处。\n向右，向左\n不动，不动\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>steps = 4, arrLen = 2\n<strong>输出：</strong>8\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= steps &lt;= 500</code></li> \n <li><code>1 &lt;= arrLen &lt;= 10<sup>6</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('127. 单词接龙', '<p>字典&nbsp;<code>wordList</code> 中从单词 <code>beginWord</code><em>&nbsp;</em>和 <code>endWord</code> 的 <strong>转换序列 </strong>是一个按下述规格形成的序列：</p> \n<ul> \n <li>序列中第一个单词是 <code>beginWord</code> 。</li> \n <li>序列中最后一个单词是 <code>endWord</code> 。</li> \n <li>每次转换只能改变一个字母。</li> \n <li>转换过程中的中间单词必须是字典&nbsp;<code>wordList</code> 中的单词。</li> \n</ul> \n<p>给你两个单词<em> </em><code>beginWord</code><em>&nbsp;</em>和 <code>endWord</code> 和一个字典 <code>wordList</code> ，找到从&nbsp;<code>beginWord</code> 到&nbsp;<code>endWord</code> 的 <strong>最短转换序列</strong> 中的 <strong>单词数目</strong> 。如果不存在这样的转换序列，返回 0。</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n<strong>输出：</strong>5\n<strong>解释：</strong>一个最短转换序列是 \"hit\" -&gt; \"hot\" -&gt; \"dot\" -&gt; \"dog\" -&gt; \"cog\", 返回它的长度 5。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n<strong>输出：</strong>0\n<strong>解释：</strong>endWord \"cog\" 不在字典中，所以无法进行转换。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= beginWord.length &lt;= 10</code></li> \n <li><code>endWord.length == beginWord.length</code></li> \n <li><code>1 &lt;= wordList.length &lt;= 5000</code></li> \n <li><code>wordList[i].length == beginWord.length</code></li> \n <li><code>beginWord</code>、<code>endWord</code> 和 <code>wordList[i]</code> 由小写英文字母组成</li> \n <li><code>beginWord != endWord</code></li> \n <li><code>wordList</code> 中的所有字符串 <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1275. 找出井字棋的获胜者', '<p><em>A</em> 和&nbsp;<em>B</em>&nbsp;在一个&nbsp;<em>3</em>&nbsp;x&nbsp;<em>3</em>&nbsp;的网格上玩井字棋。</p> \n<p>井字棋游戏的规则如下：</p> \n<ul> \n <li>玩家轮流将棋子放在空方格 (\" \") 上。</li> \n <li>第一个玩家 A 总是用&nbsp;\"X\" 作为棋子，而第二个玩家 B 总是用 \"O\" 作为棋子。</li> \n <li>\"X\" 和 \"O\" 只能放在空方格中，而不能放在已经被占用的方格上。</li> \n <li>只要有 3 个相同的（非空）棋子排成一条直线（行、列、对角线）时，游戏结束。</li> \n <li>如果所有方块都放满棋子（不为空），游戏也会结束。</li> \n <li>游戏结束后，棋子无法再进行任何移动。</li> \n</ul> \n<p>给你一个数组 <code>moves</code>，其中每个元素是大小为 <code>2</code> 的另一个数组（元素分别对应网格的行和列），它按照 <em>A</em> 和 <em>B</em> 的行动顺序（先 <em>A</em> 后 <em>B</em>）记录了两人各自的棋子位置。</p> \n<p>如果游戏存在获胜者（<em>A</em> 或 <em>B</em>），就返回该游戏的获胜者；如果游戏以平局结束，则返回 \"Draw\"；如果仍会有行动（游戏未结束），则返回 \"Pending\"。</p> \n<p>你可以假设&nbsp;<code>moves</code>&nbsp;都 <strong>有效</strong>（遵循井字棋规则），网格最初是空的，<em>A</em> 将先行动。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]\n<strong>输出：</strong>\"A\"\n<strong>解释：</strong>\"A\" 获胜，他总是先走。\n\"X  \"    \"X  \"    \"X  \"    \"X  \"    \"<strong>X</strong>  \"\n\"   \" -&gt; \"   \" -&gt; \" X \" -&gt; \" X \" -&gt; \" <strong>X</strong> \"\n\"   \"    \"O  \"    \"O  \"    \"OO \"    \"OO<strong>X</strong>\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]\n<strong>输出：</strong>\"B\"\n<strong>解释：</strong>\"B\" 获胜。\n\"X  \"    \"X  \"    \"XX \"    \"XXO\"    \"XXO\"    \"XX<strong>O</strong>\"\n\"   \" -&gt; \" O \" -&gt; \" O \" -&gt; \" O \" -&gt; \"XO \" -&gt; \"X<strong>O</strong> \" \n\"   \"    \"   \"    \"   \"    \"   \"    \"   \"    \"<strong>O</strong>  \"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]\n<strong>输出：</strong>\"Draw\"\n<strong>输出：</strong>由于没有办法再行动，游戏以平局结束。\n\"XXO\"\n\"OOX\"\n\"XOX\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>moves = [[0,0],[1,1]]\n<strong>输出：</strong>\"Pending\"\n<strong>解释：</strong>游戏还没有结束。\n\"X  \"\n\" O \"\n\"   \"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= moves.length &lt;= 9</code></li> \n <li><code>moves[i].length == 2</code></li> \n <li><code>0 &lt;= moves[i][j] &lt;= 2</code></li> \n <li><code>moves</code>&nbsp;里没有重复的元素。</li> \n <li><code>moves</code> 遵循井字棋的规则。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1276. 不浪费原料的汉堡制作方案', '<p>圣诞活动预热开始啦，汉堡店推出了全新的汉堡套餐。为了避免浪费原料，请你帮他们制定合适的制作计划。</p> \n<p>给你两个整数&nbsp;<code>tomatoSlices</code>&nbsp;和&nbsp;<code>cheeseSlices</code>，分别表示番茄片和奶酪片的数目。不同汉堡的原料搭配如下：</p> \n<ul> \n <li><strong>巨无霸汉堡：</strong>4 片番茄和 1 片奶酪</li> \n <li><strong>小皇堡：</strong>2 片番茄和&nbsp;1 片奶酪</li> \n</ul> \n<p>请你以&nbsp;<code>[total_jumbo, total_small]</code>（[巨无霸汉堡总数，小皇堡总数]）的格式返回恰当的制作方案，使得剩下的番茄片&nbsp;<code>tomatoSlices</code>&nbsp;和奶酪片&nbsp;<code>cheeseSlices</code>&nbsp;的数量都是&nbsp;<code>0</code>。</p> \n<p>如果无法使剩下的番茄片&nbsp;<code>tomatoSlices</code>&nbsp;和奶酪片&nbsp;<code>cheeseSlices</code>&nbsp;的数量为&nbsp;<code>0</code>，就请返回&nbsp;<code>[]</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>tomatoSlices = 16, cheeseSlices = 7\n<strong>输出：</strong>[1,6]\n<strong>解释：</strong>制作 1 个巨无霸汉堡和 6 个小皇堡需要 4*1 + 2*6 = 16 片番茄和 1 + 6 = 7 片奶酪。不会剩下原料。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>tomatoSlices = 17, cheeseSlices = 4\n<strong>输出：</strong>[]\n<strong>解释：</strong>只制作小皇堡和巨无霸汉堡无法用光全部原料。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>tomatoSlices = 4, cheeseSlices = 17\n<strong>输出：</strong>[]\n<strong>解释：</strong>制作 1 个巨无霸汉堡会剩下 16 片奶酪，制作 2 个小皇堡会剩下 15 片奶酪。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>tomatoSlices = 0, cheeseSlices = 0\n<strong>输出：</strong>[0,0]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>tomatoSlices = 2, cheeseSlices = 1\n<strong>输出：</strong>[0,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= tomatoSlices &lt;= 10^7</code></li> \n <li><code>0 &lt;= cheeseSlices &lt;= 10^7</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1277. 统计全为 1 的正方形子矩阵', '<p>给你一个&nbsp;<code>m * n</code>&nbsp;的矩阵，矩阵中的元素不是 <code>0</code> 就是 <code>1</code>，请你统计并返回其中完全由 <code>1</code> 组成的 <strong>正方形</strong> 子矩阵的个数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>matrix =\n[\n&nbsp; [0,1,1,1],\n&nbsp; [1,1,1,1],\n&nbsp; [0,1,1,1]\n]\n<strong>输出：</strong>15\n<strong>解释：</strong> \n边长为 1 的正方形有 <strong>10</strong> 个。\n边长为 2 的正方形有 <strong>4</strong> 个。\n边长为 3 的正方形有 <strong>1</strong> 个。\n正方形的总数 = 10 + 4 + 1 = <strong>15</strong>.\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>matrix = \n[\n  [1,0,1],\n  [1,1,0],\n  [1,1,0]\n]\n<strong>输出：</strong>7\n<strong>解释：</strong>\n边长为 1 的正方形有 <strong>6</strong> 个。 \n边长为 2 的正方形有 <strong>1</strong> 个。\n正方形的总数 = 6 + 1 = <strong>7</strong>.\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length&nbsp;&lt;= 300</code></li> \n <li><code>1 &lt;= arr[0].length&nbsp;&lt;= 300</code></li> \n <li><code>0 &lt;= arr[i][j] &lt;= 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1278. 分割回文串 III', '<p>给你一个由小写字母组成的字符串&nbsp;<code>s</code>，和一个整数&nbsp;<code>k</code>。</p> \n<p>请你按下面的要求分割字符串：</p> \n<ul> \n <li>首先，你可以将&nbsp;<code>s</code>&nbsp;中的部分字符修改为其他的小写英文字母。</li> \n <li>接着，你需要把&nbsp;<code>s</code>&nbsp;分割成&nbsp;<code>k</code>&nbsp;个非空且不相交的子串，并且每个子串都是回文串。</li> \n</ul> \n<p>请返回以这种方式分割字符串所需修改的最少字符数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"abc\", k = 2\n<strong>输出：</strong>1\n<strong>解释：</strong>你可以把字符串分割成 \"ab\" 和 \"c\"，并修改 \"ab\" 中的 1 个字符，将它变成回文串。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"aabbc\", k = 3\n<strong>输出：</strong>0\n<strong>解释：</strong>你可以把字符串分割成 \"aa\"、\"bb\" 和 \"c\"，它们都是回文串。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"leetcode\", k = 8\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= s.length &lt;= 100</code></li> \n <li><code>s</code>&nbsp;中只含有小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('128. 最长连续序列', '<p>给定一个未排序的整数数组 <code>nums</code> ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p> \n<p>请你设计并实现时间复杂度为&nbsp;<code>O(n)</code><em> </em>的算法解决此问题。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [100,4,200,1,3,2]\n<strong>输出：</strong>4\n<strong>解释：</strong>最长数字连续序列是 <code>[1, 2, 3, 4]。它的长度为 4。</code></pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,3,7,2,5,8,4,6,0,1]\n<strong>输出：</strong>9\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1281. 整数的各位积和之差', '<p>给你一个整数&nbsp;<code>n</code>，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 234\n<strong>输出：</strong>15 \n<strong>解释：</strong>\n各位数之积 = 2 * 3 * 4 = 24 \n各位数之和 = 2 + 3 + 4 = 9 \n结果 = 24 - 9 = 15\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 4421\n<strong>输出：</strong>21\n<strong>解释： \n</strong>各位数之积 = 4 * 4 * 2 * 1 = 32 \n各位数之和 = 4 + 4 + 2 + 1 = 11 \n结果 = 32 - 11 = 21\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1282. 用户分组', '<p>有&nbsp;<code>n</code>&nbsp;位用户参加活动，他们的&nbsp;<strong>ID</strong>&nbsp;从 <code>0</code> 到 <code>n - 1</code>，每位用户都 <strong>恰好</strong> 属于某一用户组。给你一个长度为 <code>n</code> 的数组&nbsp;<code>groupSizes</code>，其中包含每位用户所处的用户组的大小，请你返回用户分组情况（存在的用户组以及每个组中用户的 ID）。</p> \n<p>你可以任何顺序返回解决方案，ID 的顺序也不受限制。此外，题目给出的数据保证至少存在一种解决方案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>groupSizes = [3,3,3,3,3,1,3]\n<strong>输出：</strong>[[5],[0,1,2],[3,4,6]]\n<strong>解释：</strong> \n其他可能的解决方案有 [[2,1,6],[5],[0,4,3]] 和 [[5],[0,6,2],[4,3,1]]。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>groupSizes = [2,1,3,3,3,2]\n<strong>输出：</strong>[[1],[0,5],[2,3,4]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>groupSizes.length == n</code></li> \n <li><code>1 &lt;= n&nbsp;&lt;= 500</code></li> \n <li><code>1 &lt;=&nbsp;groupSizes[i] &lt;= n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1283. 使结果不超过阈值的最小除数', '<p>给你一个整数数组&nbsp;<code>nums</code> 和一个正整数&nbsp;<code>threshold</code> &nbsp;，你需要选择一个正整数作为除数，然后将数组里每个数都除以它，并对除法结果求和。</p> \n<p>请你找出能够使上述结果小于等于阈值&nbsp;<code>threshold</code>&nbsp;的除数中 <strong>最小</strong> 的那个。</p> \n<p>每个数除以除数后都向上取整，比方说 7/3 = 3 ， 10/2 = 5 。</p> \n<p>题目保证一定有解。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,5,9], threshold = 6\n<strong>输出：</strong>5\n<strong>解释：</strong>如果除数为 1 ，我们可以得到和为 17 （1+2+5+9）。\n如果除数为 4 ，我们可以得到和为 7 (1+1+2+3) 。如果除数为 5 ，和为 5 (1+1+1+2)。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [2,3,5,7,11], threshold = 11\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [19], threshold = 5\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 5 * 10^4</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10^6</code></li> \n <li><code>nums.length &lt;=&nbsp;threshold &lt;= 10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1284. 转化为全零矩阵的最少反转次数', '<p>给你一个&nbsp;<code>m x n</code>&nbsp;的二进制矩阵&nbsp;<code>mat</code>。</p> \n<p>每一步，你可以选择一个单元格并将它反转（反转表示 0 变 1 ，1 变 0 ）。如果存在和它相邻的单元格，那么这些相邻的单元格也会被反转。（注：相邻的两个单元格共享同一条边。）</p> \n<p>请你返回将矩阵&nbsp;<code>mat</code> 转化为全零矩阵的<em>最少反转次数</em>，如果无法转化为全零矩阵，请返回&nbsp;<strong>-1</strong>&nbsp;。</p> \n<p>二进制矩阵的每一个格子要么是 0 要么是 1 。</p> \n<p>全零矩阵是所有格子都为 0 的矩阵。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<p><img style=\"height: 86px; width: 409px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/12/13/matrix.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>mat = [[0,0],[0,1]]\n<strong>输出：</strong>3\n<strong>解释：</strong>一个可能的解是反转 (1, 0)，然后 (0, 1) ，最后是 (1, 1) 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>mat = [[0]]\n<strong>输出：</strong>0\n<strong>解释：</strong>给出的矩阵是全零矩阵，所以你不需要改变它。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>mat = [[1,1,1],[1,0,1],[0,0,0]]\n<strong>输出：</strong>6\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>mat = [[1,0,0],[1,0,0]]\n<strong>输出：</strong>-1\n<strong>解释：</strong>该矩阵无法转变成全零矩阵\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m ==&nbsp;mat.length</code></li> \n <li><code>n ==&nbsp;mat[0].length</code></li> \n <li><code>1 &lt;= m&nbsp;&lt;= 3</code></li> \n <li><code>1 &lt;= n&nbsp;&lt;= 3</code></li> \n <li><code>mat[i][j]</code>&nbsp;是 0 或 1 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1286. 字母组合迭代器', '<p>请你设计一个迭代器类，包括以下内容：</p> \n<ul> \n <li>一个构造函数，输入参数包括：一个&nbsp;<strong>有序且字符唯一&nbsp;</strong>的字符串&nbsp;<code>characters</code>（该字符串只包含小写英文字母）和一个数字&nbsp;<code>combinationLength</code>&nbsp;。</li> \n <li>函数&nbsp;<em>next()&nbsp;</em>，按&nbsp;<strong>字典序&nbsp;</strong>返回长度为&nbsp;<code>combinationLength</code> 的下一个字母组合。</li> \n <li>函数&nbsp;<em>hasNext()&nbsp;</em>，只有存在长度为&nbsp;<code>combinationLength</code> 的下一个字母组合时，才返回&nbsp;<code>True</code>；否则，返回 <code>False</code>。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre>CombinationIterator iterator = new CombinationIterator(\"abc\", 2); // 创建迭代器 iterator\n\niterator.next(); // 返回 \"ab\"\niterator.hasNext(); // 返回 true\niterator.next(); // 返回 \"ac\"\niterator.hasNext(); // 返回 true\niterator.next(); // 返回 \"bc\"\niterator.hasNext(); // 返回 false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= combinationLength &lt;=&nbsp;characters.length &lt;= 15</code></li> \n <li>每组测试数据最多包含&nbsp;<code>10^4</code>&nbsp;次函数调用。</li> \n <li>题目保证每次调用函数&nbsp;<code>next</code>&nbsp;时都存在下一个字母组合。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1287. 有序数组中出现次数超过25%的元素', '<p>给你一个非递减的&nbsp;<strong>有序&nbsp;</strong>整数数组，已知这个数组中恰好有一个整数，它的出现次数超过数组元素总数的 25%。</p> \n<p>请你找到并返回这个整数</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,2,6,6,6,6,7,10]\n<strong>输出：</strong>6\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10^4</code></li> \n <li><code>0 &lt;= arr[i] &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1288. 删除被覆盖区间', '<p>给你一个区间列表，请你删除列表中被其他区间所覆盖的区间。</p> \n<p>只有当&nbsp;<code>c &lt;= a</code>&nbsp;且&nbsp;<code>b &lt;= d</code>&nbsp;时，我们才认为区间&nbsp;<code>[a,b)</code> 被区间&nbsp;<code>[c,d)</code> 覆盖。</p> \n<p>在完成所有删除操作后，请你返回列表中剩余区间的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>intervals = [[1,4],[3,6],[2,8]]\n<strong>输出：</strong>2\n<strong>解释：</strong>区间 [3,6] 被区间 [2,8] 覆盖，所以它被删除了。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong>​​​​​​</p> \n<ul> \n <li><code>1 &lt;= intervals.length &lt;= 1000</code></li> \n <li><code>0 &lt;= intervals[i][0] &lt;&nbsp;intervals[i][1] &lt;= 10^5</code></li> \n <li>对于所有的&nbsp;<code>i != j</code>：<code>intervals[i] != intervals[j]</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1289. 下降路径最小和 II', '<p>给你一个整数方阵&nbsp;<code>arr</code>&nbsp;，定义「非零偏移下降路径」为：从&nbsp;<code>arr</code> 数组中的每一行选择一个数字，且按顺序选出来的数字中，相邻数字不在原数组的同一列。</p> \n<p>请你返回非零偏移下降路径数字和的最小值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>输出：</strong>13\n<strong>解释：</strong>\n所有非零偏移下降路径包括：\n[1,5,9], [1,5,7], [1,6,7], [1,6,8],\n[2,4,8], [2,4,9], [2,6,7], [2,6,8],\n[3,4,8], [3,4,9], [3,5,7], [3,5,9]\n下降路径中数字和最小的是&nbsp;[1,5,7] ，所以答案是&nbsp;13 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length == arr[i].length &lt;= 200</code></li> \n <li><code>-99 &lt;= arr[i][j] &lt;= 99</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('129. 求根节点到叶节点数字之和', '给你一个二叉树的根节点 \n<code>root</code> ，树中每个节点都存放有一个 \n<code>0</code> 到 \n<code>9</code> 之间的数字。 \n<div class=\"original__bRMd\"> \n <div> \n  <p>每条从根节点到叶节点的路径都代表一个数字：</p> \n  <ul> \n   <li>例如，从根节点到叶节点的路径 <code>1 -&gt; 2 -&gt; 3</code> 表示数字 <code>123</code> 。</li> \n  </ul> \n  <p>计算从根节点到叶节点生成的 <strong>所有数字之和</strong> 。</p> \n  <p><strong>叶节点</strong> 是指没有子节点的节点。</p> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <img style=\"width: 212px; height: 182px;\" src=\"https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>root = [1,2,3]\n<strong>输出：</strong>25\n<strong>解释：</strong>\n从根到叶子节点路径 <code>1-&gt;2</code> 代表数字 <code>12</code>\n从根到叶子节点路径 <code>1-&gt;3</code> 代表数字 <code>13</code>\n因此，数字总和 = 12 + 13 = <code>25</code></pre> \n  <p><strong>示例 2：</strong></p> \n  <img style=\"width: 292px; height: 302px;\" src=\"https://assets.leetcode.com/uploads/2021/02/19/num2tree.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>root = [4,9,0,5,1]\n<strong>输出：</strong>1026\n<strong>解释：</strong>\n从根到叶子节点路径 <code>4-&gt;9-&gt;5</code> 代表数字 495\n从根到叶子节点路径 <code>4-&gt;9-&gt;1</code> 代表数字 491\n从根到叶子节点路径 <code>4-&gt;0</code> 代表数字 40\n因此，数字总和 = 495 + 491 + 40 = <code>1026</code>\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li>树中节点的数目在范围 <code>[1, 1000]</code> 内</li> \n   <li><code>0 &lt;= Node.val &lt;= 9</code></li> \n   <li>树的深度不超过 <code>10</code></li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('1290. 二进制链表转整数', '<p>给你一个单链表的引用结点&nbsp;<code>head</code>。链表中每个结点的值不是 0 就是 1。已知此链表是一个整数数字的二进制表示形式。</p> \n<p>请你返回该链表所表示数字的 <strong>十进制值</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 108px; width: 426px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/12/15/graph-1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [1,0,1]\n<strong>输出：</strong>5\n<strong>解释：</strong>二进制数 (101) 转化为十进制数 (5)\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>head = [0]\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>head = [1]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]\n<strong>输出：</strong>18880\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>head = [0,0]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表不为空。</li> \n <li>链表的结点总数不超过&nbsp;<code>30</code>。</li> \n <li>每个结点的值不是&nbsp;<code>0</code> 就是 <code>1</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1291. 顺次数', '<p>我们定义「顺次数」为：每一位上的数字都比前一位上的数字大 <code>1</code> 的整数。</p> \n<p>请你返回由&nbsp;<code>[low, high]</code>&nbsp;范围内所有顺次数组成的 <strong>有序</strong> 列表（从小到大排序）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输出：</strong>low = 100, high = 300\n<strong>输出：</strong>[123,234]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输出：</strong>low = 1000, high = 13000\n<strong>输出：</strong>[1234,2345,3456,4567,5678,6789,12345]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>10 &lt;= low &lt;= high &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1292. 元素和小于等于阈值的正方形的最大边长', '<p>给你一个大小为&nbsp;<code>m x n</code>&nbsp;的矩阵&nbsp;<code>mat</code>&nbsp;和一个整数阈值&nbsp;<code>threshold</code>。</p> \n<p>请你返回元素总和小于或等于阈值的正方形区域的最大边长；如果没有这样的正方形区域，则返回 <strong>0&nbsp;</strong>。<br> &nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 186px; width: 335px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/12/15/e1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4\n<strong>输出：</strong>2\n<strong>解释：</strong>总和小于或等于 4 的正方形的最大边长为 2，如图所示。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>mat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= m, n &lt;= 300</code></li> \n <li><code>m == mat.length</code></li> \n <li><code>n == mat[i].length</code></li> \n <li><code>0 &lt;= mat[i][j] &lt;= 10000</code></li> \n <li><code>0 &lt;= threshold&nbsp;&lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1293. 网格中的最短路径', '<p>给你一个&nbsp;<code>m * n</code>&nbsp;的网格，其中每个单元格不是&nbsp;<code>0</code>（空）就是&nbsp;<code>1</code>（障碍物）。每一步，您都可以在空白单元格中上、下、左、右移动。</p> \n<p>如果您 <strong>最多</strong> 可以消除 <code>k</code> 个障碍物，请找出从左上角 <code>(0, 0)</code> 到右下角 <code>(m-1, n-1)</code> 的最短路径，并返回通过该路径所需的步数。如果找不到这样的路径，则返回 -1。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong> \ngrid = \n[[0,0,0],\n&nbsp;[1,1,0],\n [0,0,0],\n&nbsp;[0,1,1],\n [0,0,0]], \nk = 1\n<strong>输出：</strong>6\n<strong>解释：\n</strong>不消除任何障碍的最短路径是 10。\n消除位置 (3,2) 处的障碍后，最短路径是 6 。该路径是 <code>(0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2) -&gt; <strong>(3,2)</strong> -&gt; (4,2)</code>.\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\ngrid = \n[[0,1,1],\n&nbsp;[1,1,1],\n&nbsp;[1,0,0]], \nk = 1\n<strong>输出：</strong>-1\n<strong>解释：\n</strong>我们至少需要消除两个障碍才能找到这样的路径。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>grid.length&nbsp;== m</code></li> \n <li><code>grid[0].length&nbsp;== n</code></li> \n <li><code>1 &lt;= m, n &lt;= 40</code></li> \n <li><code>1 &lt;= k &lt;= m*n</code></li> \n <li><code>grid[i][j] == 0 <strong>or</strong> 1</code></li> \n <li><code>grid[0][0] == grid[m-1][n-1] == 0</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1295. 统计位数为偶数的数字', '<p>给你一个整数数组&nbsp;<code>nums</code>，请你返回其中位数为&nbsp;<strong>偶数</strong>&nbsp;的数字的个数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [12,345,2,6,7896]\n<strong>输出：</strong>2\n<strong>解释：\n</strong>12 是 2 位数字（位数为偶数）&nbsp;\n345 是 3 位数字（位数为奇数）&nbsp;&nbsp;\n2 是 1 位数字（位数为奇数）&nbsp;\n6 是 1 位数字 位数为奇数）&nbsp;\n7896 是 4 位数字（位数为偶数）&nbsp;&nbsp;\n因此只有 12 和 7896 是位数为偶数的数字\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [555,901,482,1771]\n<strong>输出：</strong>1 \n<strong>解释： </strong>\n只有 1771 是位数为偶数的数字。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 500</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1296. 划分数组为连续数字的集合', '<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;和一个正整数&nbsp;<code>k</code>，请你判断是否可以把这个数组划分成一些由&nbsp;<code>k</code>&nbsp;个连续数字组成的集合。<br> 如果可以，请返回&nbsp;<code>True</code>；否则，返回&nbsp;<code>False</code>。</p> \n<p>&nbsp;</p> \n<p><strong>注意：</strong>此题目与 846 重复：<a href=\"https://leetcode-cn.com/problems/hand-of-straights/\">https://leetcode-cn.com/problems/hand-of-straights/</a></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,3,4,4,5,6], k = 4\n<strong>输出：</strong>true\n<strong>解释：</strong>数组可以分成 [1,2,3,4] 和 [3,4,5,6]。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3\n<strong>输出：</strong>true\n<strong>解释：</strong>数组可以分成 [1,2,3] , [2,3,4] , [3,4,5] 和 [9,10,11]。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [3,3,2,2,1,1], k = 3\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4], k = 3\n<strong>输出：</strong>false\n<strong>解释：</strong>数组不能分成几个大小为 3 的子数组。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10^9</code></li> \n <li><code>1 &lt;= k &lt;= nums.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1297. 子串的最大出现次数', '<p>给你一个字符串&nbsp;<code>s</code> ，请你返回满足以下条件且出现次数最大的&nbsp;<strong>任意</strong>&nbsp;子串的出现次数：</p> \n<ul> \n <li>子串中不同字母的数目必须小于等于 <code>maxLetters</code> 。</li> \n <li>子串的长度必须大于等于&nbsp;<code>minSize</code> 且小于等于&nbsp;<code>maxSize</code> 。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4\n<strong>输出：</strong>2\n<strong>解释：</strong>子串 \"aab\" 在原字符串中出现了 2 次。\n它满足所有的要求：2 个不同的字母，长度为 3 （在 minSize 和 maxSize 范围内）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>子串 \"aaa\" 在原字符串中出现了 2 次，且它们有重叠部分。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"aabcabcab\", maxLetters = 2, minSize = 2, maxSize = 3\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"abcde\", maxLetters = 2, minSize = 3, maxSize = 3\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= maxLetters &lt;= 26</code></li> \n <li><code>1 &lt;= minSize &lt;= maxSize &lt;= min(26, s.length)</code></li> \n <li><code>s</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1298. 你能从盒子里获得的最大糖果数', '<p>给你&nbsp;<code>n</code>&nbsp;个盒子，每个盒子的格式为&nbsp;<code>[status, candies, keys, containedBoxes]</code>&nbsp;，其中：</p> \n<ul> \n <li>状态字&nbsp;<code>status[i]</code>：整数，如果&nbsp;<code>box[i]</code>&nbsp;是开的，那么是 <strong>1&nbsp;</strong>，否则是 <strong>0&nbsp;</strong>。</li> \n <li>糖果数&nbsp;<code>candies[i]</code>: 整数，表示&nbsp;<code>box[i]</code> 中糖果的数目。</li> \n <li>钥匙&nbsp;<code>keys[i]</code>：数组，表示你打开&nbsp;<code>box[i]</code>&nbsp;后，可以得到一些盒子的钥匙，每个元素分别为该钥匙对应盒子的下标。</li> \n <li>内含的盒子&nbsp;<code>containedBoxes[i]</code>：整数，表示放在&nbsp;<code>box[i]</code>&nbsp;里的盒子所对应的下标。</li> \n</ul> \n<p>给你一个&nbsp;<code>initialBoxes</code> 数组，表示你现在得到的盒子，你可以获得里面的糖果，也可以用盒子里的钥匙打开新的盒子，还可以继续探索从这个盒子里找到的其他盒子。</p> \n<p>请你按照上述规则，返回可以获得糖果的 <strong>最大数目&nbsp;</strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]\n<strong>输出：</strong>16\n<strong>解释：\n</strong>一开始你有盒子 0 。你将获得它里面的 7 个糖果和盒子 1 和 2。\n盒子 1 目前状态是关闭的，而且你还没有对应它的钥匙。所以你将会打开盒子 2 ，并得到里面的 4 个糖果和盒子 1 的钥匙。\n在盒子 1 中，你会获得 5 个糖果和盒子 3 ，但是你没法获得盒子 3 的钥匙所以盒子 3 会保持关闭状态。\n你总共可以获得的糖果数目 = 7 + 4 + 5 = 16 个。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]\n<strong>输出：</strong>6\n<strong>解释：\n</strong>你一开始拥有盒子 0 。打开它你可以找到盒子 1,2,3,4,5 和它们对应的钥匙。\n打开这些盒子，你将获得所有盒子的糖果，所以总糖果数为 6 个。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>status = [1,1,1], candies = [100,1,100], keys = [[],[0,2],[]], containedBoxes = [[],[],[]], initialBoxes = [1]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>status = [1], candies = [100], keys = [[]], containedBoxes = [[]], initialBoxes = []\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>status = [1,1,1], candies = [2,3,2], keys = [[],[],[]], containedBoxes = [[],[],[]], initialBoxes = [2,1,0]\n<strong>输出：</strong>7\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= status.length &lt;= 1000</code></li> \n <li><code>status.length == candies.length == keys.length == containedBoxes.length == n</code></li> \n <li><code>status[i]</code> 要么是&nbsp;<code>0</code>&nbsp;要么是&nbsp;<code>1</code> 。</li> \n <li><code>1 &lt;= candies[i] &lt;= 1000</code></li> \n <li><code>0 &lt;= keys[i].length &lt;= status.length</code></li> \n <li><code>0 &lt;= keys[i][j] &lt; status.length</code></li> \n <li><code>keys[i]</code>&nbsp;中的值都是互不相同的。</li> \n <li><code>0 &lt;= containedBoxes[i].length &lt;= status.length</code></li> \n <li><code>0 &lt;= containedBoxes[i][j] &lt; status.length</code></li> \n <li><code>containedBoxes[i]</code>&nbsp;中的值都是互不相同的。</li> \n <li>每个盒子最多被一个盒子包含。</li> \n <li><code>0 &lt;= initialBoxes.length&nbsp;&lt;= status.length</code></li> \n <li><code>0 &lt;= initialBoxes[i] &lt; status.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1299. 将每个元素替换为右侧最大元素', '<p>给你一个数组&nbsp;<code>arr</code>&nbsp;，请你将每个元素用它右边最大的元素替换，如果是最后一个元素，用&nbsp;<code>-1</code> 替换。</p> \n<p>完成所有替换操作后，请你返回这个数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [17,18,5,4,6,1]\n<strong>输出：</strong>[18,6,6,6,1,-1]\n<strong>解释：</strong>\n- 下标 0 的元素 --&gt; 右侧最大元素是下标 1 的元素 (18)\n- 下标 1 的元素 --&gt; 右侧最大元素是下标 4 的元素 (6)\n- 下标 2 的元素 --&gt; 右侧最大元素是下标 4 的元素 (6)\n- 下标 3 的元素 --&gt; 右侧最大元素是下标 4 的元素 (6)\n- 下标 4 的元素 --&gt; 右侧最大元素是下标 5 的元素 (1)\n- 下标 5 的元素 --&gt; 右侧没有其他元素，替换为 -1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [400]\n<strong>输出：</strong>[-1]\n<strong>解释：</strong>下标<strong> </strong>0 的元素右侧没有其他元素。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= arr[i] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('13. 罗马数字转整数', '<p>罗马数字包含以下七种字符:&nbsp;<code>I</code>，&nbsp;<code>V</code>，&nbsp;<code>X</code>，&nbsp;<code>L</code>，<code>C</code>，<code>D</code>&nbsp;和&nbsp;<code>M</code>。</p> \n<pre><strong>字符</strong>          <strong>数值</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre> \n<p>例如， 罗马数字 2 写做&nbsp;<code>II</code>&nbsp;，即为两个并列的 1。12 写做&nbsp;<code>XII</code>&nbsp;，即为&nbsp;<code>X</code>&nbsp;+&nbsp;<code>II</code>&nbsp;。 27 写做&nbsp;&nbsp;<code>XXVII</code>, 即为&nbsp;<code>XX</code>&nbsp;+&nbsp;<code>V</code>&nbsp;+&nbsp;<code>II</code>&nbsp;。</p> \n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做&nbsp;<code>IIII</code>，而是&nbsp;<code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为&nbsp;<code>IX</code>。这个特殊的规则只适用于以下六种情况：</p> \n<ul> \n <li><code>I</code>&nbsp;可以放在&nbsp;<code>V</code>&nbsp;(5) 和&nbsp;<code>X</code>&nbsp;(10) 的左边，来表示 4 和 9。</li> \n <li><code>X</code>&nbsp;可以放在&nbsp;<code>L</code>&nbsp;(50) 和&nbsp;<code>C</code>&nbsp;(100) 的左边，来表示 40 和&nbsp;90。&nbsp;</li> \n <li><code>C</code>&nbsp;可以放在&nbsp;<code>D</code>&nbsp;(500) 和&nbsp;<code>M</code>&nbsp;(1000) 的左边，来表示&nbsp;400 和&nbsp;900。</li> \n</ul> \n<p>给定一个罗马数字，将其转换成整数。输入确保在 1&nbsp;到 3999 的范围内。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong>&nbsp;\"III\"\n<strong>输出:</strong> 3</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong>&nbsp;\"IV\"\n<strong>输出:</strong> 4</pre> \n<p><strong>示例&nbsp;3:</strong></p> \n<pre><strong>输入:</strong>&nbsp;\"IX\"\n<strong>输出:</strong> 9</pre> \n<p><strong>示例&nbsp;4:</strong></p> \n<pre><strong>输入:</strong>&nbsp;\"LVIII\"\n<strong>输出:</strong> 58\n<strong>解释:</strong> L = 50, V= 5, III = 3.\n</pre> \n<p><strong>示例&nbsp;5:</strong></p> \n<pre><strong>输入:</strong>&nbsp;\"MCMXCIV\"\n<strong>输出:</strong> 1994\n<strong>解释:</strong> M = 1000, CM = 900, XC = 90, IV = 4.</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 15</code></li> \n <li><code>s</code> 仅含字符 <code>(\'I\', \'V\', \'X\', \'L\', \'C\', \'D\', \'M\')</code></li> \n <li>题目数据保证 <code>s</code> 是一个有效的罗马数字，且表示整数在范围 <code>[1, 3999]</code> 内</li> \n <li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li> \n <li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li> \n <li>关于罗马数字的详尽书写规则，可以参考 <a href=\"https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article\">罗马数字 - Mathematics </a>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('130. 被围绕的区域', '给你一个 \n<code>m x n</code> 的矩阵 \n<code>board</code> ，由若干字符 \n<code>\'X\'</code> 和 \n<code>\'O\'</code> ，找到所有被 \n<code>\'X\'</code> 围绕的区域，并将这些区域里所有的&nbsp;\n<code>\'O\'</code> 用 \n<code>\'X\'</code> 填充。 \n<div class=\"original__bRMd\"> \n <div> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <img style=\"width: 550px; height: 237px;\" src=\"https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n<strong>输出：</strong>[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n<strong>解释：</strong>被围绕的区间不会存在于边界上，换句话说，任何边界上的&nbsp;<code>\'O\'</code>&nbsp;都不会被填充为&nbsp;<code>\'X\'</code>。 任何不在边界上，或不与边界上的&nbsp;<code>\'O\'</code>&nbsp;相连的&nbsp;<code>\'O\'</code>&nbsp;最终都会被填充为&nbsp;<code>\'X\'</code>。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>board = [[\"X\"]]\n<strong>输出：</strong>[[\"X\"]]\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>m == board.length</code></li> \n   <li><code>n == board[i].length</code></li> \n   <li><code>1 &lt;= m, n &lt;= 200</code></li> \n   <li><code>board[i][j]</code> 为 <code>\'X\'</code> 或 <code>\'O\'</code></li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('1300. 转变数组后最接近目标值的数组和', '<p>给你一个整数数组&nbsp;<code>arr</code> 和一个目标值&nbsp;<code>target</code> ，请你返回一个整数&nbsp;<code>value</code>&nbsp;，使得将数组中所有大于&nbsp;<code>value</code> 的值变成&nbsp;<code>value</code> 后，数组的和最接近&nbsp; <code>target</code>&nbsp;（最接近表示两者之差的绝对值最小）。</p> \n<p>如果有多种使得和最接近&nbsp;<code>target</code>&nbsp;的方案，请你返回这些整数中的最小值。</p> \n<p>请注意，答案不一定是&nbsp;<code>arr</code> 中的数字。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [4,9,3], target = 10\n<strong>输出：</strong>3\n<strong>解释：</strong>当选择 value 为 3 时，数组会变成 [3, 3, 3]，和为 9 ，这是最接近 target 的方案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [2,3,5], target = 10\n<strong>输出：</strong>5\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [60864,25176,27249,21296,20204], target = 56803\n<strong>输出：</strong>11361\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10^4</code></li> \n <li><code>1 &lt;= arr[i], target &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1301. 最大得分的路径数目', '<p>给你一个正方形字符数组&nbsp;<code>board</code>&nbsp;，你从数组最右下方的字符&nbsp;<code>\'S\'</code>&nbsp;出发。</p> \n<p>你的目标是到达数组最左上角的字符&nbsp;<code>\'E\'</code> ，数组剩余的部分为数字字符&nbsp;<code>1, 2, ..., 9</code>&nbsp;或者障碍 <code>\'X\'</code>。在每一步移动中，你可以向上、向左或者左上方移动，可以移动的前提是到达的格子没有障碍。</p> \n<p>一条路径的 「得分」 定义为：路径上所有数字的和。</p> \n<p>请你返回一个列表，包含两个整数：第一个整数是 「得分」 的最大值，第二个整数是得到最大得分的方案数，请把结果对&nbsp;<strong><code>10^9 + 7</code></strong> <strong>取余</strong>。</p> \n<p>如果没有任何路径可以到达终点，请返回&nbsp;<code>[0, 0]</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>board = [\"E23\",\"2X2\",\"12S\"]\n<strong>输出：</strong>[7,1]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>board = [\"E12\",\"1X1\",\"21S\"]\n<strong>输出：</strong>[4,2]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>board = [\"E11\",\"XXX\",\"11S\"]\n<strong>输出：</strong>[0,0]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= board.length == board[i].length &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1302. 层数最深叶子节点的和', '<p>给你一棵二叉树的根节点 <code>root</code> ，请你返回 <strong>层数最深的叶子节点的和</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 265px; width: 273px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/12/28/1483_ex1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [1,2,3,4,5,null,6,7,null,null,null,null,8]\n<strong>输出：</strong>15\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\n<strong>输出：</strong>19\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点数目在范围 <code>[1, 10<sup>4</sup>]</code>&nbsp;之间。</li> \n <li><code>1 &lt;= Node.val &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1304. 和为零的N个唯一整数', '<p>给你一个整数&nbsp;<code>n</code>，请你返回 <strong>任意&nbsp;</strong>一个由 <code>n</code>&nbsp;个 <strong>各不相同&nbsp;</strong>的整数组成的数组，并且这 <code>n</code> 个数相加和为 <code>0</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 5\n<strong>输出：</strong>[-7,-1,1,3,4]\n<strong>解释：</strong>这些数组也是正确的 [-5,-1,1,2,3]，[-3,-1,2,-2,4]。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>[-1,0,1]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>[0]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1305. 两棵二叉搜索树中的所有元素', '<p>给你&nbsp;<code>root1</code> 和 <code>root2</code>&nbsp;这两棵二叉搜索树。</p> \n<p>请你返回一个列表，其中包含&nbsp;<strong>两棵树&nbsp;</strong>中的所有整数并按 <strong>升序</strong> 排序。.</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/12/29/q2-e1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>root1 = [2,1,4], root2 = [1,0,3]\n<strong>输出：</strong>[0,1,1,2,3,4]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root1 = [0,-10,10], root2 = [5,1,7,0,2]\n<strong>输出：</strong>[-10,0,0,1,2,5,7,10]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root1 = [], root2 = [5,1,7,0,2]\n<strong>输出：</strong>[0,1,2,5,7]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>root1 = [0,-10,10], root2 = []\n<strong>输出：</strong>[-10,0,10]\n</pre> \n<p><strong>示例 5：</strong></p> \n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/12/29/q2-e5-.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>root1 = [1,null,8], root2 = [8,1]\n<strong>输出：</strong>[1,1,8,8]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>每棵树最多有&nbsp;<code>5000</code>&nbsp;个节点。</li> \n <li>每个节点的值在&nbsp;<code>[-10^5, 10^5]</code>&nbsp;之间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1306. 跳跃游戏 III', '<p>这里有一个非负整数数组&nbsp;<code>arr</code>，你最开始位于该数组的起始下标&nbsp;<code>start</code>&nbsp;处。当你位于下标&nbsp;<code>i</code>&nbsp;处时，你可以跳到&nbsp;<code>i + arr[i]</code> 或者 <code>i - arr[i]</code>。</p> \n<p>请你判断自己是否能够跳到对应元素值为 0 的 <strong>任一</strong> 下标处。</p> \n<p>注意，不管是什么情况下，你都无法跳到数组之外。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [4,2,3,0,3,1,2], start = 5\n<strong>输出：</strong>true\n<strong>解释：</strong>\n到达值为 0 的下标 3 有以下可能方案： \n下标 5 -&gt; 下标 4 -&gt; 下标 1 -&gt; 下标 3 \n下标 5 -&gt; 下标 6 -&gt; 下标 4 -&gt; 下标 1 -&gt; 下标 3 \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [4,2,3,0,3,1,2], start = 0\n<strong>输出：</strong>true \n<strong>解释：\n</strong>到达值为 0 的下标 3 有以下可能方案： \n下标 0 -&gt; 下标 4 -&gt; 下标 1 -&gt; 下标 3\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [3,0,2,1,2], start = 2\n<strong>输出：</strong>false\n<strong>解释：</strong>无法到达值为 0 的下标 1 处。 \n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 5 * 10^4</code></li> \n <li><code>0 &lt;= arr[i] &lt;&nbsp;arr.length</code></li> \n <li><code>0 &lt;= start &lt; arr.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1307. 口算难题', '<p>给你一个方程，左边用&nbsp;<code>words</code>&nbsp;表示，右边用&nbsp;<code>result</code> 表示。</p> \n<p>你需要根据以下规则检查方程是否可解：</p> \n<ul> \n <li>每个字符都会被解码成一位数字（0 - 9）。</li> \n <li>每对不同的字符必须映射到不同的数字。</li> \n <li>每个 <code>words[i]</code> 和 <code>result</code>&nbsp;都会被解码成一个没有前导零的数字。</li> \n <li>左侧数字之和（<code>words</code>）等于右侧数字（<code>result</code>）。&nbsp;</li> \n</ul> \n<p>如果方程可解，返回&nbsp;<code>True</code>，否则返回&nbsp;<code>False</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>words = [\"SEND\",\"MORE\"], result = \"MONEY\"\n<strong>输出：</strong>true\n<strong>解释：</strong>映射 \'S\'-&gt; 9, \'E\'-&gt;5, \'N\'-&gt;6, \'D\'-&gt;7, \'M\'-&gt;1, \'O\'-&gt;0, \'R\'-&gt;8, \'Y\'-&gt;\'2\'\n所以 \"SEND\" + \"MORE\" = \"MONEY\" ,  9567 + 1085 = 10652</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>words = [\"SIX\",\"SEVEN\",\"SEVEN\"], result = \"TWENTY\"\n<strong>输出：</strong>true\n<strong>解释：</strong>映射 \'S\'-&gt; 6, \'I\'-&gt;5, \'X\'-&gt;0, \'E\'-&gt;8, \'V\'-&gt;7, \'N\'-&gt;2, \'T\'-&gt;1, \'W\'-&gt;\'3\', \'Y\'-&gt;4\n所以 \"SIX\" + \"SEVEN\" + \"SEVEN\" = \"TWENTY\" ,  650 + 68782 + 68782 = 138214</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>words = [\"THIS\",\"IS\",\"TOO\"], result = \"FUNNY\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>words = [\"LEET\",\"CODE\"], result = \"POINT\"\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= words.length &lt;= 5</code></li> \n <li><code>1 &lt;= words[i].length,&nbsp;results.length&nbsp;&lt;= 7</code></li> \n <li><code>words[i], result</code>&nbsp;只含有大写英文字母</li> \n <li>表达式中使用的不同字符数最大为&nbsp;10</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1309. 解码字母到整数映射', '<p>给你一个字符串&nbsp;<code>s</code>，它由数字（<code>\'0\'</code> - <code>\'9\'</code>）和&nbsp;<code>\'#\'</code>&nbsp;组成。我们希望按下述规则将&nbsp;<code>s</code>&nbsp;映射为一些小写英文字符：</p> \n<ul> \n <li>字符（<code>\'a\'</code> - <code>\'i\'</code>）分别用（<code>\'1\'</code> -&nbsp;<code>\'9\'</code>）表示。</li> \n <li>字符（<code>\'j\'</code> - <code>\'z\'</code>）分别用（<code>\'10#\'</code>&nbsp;-&nbsp;<code>\'26#\'</code>）表示。&nbsp;</li> \n</ul> \n<p>返回映射之后形成的新字符串。</p> \n<p>题目数据保证映射始终唯一。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"10#11#12\"\n<strong>输出：</strong>\"jkab\"\n<strong>解释：</strong>\"j\" -&gt; \"10#\" , \"k\" -&gt; \"11#\" , \"a\" -&gt; \"1\" , \"b\" -&gt; \"2\".\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"1326#\"\n<strong>输出：</strong>\"acz\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"25#\"\n<strong>输出：</strong>\"y\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#\"\n<strong>输出：</strong>\"abcdefghijklmnopqrstuvwxyz\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 1000</code></li> \n <li><code>s[i]</code> 只包含数字（<code>\'0\'</code>-<code>\'9\'</code>）和&nbsp;<code>\'#\'</code>&nbsp;字符。</li> \n <li><code>s</code>&nbsp;是映射始终存在的有效字符串。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('131. 分割回文串', '<p>给你一个字符串 <code>s</code>，请你将<em> </em><code>s</code><em> </em>分割成一些子串，使每个子串都是 <strong>回文串</strong> 。返回 <code>s</code> 所有可能的分割方案。</p> \n<p><strong>回文串</strong> 是正着读和反着读都一样的字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"aab\"\n<strong>输出：</strong>[[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"a\"\n<strong>输出：</strong>[[\"a\"]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 16</code></li> \n <li><code>s</code> 仅由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1310. 子数组异或查询', '<p>有一个正整数数组&nbsp;<code>arr</code>，现给你一个对应的查询数组&nbsp;<code>queries</code>，其中&nbsp;<code>queries[i] = [L<sub>i,&nbsp;</sub>R<sub>i</sub>]</code>。</p> \n<p>对于每个查询&nbsp;<code>i</code>，请你计算从&nbsp;<code>L<sub>i</sub></code>&nbsp;到&nbsp;<code>R<sub>i</sub></code>&nbsp;的&nbsp;<strong>XOR</strong>&nbsp;值（即&nbsp;<code>arr[L<sub>i</sub>] <strong>xor</strong> arr[L<sub>i</sub>+1] <strong>xor</strong> ... <strong>xor</strong> arr[R<sub>i</sub>]</code>）作为本次查询的结果。</p> \n<p>并返回一个包含给定查询&nbsp;<code>queries</code>&nbsp;所有结果的数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]\n<strong>输出：</strong>[2,7,14,8] \n<strong>解释：</strong>\n数组中元素的二进制表示形式是：\n1 = 0001 \n3 = 0011 \n4 = 0100 \n8 = 1000 \n查询的 XOR 值为：\n[0,1] = 1 xor 3 = 2 \n[1,2] = 3 xor 4 = 7 \n[0,3] = 1 xor 3 xor 4 xor 8 = 14 \n[3,3] = 8\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]\n<strong>输出：</strong>[8,0,4,4]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 3 *&nbsp;10^4</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 10^9</code></li> \n <li><code>1 &lt;= queries.length &lt;= 3 * 10^4</code></li> \n <li><code>queries[i].length == 2</code></li> \n <li><code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt; arr.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1311. 获取你好友已观看的视频', '<p>有&nbsp;<code>n</code> 个人，每个人都有一个&nbsp; <code>0</code>&nbsp;到&nbsp;<code>n-1</code>&nbsp;的唯一&nbsp;<em>id</em>&nbsp;。</p> \n<p>给你数组 <code>watchedVideos</code>&nbsp; 和&nbsp;<code>friends</code>&nbsp;，其中&nbsp;<code>watchedVideos[i]</code>&nbsp; 和&nbsp;<code>friends[i]</code>&nbsp;分别表示&nbsp;<code>id = i</code>&nbsp;的人观看过的视频列表和他的好友列表。</p> \n<p>Level&nbsp;<strong>1</strong>&nbsp;的视频包含所有你好友观看过的视频，level&nbsp;<strong>2</strong>&nbsp;的视频包含所有你好友的好友观看过的视频，以此类推。一般的，Level 为 <strong>k</strong>&nbsp;的视频包含所有从你出发，最短距离为&nbsp;<strong>k</strong>&nbsp;的好友观看过的视频。</p> \n<p>给定你的&nbsp;<code>id</code>&nbsp; 和一个&nbsp;<code>level</code>&nbsp;值，请你找出所有指定 <code>level</code> 的视频，并将它们按观看频率升序返回。如果有频率相同的视频，请将它们按字母顺序从小到大排列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 179px; width: 129px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/03/leetcode_friends_1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1\n<strong>输出：</strong>[\"B\",\"C\"] \n<strong>解释：</strong>\n你的 id 为 0（绿色），你的朋友包括（黄色）：\nid 为 1 -&gt; watchedVideos = [\"C\"]&nbsp;\nid 为 2 -&gt; watchedVideos = [\"B\",\"C\"]&nbsp;\n你朋友观看过视频的频率为：\nB -&gt; 1&nbsp;\nC -&gt; 2\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 179px; width: 129px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/03/leetcode_friends_2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2\n<strong>输出：</strong>[\"D\"]\n<strong>解释：</strong>\n你的 id 为 0（绿色），你朋友的朋友只有一个人，他的 id 为 3（黄色）。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == watchedVideos.length ==&nbsp;friends.length</code></li> \n <li><code>2 &lt;= n&nbsp;&lt;= 100</code></li> \n <li><code>1 &lt;=&nbsp;watchedVideos[i].length &lt;= 100</code></li> \n <li><code>1 &lt;=&nbsp;watchedVideos[i][j].length &lt;= 8</code></li> \n <li><code>0 &lt;= friends[i].length &lt; n</code></li> \n <li><code>0 &lt;= friends[i][j]&nbsp;&lt; n</code></li> \n <li><code>0 &lt;= id &lt; n</code></li> \n <li><code>1 &lt;= level &lt; n</code></li> \n <li>如果&nbsp;<code>friends[i]</code> 包含&nbsp;<code>j</code>&nbsp;，那么&nbsp;<code>friends[j]</code> 包含&nbsp;<code>i</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1312. 让字符串成为回文串的最少插入次数', '<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，每一次操作你都可以在字符串的任意位置插入任意字符。</p> \n<p>请你返回让&nbsp;<code>s</code>&nbsp;成为回文串的&nbsp;<strong>最少操作次数</strong>&nbsp;。</p> \n<p>「回文串」是正读和反读都相同的字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"zzazz\"\n<strong>输出：</strong>0\n<strong>解释：</strong>字符串 \"zzazz\" 已经是回文串了，所以不需要做任何插入操作。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"mbadm\"\n<strong>输出：</strong>2\n<strong>解释：</strong>字符串可变为 \"mbdadbm\" 或者 \"mdbabdm\" 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"leetcode\"\n<strong>输出：</strong>5\n<strong>解释：</strong>插入 5 个字符后字符串变为 \"leetcodocteel\" 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"g\"\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>s = \"no\"\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 500</code></li> \n <li><code>s</code>&nbsp;中所有字符都是小写字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1313. 解压缩编码列表', '<p>给你一个以行程长度编码压缩的整数列表&nbsp;<code>nums</code>&nbsp;。</p> \n<p>考虑每对相邻的两个元素 <code>[freq, val] = [nums[2*i], nums[2*i+1]]</code>&nbsp;（其中&nbsp;<code>i &gt;= 0</code>&nbsp;），每一对都表示解压后子列表中有 <code>freq</code>&nbsp;个值为&nbsp;<code>val</code>&nbsp;的元素，你需要从左到右连接所有子列表以生成解压后的列表。</p> \n<p>请你返回解压后的列表。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4]\n<strong>输出：</strong>[2,4,4,4]\n<strong>解释：</strong>第一对 [1,2] 代表着 2 的出现频次为 1，所以生成数组 [2]。\n第二对 [3,4] 代表着 4 的出现频次为 3，所以生成数组 [4,4,4]。\n最后将它们串联到一起 [2] + [4,4,4] = [2,4,4,4]。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,2,3]\n<strong>输出：</strong>[1,3,3]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= nums.length &lt;= 100</code></li> \n <li><code>nums.length % 2 == 0</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1314. 矩阵区域和', '<p>给你一个&nbsp;<code>m x n</code>&nbsp;的矩阵&nbsp;<code>mat</code>&nbsp;和一个整数 <code>k</code> ，请你返回一个矩阵&nbsp;<code>answer</code>&nbsp;，其中每个&nbsp;<code>answer[i][j]</code>&nbsp;是所有满足下述条件的元素&nbsp;<code>mat[r][c]</code> 的和：&nbsp;</p> \n<ul> \n <li><code>i - k &lt;= r &lt;= i + k, </code></li> \n <li><code>j - k &lt;= c &lt;= j + k</code> 且</li> \n <li><code>(r, c)</code>&nbsp;在矩阵内。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1\n<strong>输出：</strong>[[12,21,16],[27,45,33],[24,39,28]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2\n<strong>输出：</strong>[[45,45,45],[45,45,45],[45,45,45]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m ==&nbsp;mat.length</code></li> \n <li><code>n ==&nbsp;mat[i].length</code></li> \n <li><code>1 &lt;= m, n, k &lt;= 100</code></li> \n <li><code>1 &lt;= mat[i][j] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1315. 祖父节点值为偶数的节点和', '<p>给你一棵二叉树，请你返回满足以下条件的所有节点的值之和：</p> \n<ul> \n <li>该节点的祖父节点的值为偶数。（一个节点的祖父节点是指该节点的父节点的父节点。）</li> \n</ul> \n<p>如果不存在祖父节点值为偶数的节点，那么返回&nbsp;<code>0</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<p><strong><img style=\"height: 214px; width: 350px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/10/1473_ex1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\n<strong>输出：</strong>18\n<strong>解释：</strong>图中红色节点的祖父节点的值为偶数，蓝色节点为这些红色节点的祖父节点。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点的数目在&nbsp;<code>1</code> 到&nbsp;<code>10^4</code>&nbsp;之间。</li> \n <li>每个节点的值在&nbsp;<code>1</code> 到&nbsp;<code>100</code> 之间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1316. 不同的循环子字符串', '<p>给你一个字符串&nbsp;<code>text</code> ，请你返回满足下述条件的&nbsp;<strong>不同</strong> 非空子字符串的数目：</p> \n<ul> \n <li>可以写成某个字符串与其自身相连接的形式（即，可以写为 <code>a&nbsp;+ a</code>，其中 <code>a</code> 是某个字符串）。</li> \n</ul> \n<p>例如，<code>abcabc</code>&nbsp;就是&nbsp;<code>abc</code>&nbsp;和它自身连接形成的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>text = \"abcabcabc\"\n<strong>输出：</strong>3\n<strong>解释：</strong>3 个子字符串分别为 \"abcabc\"，\"bcabca\" 和 \"cabcab\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>text = \"leetcodeleetcode\"\n<strong>输出：</strong>2\n<strong>解释：</strong>2 个子字符串为 \"ee\" 和 \"leetcodeleetcode\" 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= text.length &lt;= 2000</code></li> \n <li><code>text</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1317. 将整数转换为两个无零整数的和', '<p>「无零整数」是十进制表示中 <strong>不含任何 0</strong>&nbsp;的正整数。</p> \n<p>给你一个整数&nbsp;<code>n</code>，请你返回一个 <strong>由两个整数组成的列表</strong> <code>[A, B]</code>，满足：</p> \n<ul> \n <li><code>A</code> 和 <code>B</code>&nbsp;都是无零整数</li> \n <li><code>A + B = n</code></li> \n</ul> \n<p>题目数据保证至少有一个有效的解决方案。</p> \n<p>如果存在多个有效解决方案，你可以返回其中任意一个。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>[1,1]\n<strong>解释：</strong>A = 1, B = 1. A + B = n 并且 A 和 B 的十进制表示形式都不包含任何 0 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 11\n<strong>输出：</strong>[2,9]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 10000\n<strong>输出：</strong>[1,9999]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 69\n<strong>输出：</strong>[1,68]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 1010\n<strong>输出：</strong>[11,999]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1318. 或运算的最小翻转次数', '<p>给你三个正整数&nbsp;<code>a</code>、<code>b</code> 和 <code>c</code>。</p> \n<p>你可以对 <code>a</code> 和 <code>b</code>&nbsp;的二进制表示进行位翻转操作，返回能够使按位或运算&nbsp; &nbsp;<code>a</code> OR <code>b</code> == <code>c</code>&nbsp;&nbsp;成立的最小翻转次数。</p> \n<p>「位翻转操作」是指将一个数的二进制表示任何单个位上的 1 变成 0 或者 0 变成 1 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 87px; width: 260px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/11/sample_3_1676.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>a = 2, b = 6, c = 5\n<strong>输出：</strong>3\n<strong>解释：</strong>翻转后 a = 1 , b = 4 , c = 5 使得 <code>a</code> OR <code>b</code> == <code>c</code></pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>a = 4, b = 2, c = 7\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>a = 1, b = 2, c = 3\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= a &lt;= 10^9</code></li> \n <li><code>1 &lt;= b&nbsp;&lt;= 10^9</code></li> \n <li><code>1 &lt;= c&nbsp;&lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1319. 连通网络的操作次数', '<p>用以太网线缆将&nbsp;<code>n</code>&nbsp;台计算机连接成一个网络，计算机的编号从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>。线缆用&nbsp;<code>connections</code>&nbsp;表示，其中&nbsp;<code>connections[i] = [a, b]</code>&nbsp;连接了计算机&nbsp;<code>a</code>&nbsp;和&nbsp;<code>b</code>。</p> \n<p>网络中的任何一台计算机都可以通过网络直接或者间接访问同一个网络中其他任意一台计算机。</p> \n<p>给你这个计算机网络的初始布线&nbsp;<code>connections</code>，你可以拔开任意两台直连计算机之间的线缆，并用它连接一对未直连的计算机。请你计算并返回使所有计算机都连通所需的最少操作次数。如果不可能，则返回&nbsp;-1 。&nbsp;</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 167px; width: 570px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/11/sample_1_1677.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 4, connections = [[0,1],[0,2],[1,2]]\n<strong>输出：</strong>1\n<strong>解释：</strong>拔下计算机 1 和 2 之间的线缆，并将它插到计算机 1 和 3 上。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 175px; width: 660px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/11/sample_2_1677.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]\n<strong>输出：</strong>-1\n<strong>解释：</strong>线缆数量不足。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 5, connections = [[0,1],[0,2],[3,4],[2,3]]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^5</code></li> \n <li><code>1 &lt;= connections.length &lt;= min(n*(n-1)/2, 10^5)</code></li> \n <li><code>connections[i].length == 2</code></li> \n <li><code>0 &lt;= connections[i][0], connections[i][1]&nbsp;&lt; n</code></li> \n <li><code>connections[i][0] != connections[i][1]</code></li> \n <li>没有重复的连接。</li> \n <li>两台计算机不会通过多条线缆连接。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('132. 分割回文串 II', '<p>给你一个字符串 <code>s</code>，请你将 <code>s</code> 分割成一些子串，使每个子串都是回文。</p> \n<p>返回符合要求的 <strong>最少分割次数</strong> 。</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <pre><strong>输入：</strong>s = \"aab\"\n<strong>输出：</strong>1\n<strong>解释：</strong>只需一次分割就可将&nbsp;<em>s </em>分割成 [\"aa\",\"b\"] 这样两个回文子串。\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>s = \"a\"\n<strong>输出：</strong>0\n</pre> \n  <p><strong>示例 3：</strong></p> \n  <pre><strong>输入：</strong>s = \"ab\"\n<strong>输出：</strong>1\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>1 &lt;= s.length &lt;= 2000</code></li> \n   <li><code>s</code> 仅由小写英文字母组成</li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('1320. 二指输入的的最小距离', '<p><img style=\"height: 250px; width: 417px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/11/leetcode_keyboard.png\" alt=\"\"></p> \n<p>二指输入法定制键盘在 XY 平面上的布局如上图所示，其中每个大写英文字母都位于某个坐标处，例如字母&nbsp;<strong>A</strong>&nbsp;位于坐标&nbsp;<strong>(0,0)</strong>，字母&nbsp;<strong>B</strong>&nbsp;位于坐标&nbsp;<strong>(0,1)</strong>，字母&nbsp;<strong>P</strong>&nbsp;位于坐标&nbsp;<strong>(2,3)</strong>&nbsp;且字母 <strong>Z</strong>&nbsp;位于坐标&nbsp;<strong>(4,1)</strong>。</p> \n<p>给你一个待输入字符串&nbsp;<code>word</code>，请你计算并返回在仅使用两根手指的情况下，键入该字符串需要的最小移动总距离。坐标&nbsp;<strong>(x<sub>1</sub>,y<sub>1</sub>)</strong> 和 <strong>(x<sub>2</sub>,y<sub>2</sub>)</strong> 之间的距离是&nbsp;<strong>|x<sub>1</sub> - x<sub>2</sub>| + |y<sub>1</sub> - y<sub>2</sub>|</strong>。&nbsp;</p> \n<p>注意，两根手指的起始位置是零代价的，不计入移动总距离。你的两根手指的起始位置也不必从首字母或者前两个字母开始。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>word = \"CAKE\"\n<strong>输出：</strong>3\n<strong>解释： \n</strong>使用两根手指输入 \"CAKE\" 的最佳方案之一是： \n手指 1 在字母 \'C\' 上 -&gt; 移动距离 = 0 \n手指 1 在字母 \'A\' 上 -&gt; 移动距离 = 从字母 \'C\' 到字母 \'A\' 的距离 = 2 \n手指 2 在字母 \'K\' 上 -&gt; 移动距离 = 0 \n手指 2 在字母 \'E\' 上 -&gt; 移动距离 = 从字母 \'K\' 到字母 \'E\' 的距离  = 1 \n总距离 = 3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>word = \"HAPPY\"\n<strong>输出：</strong>6\n<strong>解释： </strong>\n使用两根手指输入 \"HAPPY\" 的最佳方案之一是：\n手指 1 在字母 \'H\' 上 -&gt; 移动距离 = 0\n手指 1 在字母 \'A\' 上 -&gt; 移动距离 = 从字母 \'H\' 到字母 \'A\' 的距离 = 2\n手指 2 在字母 \'P\' 上 -&gt; 移动距离 = 0\n手指 2 在字母 \'P\' 上 -&gt; 移动距离 = 从字母 \'P\' 到字母 \'P\' 的距离 = 0\n手指 1 在字母 \'Y\' 上 -&gt; 移动距离 = 从字母 \'A\' 到字母 \'Y\' 的距离 = 4\n总距离 = 6\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>word = \"NEW\"\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>word = \"YEAR\"\n<strong>输出：</strong>7\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= word.length &lt;= 300</code></li> \n <li>每个 <code>word[i]</code>&nbsp;都是一个大写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1323. 6 和 9 组成的最大数字', '<p>给你一个仅由数字 6 和 9 组成的正整数&nbsp;<code>num</code>。</p> \n<p>你最多只能翻转一位数字，将 6 变成&nbsp;9，或者把&nbsp;9 变成&nbsp;6 。</p> \n<p>请返回你可以得到的最大数字。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>num = 9669\n<strong>输出：</strong>9969\n<strong>解释：</strong>\n改变第一位数字可以得到 6669 。\n改变第二位数字可以得到 9969 。\n改变第三位数字可以得到 9699 。\n改变第四位数字可以得到 9666 。\n其中最大的数字是 9969 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>num = 9996\n<strong>输出：</strong>9999\n<strong>解释：</strong>将最后一位从 6 变到 9，其结果 9999 是最大的数。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>num = 9999\n<strong>输出：</strong>9999\n<strong>解释：</strong>无需改变就已经是最大的数字了。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= num &lt;= 10^4</code></li> \n <li><code>num</code>&nbsp;每一位上的数字都是 6 或者&nbsp;9 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1324. 竖直打印单词', '<p>给你一个字符串&nbsp;<code>s</code>。请你按照单词在 <code>s</code> 中的出现顺序将它们全部竖直返回。<br> 单词应该以字符串列表的形式返回，必要时用空格补位，但输出尾部的空格需要删除（不允许尾随空格）。<br> 每个单词只能放在一列上，每一列中也只能有一个单词。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"HOW ARE YOU\"\n<strong>输出：</strong>[\"HAY\",\"ORO\",\"WEU\"]\n<strong>解释：</strong>每个单词都应该竖直打印。 \n \"HAY\"\n&nbsp;\"ORO\"\n&nbsp;\"WEU\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"TO BE OR NOT TO BE\"\n<strong>输出：</strong>[\"TBONTB\",\"OEROOE\",\"   T\"]\n<strong>解释：</strong>题目允许使用空格补位，但不允许输出末尾出现空格。\n\"TBONTB\"\n\"OEROOE\"\n\"   T\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"CONTEST IS COMING\"\n<strong>输出：</strong>[\"CIC\",\"OSO\",\"N M\",\"T I\",\"E N\",\"S G\",\"T\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 200</code></li> \n <li><code>s</code>&nbsp;仅含大写英文字母。</li> \n <li>题目数据保证两个单词之间只有一个空格。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1325. 删除给定值的叶子节点', '<p>给你一棵以&nbsp;<code>root</code>&nbsp;为根的二叉树和一个整数&nbsp;<code>target</code>&nbsp;，请你删除所有值为&nbsp;<code>target</code> 的&nbsp;<strong>叶子节点</strong> 。</p> \n<p>注意，一旦删除值为&nbsp;<code>target</code>&nbsp;的叶子节点，它的父节点就可能变成叶子节点；如果新叶子节点的值恰好也是&nbsp;<code>target</code> ，那么这个节点也应该被删除。</p> \n<p>也就是说，你需要重复此过程直到不能继续删除。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 120px; width: 550px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/16/sample_1_1684.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [1,2,3,2,null,2,4], target = 2\n<strong>输出：</strong>[1,null,3,null,4]\n<strong>解释：\n</strong>上面左边的图中，绿色节点为叶子节点，且它们的值与 target 相同（同为 2 ），它们会被删除，得到中间的图。\n有一个新的节点变成了叶子节点且它的值与 target 相同，所以将再次进行删除，从而得到最右边的图。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 120px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/16/sample_2_1684.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [1,3,3,3,2], target = 3\n<strong>输出：</strong>[1,3,null,null,2]\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"width: 450px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/16/sample_3_1684.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [1,2,null,2,null,2], target = 2\n<strong>输出：</strong>[1]\n<strong>解释：</strong>每一步都删除一个绿色的叶子节点（值为 2）。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>root = [1,1,1], target = 1\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>root = [1,2,3], target = 1\n<strong>输出：</strong>[1,2,3]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= target&nbsp;&lt;= 1000</code></li> \n <li>每一棵树最多有 <code>3000</code> 个节点。</li> \n <li>每一个节点值的范围是&nbsp;<code>[1, 1000]</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1326. 灌溉花园的最少水龙头数目', '<p>在 x 轴上有一个一维的花园。花园长度为&nbsp;<code>n</code>，从点&nbsp;<code>0</code>&nbsp;开始，到点&nbsp;<code>n</code>&nbsp;结束。</p> \n<p>花园里总共有&nbsp;<code>n + 1</code> 个水龙头，分别位于&nbsp;<code>[0, 1, ..., n]</code> 。</p> \n<p>给你一个整数&nbsp;<code>n</code>&nbsp;和一个长度为&nbsp;<code>n + 1</code> 的整数数组&nbsp;<code>ranges</code>&nbsp;，其中&nbsp;<code>ranges[i]</code> （下标从 0 开始）表示：如果打开点&nbsp;<code>i</code>&nbsp;处的水龙头，可以灌溉的区域为&nbsp;<code>[i -&nbsp; ranges[i], i + ranges[i]]</code>&nbsp;。</p> \n<p>请你返回可以灌溉整个花园的&nbsp;<strong>最少水龙头数目</strong>&nbsp;。如果花园始终存在无法灌溉到的地方，请你返回&nbsp;<strong>-1</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 530px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/19/1685_example_1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 5, ranges = [3,4,1,1,0,0]\n<strong>输出：</strong>1\n<strong>解释：\n</strong>点 0 处的水龙头可以灌溉区间 [-3,3]\n点 1 处的水龙头可以灌溉区间 [-3,5]\n点 2 处的水龙头可以灌溉区间 [1,3]\n点 3 处的水龙头可以灌溉区间 [2,4]\n点 4 处的水龙头可以灌溉区间 [4,4]\n点 5 处的水龙头可以灌溉区间 [5,5]\n只需要打开点 1 处的水龙头即可灌溉整个花园 [0,5] 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 3, ranges = [0,0,0,0]\n<strong>输出：</strong>-1\n<strong>解释：</strong>即使打开所有水龙头，你也无法灌溉整个花园。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 7, ranges = [1,2,1,0,2,1,0,1]\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 8, ranges = [4,0,0,0,0,0,0,0,4]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 8, ranges = [4,0,0,0,4,0,0,0,4]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^4</code></li> \n <li><code>ranges.length == n + 1</code></li> \n <li><code>0 &lt;= ranges[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1328. 破坏回文串', '<p>给你一个由小写英文字母组成的回文字符串&nbsp;<code>palindrome</code> ，请你将其中&nbsp;<strong>一个</strong> 字符用任意小写英文字母替换，使得结果字符串的 <strong>字典序最小</strong> ，且&nbsp;<strong>不是</strong>&nbsp;回文串。</p> \n<p>请你返回结果字符串。如果无法做到，则返回一个 <strong>空串</strong> 。</p> \n<p>如果两个字符串长度相同，那么字符串 <code>a</code> 字典序比字符串 <code>b</code> 小可以这样定义：在 <code>a</code> 和 <code>b</code> 出现不同的第一个位置上，字符串 <code>a</code> 中的字符严格小于 <code>b</code> 中的对应字符。例如，<code>\"abcc”</code> 字典序比 <code>\"abcd\"</code> 小，因为不同的第一个位置是在第四个字符，显然 <code>\'c\'</code> 比 <code>\'d\'</code> 小。</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>palindrome = \"abccba\"\n<strong>输出：</strong>\"aaccba\"\n<strong>解释：</strong>存在多种方法可以使 \"abccba\" 不是回文，例如 \"<em><strong>z</strong></em>bccba\", \"a<em><strong>a</strong></em>ccba\", 和 \"ab<em><strong>a</strong></em>cba\" 。\n在所有方法中，\"aaccba\" 的字典序最小。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>palindrome = \"a\"\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>不存在替换一个字符使 \"a\" 变成非回文的方法，所以返回空字符串。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>palindrome = \"aa\"\n<strong>输出：</strong>\"ab\"</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>palindrome = \"aba\"\n<strong>输出：</strong>\"abb\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= palindrome.length &lt;= 1000</code></li> \n <li><code>palindrome</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1329. 将矩阵按对角线排序', '<p><strong>矩阵对角线</strong> 是一条从矩阵最上面行或者最左侧列中的某个元素开始的对角线，沿右下方向一直到矩阵末尾的元素。例如，矩阵 <code>mat</code> 有 <code>6</code> 行 <code>3</code> 列，从 <code>mat[2][0]</code> 开始的 <strong>矩阵对角线</strong> 将会经过 <code>mat[2][0]</code>、<code>mat[3][1]</code> 和 <code>mat[4][2]</code> 。</p> \n<p>给你一个&nbsp;<code>m * n</code>&nbsp;的整数矩阵&nbsp;<code>mat</code>&nbsp;，请你将同一条 <strong>矩阵对角线 </strong>上的元素按升序排序后，返回排好序的矩阵。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 198px; width: 500px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/25/1482_example_1_2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]\n<strong>输出：</strong>[[1,1,1,1],[1,2,2,2],[1,2,3,3]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]\n<strong>输出：</strong>[[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m ==&nbsp;mat.length</code></li> \n <li><code>n ==&nbsp;mat[i].length</code></li> \n <li><code>1 &lt;= m, n&nbsp;&lt;= 100</code></li> \n <li><code>1 &lt;= mat[i][j] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('133. 克隆图', '<p>给你无向&nbsp;<strong><a href=\"https://baike.baidu.com/item/连通图/6460995?fr=aladdin\">连通</a>&nbsp;</strong>图中一个节点的引用，请你返回该图的&nbsp;<a href=\"https://baike.baidu.com/item/深拷贝/22785317?fr=aladdin\"><strong>深拷贝</strong></a>（克隆）。</p> \n<p>图中的每个节点都包含它的值 <code>val</code>（<code>int</code>） 和其邻居的列表（<code>list[Node]</code>）。</p> \n<pre>class Node {\n    public int val;\n    public List&lt;Node&gt; neighbors;\n}</pre> \n<p>&nbsp;</p> \n<p><strong>测试用例格式：</strong></p> \n<p>简单起见，每个节点的值都和它的索引相同。例如，第一个节点值为 1（<code>val = 1</code>），第二个节点值为 2（<code>val = 2</code>），以此类推。该图在测试用例中使用邻接列表表示。</p> \n<p><strong>邻接列表</strong> 是用于表示有限图的无序列表的集合。每个列表都描述了图中节点的邻居集。</p> \n<p>给定节点将始终是图中的第一个节点（值为 1）。你必须将&nbsp;<strong>给定节点的拷贝&nbsp;</strong>作为对克隆图的引用返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 500px; width: 500px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/01/133_clone_graph_question.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>adjList = [[2,4],[1,3],[2,4],[1,3]]\n<strong>输出：</strong>[[2,4],[1,3],[2,4],[1,3]]\n<strong>解释：\n</strong>图中有 4 个节点。\n节点 1 的值是 1，它有两个邻居：节点 2 和 4 。\n节点 2 的值是 2，它有两个邻居：节点 1 和 3 。\n节点 3 的值是 3，它有两个邻居：节点 2 和 4 。\n节点 4 的值是 4，它有两个邻居：节点 1 和 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 148px; width: 163px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/01/graph.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>adjList = [[]]\n<strong>输出：</strong>[[]]\n<strong>解释：</strong>输入包含一个空列表。该图仅仅只有一个值为 1 的节点，它没有任何邻居。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>adjList = []\n<strong>输出：</strong>[]\n<strong>解释：</strong>这个图是空的，它不含任何节点。\n</pre> \n<p><strong>示例 4：</strong></p> \n<p><img style=\"height: 133px; width: 272px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/01/graph-1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>adjList = [[2],[1]]\n<strong>输出：</strong>[[2],[1]]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>节点数不超过 100 。</li> \n <li>每个节点值&nbsp;<code>Node.val</code> 都是唯一的，<code>1 &lt;= Node.val &lt;= 100</code>。</li> \n <li>无向图是一个<a href=\"https://baike.baidu.com/item/简单图/1680528?fr=aladdin\">简单图</a>，这意味着图中没有重复的边，也没有自环。</li> \n <li>由于图是无向的，如果节点 <em>p</em> 是节点 <em>q</em> 的邻居，那么节点 <em>q</em> 也必须是节点 <em>p</em>&nbsp;的邻居。</li> \n <li>图是连通图，你可以从给定节点访问到所有节点。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('1330. 翻转子数组得到最大的数组值', '<p>给你一个整数数组&nbsp;<code>nums</code> 。「数组值」定义为所有满足&nbsp;<code>0 &lt;= i &lt; nums.length-1</code>&nbsp;的&nbsp;<code>|nums[i]-nums[i+1]|</code>&nbsp;的和。</p> \n<p>你可以选择给定数组的任意子数组，并将该子数组翻转。但你只能执行这个操作&nbsp;<strong>一次</strong> 。</p> \n<p>请你找到可行的最大 <strong>数组值&nbsp;</strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [2,3,1,5,4]\n<strong>输出：</strong>10\n<strong>解释：</strong>通过翻转子数组 [3,1,5] ，数组变成 [2,5,1,3,4] ，数组值为 10 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [2,4,9,24,2,1,10]\n<strong>输出：</strong>68\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 3*10^4</code></li> \n <li><code>-10^5 &lt;= nums[i] &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1331. 数组序号转换', '<p>给你一个整数数组&nbsp;<code>arr</code> ，请你将数组中的每个元素替换为它们排序后的序号。</p> \n<p>序号代表了一个元素有多大。序号编号的规则如下：</p> \n<ul> \n <li>序号从 1 开始编号。</li> \n <li>一个元素越大，那么序号越大。如果两个元素相等，那么它们的序号相同。</li> \n <li>每个数字的序号都应该尽可能地小。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [40,10,20,30]\n<strong>输出：</strong>[4,1,2,3]\n<strong>解释：</strong>40 是最大的元素。 10 是最小的元素。 20 是第二小的数字。 30 是第三小的数字。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [100,100,100]\n<strong>输出：</strong>[1,1,1]\n<strong>解释：</strong>所有元素有相同的序号。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [37,12,28,9,100,56,80,5,12]\n<strong>输出：</strong>[5,3,4,2,8,6,7,1,3]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> \n <li><code>-10<sup>9</sup>&nbsp;&lt;= arr[i] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1332. 删除回文子序列', '<p>给你一个字符串&nbsp;<code>s</code>，它仅由字母&nbsp;<code>\'a\'</code> 和 <code>\'b\'</code>&nbsp;组成。每一次删除操作都可以从 <code>s</code> 中删除一个回文 <strong>子序列</strong>。</p> \n<p>返回删除给定字符串中所有字符（字符串为空）的最小删除次数。</p> \n<p>「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。</p> \n<p>「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"ababa\"\n<strong>输出：</strong>1\n<strong>解释：</strong>字符串本身就是回文序列，只需要删除一次。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abb\"\n<strong>输出：</strong>2\n<strong>解释：</strong>\"<strong>a</strong>bb\" -&gt; \"<strong>bb</strong>\" -&gt; \"\". \n先删除回文子序列 \"a\"，然后再删除 \"bb\"。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"baabb\"\n<strong>输出：</strong>2\n<strong>解释：</strong>\"<strong>baa</strong>b<strong>b</strong>\" -&gt; \"b\" -&gt; \"\". \n先删除回文子序列 \"baab\"，然后再删除 \"b\"。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"\"\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s.length &lt;= 1000</code></li> \n <li><code>s</code> 仅包含字母&nbsp;\'a\'&nbsp; 和 \'b\'</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1333. 餐厅过滤器', '<p>给你一个餐馆信息数组&nbsp;<code>restaurants</code>，其中&nbsp;&nbsp;<code>restaurants[i] = [id<sub>i</sub>, rating<sub>i</sub>, veganFriendly<sub>i</sub>, price<sub>i</sub>, distance<sub>i</sub>]</code>。你必须使用以下三个过滤器来过滤这些餐馆信息。</p> \n<p>其中素食者友好过滤器&nbsp;<code>veganFriendly</code>&nbsp;的值可以为 <code>true</code> 或者 <code>false</code>，如果为 <em>true</em>&nbsp;就意味着你应该只包括&nbsp;<code>veganFriendly<sub>i</sub></code>&nbsp;为 true 的餐馆，为&nbsp;<em>false</em>&nbsp;则意味着可以包括任何餐馆。此外，我们还有最大价格&nbsp;<code>maxPrice</code>&nbsp;和最大距离&nbsp;<code>maxDistance</code>&nbsp;两个过滤器，它们分别考虑餐厅的价格因素和距离因素的最大值。</p> \n<p>过滤后返回餐馆的 <strong><em>id</em></strong>，按照 <em><strong>rating</strong></em>&nbsp;从高到低排序。如果 <em><strong>rating</strong></em> 相同，那么按 <em><strong>id</strong></em> 从高到低排序。简单起见，&nbsp;<code>veganFriendly<sub>i</sub></code> 和 <code>veganFriendly</code>&nbsp;为&nbsp;<em>true</em>&nbsp;时取值为 <em>1</em>，为 <em>false</em> 时，取值为&nbsp;<em>0 。</em></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10\n<strong>输出：</strong>[3,1,5] \n<strong>解释： \n</strong>这些餐馆为：\n餐馆 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\n餐馆 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\n餐馆 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\n餐馆 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\n餐馆 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] \n在按照 veganFriendly = 1, maxPrice = 50 和 maxDistance = 10 进行过滤后，我们得到了餐馆 3, 餐馆 1 和 餐馆 5（按评分从高到低排序）。 \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10\n<strong>输出：</strong>[4,3,2,1,5]\n<strong>解释：</strong>餐馆与示例 1 相同，但在 veganFriendly = 0 的过滤条件下，应该考虑所有餐馆。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3\n<strong>输出：</strong>[4,5]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;restaurants.length &lt;= 10^4</code></li> \n <li><code>restaurants[i].length == 5</code></li> \n <li><code>1 &lt;=&nbsp;id<sub>i</sub>, rating<sub>i</sub>, price<sub>i</sub>, distance<sub>i </sub>&lt;= 10^5</code></li> \n <li><code>1 &lt;=&nbsp;maxPrice,&nbsp;maxDistance &lt;= 10^5</code></li> \n <li><code>veganFriendly<sub>i</sub></code> 和&nbsp;<code>veganFriendly</code>&nbsp;的值为 0 或 1 。</li> \n <li>所有 <code>id<sub>i</sub></code> 各不相同。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1334. 阈值距离内邻居最少的城市', '<p>有 <code>n</code>&nbsp;个城市，按从 <code>0</code> 到 <code>n-1</code>&nbsp;编号。给你一个边数组&nbsp;<code>edges</code>，其中 <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>, weight<sub>i</sub>]</code>&nbsp;代表&nbsp;<code>from<sub>i</sub></code>&nbsp;和&nbsp;<code>to<sub>i</sub></code><sub>&nbsp;</sub>两个城市之间的双向加权边，距离阈值是一个整数&nbsp;<code>distanceThreshold</code>。</p> \n<p>返回能通过某些路径到达其他城市数目最少、且路径距离 <strong>最大</strong> 为&nbsp;<code>distanceThreshold</code>&nbsp;的城市。如果有多个这样的城市，则返回编号最大的城市。</p> \n<p>注意，连接城市 <em><strong>i</strong></em> 和 <em><strong>j</strong></em> 的路径的距离等于沿该路径的所有边的权重之和。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 225px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/26/find_the_city_01.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4\n<strong>输出：</strong>3\n<strong>解释：</strong>城市分布图如上。\n每个城市阈值距离 distanceThreshold = 4 内的邻居城市分别是：\n城市 0 -&gt; [城市 1, 城市 2]&nbsp;\n城市 1 -&gt; [城市 0, 城市 2, 城市 3]&nbsp;\n城市 2 -&gt; [城市 0, 城市 1, 城市 3]&nbsp;\n城市 3 -&gt; [城市 1, 城市 2]&nbsp;\n城市 0 和 3 在阈值距离 4 以内都有 2 个邻居城市，但是我们必须返回城市 3，因为它的编号最大。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 225px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/26/find_the_city_02.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2\n<strong>输出：</strong>0\n<strong>解释：</strong>城市分布图如上。&nbsp;\n每个城市阈值距离 distanceThreshold = 2 内的邻居城市分别是：\n城市 0 -&gt; [城市 1]&nbsp;\n城市 1 -&gt; [城市 0, 城市 4]&nbsp;\n城市 2 -&gt; [城市 3, 城市 4]&nbsp;\n城市 3 -&gt; [城市 2, 城市 4]\n城市 4 -&gt; [城市 1, 城市 2, 城市 3]&nbsp;\n城市 0 在阈值距离 2 以内只有 1 个邻居城市。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 100</code></li> \n <li><code>1 &lt;= edges.length &lt;= n * (n - 1) / 2</code></li> \n <li><code>edges[i].length == 3</code></li> \n <li><code>0 &lt;= from<sub>i</sub> &lt; to<sub>i</sub> &lt; n</code></li> \n <li><code>1 &lt;= weight<sub>i</sub>,&nbsp;distanceThreshold &lt;= 10^4</code></li> \n <li>所有 <code>(from<sub>i</sub>, to<sub>i</sub>)</code>&nbsp;都是不同的。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1335. 工作计划的最低难度', '<p>你需要制定一份&nbsp;<code>d</code>&nbsp;天的工作计划表。工作之间存在依赖，要想执行第&nbsp;<code>i</code>&nbsp;项工作，你必须完成全部&nbsp;<code>j</code>&nbsp;项工作（&nbsp;<code>0 &lt;= j &lt; i</code>）。</p> \n<p>你每天 <strong>至少</strong>&nbsp;需要完成一项任务。工作计划的总难度是这&nbsp;<code>d</code>&nbsp;天每一天的难度之和，而一天的工作难度是当天应该完成工作的最大难度。</p> \n<p>给你一个整数数组&nbsp;<code>jobDifficulty</code>&nbsp;和一个整数&nbsp;<code>d</code>，分别代表工作难度和需要计划的天数。第&nbsp;<code>i</code>&nbsp;项工作的难度是&nbsp;<code>jobDifficulty[i]</code>。</p> \n<p>返回整个工作计划的 <strong>最小难度</strong> 。如果无法制定工作计划，则返回&nbsp;<strong>-1&nbsp;</strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 304px; width: 365px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/26/untitled.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>jobDifficulty = [6,5,4,3,2,1], d = 2\n<strong>输出：</strong>7\n<strong>解释：</strong>第一天，您可以完成前 5 项工作，总难度 = 6.\n第二天，您可以完成最后一项工作，总难度 = 1.\n计划表的难度 = 6 + 1 = 7 \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>jobDifficulty = [9,9,9], d = 4\n<strong>输出：</strong>-1\n<strong>解释：</strong>就算你每天完成一项工作，仍然有一天是空闲的，你无法制定一份能够满足既定工作时间的计划表。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>jobDifficulty = [1,1,1], d = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>工作计划为每天一项工作，总难度为 3 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>jobDifficulty = [7,1,7,1,7,1], d = 3\n<strong>输出：</strong>15\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>jobDifficulty = [11,111,22,222,33,333,44,444], d = 6\n<strong>输出：</strong>843\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= jobDifficulty.length &lt;= 300</code></li> \n <li><code>0 &lt;=&nbsp;jobDifficulty[i] &lt;= 1000</code></li> \n <li><code>1 &lt;= d &lt;= 10</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1337. 矩阵中战斗力最弱的 K 行', '<p>给你一个大小为&nbsp;<code>m&nbsp;* n</code>&nbsp;的矩阵&nbsp;<code>mat</code>，矩阵由若干军人和平民组成，分别用 1 和 0 表示。</p> \n<p>请你返回矩阵中战斗力最弱的&nbsp;<code>k</code>&nbsp;行的索引，按从最弱到最强排序。</p> \n<p>如果第&nbsp;<em><strong>i</strong></em>&nbsp;行的军人数量少于第&nbsp;<em><strong>j</strong></em>&nbsp;行，或者两行军人数量相同但<em><strong> i</strong></em> 小于 <em><strong>j</strong></em>，那么我们认为第<em><strong> i </strong></em>行的战斗力比第<em><strong> j </strong></em>行弱。</p> \n<p>军人 <strong>总是</strong> 排在一行中的靠前位置，也就是说 1 总是出现在 0 之前。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>mat = \n[[1,1,0,0,0],\n [1,1,1,1,0],\n [1,0,0,0,0],\n [1,1,0,0,0],\n [1,1,1,1,1]], \nk = 3\n<strong>输出：</strong>[2,0,3]\n<strong>解释：</strong>\n每行中的军人数目：\n行 0 -&gt; 2 \n行 1 -&gt; 4 \n行 2 -&gt; 1 \n行 3 -&gt; 2 \n行 4 -&gt; 5 \n从最弱到最强对这些行排序后得到 [2,0,3,1,4]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>mat = \n[[1,0,0,0],\n&nbsp;[1,1,1,1],\n&nbsp;[1,0,0,0],\n&nbsp;[1,0,0,0]], \nk = 2\n<strong>输出：</strong>[0,2]\n<strong>解释：</strong> \n每行中的军人数目：\n行 0 -&gt; 1 \n行 1 -&gt; 4 \n行 2 -&gt; 1 \n行 3 -&gt; 1 \n从最弱到最强对这些行排序后得到 [0,2,3,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == mat.length</code></li> \n <li><code>n == mat[i].length</code></li> \n <li><code>2 &lt;= n, m &lt;= 100</code></li> \n <li><code>1 &lt;= k &lt;= m</code></li> \n <li><code>matrix[i][j]</code> 不是 0 就是 1</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1338. 数组大小减半', '<p>给你一个整数数组&nbsp;<code>arr</code>。你可以从中选出一个整数集合，并删除这些整数在数组中的每次出现。</p> \n<p>返回&nbsp;<strong>至少</strong>&nbsp;能删除数组中的一半整数的整数集合的最小大小。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [3,3,3,3,5,5,5,2,2,7]\n<strong>输出：</strong>2\n<strong>解释：</strong>选择 {3,7} 使得结果数组为 [5,5,5,2,2]、长度为 5（原数组长度的一半）。\n大小为 2 的可行集合有 {3,5},{3,2},{5,2}。\n选择 {2,7} 是不可行的，它的结果数组为 [3,3,3,3,5,5,5]，新数组长度大于原数组的二分之一。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [7,7,7,7,7,7]\n<strong>输出：</strong>1\n<strong>解释：</strong>我们只能选择集合 {7}，结果数组为空。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [1,9]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [1000,1000,3,7]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,3,4,5,6,7,8,9,10]\n<strong>输出：</strong>5\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10^5</code></li> \n <li><code>arr.length</code>&nbsp;为偶数</li> \n <li><code>1 &lt;= arr[i] &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1339. 分裂二叉树的最大乘积', '<p>给你一棵二叉树，它的根为&nbsp;<code>root</code> 。请你删除 1 条边，使二叉树分裂成两棵子树，且它们子树和的乘积尽可能大。</p> \n<p>由于答案可能会很大，请你将结果对 10^9 + 7 取模后再返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 200px; width: 495px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/02/sample_1_1699.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [1,2,3,4,5,6]\n<strong>输出：</strong>110\n<strong>解释：</strong>删除红色的边，得到 2 棵子树，和分别为 11 和 10 。它们的乘积是 110 （11*10）\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 200px; width: 495px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/02/sample_2_1699.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [1,null,2,3,4,null,null,5,6]\n<strong>输出：</strong>90\n<strong>解释：</strong>移除红色的边，得到 2 棵子树，和分别是 15 和 6 。它们的乘积为 90 （15*6）\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [2,3,9,10,7,8,6,5,4,11,1]\n<strong>输出：</strong>1025\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>root = [1,1]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>每棵树最多有&nbsp;<code>50000</code>&nbsp;个节点，且至少有&nbsp;<code>2</code>&nbsp;个节点。</li> \n <li>每个节点的值在&nbsp;<code>[1, 10000]</code>&nbsp;之间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('134. 加油站', '<p>在一条环路上有&nbsp;<em>N</em>&nbsp;个加油站，其中第&nbsp;<em>i</em>&nbsp;个加油站有汽油&nbsp;<code>gas[i]</code><em>&nbsp;</em>升。</p> \n<p>你有一辆油箱容量无限的的汽车，从第<em> i </em>个加油站开往第<em> i+1&nbsp;</em>个加油站需要消耗汽油&nbsp;<code>cost[i]</code><em>&nbsp;</em>升。你从其中的一个加油站出发，开始时油箱为空。</p> \n<p>如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。</p> \n<p><strong>说明:</strong>&nbsp;</p> \n<ul> \n <li>如果题目有解，该答案即为唯一答案。</li> \n <li>输入数组均为非空数组，且长度相同。</li> \n <li>输入数组中的元素均为非负数。</li> \n</ul> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> \ngas  = [1,2,3,4,5]\ncost = [3,4,5,1,2]\n\n<strong>输出:</strong> 3\n\n<strong>解释:\n</strong>从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油\n开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油\n开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油\n开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油\n开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油\n开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。\n因此，3 可为起始索引。</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> \ngas  = [2,3,4]\ncost = [3,4,3]\n\n<strong>输出:</strong> -1\n\n<strong>解释:\n</strong>你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。\n我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油\n开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油\n开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油\n你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。\n因此，无论怎样，你都不可能绕环路行驶一周。</pre>');
INSERT INTO `leecode` VALUES ('1340. 跳跃游戏 V', '<p>给你一个整数数组&nbsp;<code>arr</code> 和一个整数&nbsp;<code>d</code> 。每一步你可以从下标&nbsp;<code>i</code>&nbsp;跳到：</p> \n<ul> \n <li><code>i + x</code>&nbsp;，其中&nbsp;<code>i + x &lt; arr.length</code>&nbsp;且&nbsp;<code>0 &lt; x &lt;= d</code>&nbsp;。</li> \n <li><code>i - x</code>&nbsp;，其中&nbsp;<code>i - x &gt;= 0</code>&nbsp;且&nbsp;<code>0 &lt; x &lt;= d</code>&nbsp;。</li> \n</ul> \n<p>除此以外，你从下标&nbsp;<code>i</code> 跳到下标 <code>j</code>&nbsp;需要满足：<code>arr[i] &gt; arr[j]</code>&nbsp;且 <code>arr[i] &gt; arr[k]</code>&nbsp;，其中下标&nbsp;<code>k</code>&nbsp;是所有 <code>i</code>&nbsp;到 <code>j</code>&nbsp;之间的数字（更正式的，<code>min(i, j) &lt; k &lt; max(i, j)</code>）。</p> \n<p>你可以选择数组的任意下标开始跳跃。请你返回你 <strong>最多</strong>&nbsp;可以访问多少个下标。</p> \n<p>请注意，任何时刻你都不能跳到数组的外面。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 419px; width: 633px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/02/meta-chart.jpeg\" alt=\"\"></p> \n<pre><strong>输入：</strong>arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2\n<strong>输出：</strong>4\n<strong>解释：</strong>你可以从下标 10 出发，然后如上图依次经过 10 --&gt; 8 --&gt; 6 --&gt; 7 。\n注意，如果你从下标 6 开始，你只能跳到下标 7 处。你不能跳到下标 5 处因为 13 &gt; 9 。你也不能跳到下标 4 处，因为下标 5 在下标 4 和 6 之间且 13 &gt; 9 。\n类似的，你不能从下标 3 处跳到下标 2 或者下标 1 处。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [3,3,3,3,3], d = 3\n<strong>输出：</strong>1\n<strong>解释：</strong>你可以从任意下标处开始且你永远无法跳到任何其他坐标。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [7,6,5,4,3,2,1], d = 1\n<strong>输出：</strong>7\n<strong>解释：</strong>从下标 0 处开始，你可以按照数值从大到小，访问所有的下标。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [7,1,7,1,7,1], d = 2\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>arr = [66], d = 1\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 1000</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 10^5</code></li> \n <li><code>1 &lt;= d &lt;= arr.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1342. 将数字变成 0 的操作次数', '<p>给你一个非负整数&nbsp;<code>num</code>&nbsp;，请你返回将它变成 0 所需要的步数。 如果当前数字是偶数，你需要把它除以 2 ；否则，减去 1 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>num = 14\n<strong>输出：</strong>6\n<strong>解释：\n</strong>步骤 1) 14 是偶数，除以 2 得到 7 。\n步骤 2） 7 是奇数，减 1 得到 6 。\n步骤 3） 6 是偶数，除以 2 得到 3 。\n步骤 4） 3 是奇数，减 1 得到 2 。\n步骤 5） 2 是偶数，除以 2 得到 1 。\n步骤 6） 1 是奇数，减 1 得到 0 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>num = 8\n<strong>输出：</strong>4\n<strong>解释：</strong>\n步骤 1） 8 是偶数，除以 2 得到 4 。\n步骤 2） 4 是偶数，除以 2 得到 2 。\n步骤 3） 2 是偶数，除以 2 得到 1 。\n步骤 4） 1 是奇数，减 1 得到 0 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>num = 123\n<strong>输出：</strong>12\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= num &lt;= 10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1343. 大小为 K 且平均值大于等于阈值的子数组数目', '<p>给你一个整数数组&nbsp;<code>arr</code>&nbsp;和两个整数 <code>k</code>&nbsp;和 <code>threshold</code>&nbsp;。</p> \n<p>请你返回长度为 <code>k</code>&nbsp;且平均值大于等于&nbsp;<code>threshold</code>&nbsp;的子数组数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\n<strong>输出：</strong>3\n<strong>解释：</strong>子数组 [2,5,5],[5,5,5] 和 [5,5,8] 的平均值分别为 4，5 和 6 。其他长度为 3 的子数组的平均值都小于 4 （threshold 的值)。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,1,1,1,1], k = 1, threshold = 0\n<strong>输出：</strong>5\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5\n<strong>输出：</strong>6\n<strong>解释：</strong>前 6 个长度为 3 的子数组平均值都大于 5 。注意平均值不是整数。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [7,7,7,7,7,7,7], k = 7, threshold = 7\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>arr = [4,4,4,4], k = 4, threshold = 1\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 10^4</code></li> \n <li><code>1 &lt;= k &lt;= arr.length</code></li> \n <li><code>0 &lt;= threshold &lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1344. 时钟指针的夹角', '<p>给你两个数&nbsp;<code>hour</code>&nbsp;和&nbsp;<code>minutes</code>&nbsp;。请你返回在时钟上，由给定时间的时针和分针组成的较小角的角度（60 单位制）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 225px; width: 230px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/08/sample_1_1673.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>hour = 12, minutes = 30\n<strong>输出：</strong>165\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 225px; width: 230px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/08/sample_2_1673.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>hour = 3, minutes = 30\n<strong>输出；</strong>75\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"height: 231px; width: 230px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/08/sample_3_1673.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>hour = 3, minutes = 15\n<strong>输出：</strong>7.5\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>hour = 4, minutes = 50\n<strong>输出：</strong>155\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>hour = 12, minutes = 0\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= hour &lt;= 12</code></li> \n <li><code>0 &lt;= minutes &lt;= 59</code></li> \n <li>与标准答案误差在&nbsp;<code>10^-5</code>&nbsp;以内的结果都被视为正确结果。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1345. 跳跃游戏 IV', '<p>给你一个整数数组&nbsp;<code>arr</code>&nbsp;，你一开始在数组的第一个元素处（下标为 0）。</p> \n<p>每一步，你可以从下标&nbsp;<code>i</code>&nbsp;跳到下标：</p> \n<ul> \n <li><code>i + 1</code>&nbsp;满足：<code>i + 1 &lt; arr.length</code></li> \n <li><code>i - 1</code>&nbsp;满足：<code>i - 1 &gt;= 0</code></li> \n <li><code>j</code>&nbsp;满足：<code>arr[i] == arr[j]</code>&nbsp;且&nbsp;<code>i != j</code></li> \n</ul> \n<p>请你返回到达数组最后一个元素的下标处所需的&nbsp;<strong>最少操作次数</strong>&nbsp;。</p> \n<p>注意：任何时候你都不能跳到数组外面。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [100,-23,-23,404,100,23,23,23,3,404]\n<strong>输出：</strong>3\n<strong>解释：</strong>那你需要跳跃 3 次，下标依次为 0 --&gt; 4 --&gt; 3 --&gt; 9 。下标 9 为数组的最后一个元素的下标。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [7]\n<strong>输出：</strong>0\n<strong>解释：</strong>一开始就在最后一个元素处，所以你不需要跳跃。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [7,6,9,6,9,6,9,7]\n<strong>输出：</strong>1\n<strong>解释：</strong>你可以直接从下标 0 处跳到下标 7 处，也就是数组的最后一个元素处。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [6,1,9]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>arr = [11,22,7,7,7,7,7,7,7,22,13]\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 5 * 10^4</code></li> \n <li><code>-10^8 &lt;= arr[i] &lt;= 10^8</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1346. 检查整数及其两倍数是否存在', '<p>给你一个整数数组&nbsp;<code>arr</code>，请你检查是否存在两个整数&nbsp;<code>N</code> 和 <code>M</code>，满足&nbsp;<code>N</code>&nbsp;是&nbsp;<code>M</code>&nbsp;的两倍（即，<code>N = 2 * M</code>）。</p> \n<p>更正式地，检查是否存在两个下标&nbsp;<code>i</code> 和 <code>j</code> 满足：</p> \n<ul> \n <li><code>i != j</code></li> \n <li><code>0 &lt;= i, j &lt; arr.length</code></li> \n <li><code>arr[i] == 2 * arr[j]</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [10,2,5,3]\n<strong>输出：</strong>true\n<strong>解释：</strong>N<code> = 10</code> 是 M<code> = 5 的两倍</code>，即 <code>10 = 2 * 5 。</code>\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [7,1,14,11]\n<strong>输出：</strong>true\n<strong>解释：</strong>N<code> = 14</code> 是 M<code> = 7 的两倍</code>，即 <code>14 = 2 * 7 </code>。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [3,1,7,11]\n<strong>输出：</strong>false\n<strong>解释：</strong>在该情况下不存在 N 和 M 满足 N = 2 * M 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= arr.length &lt;= 500</code></li> \n <li><code>-10^3 &lt;= arr[i] &lt;= 10^3</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1347. 制造字母异位词的最小步骤数', '<p>给你两个长度相等的字符串&nbsp;<code>s</code> 和 <code>t</code>。每一个步骤中，你可以选择将&nbsp;<code>t</code>&nbsp;中的 <strong>任一字符</strong> 替换为 <strong>另一个字符</strong>。</p> \n<p>返回使&nbsp;<code>t</code>&nbsp;成为&nbsp;<code>s</code>&nbsp;的字母异位词的最小步骤数。</p> \n<p><strong>字母异位词</strong> 指字母相同，但排列不同（也可能相同）的字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输出：</strong>s = \"bab\", t = \"aba\"\n<strong>输出：</strong>1\n<strong>提示：</strong>用 \'b\' 替换 t 中的第一个 \'a\'，t = \"bba\" 是 s 的一个字母异位词。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输出：</strong>s = \"leetcode\", t = \"practice\"\n<strong>输出：</strong>5\n<strong>提示：</strong>用合适的字符替换 t 中的 \'p\', \'r\', \'a\', \'i\' 和 \'c\'，使 t 变成 s 的字母异位词。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输出：</strong>s = \"anagram\", t = \"mangaar\"\n<strong>输出：</strong>0\n<strong>提示：</strong>\"anagram\" 和 \"mangaar\" 本身就是一组字母异位词。 \n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输出：</strong>s = \"xxyyzz\", t = \"xxyyzz\"\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输出：</strong>s = \"friend\", t = \"family\"\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 50000</code></li> \n <li><code>s.length == t.length</code></li> \n <li><code>s</code> 和 <code>t</code>&nbsp;只包含小写英文字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1348. 推文计数', '<p>请你实现一个能够支持以下两种方法的推文计数类&nbsp;<code>TweetCounts</code>：</p> \n<p>1.<code> recordTweet(string tweetName, int time)</code></p> \n<ul> \n <li>记录推文发布情况：用户&nbsp;<code>tweetName</code>&nbsp;在&nbsp;<code>time</code>（以 <strong>秒</strong>&nbsp;为单位）时刻发布了一条推文。</li> \n</ul> \n<p>2.<code> getTweetCountsPerFrequency(string freq, string tweetName, int startTime, int endTime)</code></p> \n<ul> \n <li>返回从开始时间&nbsp;<code>startTime</code>（以 <strong>秒</strong> 为单位）到结束时间&nbsp;<code>endTime</code>（以 <strong>秒</strong> 为单位）内，每 <strong>分&nbsp;</strong><em><strong>minute</strong>，</em><strong>时&nbsp;<em>hour </em></strong>或者 <strong>日<em>&nbsp;day&nbsp;</em></strong>（取决于&nbsp;<code>freq</code>）内指定用户&nbsp;<code>tweetName</code>&nbsp;发布的推文总数。</li> \n <li><code>freq</code>&nbsp;的值始终为 <strong>分&nbsp;</strong><em><strong>minute</strong>，</em><strong>时</strong><em><strong> hour</strong>&nbsp;</em>或者<em>&nbsp;</em><strong>日</strong><em><strong> day</strong>&nbsp;</em>之一，表示获取指定用户&nbsp;<code>tweetName</code>&nbsp;发布推文次数的时间间隔。</li> \n <li>第一个时间间隔始终从 <code>startTime</code> 开始，因此时间间隔为&nbsp;<code>[startTime, startTime + delta*1&gt;, &nbsp;[startTime + delta*1, startTime + delta*2&gt;, [startTime + delta*2, startTime + delta*3&gt;, ... , [startTime + delta*i,&nbsp;<strong>min</strong>(startTime + delta*(i+1), endTime + 1)&gt;</code>，其中 <code>i</code> 和 <code>delta</code>（取决于 <code>freq</code>）都是非负整数。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"TweetCounts\",\"recordTweet\",\"recordTweet\",\"recordTweet\",\"getTweetCountsPerFrequency\",\"getTweetCountsPerFrequency\",\"recordTweet\",\"getTweetCountsPerFrequency\"]\n[[],[\"tweet3\",0],[\"tweet3\",60],[\"tweet3\",10],[\"minute\",\"tweet3\",0,59],[\"minute\",\"tweet3\",0,60],[\"tweet3\",120],[\"hour\",\"tweet3\",0,210]]\n\n<strong>输出：</strong>\n[null,null,null,null,[2],[2,1],null,[4]]\n\n<strong>解释：</strong>\nTweetCounts tweetCounts = new TweetCounts();\ntweetCounts.recordTweet(\"tweet3\", 0);\ntweetCounts.recordTweet(\"tweet3\", 60);\ntweetCounts.recordTweet(\"tweet3\", 10);                             //&nbsp;\"tweet3\"&nbsp;发布推文的时间分别是&nbsp;0,&nbsp;10&nbsp;和&nbsp;60 。\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 59); //&nbsp;返回&nbsp;[2]。统计频率是每分钟（60 秒），因此只有一个有效时间间隔 [0,60&gt;&nbsp;-&nbsp;&gt;&nbsp;2&nbsp;条推文。\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 60); //&nbsp;返回&nbsp;[2,1]。统计频率是每分钟（60 秒），因此有两个有效时间间隔&nbsp;<strong>1)</strong>&nbsp;[0,60&gt;&nbsp;-&nbsp;&gt;&nbsp;2&nbsp;条推文，和&nbsp;<strong>2)</strong>&nbsp;[60,61&gt;&nbsp;-&nbsp;&gt;&nbsp;1&nbsp;条推文。 \ntweetCounts.recordTweet(\"tweet3\", 120);                            // \"tweet3\"&nbsp;发布推文的时间分别是 0, 10, 60 和 120 。\ntweetCounts.getTweetCountsPerFrequency(\"hour\", \"tweet3\", 0, 210);  //&nbsp;返回&nbsp;[4]。统计频率是每小时（3600 秒），因此只有一个有效时间间隔 [0,211&gt;&nbsp;-&nbsp;&gt;&nbsp;4&nbsp;条推文。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>同时考虑&nbsp;<code>recordTweet</code>&nbsp;和&nbsp;<code>getTweetCountsPerFrequency</code>，最多有 <code>10000</code> 次操作。</li> \n <li><code>0 &lt;= time, startTime, endTime &lt;=&nbsp;10^9</code></li> \n <li><code>0 &lt;= endTime - startTime &lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1349. 参加考试的最大学生数', '<p>给你一个&nbsp;<code>m&nbsp;* n</code>&nbsp;的矩阵 <code>seats</code>&nbsp;表示教室中的座位分布。如果座位是坏的（不可用），就用&nbsp;<code>\'#\'</code>&nbsp;表示；否则，用&nbsp;<code>\'.\'</code>&nbsp;表示。</p> \n<p>学生可以看到左侧、右侧、左上、右上这四个方向上紧邻他的学生的答卷，但是看不到直接坐在他前面或者后面的学生的答卷。请你计算并返回该考场可以容纳的一起参加考试且无法作弊的最大学生人数。</p> \n<p>学生必须坐在状况良好的座位上。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 197px; width: 339px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/09/image.png\"></p> \n<pre><strong>输入：</strong>seats = [[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n&nbsp;             [\".\",\"#\",\"#\",\"#\",\"#\",\".\"],\n&nbsp;             [\"#\",\".\",\"#\",\"#\",\".\",\"#\"]]\n<strong>输出：</strong>4\n<strong>解释：</strong>教师可以让 4 个学生坐在可用的座位上，这样他们就无法在考试中作弊。 \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>seats = [[\".\",\"#\"],\n&nbsp;             [\"#\",\"#\"],\n&nbsp;             [\"#\",\".\"],\n&nbsp;             [\"#\",\"#\"],\n&nbsp;             [\".\",\"#\"]]\n<strong>输出：</strong>3\n<strong>解释：</strong>让所有学生坐在可用的座位上。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>seats = [[\"#\",\".\",\"<strong>.</strong>\",\".\",\"#\"],\n&nbsp;             [\"<strong>.</strong>\",\"#\",\"<strong>.</strong>\",\"#\",\"<strong>.</strong>\"],\n&nbsp;             [\"<strong>.</strong>\",\".\",\"#\",\".\",\"<strong>.</strong>\"],\n&nbsp;             [\"<strong>.</strong>\",\"#\",\"<strong>.</strong>\",\"#\",\"<strong>.</strong>\"],\n&nbsp;             [\"#\",\".\",\"<strong>.</strong>\",\".\",\"#\"]]\n<strong>输出：</strong>10\n<strong>解释：</strong>让学生坐在第 1、3 和 5 列的可用座位上。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>seats</code>&nbsp;只包含字符&nbsp;<code>\'.\'&nbsp;和</code><code>\'#\'</code></li> \n <li><code>m ==&nbsp;seats.length</code></li> \n <li><code>n ==&nbsp;seats[i].length</code></li> \n <li><code>1 &lt;= m &lt;= 8</code></li> \n <li><code>1 &lt;= n &lt;= 8</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('135. 分发糖果', '<p>老师想给孩子们分发糖果，有 <em>N</em>&nbsp;个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。</p> \n<p>你需要按照以下要求，帮助老师给这些孩子分发糖果：</p> \n<ul> \n <li>每个孩子至少分配到 1 个糖果。</li> \n <li>评分更高的孩子必须比他两侧的邻位孩子获得更多的糖果。</li> \n</ul> \n<p>那么这样下来，老师至少需要准备多少颗糖果呢？</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>[1,0,2]\n<strong>输出：</strong>5\n<strong>解释：</strong>你可以分别给这三个孩子分发 2、1、2 颗糖果。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>[1,2,2]\n<strong>输出：</strong>4\n<strong>解释：</strong>你可以分别给这三个孩子分发 1、2、1 颗糖果。\n     第三个孩子只得到 1 颗糖果，这已满足上述两个条件。</pre>');
INSERT INTO `leecode` VALUES ('1351. 统计有序矩阵中的负数', '<p>给你一个&nbsp;<code>m&nbsp;* n</code>&nbsp;的矩阵&nbsp;<code>grid</code>，矩阵中的元素无论是按行还是按列，都以非递增顺序排列。&nbsp;</p> \n<p>请你统计并返回&nbsp;<code>grid</code>&nbsp;中 <strong>负数</strong> 的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]\n<strong>输出：</strong>8\n<strong>解释：</strong>矩阵中共有 8 个负数。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>grid = [[3,2],[1,0]]\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,-1],[-1,-1]]\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>grid = [[-1]]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 100</code></li> \n <li><code>-100 &lt;= grid[i][j] &lt;= 100</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你可以设计一个时间复杂度为 <code>O(n + m)</code> 的解决方案吗？</p> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('1352. 最后 K 个数的乘积', '<p>请你实现一个「数字乘积类」<code>ProductOfNumbers</code>，要求支持下述两种方法：</p> \n<p>1.<code>&nbsp;add(int num)</code></p> \n<ul> \n <li>将数字&nbsp;<code>num</code>&nbsp;添加到当前数字列表的最后面。</li> \n</ul> \n<p>2.<code> getProduct(int k)</code></p> \n<ul> \n <li>返回当前数字列表中，最后&nbsp;<code>k</code>&nbsp;个数字的乘积。</li> \n <li>你可以假设当前列表中始终 <strong>至少</strong> 包含 <code>k</code> 个数字。</li> \n</ul> \n<p>题目数据保证：任何时候，任一连续数字序列的乘积都在 32-bit 整数范围内，不会溢出。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"]\n[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]\n\n<strong>输出：</strong>\n[null,null,null,null,null,null,20,40,0,null,32]\n\n<strong>解释：</strong>\nProductOfNumbers productOfNumbers = new ProductOfNumbers();\nproductOfNumbers.add(3);        // [3]\nproductOfNumbers.add(0);        // [3,0]\nproductOfNumbers.add(2);        // [3,0,2]\nproductOfNumbers.add(5);        // [3,0,2,5]\nproductOfNumbers.add(4);        // [3,0,2,5,4]\nproductOfNumbers.getProduct(2); // 返回 20 。最后 2 个数字的乘积是 5 * 4 = 20\nproductOfNumbers.getProduct(3); // 返回 40 。最后 3 个数字的乘积是 2 * 5 * 4 = 40\nproductOfNumbers.getProduct(4); // 返回  0 。最后 4 个数字的乘积是 0 * 2 * 5 * 4 = 0\nproductOfNumbers.add(8);        // [3,0,2,5,4,8]\nproductOfNumbers.getProduct(2); // 返回 32 。最后 2 个数字的乘积是 4 * 8 = 32 \n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>add</code> 和 <code>getProduct</code>&nbsp;两种操作加起来总共不会超过&nbsp;<code>40000</code>&nbsp;次。</li> \n <li><code>0 &lt;= num&nbsp;&lt;=&nbsp;100</code></li> \n <li><code>1 &lt;= k &lt;= 40000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1353. 最多可以参加的会议数目', '<p>给你一个数组&nbsp;<code>events</code>，其中&nbsp;<code>events[i] = [startDay<sub>i</sub>, endDay<sub>i</sub>]</code>&nbsp;，表示会议&nbsp;<code>i</code>&nbsp;开始于&nbsp;<code>startDay<sub>i</sub></code>&nbsp;，结束于&nbsp;<code>endDay<sub>i</sub></code>&nbsp;。</p> \n<p>你可以在满足&nbsp;<code>startDay<sub>i</sub>&nbsp;&lt;= d &lt;= endDay<sub>i</sub></code><sub>&nbsp;</sub>中的任意一天&nbsp;<code>d</code>&nbsp;参加会议&nbsp;<code>i</code>&nbsp;。注意，一天只能参加一个会议。</p> \n<p>请你返回你可以参加的&nbsp;<strong>最大&nbsp;</strong>会议数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 400px; width: 600px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/16/e1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>events = [[1,2],[2,3],[3,4]]\n<strong>输出：</strong>3\n<strong>解释：</strong>你可以参加所有的三个会议。\n安排会议的一种方案如上图。\n第 1 天参加第一个会议。\n第 2 天参加第二个会议。\n第 3 天参加第三个会议。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>events= [[1,2],[2,3],[3,4],[1,2]]\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>events = [[1,4],[4,4],[2,2],[3,4],[1,1]]\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>events = [[1,100000]]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>events = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]]\n<strong>输出：</strong>7\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= events.length &lt;= 10^5</code></li> \n <li><code>events[i].length == 2</code></li> \n <li><code>1 &lt;= events[i][0] &lt;= events[i][1] &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1354. 多次求和构造目标数组', '<p>给你一个整数数组&nbsp;<code>target</code> 。一开始，你有一个数组&nbsp;<code>A</code> ，它的所有元素均为 1 ，你可以执行以下操作：</p> \n<ul> \n <li>令&nbsp;<code>x</code>&nbsp;为你数组里所有元素的和</li> \n <li>选择满足&nbsp;<code>0 &lt;= i &lt; target.size</code>&nbsp;的任意下标&nbsp;<code>i</code>&nbsp;，并让&nbsp;<code>A</code>&nbsp;数组里下标为&nbsp;<code>i</code>&nbsp;处的值为&nbsp;<code>x</code>&nbsp;。</li> \n <li>你可以重复该过程任意次</li> \n</ul> \n<p>如果能从&nbsp;<code>A</code>&nbsp;开始构造出目标数组&nbsp;<code>target</code>&nbsp;，请你返回 True ，否则返回 False 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>target = [9,3,5]\n<strong>输出：</strong>true\n<strong>解释：</strong>从 [1, 1, 1] 开始\n[1, 1, 1], 和为 3 ，选择下标 1\n[1, 3, 1], 和为 5， 选择下标 2\n[1, 3, 5], 和为 9， 选择下标 0\n[9, 3, 5] 完成\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>target = [1,1,1,2]\n<strong>输出：</strong>false\n<strong>解释：</strong>不可能从 [1,1,1,1] 出发构造目标数组。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>target = [8,5]\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>N == target.length</code></li> \n <li><code>1 &lt;= target.length&nbsp;&lt;= 5 * 10^4</code></li> \n <li><code>1 &lt;= target[i] &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1356. 根据数字二进制下 1 的数目排序', '<p>给你一个整数数组&nbsp;<code>arr</code>&nbsp;。请你将数组中的元素按照其二进制表示中数字 <strong>1</strong> 的数目升序排序。</p> \n<p>如果存在多个数字二进制中&nbsp;<strong>1</strong>&nbsp;的数目相同，则必须将它们按照数值大小升序排列。</p> \n<p>请你返回排序后的数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [0,1,2,3,4,5,6,7,8]\n<strong>输出：</strong>[0,1,2,4,8,3,5,6,7]\n<strong>解释：</strong>[0] 是唯一一个有 0 个 1 的数。\n[1,2,4,8] 都有 1 个 1 。\n[3,5,6] 有 2 个 1 。\n[7] 有 3 个 1 。\n按照 1 的个数排序得到的结果数组为 [0,1,2,4,8,3,5,6,7]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1024,512,256,128,64,32,16,8,4,2,1]\n<strong>输出：</strong>[1,2,4,8,16,32,64,128,256,512,1024]\n<strong>解释：</strong>数组中所有整数二进制下都只有 1 个 1 ，所以你需要按照数值大小将它们排序。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [10000,10000]\n<strong>输出：</strong>[10000,10000]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [2,3,5,7,11,13,17,19]\n<strong>输出：</strong>[2,3,5,17,7,11,13,19]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>arr = [10,100,1000,10000]\n<strong>输出：</strong>[10,100,10000,1000]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 500</code></li> \n <li><code>0 &lt;= arr[i] &lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1357. 每隔 n 个顾客打折', '<p>超市里正在举行打折活动，每隔&nbsp;<code>n</code>&nbsp;个顾客会得到 <code>discount</code>&nbsp;的折扣。</p> \n<p>超市里有一些商品，第&nbsp;<code>i</code>&nbsp;种商品为&nbsp;<code>products[i]</code>&nbsp;且每件单品的价格为&nbsp;<code>prices[i]</code>&nbsp;。</p> \n<p>结账系统会统计顾客的数目，每隔&nbsp;<code>n</code>&nbsp;个顾客结账时，该顾客的账单都会打折，折扣为&nbsp;<code>discount</code>&nbsp;（也就是如果原本账单为&nbsp;<code>x</code>&nbsp;，那么实际金额会变成&nbsp;<code>x - (discount * x) / 100</code>&nbsp;），然后系统会重新开始计数。</p> \n<p>顾客会购买一些商品，&nbsp;<code>product[i]</code>&nbsp;是顾客购买的第&nbsp;<code>i</code>&nbsp;种商品，&nbsp;<code>amount[i]</code>&nbsp;是对应的购买该种商品的数目。</p> \n<p>请你实现&nbsp;<code>Cashier</code>&nbsp;类：</p> \n<ul> \n <li><code>Cashier(int n, int discount, int[] products, int[] prices)</code>&nbsp;初始化实例对象，参数分别为打折频率&nbsp;<code>n</code>&nbsp;，折扣大小 <code>discount</code>&nbsp;，超市里的商品列表 <code>products</code>&nbsp;和它们的价格 <code>prices</code>&nbsp;。</li> \n <li><code>double&nbsp;getBill(int[] product, int[] amount)</code>&nbsp;返回账单的实际金额（如果有打折，请返回打折后的结果）。返回结果与标准答案误差在&nbsp;<code>10^-5</code>&nbsp;以内都视为正确结果。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入</strong>\n[\"Cashier\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\"]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]\n<strong>输出</strong>\n[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]\n<strong>解释</strong>\nCashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\ncashier.getBill([1,2],[1,2]);                        // 返回 500.0, 账单金额为 = 1 * 100 + 2 * 200 = 500.\ncashier.getBill([3,7],[10,10]);                      // 返回 4000.0\ncashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // 返回 800.0 ，账单原本为 1600.0 ，但由于该顾客是第三位顾客，他将得到 50% 的折扣，所以实际金额为 1600 - 1600 * (50 / 100) = 800 。\ncashier.getBill([4],[10]);                           // 返回 4000.0\ncashier.getBill([7,3],[10,10]);                      // 返回 4000.0\ncashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // 返回 7350.0 ，账单原本为 14700.0 ，但由于系统计数再次达到三，该顾客将得到 50% 的折扣，实际金额为 7350.0 。\ncashier.getBill([2,3,5],[5,3,2]);                    // 返回 2500.0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^4</code></li> \n <li><code>0 &lt;= discount &lt;= 100</code></li> \n <li><code>1 &lt;= products.length &lt;= 200</code></li> \n <li><code>1 &lt;= products[i] &lt;= 200</code></li> \n <li><code>products</code>&nbsp;列表中&nbsp;<strong>不会</strong>&nbsp;有重复的元素。</li> \n <li><code>prices.length == products.length</code></li> \n <li><code>1 &lt;= prices[i] &lt;= 1000</code></li> \n <li><code>1 &lt;= product.length &lt;= products.length</code></li> \n <li><code>product[i]</code>&nbsp;在&nbsp;<code>products</code>&nbsp;出现过。</li> \n <li><code>amount.length == product.length</code></li> \n <li><code>1 &lt;= amount[i] &lt;= 1000</code></li> \n <li>最多有&nbsp;<code>1000</code> 次对&nbsp;<code>getBill</code>&nbsp;函数的调用。</li> \n <li>返回结果与标准答案误差在&nbsp;<code>10^-5</code>&nbsp;以内都视为正确结果。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1358. 包含所有三种字符的子字符串数目', '<p>给你一个字符串 <code>s</code>&nbsp;，它只包含三种字符 a, b 和 c 。</p> \n<p>请你返回 a，b 和 c 都&nbsp;<strong>至少&nbsp;</strong>出现过一次的子字符串数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"abcabc\"\n<strong>输出：</strong>10\n<strong>解释：</strong>包含 a，b 和 c 各至少一次的子字符串为<em> \"</em>abc<em>\", \"</em>abca<em>\", \"</em>abcab<em>\", \"</em>abcabc<em>\", \"</em>bca<em>\", \"</em>bcab<em>\", \"</em>bcabc<em>\", \"</em>cab<em>\", \"</em>cabc<em>\" </em>和<em> \"</em>abc<em>\" </em>(<strong>相同</strong><strong>字符串算多次</strong>)<em>。</em>\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"aaacb\"\n<strong>输出：</strong>3\n<strong>解释：</strong>包含 a，b 和 c 各至少一次的子字符串为<em> \"</em>aaacb<em>\", \"</em>aacb<em>\" </em>和<em> \"</em>acb<em>\" 。</em>\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"abc\"\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= s.length &lt;= 5 x 10^4</code></li> \n <li><code>s</code>&nbsp;只包含字符 a，b 和 c 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1359. 有效的快递序列数目', '<p>给你&nbsp;<code>n</code>&nbsp;笔订单，每笔订单都需要快递服务。</p> \n<p>请你统计所有有效的 收件/配送 序列的数目，确保第 <code>i</code> 个物品的配送服务&nbsp;<code>delivery(i)</code> 总是在其收件服务&nbsp;<code>pickup(i)</code> 之后。</p> \n<p>由于答案可能很大，请返回答案对 <code>10^9 + 7</code> 取余的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>1\n<strong>解释：</strong>只有一种序列 (P1, D1)，物品 1 的配送服务（D1）在物品 1 的收件服务（P1）后。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>6\n<strong>解释：</strong>所有可能的序列包括：\n(P1,P2,D1,D2)，(P1,P2,D2,D1)，(P1,D1,P2,D2)，(P2,P1,D1,D2)，(P2,P1,D2,D1) 和 (P2,D2,P1,D1)。\n(P1,D2,P2,D1) 是一个无效的序列，因为物品 2 的收件服务（P2）不应在物品 2 的配送服务（D2）之后。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>90\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 500</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('136. 只出现一次的数字', '<p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p> \n<p><strong>说明：</strong></p> \n<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [2,2,1]\n<strong>输出:</strong> 1\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> [4,1,2,1,2]\n<strong>输出:</strong> 4</pre>');
INSERT INTO `leecode` VALUES ('1360. 日期之间隔几天', '<p>请你编写一个程序来计算两个日期之间隔了多少天。</p> \n<p>日期以字符串形式给出，格式为&nbsp;<code>YYYY-MM-DD</code>，如示例所示。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>date1 = \"2019-06-29\", date2 = \"2019-06-30\"\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>date1 = \"2020-01-15\", date2 = \"2019-12-31\"\n<strong>输出：</strong>15\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>给定的日期是&nbsp;<code>1971</code>&nbsp;年到 <code>2100</code>&nbsp;年之间的有效日期。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1361. 验证二叉树', '<p>二叉树上有 <code>n</code>&nbsp;个节点，按从&nbsp;<code>0</code>&nbsp;到 <code>n - 1</code>&nbsp;编号，其中节点&nbsp;<code>i</code>&nbsp;的两个子节点分别是&nbsp;<code>leftChild[i]</code>&nbsp;和&nbsp;<code>rightChild[i]</code>。</p> \n<p>只有 <strong>所有</strong> 节点能够形成且 <strong>只</strong> 形成 <strong>一颗</strong>&nbsp;有效的二叉树时，返回&nbsp;<code>true</code>；否则返回 <code>false</code>。</p> \n<p>如果节点&nbsp;<code>i</code>&nbsp;没有左子节点，那么&nbsp;<code>leftChild[i]</code>&nbsp;就等于&nbsp;<code>-1</code>。右子节点也符合该规则。</p> \n<p>注意：节点没有值，本问题中仅仅使用节点编号。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 287px; width: 195px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/23/1503_ex1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 272px; width: 183px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/23/1503_ex2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"height: 174px; width: 82px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/23/1503_ex3.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 2, leftChild = [1,0], rightChild = [-1,-1]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 4：</strong></p> \n<p><strong><img style=\"height: 191px; width: 470px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/23/1503_ex4.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 6, leftChild = [1,-1,-1,4,-1,-1], rightChild = [2,-1,-1,5,-1,-1]\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^4</code></li> \n <li><code>leftChild.length == rightChild.length == n</code></li> \n <li><code>-1 &lt;= leftChild[i], rightChild[i] &lt;= n - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1362. 最接近的因数', '<p>给你一个整数&nbsp;<code>num</code>，请你找出同时满足下面全部要求的两个整数：</p> \n<ul> \n <li>两数乘积等于 &nbsp;<code>num + 1</code>&nbsp;或&nbsp;<code>num + 2</code></li> \n <li>以绝对差进行度量，两数大小最接近</li> \n</ul> \n<p>你可以按任意顺序返回这两个整数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>num = 8\n<strong>输出：</strong>[3,3]\n<strong>解释：</strong>对于 num + 1 = 9，最接近的两个因数是 3 &amp; 3；对于 num + 2 = 10, 最接近的两个因数是 2 &amp; 5，因此返回 3 &amp; 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>num = 123\n<strong>输出：</strong>[5,25]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>num = 999\n<strong>输出：</strong>[40,25]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= num &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1363. 形成三的最大倍数', '<p>给你一个整数数组&nbsp;<code>digits</code>，你可以通过按任意顺序连接其中某些数字来形成 <strong>3</strong> 的倍数，请你返回所能得到的最大的 3 的倍数。</p> \n<p>由于答案可能不在整数数据类型范围内，请以字符串形式返回答案。</p> \n<p>如果无法得到答案，请返回一个空字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>digits = [8,1,9]\n<strong>输出：</strong>\"981\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>digits = [8,6,7,1,0]\n<strong>输出：</strong>\"8760\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>digits = [1]\n<strong>输出：</strong>\"\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>digits = [0,0,0,0,0,0]\n<strong>输出：</strong>\"0\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= digits.length &lt;= 10^4</code></li> \n <li><code>0 &lt;= digits[i] &lt;= 9</code></li> \n <li>返回的结果不应包含不必要的前导零。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1365. 有多少小于当前数字的数字', '<p>给你一个数组&nbsp;<code>nums</code>，对于其中每个元素&nbsp;<code>nums[i]</code>，请你统计数组中比它小的所有数字的数目。</p> \n<p>换而言之，对于每个&nbsp;<code>nums[i]</code>&nbsp;你必须计算出有效的&nbsp;<code>j</code>&nbsp;的数量，其中 <code>j</code> 满足&nbsp;<code>j != i</code> <strong>且</strong> <code>nums[j] &lt; nums[i]</code>&nbsp;。</p> \n<p>以数组形式返回答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [8,1,2,2,3]\n<strong>输出：</strong>[4,0,1,1,3]\n<strong>解释：</strong> \n对于 nums[0]=8 存在四个比它小的数字：（1，2，2 和 3）。 \n对于 nums[1]=1 不存在比它小的数字。\n对于 nums[2]=2 存在一个比它小的数字：（1）。 \n对于 nums[3]=2 存在一个比它小的数字：（1）。 \n对于 nums[4]=3 存在三个比它小的数字：（1，2 和 2）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [6,5,4,8]\n<strong>输出：</strong>[2,1,0,3]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [7,7,7,7]\n<strong>输出：</strong>[0,0,0,0]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= nums.length &lt;= 500</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1366. 通过投票对团队排名', '<p>现在有一个特殊的排名系统，依据参赛团队在投票人心中的次序进行排名，每个投票者都需要按从高到低的顺序对参与排名的所有团队进行排位。</p> \n<p>排名规则如下：</p> \n<ul> \n <li>参赛团队的排名次序依照其所获「排位第一」的票的多少决定。如果存在多个团队并列的情况，将继续考虑其「排位第二」的票的数量。以此类推，直到不再存在并列的情况。</li> \n <li>如果在考虑完所有投票情况后仍然出现并列现象，则根据团队字母的字母顺序进行排名。</li> \n</ul> \n<p>给你一个字符串数组&nbsp;<code>votes</code> 代表全体投票者给出的排位情况，请你根据上述排名规则对所有参赛团队进行排名。</p> \n<p>请你返回能表示按排名系统 <strong>排序后</strong> 的所有团队排名的字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>votes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]\n<strong>输出：</strong>\"ACB\"\n<strong>解释：</strong>A 队获得五票「排位第一」，没有其他队获得「排位第一」，所以 A 队排名第一。\nB 队获得两票「排位第二」，三票「排位第三」。\nC 队获得三票「排位第二」，两票「排位第三」。\n由于 C 队「排位第二」的票数较多，所以 C 队排第二，B 队排第三。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>votes = [\"WXYZ\",\"XYZW\"]\n<strong>输出：</strong>\"XWYZ\"\n<strong>解释：</strong>X 队在并列僵局打破后成为排名第一的团队。X 队和 W 队的「排位第一」票数一样，但是 X 队有一票「排位第二」，而 W 没有获得「排位第二」。 \n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>votes = [\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"]\n<strong>输出：</strong>\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"\n<strong>解释：</strong>只有一个投票者，所以排名完全按照他的意愿。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>votes = [\"BCA\",\"CAB\",\"CBA\",\"ABC\",\"ACB\",\"BAC\"]\n<strong>输出：</strong>\"ABC\"\n<strong>解释：</strong> \nA 队获得两票「排位第一」，两票「排位第二」，两票「排位第三」。\nB 队获得两票「排位第一」，两票「排位第二」，两票「排位第三」。\nC 队获得两票「排位第一」，两票「排位第二」，两票「排位第三」。\n完全并列，所以我们需要按照字母升序排名。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>votes = [\"M\",\"M\",\"M\",\"M\"]\n<strong>输出：</strong>\"M\"\n<strong>解释：</strong>只有 M 队参赛，所以它排名第一。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= votes.length &lt;= 1000</code></li> \n <li><code>1 &lt;= votes[i].length &lt;= 26</code></li> \n <li><code>votes[i].length ==&nbsp;votes[j].length</code> for&nbsp;<code>0 &lt;= i, j &lt; votes.length</code></li> \n <li><code>votes[i][j]</code>&nbsp;是英文 <strong>大写</strong> 字母</li> \n <li><code>votes[i]</code>&nbsp;中的所有字母都是唯一的</li> \n <li><code>votes[0]</code>&nbsp;中出现的所有字母 <strong>同样也</strong> 出现在&nbsp;<code>votes[j]</code>&nbsp;中，其中&nbsp;<code>1 &lt;= j &lt; votes.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1367. 二叉树中的列表', '<p>给你一棵以&nbsp;<code>root</code>&nbsp;为根的二叉树和一个&nbsp;<code>head</code>&nbsp;为第一个节点的链表。</p> \n<p>如果在二叉树中，存在一条一直向下的路径，且每个点的数值恰好一一对应以&nbsp;<code>head</code>&nbsp;为首的链表中每个节点的值，那么请你返回 <code>True</code> ，否则返回 <code>False</code> 。</p> \n<p>一直向下的路径的意思是：从树中某个节点开始，一直连续向下的路径。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 280px; width: 220px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/29/sample_1_1720.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\n<strong>输出：</strong>true\n<strong>解释：</strong>树中蓝色的节点构成了与链表对应的子路径。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 280px; width: 220px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/29/sample_2_1720.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\n<strong>输出：</strong>false\n<strong>解释：</strong>二叉树中不存在一一对应链表的路径。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>二叉树和链表中的每个节点的值都满足&nbsp;<code>1 &lt;= node.val&nbsp;&lt;= 100</code>&nbsp;。</li> \n <li>链表包含的节点数目在&nbsp;<code>1</code>&nbsp;到&nbsp;<code>100</code>&nbsp;之间。</li> \n <li>二叉树包含的节点数目在&nbsp;<code>1</code>&nbsp;到&nbsp;<code>2500</code>&nbsp;之间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1368. 使网格图至少有一条有效路径的最小代价', '<p>给你一个 m x n 的网格图&nbsp;<code>grid</code>&nbsp;。&nbsp;<code>grid</code>&nbsp;中每个格子都有一个数字，对应着从该格子出发下一步走的方向。&nbsp;<code>grid[i][j]</code>&nbsp;中的数字可能为以下几种情况：</p> \n<ul> \n <li><strong>1</strong>&nbsp;，下一步往右走，也就是你会从 <code>grid[i][j]</code>&nbsp;走到 <code>grid[i][j + 1]</code></li> \n <li><strong>2</strong>&nbsp;，下一步往左走，也就是你会从 <code>grid[i][j]</code>&nbsp;走到 <code>grid[i][j - 1]</code></li> \n <li><strong>3</strong>&nbsp;，下一步往下走，也就是你会从 <code>grid[i][j]</code>&nbsp;走到 <code>grid[i + 1][j]</code></li> \n <li><strong>4</strong>&nbsp;，下一步往上走，也就是你会从 <code>grid[i][j]</code>&nbsp;走到 <code>grid[i - 1][j]</code></li> \n</ul> \n<p>注意网格图中可能会有&nbsp;<strong>无效数字</strong>&nbsp;，因为它们可能指向&nbsp;<code>grid</code>&nbsp;以外的区域。</p> \n<p>一开始，你会从最左上角的格子&nbsp;<code>(0,0)</code>&nbsp;出发。我们定义一条&nbsp;<strong>有效路径</strong>&nbsp;为从格子&nbsp;<code>(0,0)</code>&nbsp;出发，每一步都顺着数字对应方向走，最终在最右下角的格子&nbsp;<code>(m - 1, n - 1)</code>&nbsp;结束的路径。有效路径&nbsp;<strong>不需要是最短路径</strong>&nbsp;。</p> \n<p>你可以花费&nbsp;<code>cost = 1</code>&nbsp;的代价修改一个格子中的数字，但每个格子中的数字&nbsp;<strong>只能修改一次</strong>&nbsp;。</p> \n<p>请你返回让网格图至少有一条有效路径的最小代价。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 528px; width: 542px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/29/grid1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]\n<strong>输出：</strong>3\n<strong>解释：</strong>你将从点 (0, 0) 出发。\n到达 (3, 3) 的路径为： (0, 0) --&gt; (0, 1) --&gt; (0, 2) --&gt; (0, 3) 花费代价 cost = 1 使方向向下 --&gt; (1, 3) --&gt; (1, 2) --&gt; (1, 1) --&gt; (1, 0) 花费代价 cost = 1 使方向向下 --&gt; (2, 0) --&gt; (2, 1) --&gt; (2, 2) --&gt; (2, 3) 花费代价 cost = 1 使方向向下 --&gt; (3, 3)\n总花费为 cost = 3.\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 408px; width: 419px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/29/grid2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>grid = [[1,1,3],[3,2,2],[1,1,4]]\n<strong>输出：</strong>0\n<strong>解释：</strong>不修改任何数字你就可以从 (0, 0) 到达 (2, 2) 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 302px; width: 314px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/29/grid3.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>grid = [[1,2],[4,3]]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>grid = [[2,2,2],[2,2,2]]\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>grid = [[4]]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('137. 只出现一次的数字 II', '<p>给你一个整数数组&nbsp;<code>nums</code> ，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次 。</strong>请你找出并返回那个只出现了一次的元素。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [2,2,3,2]\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,1,0,1,0,1,99]\n<strong>输出：</strong>99\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>nums</code> 中，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次</strong></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>');
INSERT INTO `leecode` VALUES ('1370. 上升下降字符串', '<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，请你根据下面的算法重新构造字符串：</p> \n<ol> \n <li>从 <code>s</code>&nbsp;中选出 <strong>最小</strong>&nbsp;的字符，将它 <strong>接在</strong>&nbsp;结果字符串的后面。</li> \n <li>从 <code>s</code>&nbsp;剩余字符中选出&nbsp;<strong>最小</strong>&nbsp;的字符，且该字符比上一个添加的字符大，将它 <strong>接在</strong>&nbsp;结果字符串后面。</li> \n <li>重复步骤 2 ，直到你没法从 <code>s</code>&nbsp;中选择字符。</li> \n <li>从 <code>s</code>&nbsp;中选出 <strong>最大</strong>&nbsp;的字符，将它 <strong>接在</strong>&nbsp;结果字符串的后面。</li> \n <li>从 <code>s</code>&nbsp;剩余字符中选出&nbsp;<strong>最大</strong>&nbsp;的字符，且该字符比上一个添加的字符小，将它 <strong>接在</strong>&nbsp;结果字符串后面。</li> \n <li>重复步骤 5&nbsp;，直到你没法从 <code>s</code>&nbsp;中选择字符。</li> \n <li>重复步骤 1 到 6 ，直到 <code>s</code>&nbsp;中所有字符都已经被选过。</li> \n</ol> \n<p>在任何一步中，如果最小或者最大字符不止一个&nbsp;，你可以选择其中任意一个，并将其添加到结果字符串。</p> \n<p>请你返回将&nbsp;<code>s</code>&nbsp;中字符重新排序后的 <strong>结果字符串</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"aaaabbbbcccc\"\n<strong>输出：</strong>\"abccbaabccba\"\n<strong>解释：</strong>第一轮的步骤 1，2，3 后，结果字符串为 result = \"abc\"\n第一轮的步骤 4，5，6 后，结果字符串为 result = \"abccba\"\n第一轮结束，现在 s = \"aabbcc\" ，我们再次回到步骤 1\n第二轮的步骤 1，2，3 后，结果字符串为 result = \"abccbaabc\"\n第二轮的步骤 4，5，6 后，结果字符串为 result = \"abccbaabccba\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"rat\"\n<strong>输出：</strong>\"art\"\n<strong>解释：</strong>单词 \"rat\" 在上述算法重排序以后变成 \"art\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"leetcode\"\n<strong>输出：</strong>\"cdelotee\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"ggggggg\"\n<strong>输出：</strong>\"ggggggg\"\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>s = \"spo\"\n<strong>输出：</strong>\"ops\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 500</code></li> \n <li><code>s</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1371. 每个元音包含偶数次的最长子字符串', '<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即&nbsp;\'a\'，\'e\'，\'i\'，\'o\'，\'u\' ，在子字符串中都恰好出现了偶数次。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"eleetminicoworoep\"\n<strong>输出：</strong>13\n<strong>解释：</strong>最长子字符串是 \"leetminicowor\" ，它包含 <strong>e，i，o</strong>&nbsp;各 2 个，以及 0 个 <strong>a</strong>，<strong>u </strong>。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"leetcodeisgreat\"\n<strong>输出：</strong>5\n<strong>解释：</strong>最长子字符串是 \"leetc\" ，其中包含 2 个 <strong>e</strong> 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"bcbcbc\"\n<strong>输出：</strong>6\n<strong>解释：</strong>这个示例中，字符串 \"bcbcbc\" 本身就是最长的，因为所有的元音 <strong>a，</strong><strong>e，</strong><strong>i，</strong><strong>o，</strong><strong>u</strong> 都出现了 0 次。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 5 x 10^5</code></li> \n <li><code>s</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1372. 二叉树中的最长交错路径', '<p>给你一棵以&nbsp;<code>root</code>&nbsp;为根的二叉树，二叉树中的交错路径定义如下：</p> \n<ul> \n <li>选择二叉树中 <strong>任意</strong>&nbsp;节点和一个方向（左或者右）。</li> \n <li>如果前进方向为右，那么移动到当前节点的的右子节点，否则移动到它的左子节点。</li> \n <li>改变前进方向：左变右或者右变左。</li> \n <li>重复第二步和第三步，直到你在树中无法继续移动。</li> \n</ul> \n<p>交错路径的长度定义为：<strong>访问过的节点数目 - 1</strong>（单个节点的路径长度为 0 ）。</p> \n<p>请你返回给定树中最长 <strong>交错路径</strong>&nbsp;的长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 283px; width: 151px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/07/sample_1_1702.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]\n<strong>输出：</strong>3\n<strong>解释：</strong>蓝色节点为树中最长交错路径（右 -&gt; 左 -&gt; 右）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 253px; width: 120px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/07/sample_2_1702.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [1,1,1,null,1,null,null,1,1,null,1]\n<strong>输出：</strong>4\n<strong>解释：</strong>蓝色节点为树中最长交错路径（左 -&gt; 右 -&gt; 左 -&gt; 右）。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [1]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>每棵树最多有&nbsp;<code>50000</code>&nbsp;个节点。</li> \n <li>每个节点的值在&nbsp;<code>[1, 100]</code> 之间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1373. 二叉搜索子树的最大键值和', '<p>给你一棵以&nbsp;<code>root</code>&nbsp;为根的&nbsp;<strong>二叉树</strong>&nbsp;，请你返回 <strong>任意</strong>&nbsp;二叉搜索子树的最大键值和。</p> \n<p>二叉搜索树的定义如下：</p> \n<ul> \n <li>任意节点的左子树中的键值都&nbsp;<strong>小于</strong>&nbsp;此节点的键值。</li> \n <li>任意节点的右子树中的键值都 <strong>大于</strong>&nbsp;此节点的键值。</li> \n <li>任意节点的左子树和右子树都是二叉搜索树。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 250px; width: 320px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/07/sample_1_1709.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]\n<strong>输出：</strong>20\n<strong>解释：</strong>键值为 3 的子树是和最大的二叉搜索树。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 180px; width: 134px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/07/sample_2_1709.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [4,3,null,1,2]\n<strong>输出：</strong>2\n<strong>解释：</strong>键值为 2 的单节点子树是和最大的二叉搜索树。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [-4,-2,-5]\n<strong>输出：</strong>0\n<strong>解释：</strong>所有节点键值都为负数，和最大的二叉搜索树为空。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>root = [2,1,3]\n<strong>输出：</strong>6\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>root = [5,4,8,3,null,6,3]\n<strong>输出：</strong>7\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>每棵树有 <code>1</code> 到 <code>40000</code>&nbsp;个节点。</li> \n <li>每个节点的键值在&nbsp;<code>[-4 * 10^4&nbsp;, 4 * 10^4]</code> 之间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1374. 生成每种字符都是奇数个的字符串', '<p>给你一个整数 <code>n</code>，请你返回一个含<em> <code>n</code> </em>个字符的字符串，其中每种字符在该字符串中都恰好出现 <strong>奇数次</strong> <em><strong>。</strong></em></p> \n<p>返回的字符串必须只含小写英文字母。如果存在多个满足题目要求的字符串，则返回其中任意一个即可。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 4\n<strong>输出：</strong>\"pppz\"\n<strong>解释：</strong>\"pppz\" 是一个满足题目要求的字符串，因为 \'p\' 出现 3 次，且 \'z\' 出现 1 次。当然，还有很多其他字符串也满足题目要求，比如：\"ohhh\" 和 \"love\"。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>\"xy\"\n<strong>解释：</strong>\"xy\" 是一个满足题目要求的字符串，因为 \'x\' 和 \'y\' 各出现 1 次。当然，还有很多其他字符串也满足题目要求，比如：\"ag\" 和 \"ur\"。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 7\n<strong>输出：</strong>\"holasss\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 500</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1375. 灯泡开关 III', '<p>房间中有 <code>n</code> 枚灯泡，编号从 <code>1</code> 到 <code>n</code>，自左向右排成一排。最初，所有的灯都是关着的。</p> \n<p>在 <em>k</em>&nbsp; 时刻（ <em>k</em> 的取值范围是 <code>0</code> 到 <code>n - 1</code>），我们打开 <code>light[k]</code> 这个灯。</p> \n<p>灯的颜色要想 <strong>变成蓝色</strong> 就必须同时满足下面两个条件：</p> \n<ul> \n <li>灯处于打开状态。</li> \n <li>排在它之前（左侧）的所有灯也都处于打开状态。</li> \n</ul> \n<p>请返回能够让 <strong>所有开着的</strong> 灯都 <strong>变成蓝色</strong> 的时刻 <strong>数目 。</strong></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 254px; width: 575px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/08/sample_2_1725.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>light = [2,1,3,5,4]\n<strong>输出：</strong>3\n<strong>解释：</strong>所有开着的灯都变蓝的时刻分别是 1，2 和 4 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>light = [3,2,4,1,5]\n<strong>输出：</strong>2\n<strong>解释：</strong>所有开着的灯都变蓝的时刻分别是 3 和 4（index-0）。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>light = [4,1,2,3]\n<strong>输出：</strong>1\n<strong>解释：</strong>所有开着的灯都变蓝的时刻是 3（index-0）。\n第 4 个灯在时刻 3 变蓝。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>light = [2,1,4,3,6,5]\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>light = [1,2,3,4,5,6]\n<strong>输出：</strong>6\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n ==&nbsp;light.length</code></li> \n <li><code>1 &lt;= n &lt;= 5 * 10^4</code></li> \n <li><code>light</code> 是 <code>[1, 2, ..., n]</code> 的一个排列。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1376. 通知所有员工所需的时间', '<p>公司里有 <code>n</code> 名员工，每个员工的 ID 都是独一无二的，编号从 <code>0</code> 到 <code>n - 1</code>。公司的总负责人通过 <code>headID</code> 进行标识。</p> \n<p>在 <code>manager</code> 数组中，每个员工都有一个直属负责人，其中 <code>manager[i]</code> 是第 <code>i</code> 名员工的直属负责人。对于总负责人，<code>manager[headID] = -1</code>。题目保证从属关系可以用树结构显示。</p> \n<p>公司总负责人想要向公司所有员工通告一条紧急消息。他将会首先通知他的直属下属们，然后由这些下属通知他们的下属，直到所有的员工都得知这条紧急消息。</p> \n<p>第 <code>i</code> 名员工需要 <code>informTime[i]</code> 分钟来通知它的所有直属下属（也就是说在 <code>informTime[i]</code> 分钟后，他的所有直属下属都可以开始传播这一消息）。</p> \n<p>返回通知所有员工这一紧急消息所需要的 <strong>分钟数</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 1, headID = 0, manager = [-1], informTime = [0]\n<strong>输出：</strong>0\n<strong>解释：</strong>公司总负责人是该公司的唯一一名员工。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 174px; width: 404px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/08/graph.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]\n<strong>输出：</strong>1\n<strong>解释：</strong>id = 2 的员工是公司的总负责人，也是其他所有员工的直属负责人，他需要 1 分钟来通知所有员工。\n上图显示了公司员工的树结构。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 432px; width: 568px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/08/1730_example_3_5.PNG\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1]\n<strong>输出：</strong>21\n<strong>解释：</strong>总负责人 id = 6。他将在 1 分钟内通知 id = 5 的员工。\nid = 5 的员工将在 2 分钟内通知 id = 4 的员工。\nid = 4 的员工将在 3 分钟内通知 id = 3 的员工。\nid = 3 的员工将在 4 分钟内通知 id = 2 的员工。\nid = 2 的员工将在 5 分钟内通知 id = 1 的员工。\nid = 1 的员工将在 6 分钟内通知 id = 0 的员工。\n所需时间 = 1 + 2 + 3 + 4 + 5 + 6 = 21 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 15, headID = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informTime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]\n<strong>输出：</strong>3\n<strong>解释：</strong>第一分钟总负责人通知员工 1 和 2 。\n第二分钟他们将会通知员工 3, 4, 5 和 6 。\n第三分钟他们将会通知剩下的员工。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 4, headID = 2, manager = [3,3,-1,2], informTime = [0,0,162,914]\n<strong>输出：</strong>1076\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^5</code></li> \n <li><code>0 &lt;= headID &lt; n</code></li> \n <li><code>manager.length == n</code></li> \n <li><code>0 &lt;= manager[i] &lt; n</code></li> \n <li><code>manager[headID] == -1</code></li> \n <li><code>informTime.length&nbsp;== n</code></li> \n <li><code>0 &lt;= informTime[i] &lt;= 1000</code></li> \n <li>如果员工 <code>i</code> 没有下属，<code>informTime[i] == 0</code> 。</li> \n <li>题目 <strong>保证</strong> 所有员工都可以收到通知。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1377. T 秒后青蛙的位置', '<p>给你一棵由 n 个顶点组成的无向树，顶点编号从 1 到 <code>n</code>。青蛙从 <strong>顶点 1</strong> 开始起跳。规则如下：</p> \n<ul> \n <li>在一秒内，青蛙从它所在的当前顶点跳到另一个 <strong>未访问</strong> 过的顶点（如果它们直接相连）。</li> \n <li>青蛙无法跳回已经访问过的顶点。</li> \n <li>如果青蛙可以跳到多个不同顶点，那么它跳到其中任意一个顶点上的机率都相同。</li> \n <li>如果青蛙不能跳到任何未访问过的顶点上，那么它每次跳跃都会停留在原地。</li> \n</ul> \n<p>无向树的边用数组 <code>edges</code> 描述，其中 <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> 意味着存在一条直接连通 <code>from<sub>i</sub></code> 和 <code>to<sub>i</sub></code> 两个顶点的边。</p> \n<p>返回青蛙在 <em><code>t</code></em> 秒后位于目标顶点 <em><code>target</code> </em>上的概率。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 236px; width: 350px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/08/frog_2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4\n<strong>输出：</strong>0.16666666666666666 \n<strong>解释：</strong>上图显示了青蛙的跳跃路径。青蛙从顶点 1 起跳，第 <strong>1 秒</strong> 有 1/3 的概率跳到顶点 2 ，然后第 <strong>2 秒</strong> 有 1/2 的概率跳到顶点 4，因此青蛙在 2 秒后位于顶点 4 的概率是 1/3 * 1/2 = 1/6 = 0.16666666666666666 。 \n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 236px; width: 350px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/08/frog_3.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7\n<strong>输出：</strong>0.3333333333333333\n<strong>解释：</strong>上图显示了青蛙的跳跃路径。青蛙从顶点 1 起跳，有 1/3 = 0.3333333333333333 的概率能够 <strong>1 秒</strong> 后跳到顶点 7 。 \n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 20, target = 6\n<strong>输出：</strong>0.16666666666666666\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>edges.length == n-1</code></li> \n <li><code>edges[i].length == 2</code></li> \n <li><code>1 &lt;= edges[i][0], edges[i][1] &lt;= n</code></li> \n <li><code>1 &lt;= t&nbsp;&lt;= 50</code></li> \n <li><code>1 &lt;= target&nbsp;&lt;= n</code></li> \n <li>与准确值误差在 <code>10^-5</code> 之内的结果将被判定为正确。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1379. 找出克隆二叉树中的相同节点', '<p>给你两棵二叉树，原始树 <code>original</code> 和克隆树 <code>cloned</code>，以及一个位于原始树 <code>original</code>&nbsp;中的目标节点&nbsp;<code>target</code>。</p> \n<p>其中，克隆树 <code>cloned</code>&nbsp;是原始树 <code>original</code>&nbsp;的一个<strong> 副本 </strong>。</p> \n<p>请找出在树&nbsp;<code>cloned</code>&nbsp;中，与&nbsp;<code>target</code>&nbsp;<strong>相同&nbsp;</strong>的节点，并返回对该节点的引用（在 C/C++ 等有指针的语言中返回 节点指针，其他语言返回节点本身）。</p> \n<p>&nbsp;</p> \n<p><strong>注意：</strong></p> \n<ol> \n <li>你 <strong>不能</strong> 对两棵二叉树，以及 <code>target</code>&nbsp;节点进行更改。</li> \n <li><strong>只能</strong> 返回对克隆树&nbsp;<code>cloned</code>&nbsp;中已有的节点的引用。</li> \n</ol> \n<ul> \n</ul> \n<p><strong>进阶：</strong>如果树中允许出现值相同的节点，你将如何解答？</p> \n<p>&nbsp;</p> \n<ul> \n</ul> \n<p><strong>示例 1:</strong></p> \n<p><img style=\"height: 426px; width: 544px;\" src=\"https://assets.leetcode.com/uploads/2020/02/21/e1.png\" alt=\"\"></p> \n<pre><strong>输入:</strong> tree = [7,4,3,null,null,6,19], target = 3\n<strong>输出:</strong> 3\n<strong>解释:</strong> 上图画出了树 original 和 cloned。target 节点在树 original 中，用绿色标记。答案是树 cloned 中的黄颜色的节点（其他示例类似）。</pre> \n<p><strong>示例 2:</strong></p> \n<p><img style=\"height: 159px; width: 221px;\" src=\"https://assets.leetcode.com/uploads/2020/02/21/e2.png\" alt=\"\"></p> \n<pre><strong>输入:</strong> tree = [7], target =  7\n<strong>输出:</strong> 7\n</pre> \n<p><strong>示例 3:</strong></p> \n<p><img style=\"height: 486px; width: 459px;\" src=\"https://assets.leetcode.com/uploads/2020/02/21/e3.png\" alt=\"\"></p> \n<pre><strong>输入:</strong> tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4\n<strong>输出:</strong> 4\n</pre> \n<p><strong>示例 4:</strong></p> \n<p><img style=\"height: 239px; width: 555px;\" src=\"https://assets.leetcode.com/uploads/2020/02/21/e4.png\" alt=\"\"></p> \n<pre><strong>输入:</strong> tree = [1,2,3,4,5,6,7,8,9,10], target = 5\n<strong>输出:</strong> 5\n</pre> \n<p><strong>示例 5:</strong></p> \n<p><img style=\"height: 345px; width: 427px;\" src=\"https://assets.leetcode.com/uploads/2020/02/21/e5.png\" alt=\"\"></p> \n<pre><strong>输入:</strong> tree = [1,2,null,3], target = 2\n<strong>输出:</strong> 2</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点的数量范围为&nbsp;<code>[1, 10^4]</code>&nbsp;。</li> \n <li>同一棵树中，没有值相同的节点。</li> \n <li><code>target</code>&nbsp;节点是树&nbsp;<code>original</code>&nbsp;中的一个节点，并且不会是&nbsp;<code>null</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('138. 复制带随机指针的链表', '<p>给你一个长度为 <code>n</code> 的链表，每个节点包含一个额外增加的随机指针 <code>random</code> ，该指针可以指向链表中的任何节点或空节点。</p> \n<p>构造这个链表的&nbsp;<strong><a href=\"https://baike.baidu.com/item/深拷贝/22785317?fr=aladdin\">深拷贝</a></strong>。&nbsp;深拷贝应该正好由 <code>n</code> 个 <strong>全新</strong> 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 <code>next</code> 指针和 <code>random</code> 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。<strong>复制链表中的指针都不应指向原链表中的节点 </strong>。</p> \n<p>例如，如果原链表中有 <code>X</code> 和 <code>Y</code> 两个节点，其中 <code>X.random --&gt; Y</code> 。那么在复制链表中对应的两个节点 <code>x</code> 和 <code>y</code> ，同样有 <code>x.random --&gt; y</code> 。</p> \n<p>返回复制链表的头节点。</p> \n<p>用一个由&nbsp;<code>n</code>&nbsp;个节点组成的链表来表示输入/输出中的链表。每个节点用一个&nbsp;<code>[val, random_index]</code>&nbsp;表示：</p> \n<ul> \n <li><code>val</code>：一个表示&nbsp;<code>Node.val</code>&nbsp;的整数。</li> \n <li><code>random_index</code>：随机指针指向的节点索引（范围从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>）；如果不指向任何节点，则为&nbsp;&nbsp;<code>null</code>&nbsp;。</li> \n</ul> \n<p>你的代码 <strong>只</strong> 接受原链表的头节点 <code>head</code> 作为传入参数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 138px; width: 680px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n<strong>输出：</strong>[[7,null],[13,0],[11,4],[10,2],[1,0]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 111px; width: 680px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [[1,1],[2,1]]\n<strong>输出：</strong>[[1,1],[2,1]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"height: 119px; width: 680px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e3.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>head = [[3,null],[3,0],[3,null]]\n<strong>输出：</strong>[[3,null],[3,0],[3,null]]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>head = []\n<strong>输出：</strong>[]\n<strong>解释：</strong>给定的链表为空（空指针），因此返回 null。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= n &lt;= 1000</code></li> \n <li><code>-10000 &lt;= Node.val &lt;= 10000</code></li> \n <li><code>Node.random</code>&nbsp;为空（null）或指向链表中的节点。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1380. 矩阵中的幸运数', '<p>给你一个 <code>m * n</code> 的矩阵，矩阵中的数字 <strong>各不相同</strong> 。请你按 <strong>任意</strong> 顺序返回矩阵中的所有幸运数。</p> \n<p>幸运数是指矩阵中满足同时下列两个条件的元素：</p> \n<ul> \n <li>在同一行的所有元素中最小</li> \n <li>在同一列的所有元素中最大</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>matrix = [[3,7,8],[9,11,13],[15,16,17]]\n<strong>输出：</strong>[15]\n<strong>解释：</strong>15 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]\n<strong>输出：</strong>[12]\n<strong>解释：</strong>12 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>matrix = [[7,8],[1,2]]\n<strong>输出：</strong>[7]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == mat.length</code></li> \n <li><code>n == mat[i].length</code></li> \n <li><code>1 &lt;= n, m &lt;= 50</code></li> \n <li><code>1 &lt;=&nbsp;matrix[i][j]&nbsp;&lt;= 10^5</code></li> \n <li>矩阵中的所有元素都是不同的</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1381. 设计一个支持增量操作的栈', '<p>请你设计一个支持下述操作的栈。</p> \n<p>实现自定义栈类 <code>CustomStack</code> ：</p> \n<ul> \n <li><code>CustomStack(int maxSize)</code>：用 <code>maxSize</code> 初始化对象，<code>maxSize</code> 是栈中最多能容纳的元素数量，栈在增长到 <code>maxSize</code> 之后则不支持 <code>push</code> 操作。</li> \n <li><code>void push(int x)</code>：如果栈还未增长到 <code>maxSize</code> ，就将 <code>x</code> 添加到栈顶。</li> \n <li><code>int pop()</code>：弹出栈顶元素，并返回栈顶的值，或栈为空时返回 <strong>-1</strong> 。</li> \n <li><code>void inc(int k, int val)</code>：栈底的 <code>k</code> 个元素的值都增加 <code>val</code> 。如果栈中元素总数小于 <code>k</code> ，则栈中的所有元素都增加 <code>val</code> 。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\n<strong>输出：</strong>\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\n<strong>解释：</strong>\nCustomStack customStack = new CustomStack(3); // 栈是空的 []\ncustomStack.push(1);                          // 栈变为 [1]\ncustomStack.push(2);                          // 栈变为 [1, 2]\ncustomStack.pop();                            // 返回 2 --&gt; 返回栈顶值 2，栈变为 [1]\ncustomStack.push(2);                          // 栈变为 [1, 2]\ncustomStack.push(3);                          // 栈变为 [1, 2, 3]\ncustomStack.push(4);                          // 栈仍然是 [1, 2, 3]，不能添加其他元素使栈大小变为 4\ncustomStack.increment(5, 100);                // 栈变为 [101, 102, 103]\ncustomStack.increment(2, 100);                // 栈变为 [201, 202, 103]\ncustomStack.pop();                            // 返回 103 --&gt; 返回栈顶值 103，栈变为 [201, 202]\ncustomStack.pop();                            // 返回 202 --&gt; 返回栈顶值 202，栈变为 [201]\ncustomStack.pop();                            // 返回 201 --&gt; 返回栈顶值 201，栈变为 []\ncustomStack.pop();                            // 返回 -1 --&gt; 栈为空，返回 -1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= maxSize &lt;= 1000</code></li> \n <li><code>1 &lt;= x &lt;= 1000</code></li> \n <li><code>1 &lt;= k &lt;= 1000</code></li> \n <li><code>0 &lt;= val &lt;= 100</code></li> \n <li>每种方法 <code>increment</code>，<code>push</code> 以及 <code>pop</code> 分别最多调用 <code>1000</code> 次</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1382. 将二叉搜索树变平衡', '<p>给你一棵二叉搜索树，请你返回一棵&nbsp;<strong>平衡后</strong>&nbsp;的二叉搜索树，新生成的树应该与原来的树有着相同的节点值。</p> \n<p>如果一棵二叉搜索树中，每个节点的两棵子树高度差不超过 1 ，我们就称这棵二叉搜索树是&nbsp;<strong>平衡的</strong> 。</p> \n<p>如果有多种构造方法，请你返回任意一种。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<p><strong><img style=\"height: 248px; width: 250px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/15/1515_ex1.png\" alt=\"\"><img style=\"height: 200px; width: 200px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/15/1515_ex1_out.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [1,null,2,null,3,null,4,null,null]\n<strong>输出：</strong>[2,1,3,null,null,null,4]\n<strong>解释：</strong>这不是唯一的正确答案，[3,1,4,null,2,null,null] 也是一个可行的构造方案。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树节点的数目在&nbsp;<code>1</code>&nbsp;到&nbsp;<code>10^4</code>&nbsp;之间。</li> \n <li>树节点的值互不相同，且在&nbsp;<code>1</code>&nbsp;到&nbsp;<code>10^5</code> 之间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1383. 最大的团队表现值', '<p>公司有编号为 <code>1</code>&nbsp;到 <code>n</code>&nbsp;的 <code>n</code>&nbsp;个工程师，给你两个数组 <code>speed</code>&nbsp;和 <code>efficiency</code>&nbsp;，其中 <code>speed[i]</code>&nbsp;和 <code>efficiency[i]</code>&nbsp;分别代表第 <code>i</code>&nbsp;位工程师的速度和效率。请你返回由最多&nbsp;<code>k</code>&nbsp;个工程师组成的&nbsp;<strong>​​​​​​最大团队表现值</strong>&nbsp;，由于答案可能很大，请你返回结果对 <code>10^9 + 7</code> 取余后的结果。</p> \n<p><strong>团队表现值</strong>&nbsp;的定义为：一个团队中「所有工程师速度的和」乘以他们「效率值中的最小值」。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\n<strong>输出：</strong>60\n<strong>解释：</strong>\n我们选择工程师 2（speed=10 且 efficiency=4）和工程师 5（speed=5 且 efficiency=7）。他们的团队表现值为 performance = (10 + 5) * min(4, 7) = 60 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3\n<strong>输出：</strong>68\n<strong>解释：\n</strong>此示例与第一个示例相同，除了 k = 3 。我们可以选择工程师 1 ，工程师 2 和工程师 5 得到最大的团队表现值。表现值为 performance = (2 + 10 + 5) * min(5, 4, 7) = 68 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4\n<strong>输出：</strong>72\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^5</code></li> \n <li><code>speed.length == n</code></li> \n <li><code>efficiency.length == n</code></li> \n <li><code>1 &lt;= speed[i] &lt;= 10^5</code></li> \n <li><code>1 &lt;= efficiency[i] &lt;= 10^8</code></li> \n <li><code>1 &lt;= k &lt;= n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1385. 两个数组间的距离值', '<p>给你两个整数数组&nbsp;<code>arr1</code>&nbsp;，&nbsp;<code>arr2</code>&nbsp;和一个整数&nbsp;<code>d</code>&nbsp;，请你返回两个数组之间的&nbsp;<strong>距离值</strong>&nbsp;。</p> \n<p>「<strong>距离值</strong>」<strong>&nbsp;</strong>定义为符合此距离要求的元素数目：对于元素&nbsp;<code>arr1[i]</code>&nbsp;，不存在任何元素&nbsp;<code>arr2[j]</code>&nbsp;满足 <code>|arr1[i]-arr2[j]| &lt;= d</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>\n对于 arr1[0]=4 我们有：\n|4-10|=6 &gt; d=2 \n|4-9|=5 &gt; d=2 \n|4-1|=3 &gt; d=2 \n|4-8|=4 &gt; d=2 \n所以 arr1[0]=4 符合距离要求\n\n对于 arr1[1]=5 我们有：\n|5-10|=5 &gt; d=2 \n|5-9|=4 &gt; d=2 \n|5-1|=4 &gt; d=2 \n|5-8|=3 &gt; d=2\n所以 arr1[1]=5 也符合距离要求\n\n对于 arr1[2]=8 我们有：\n<strong>|8-10|=2 &lt;= d=2</strong>\n<strong>|8-9|=1 &lt;= d=2</strong>\n|8-1|=7 &gt; d=2\n<strong>|8-8|=0 &lt;= d=2</strong>\n存在距离小于等于 2 的情况，不符合距离要求 \n\n故而只有 arr1[0]=4 和 arr1[1]=5 两个符合距离要求，距离值为 2</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr1.length, arr2.length &lt;= 500</code></li> \n <li><code>-10^3 &lt;= arr1[i], arr2[j] &lt;= 10^3</code></li> \n <li><code>0 &lt;= d &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1386. 安排电影院座位', '<p><img style=\"height: 149px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/21/cinema_seats_1.png\" alt=\"\"></p> \n<p>如上图所示，电影院的观影厅中有 <code>n</code>&nbsp;行座位，行编号从 1&nbsp;到 <code>n</code>&nbsp;，且每一行内总共有 10 个座位，列编号从 1 到 10 。</p> \n<p>给你数组&nbsp;<code>reservedSeats</code>&nbsp;，包含所有已经被预约了的座位。比如说，<code>researvedSeats[i]=[3,8]</code>&nbsp;，它表示第&nbsp;<strong>3</strong>&nbsp;行第&nbsp;<strong>8</strong>&nbsp;个座位被预约了。</p> \n<p>请你返回&nbsp;<strong>最多能安排多少个 4 人家庭</strong>&nbsp;。4 人家庭要占据&nbsp;<strong>同一行内连续&nbsp;</strong>的 4 个座位。隔着过道的座位（比方说 [3,3] 和 [3,4]）不是连续的座位，但是如果你可以将 4 人家庭拆成过道两边各坐 2 人，这样子是允许的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 96px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/21/cinema_seats_3.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\n<strong>输出：</strong>4\n<strong>解释：</strong>上图所示是最优的安排方案，总共可以安排 4 个家庭。蓝色的叉表示被预约的座位，橙色的连续座位表示一个 4 人家庭。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2, reservedSeats = [[2,1],[1,8],[2,6]]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^9</code></li> \n <li><code>1 &lt;=&nbsp;reservedSeats.length &lt;= min(10*n, 10^4)</code></li> \n <li><code>reservedSeats[i].length == 2</code></li> \n <li><code>1&nbsp;&lt;=&nbsp;reservedSeats[i][0] &lt;= n</code></li> \n <li><code>1 &lt;=&nbsp;reservedSeats[i][1] &lt;= 10</code></li> \n <li>所有&nbsp;<code>reservedSeats[i]</code> 都是互不相同的。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1387. 将整数按权重排序', '<p>我们将整数 <code>x</code>&nbsp;的 <strong>权重</strong> 定义为按照下述规则将 <code>x</code>&nbsp;变成 <code>1</code>&nbsp;所需要的步数：</p> \n<ul> \n <li>如果&nbsp;<code>x</code>&nbsp;是偶数，那么&nbsp;<code>x = x / 2</code></li> \n <li>如果&nbsp;<code>x</code>&nbsp;是奇数，那么&nbsp;<code>x = 3 * x + 1</code></li> \n</ul> \n<p>比方说，x=3 的权重为 7 。因为 3 需要 7 步变成 1 （3 --&gt; 10 --&gt; 5 --&gt; 16 --&gt; 8 --&gt; 4 --&gt; 2 --&gt; 1）。</p> \n<p>给你三个整数&nbsp;<code>lo</code>，&nbsp;<code>hi</code> 和&nbsp;<code>k</code>&nbsp;。你的任务是将区间&nbsp;<code>[lo, hi]</code>&nbsp;之间的整数按照它们的权重&nbsp;<strong>升序排序&nbsp;</strong>，如果大于等于 2 个整数有&nbsp;<strong>相同</strong>&nbsp;的权重，那么按照数字自身的数值&nbsp;<strong>升序排序</strong>&nbsp;。</p> \n<p>请你返回区间&nbsp;<code>[lo, hi]</code>&nbsp;之间的整数按权重排序后的第&nbsp;<code>k</code>&nbsp;个数。</p> \n<p>注意，题目保证对于任意整数&nbsp;<code>x</code>&nbsp;<code>（lo &lt;= x &lt;= hi）</code>&nbsp;，它变成&nbsp;<code>1</code> 所需要的步数是一个 32 位有符号整数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>lo = 12, hi = 15, k = 2\n<strong>输出：</strong>13\n<strong>解释：</strong>12 的权重为 9（12 --&gt; 6 --&gt; 3 --&gt; 10 --&gt; 5 --&gt; 16 --&gt; 8 --&gt; 4 --&gt; 2 --&gt; 1）\n13 的权重为 9\n14 的权重为 17\n15 的权重为 17\n区间内的数按权重排序以后的结果为 [12,13,14,15] 。对于 k = 2 ，答案是第二个整数也就是 13 。\n注意，12 和 13 有相同的权重，所以我们按照它们本身升序排序。14 和 15 同理。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>lo = 1, hi = 1, k = 1\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>lo = 7, hi = 11, k = 4\n<strong>输出：</strong>7\n<strong>解释：</strong>区间内整数 [7, 8, 9, 10, 11] 对应的权重为 [16, 3, 19, 6, 14] 。\n按权重排序后得到的结果为 [8, 10, 11, 7, 9] 。\n排序后数组中第 4 个数字为 7 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>lo = 10, hi = 20, k = 5\n<strong>输出：</strong>13\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>lo = 1, hi = 1000, k = 777\n<strong>输出：</strong>570\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= lo &lt;= hi &lt;= 1000</code></li> \n <li><code>1 &lt;= k &lt;= hi - lo + 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1388. 3n 块披萨', '<p>给你一个披萨，它由 3n 块不同大小的部分组成，现在你和你的朋友们需要按照如下规则来分披萨：</p> \n<ul> \n <li>你挑选 <strong>任意</strong>&nbsp;一块披萨。</li> \n <li>Alice 将会挑选你所选择的披萨逆时针方向的下一块披萨。</li> \n <li>Bob 将会挑选你所选择的披萨顺时针方向的下一块披萨。</li> \n <li>重复上述过程直到没有披萨剩下。</li> \n</ul> \n<p>每一块披萨的大小按顺时针方向由循环数组 <code>slices</code>&nbsp;表示。</p> \n<p>请你返回你可以获得的披萨大小总和的最大值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 240px; width: 475px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/21/sample_3_1723.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>slices = [1,2,3,4,5,6]\n<strong>输出：</strong>10\n<strong>解释：</strong>选择大小为 4 的披萨，Alice 和 Bob 分别挑选大小为 3 和 5 的披萨。然后你选择大小为 6 的披萨，Alice 和 Bob 分别挑选大小为 2 和 1 的披萨。你获得的披萨总大小为 4 + 6 = 10 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 250px; width: 475px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/21/sample_4_1723.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>slices = [8,9,8,6,1,1]\n<strong>输出：</strong>16\n<strong>解释：</strong>两轮都选大小为 8 的披萨。如果你选择大小为 9 的披萨，你的朋友们就会选择大小为 8 的披萨，这种情况下你的总和不是最大的。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>slices = [4,1,2,5,8,3,1,9,7]\n<strong>输出：</strong>21\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>slices = [3,1,2]\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= slices.length &lt;= 500</code></li> \n <li><code>slices.length % 3 == 0</code></li> \n <li><code>1 &lt;= slices[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1389. 按既定顺序创建目标数组', '<p>给你两个整数数组 <code>nums</code> 和 <code>index</code>。你需要按照以下规则创建目标数组：</p> \n<ul> \n <li>目标数组 <code>target</code> 最初为空。</li> \n <li>按从左到右的顺序依次读取 <code>nums[i]</code> 和 <code>index[i]</code>，在 <code>target</code> 数组中的下标 <code>index[i]</code> 处插入值 <code>nums[i]</code> 。</li> \n <li>重复上一步，直到在 <code>nums</code> 和 <code>index</code> 中都没有要读取的元素。</li> \n</ul> \n<p>请你返回目标数组。</p> \n<p>题目保证数字插入位置总是存在。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [0,1,2,3,4], index = [0,1,2,2,1]\n<strong>输出：</strong>[0,4,1,3,2]\n<strong>解释：</strong>\nnums       index     target\n0            0        [0]\n1            1        [0,1]\n2            2        [0,1,2]\n3            2        [0,1,3,2]\n4            1        [0,4,1,3,2]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4,0], index = [0,1,2,3,0]\n<strong>输出：</strong>[0,1,2,3,4]\n<strong>解释：</strong>\nnums       index     target\n1            0        [1]\n2            1        [1,2]\n3            2        [1,2,3]\n4            3        [1,2,3,4]\n0            0        [0,1,2,3,4]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1], index = [0]\n<strong>输出：</strong>[1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length, index.length &lt;= 100</code></li> \n <li><code>nums.length == index.length</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 100</code></li> \n <li><code>0 &lt;= index[i] &lt;= i</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('139. 单词拆分', '<p>给定一个<strong>非空</strong>字符串 <em>s</em> 和一个包含<strong>非空</strong>单词的列表 <em>wordDict</em>，判定&nbsp;<em>s</em> 是否可以被空格拆分为一个或多个在字典中出现的单词。</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li>拆分时可以重复使用字典中的单词。</li> \n <li>你可以假设字典中没有重复的单词。</li> \n</ul> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> s = \"leetcode\", wordDict = [\"leet\", \"code\"]\n<strong>输出:</strong> true\n<strong>解释:</strong> 返回 true 因为 \"leetcode\" 可以被拆分成 \"leet code\"。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\n<strong>输出:</strong> true\n<strong>解释:</strong> 返回 true 因为 <code>\"</code>applepenapple<code>\"</code> 可以被拆分成 <code>\"</code>apple pen apple<code>\"</code>。\n&nbsp;    注意你可以重复使用字典中的单词。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入:</strong> s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\n<strong>输出:</strong> false\n</pre>');
INSERT INTO `leecode` VALUES ('1390. 四因数', '<p>给你一个整数数组 <code>nums</code>，请你返回该数组中恰有四个因数的这些整数的各因数之和。</p> \n<p>如果数组中不存在满足题意的整数，则返回 <code>0</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>nums = [21,4,7]\n<strong>输出：</strong>32\n<strong>解释：</strong>\n21 有 4 个因数：1, 3, 7, 21\n4 有 3 个因数：1, 2, 4\n7 有 2 个因数：1, 7\n答案仅为 21 的所有因数的和。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10^4</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1391. 检查网格中是否存在有效路径', '<p>给你一个 <em>m</em> x <em>n</em> 的网格 <code>grid</code>。网格里的每个单元都代表一条街道。<code>grid[i][j]</code> 的街道可以是：</p> \n<ul> \n <li><strong>1</strong> 表示连接左单元格和右单元格的街道。</li> \n <li><strong>2</strong> 表示连接上单元格和下单元格的街道。</li> \n <li><strong>3</strong>&nbsp;表示连接左单元格和下单元格的街道。</li> \n <li><strong>4</strong> 表示连接右单元格和下单元格的街道。</li> \n <li><strong>5</strong> 表示连接左单元格和上单元格的街道。</li> \n <li><strong>6</strong> 表示连接右单元格和上单元格的街道。</li> \n</ul> \n<p><img style=\"height: 708px; width: 450px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/21/main.png\" alt=\"\"></p> \n<p>你最开始从左上角的单元格 <code>(0,0)</code> 开始出发，网格中的「有效路径」是指从左上方的单元格 <code>(0,0)</code> 开始、一直到右下方的 <code>(m-1,n-1)</code> 结束的路径。<strong>该路径必须只沿着街道走</strong>。</p> \n<p><strong>注意：</strong>你 <strong>不能</strong> 变更街道。</p> \n<p>如果网格中存在有效的路径，则返回 <code>true</code>，否则返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 311px; width: 455px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/21/e1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>grid = [[2,4,3],[6,5,2]]\n<strong>输出：</strong>true\n<strong>解释：</strong>如图所示，你可以从 (0, 0) 开始，访问网格中的所有单元格并到达 (m - 1, n - 1) 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 293px; width: 455px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/21/e2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>grid = [[1,2,1],[1,2,1]]\n<strong>输出：</strong>false\n<strong>解释：</strong>如图所示，单元格 (0, 0) 上的街道没有与任何其他单元格上的街道相连，你只会停在 (0, 0) 处。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,1,2]]\n<strong>输出：</strong>false\n<strong>解释：</strong>你会停在 (0, 1)，而且无法到达 (0, 2) 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,1,1,1,1,1,3]]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>grid = [[2],[2],[2],[2],[2],[2],[6]]\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 300</code></li> \n <li><code>1 &lt;= grid[i][j] &lt;= 6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1392. 最长快乐前缀', '<p>「快乐前缀」是在原字符串中既是&nbsp;<strong>非空</strong> 前缀也是后缀（不包括原字符串自身）的字符串。</p> \n<p>给你一个字符串 <code>s</code>，请你返回它的 <strong>最长快乐前缀</strong>。</p> \n<p>如果不存在满足题意的前缀，则返回一个空字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"level\"\n<strong>输出：</strong>\"l\"\n<strong>解释：</strong>不包括 s 自己，一共有 4 个前缀（\"l\", \"le\", \"lev\", \"leve\"）和 4 个后缀（\"l\", \"el\", \"vel\", \"evel\"）。最长的既是前缀也是后缀的字符串是 \"l\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"ababab\"\n<strong>输出：</strong>\"abab\"\n<strong>解释：</strong>\"abab\" 是最长的既是前缀也是后缀的字符串。题目允许前后缀在原字符串中重叠。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"leetcodeleet\"\n<strong>输出：</strong>\"leet\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"a\"\n<strong>输出：</strong>\"\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10^5</code></li> \n <li><code>s</code> 只含有小写英文字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1394. 找出数组中的幸运数', '<p>在整数数组中，如果一个整数的出现频次和它的数值大小相等，我们就称这个整数为「幸运数」。</p> \n<p>给你一个整数数组 <code>arr</code>，请你从中找出并返回一个幸运数。</p> \n<ul> \n <li>如果数组中存在多个幸运数，只需返回 <strong>最大</strong> 的那个。</li> \n <li>如果数组中不含幸运数，则返回 <strong>-1 </strong>。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [2,2,3,4]\n<strong>输出：</strong>2\n<strong>解释：</strong>数组中唯一的幸运数是 2 ，因为数值 2 的出现频次也是 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,2,3,3,3]\n<strong>输出：</strong>3\n<strong>解释：</strong>1、2 以及 3 都是幸运数，只需要返回其中最大的 3 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [2,2,2,3,3]\n<strong>输出：</strong>-1\n<strong>解释：</strong>数组中不存在幸运数。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [5]\n<strong>输出：</strong>-1\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>arr = [7,7,7,7,7,7,7]\n<strong>输出：</strong>7\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 500</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 500</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1395. 统计作战单位数', '<p>&nbsp;<code>n</code> 名士兵站成一排。每个士兵都有一个 <strong>独一无二</strong> 的评分 <code>rating</code> 。</p> \n<p>每 <strong>3</strong> 个士兵可以组成一个作战单位，分组规则如下：</p> \n<ul> \n <li>从队伍中选出下标分别为 <code>i</code>、<code>j</code>、<code>k</code> 的 3 名士兵，他们的评分分别为 <code>rating[i]</code>、<code>rating[j]</code>、<code>rating[k]</code></li> \n <li>作战单位需满足： <code>rating[i] &lt; rating[j] &lt; rating[k]</code> 或者 <code>rating[i] &gt; rating[j] &gt; rating[k]</code> ，其中&nbsp; <code>0&nbsp;&lt;= i &lt;&nbsp;j &lt;&nbsp;k &lt;&nbsp;n</code></li> \n</ul> \n<p>请你返回按上述条件可以组建的作战单位数量。每个士兵都可以是多个作战单位的一部分。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>rating = [2,5,3,4,1]\n<strong>输出：</strong>3\n<strong>解释：</strong>我们可以组建三个作战单位 (2,3,4)、(5,4,1)、(5,3,1) 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>rating = [2,1,3]\n<strong>输出：</strong>0\n<strong>解释：</strong>根据题目条件，我们无法组建作战单位。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>rating = [1,2,3,4]\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == rating.length</code></li> \n <li><code>3 &lt;= n &lt;= 1000</code></li> \n <li><code>1 &lt;= rating[i] &lt;= 10^5</code></li> \n <li><code>rating</code>&nbsp;中的元素都是唯一的</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1396. 设计地铁系统', '<p>请你实现一个类&nbsp;<code>UndergroundSystem</code>&nbsp;，它支持以下 3 种方法：</p> \n<p>1.<code>&nbsp;checkIn(int id, string stationName, int t)</code></p> \n<ul> \n <li>编号为&nbsp;<code>id</code>&nbsp;的乘客在 <code>t</code>&nbsp;时刻进入地铁站&nbsp;<code>stationName</code>&nbsp;。</li> \n <li>一个乘客在同一时间只能在一个地铁站进入或者离开。</li> \n</ul> \n<p>2.<code>&nbsp;checkOut(int id, string stationName, int t)</code></p> \n<ul> \n <li>编号为&nbsp;<code>id</code>&nbsp;的乘客在 <code>t</code>&nbsp;时刻离开地铁站 <code>stationName</code>&nbsp;。</li> \n</ul> \n<p>3.&nbsp;<code>getAverageTime(string startStation, string endStation)</code>&nbsp;</p> \n<ul> \n <li>返回从地铁站&nbsp;<code>startStation</code>&nbsp;到地铁站&nbsp;<code>endStation</code>&nbsp;的平均花费时间。</li> \n <li>平均时间计算的行程包括当前为止所有从&nbsp;<code>startStation</code>&nbsp;<strong>直接到达</strong>&nbsp;<code>endStation</code>&nbsp;的行程。</li> \n <li>调用&nbsp;<code>getAverageTime</code>&nbsp;时，询问的路线至少包含一趟行程。</li> \n</ul> \n<p>你可以假设所有对&nbsp;<code>checkIn</code>&nbsp;和&nbsp;<code>checkOut</code>&nbsp;的调用都是符合逻辑的。也就是说，如果一个顾客在 <strong>t<sub>1</sub></strong>&nbsp;时刻到达某个地铁站，那么他离开的时间&nbsp;<strong>t<sub>2</sub></strong>&nbsp;一定满足&nbsp;<strong>t<sub>2</sub> &gt; t<sub>1</sub></strong>&nbsp;。所有的事件都按时间顺序给出。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"UndergroundSystem\",\"checkIn\",\"checkIn\",\"checkIn\",\"checkOut\",\"checkOut\",\"checkOut\",\"getAverageTime\",\"getAverageTime\",\"checkIn\",\"getAverageTime\",\"checkOut\",\"getAverageTime\"]\n[[],[45,\"Leyton\",3],[32,\"Paradise\",8],[27,\"Leyton\",10],[45,\"Waterloo\",15],[27,\"Waterloo\",20],[32,\"Cambridge\",22],[\"Paradise\",\"Cambridge\"],[\"Leyton\",\"Waterloo\"],[10,\"Leyton\",24],[\"Leyton\",\"Waterloo\"],[10,\"Waterloo\",38],[\"Leyton\",\"Waterloo\"]]\n\n<strong>输出：</strong>\n[null,null,null,null,null,null,null,14.0,11.0,null,11.0,null,12.0]\n\n<strong>解释：</strong>\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(45, \"Leyton\", 3);\nundergroundSystem.checkIn(32, \"Paradise\", 8);\nundergroundSystem.checkIn(27, \"Leyton\", 10);\nundergroundSystem.checkOut(45, \"Waterloo\", 15);\nundergroundSystem.checkOut(27, \"Waterloo\", 20);\nundergroundSystem.checkOut(32, \"Cambridge\", 22);\nundergroundSystem.getAverageTime(\"Paradise\", \"Cambridge\");       // 返回 14.0。从 \"Paradise\"（时刻 8）到 \"Cambridge\"(时刻 22)的行程只有一趟\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");          // 返回 11.0。总共有 2 躺从 \"Leyton\" 到 \"Waterloo\" 的行程，编号为 id=45 的乘客出发于 time=3 到达于 time=15，编号为 id=27 的乘客于 time=10 出发于 time=20 到达。所以平均时间为 ( (15-3) + (20-10) ) / 2 = 11.0\nundergroundSystem.checkIn(10, \"Leyton\", 24);\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");          // 返回 11.0\nundergroundSystem.checkOut(10, \"Waterloo\", 38);\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");          // 返回 12.0</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>总共最多有&nbsp;<code>20000</code>&nbsp;次操作。</li> \n <li><code>1 &lt;= id, t &lt;= 10^6</code></li> \n <li>所有的字符串包含大写字母，小写字母和数字。</li> \n <li><code>1 &lt;=&nbsp;stationName.length &lt;= 10</code></li> \n <li>与标准答案误差在&nbsp;<code>10^-5</code>&nbsp;以内的结果都视为正确结果。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1397. 找到所有好字符串', '<p>给你两个长度为 <code>n</code>&nbsp;的字符串&nbsp;<code>s1</code> 和&nbsp;<code>s2</code>&nbsp;，以及一个字符串&nbsp;<code>evil</code>&nbsp;。请你返回 <strong>好字符串&nbsp;</strong>的数目。</p> \n<p><strong>好字符串</strong>&nbsp;的定义为：它的长度为&nbsp;<code>n</code>&nbsp;，字典序大于等于&nbsp;<code>s1</code>&nbsp;，字典序小于等于&nbsp;<code>s2</code>&nbsp;，且不包含&nbsp;<code>evil</code>&nbsp;为子字符串。</p> \n<p>由于答案可能很大，请你返回答案对 10^9 + 7 取余的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"\n<strong>输出：</strong>51 \n<strong>解释：</strong>总共有 25 个以 \'a\' 开头的好字符串：\"aa\"，\"ac\"，\"ad\"，...，\"az\"。还有 25 个以 \'c\' 开头的好字符串：\"ca\"，\"cc\"，\"cd\"，...，\"cz\"。最后，还有一个以 \'d\' 开头的好字符串：\"da\"。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\"\n<strong>输出：</strong>0 \n<strong>解释：</strong>所有字典序大于等于 s1 且小于等于 s2 的字符串都以 evil 字符串 \"leet\" 开头。所以没有好字符串。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\"\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>s1.length == n</code></li> \n <li><code>s2.length == n</code></li> \n <li><code>s1 &lt;= s2</code></li> \n <li><code>1 &lt;= n &lt;= 500</code></li> \n <li><code>1 &lt;= evil.length &lt;= 50</code></li> \n <li>所有字符串都只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1399. 统计最大组的数目', '<p>给你一个整数 <code>n</code>&nbsp;。请你先求出从 <code>1</code>&nbsp;到 <code>n</code> 的每个整数 10 进制表示下的数位和（每一位上的数字相加），然后把数位和相等的数字放到同一个组中。</p> \n<p>请你统计每个组中的数字数目，并返回数字数目并列最多的组有多少个。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 13\n<strong>输出：</strong>4\n<strong>解释：</strong>总共有 9 个组，将 1 到 13 按数位求和后这些组分别是：\n[1,10]，[2,11]，[3,12]，[4,13]，[5]，[6]，[7]，[8]，[9]。总共有 4 个组拥有的数字并列最多。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>总共有 2 个大小为 1 的组 [1]，[2]。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 15\n<strong>输出：</strong>6\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 24\n<strong>输出：</strong>5\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('14. 最长公共前缀', '<p>编写一个函数来查找字符串数组中的最长公共前缀。</p> \n<p>如果不存在公共前缀，返回空字符串&nbsp;<code>\"\"</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>strs = [\"flower\",\"flow\",\"flight\"]\n<strong>输出：</strong>\"fl\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>strs = [\"dog\",\"racecar\",\"car\"]\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>输入不存在公共前缀。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= strs.length &lt;= 200</code></li> \n <li><code>0 &lt;= strs[i].length &lt;= 200</code></li> \n <li><code>strs[i]</code> 仅由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('140. 单词拆分 II', '<p>给定一个<strong>非空</strong>字符串 <em>s</em> 和一个包含<strong>非空</strong>单词列表的字典 <em>wordDict</em>，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li>分隔时可以重复使用字典中的单词。</li> \n <li>你可以假设字典中没有重复的单词。</li> \n</ul> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:\n</strong>s = \"<code>catsanddog</code>\"\nwordDict = <code>[\"cat\", \"cats\", \"and\", \"sand\", \"dog\"]</code>\n<strong>输出:\n</strong><code>[\n&nbsp; \"cats and dog\",\n&nbsp; \"cat sand dog\"\n]</code>\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:\n</strong>s = \"pineapplepenapple\"\nwordDict = [\"apple\", \"pen\", \"applepen\", \"pine\", \"pineapple\"]\n<strong>输出:\n</strong>[\n&nbsp; \"pine apple pen apple\",\n&nbsp; \"pineapple pen apple\",\n&nbsp; \"pine applepen apple\"\n]\n<strong>解释:</strong> 注意你可以重复使用字典中的单词。\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<pre><strong>输入:\n</strong>s = \"catsandog\"\nwordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\n<strong>输出:\n</strong>[]\n</pre>');
INSERT INTO `leecode` VALUES ('1400. 构造 K 个回文字符串', '<p>给你一个字符串 <code>s</code>&nbsp;和一个整数 <code>k</code>&nbsp;。请你用 <code>s</code>&nbsp;字符串中 <strong>所有字符</strong>&nbsp;构造 <code>k</code>&nbsp;个非空 <strong>回文串</strong>&nbsp;。</p> \n<p>如果你可以用&nbsp;<code>s</code>&nbsp;中所有字符构造&nbsp;<code>k</code>&nbsp;个回文字符串，那么请你返回 <strong>True</strong>&nbsp;，否则返回&nbsp;<strong>False</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"annabelle\", k = 2\n<strong>输出：</strong>true\n<strong>解释：</strong>可以用 s 中所有字符构造 2 个回文字符串。\n一些可行的构造方案包括：\"anna\" + \"elble\"，\"anbna\" + \"elle\"，\"anellena\" + \"b\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"leetcode\", k = 3\n<strong>输出：</strong>false\n<strong>解释：</strong>无法用 s 中所有字符构造 3 个回文串。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"true\", k = 4\n<strong>输出：</strong>true\n<strong>解释：</strong>唯一可行的方案是让 s 中每个字符单独构成一个字符串。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"yzyzyzyzyzyzyzy\", k = 2\n<strong>输出：</strong>true\n<strong>解释：</strong>你只需要将所有的 z 放在一个字符串中，所有的 y 放在另一个字符串中。那么两个字符串都是回文串。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>s = \"cr\", k = 7\n<strong>输出：</strong>false\n<strong>解释：</strong>我们没有足够的字符去构造 7 个回文串。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10^5</code></li> \n <li><code>s</code>&nbsp;中所有字符都是小写英文字母。</li> \n <li><code>1 &lt;= k &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1401. 圆和矩形是否有重叠', '<p>给你一个以 (<code>radius</code>, <code>x_center</code>, <code>y_center</code>) 表示的圆和一个与坐标轴平行的矩形 (<code>x1</code>, <code>y1</code>, <code>x2</code>, <code>y2</code>)，其中&nbsp;(<code>x1</code>, <code>y1</code>) 是矩形左下角的坐标，(<code>x2</code>, <code>y2</code>) 是右上角的坐标。</p> \n<p>如果圆和矩形有重叠的部分，请你返回 True ，否则返回 False&nbsp;。</p> \n<p>换句话说，请你检测是否 <strong>存在</strong> 点&nbsp;(xi, yi) ，它既在圆上也在矩形上（两者都包括点落在边界上的情况）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 167px; width: 258px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/04/04/sample_4_1728.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>radius = 1, x_center = 0, y_center = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1\n<strong>输出：</strong>true\n<strong>解释：</strong>圆和矩形有公共点 (1,0) \n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 135px; width: 150px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/04/04/sample_2_1728.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>radius = 1, x_center = 0, y_center = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"height: 165px; width: 175px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/04/04/sample_6_1728.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>radius = 1, x_center = 1, y_center = 1, x1 = -3, y1 = -3, x2 = 3, y2 = 3\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>radius = 1, x_center = 1, y_center = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= radius &lt;= 2000</code></li> \n <li><code>-10^4 &lt;= x_center, y_center, x1, y1, x2, y2 &lt;= 10^4</code></li> \n <li><code>x1 &lt; x2</code></li> \n <li><code>y1 &lt; y2</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1402. 做菜顺序', '<p>一个厨师收集了他&nbsp;<code>n</code>&nbsp;道菜的满意程度&nbsp;<code>satisfaction</code>&nbsp;，这个厨师做出每道菜的时间都是 1 单位时间。</p> \n<p>一道菜的 「喜爱时间」系数定义为烹饪这道菜以及之前每道菜所花费的时间乘以这道菜的满意程度，也就是&nbsp;<code>time[i]</code>*<code>satisfaction[i]</code>&nbsp;。</p> \n<p>请你返回做完所有菜 「喜爱时间」总和的最大值为多少。</p> \n<p>你可以按&nbsp;<strong>任意</strong>&nbsp;顺序安排做菜的顺序，你也可以选择放弃做某些菜来获得更大的总和。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>satisfaction = [-1,-8,0,5,-9]\n<strong>输出：</strong>14\n<strong>解释：</strong>去掉第二道和最后一道菜，最大的喜爱时间系数和为 (-1*1 + 0*2 + 5*3 = 14) 。每道菜都需要花费 1 单位时间完成。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>satisfaction = [4,3,2]\n<strong>输出：</strong>20\n<strong>解释：</strong>按照原来顺序相反的时间做菜 (2*1 + 3*2 + 4*3 = 20)\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>satisfaction = [-1,-4,-5]\n<strong>输出：</strong>0\n<strong>解释：</strong>大家都不喜欢这些菜，所以不做任何菜可以获得最大的喜爱时间系数。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>satisfaction = [-2,5,-1,0,3,-3]\n<strong>输出：</strong>35\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == satisfaction.length</code></li> \n <li><code>1 &lt;= n &lt;= 500</code></li> \n <li><code>-10^3 &lt;=&nbsp;satisfaction[i] &lt;= 10^3</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1403. 非递增顺序的最小子序列', '<p>给你一个数组 <code>nums</code>，请你从中抽取一个子序列，满足该子序列的元素之和 <strong>严格</strong> 大于未包含在该子序列中的各元素之和。</p> \n<p>如果存在多个解决方案，只需返回 <strong>长度最小</strong> 的子序列。如果仍然有多个解决方案，则返回 <strong>元素之和最大</strong> 的子序列。</p> \n<p>与子数组不同的地方在于，「数组的子序列」不强调元素在原数组中的连续性，也就是说，它可以通过从数组中分离一些（也可能不分离）元素得到。</p> \n<p><strong>注意</strong>，题目数据保证满足所有约束条件的解决方案是 <strong>唯一</strong> 的。同时，返回的答案应当按 <strong>非递增顺序</strong> 排列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [4,3,10,9,8]\n<strong>输出：</strong>[10,9] \n<strong>解释：</strong>子序列 [10,9] 和 [10,8] 是最小的、满足元素之和大于其他各元素之和的子序列。但是 [10,9] 的元素之和最大。&nbsp;\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [4,4,7,6,7]\n<strong>输出：</strong>[7,7,6] \n<strong>解释：</strong>子序列 [7,7] 的和为 14 ，不严格大于剩下的其他元素之和（14 = 4 + 4 + 6）。因此，[7,6,7] 是满足题意的最小子序列。注意，元素按非递增顺序返回。  \n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [6]\n<strong>输出：</strong>[6]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 500</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1404. 将二进制表示减到 1 的步骤数', '<p>给你一个以二进制形式表示的数字 <code>s</code> 。请你返回按下述规则将其减少到 1 所需要的步骤数：</p> \n<ul> \n <li> <p>如果当前数字为偶数，则将其除以 2 。</p> </li> \n <li> <p>如果当前数字为奇数，则将其加上 1 。</p> </li> \n</ul> \n<p>题目保证你总是可以按上述规则将测试用例变为 1 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"1101\"\n<strong>输出：</strong>6\n<strong>解释：</strong>\"1101\" 表示十进制数 13 。\nStep 1) 13 是奇数，加 1 得到 14&nbsp;\nStep 2) 14 是偶数，除 2 得到 7\nStep 3) 7  是奇数，加 1 得到 8\nStep 4) 8  是偶数，除 2 得到 4&nbsp; \nStep 5) 4  是偶数，除 2 得到 2&nbsp;\nStep 6) 2  是偶数，除 2 得到 1&nbsp; \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"10\"\n<strong>输出：</strong>1\n<strong>解释：</strong>\"10\" 表示十进制数 2 。\nStep 1) 2 是偶数，除 2 得到 1 \n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"1\"\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length&nbsp;&lt;= 500</code></li> \n <li><code>s</code> 由字符 <code>\'0\'</code> 或 <code>\'1\'</code> 组成。</li> \n <li><code>s[0] == \'1\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1405. 最长快乐字符串', '<p>如果字符串中不含有任何 <code>\'aaa\'</code>，<code>\'bbb\'</code> 或 <code>\'ccc\'</code> 这样的字符串作为子串，那么该字符串就是一个「快乐字符串」。</p> \n<p>给你三个整数 <code>a</code>，<code>b</code> ，<code>c</code>，请你返回 <strong>任意一个</strong> 满足下列全部条件的字符串 <code>s</code>：</p> \n<ul> \n <li><code>s</code> 是一个尽可能长的快乐字符串。</li> \n <li><code>s</code> 中 <strong>最多</strong> 有<code>a</code> 个字母 <code>\'a\'</code>、<code>b</code>&nbsp;个字母 <code>\'b\'</code>、<code>c</code> 个字母 <code>\'c\'</code> 。</li> \n <li><code>s </code>中只含有 <code>\'a\'</code>、<code>\'b\'</code> 、<code>\'c\'</code> 三种字母。</li> \n</ul> \n<p>如果不存在这样的字符串 <code>s</code> ，请返回一个空字符串 <code>\"\"</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>a = 1, b = 1, c = 7\n<strong>输出：</strong>\"ccaccbcc\"\n<strong>解释：</strong>\"ccbccacc\" 也是一种正确答案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>a = 2, b = 2, c = 1\n<strong>输出：</strong>\"aabbc\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>a = 7, b = 1, c = 0\n<strong>输出：</strong>\"aabaa\"\n<strong>解释：</strong>这是该测试用例的唯一正确答案。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= a, b, c &lt;= 100</code></li> \n <li><code>a + b + c &gt; 0</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1406. 石子游戏 III', '<p>Alice 和 Bob 用几堆石子在做游戏。几堆石子排成一行，每堆石子都对应一个得分，由数组 <code>stoneValue</code> 给出。</p> \n<p>Alice 和 Bob 轮流取石子，<strong>Alice</strong> 总是先开始。在每个玩家的回合中，该玩家可以拿走剩下石子中的的前 <strong>1、2 或 3 堆石子</strong> 。比赛一直持续到所有石头都被拿走。</p> \n<p>每个玩家的最终得分为他所拿到的每堆石子的对应得分之和。每个玩家的初始分数都是 <strong>0</strong> 。比赛的目标是决出最高分，得分最高的选手将会赢得比赛，比赛也可能会出现平局。</p> \n<p>假设 Alice 和 Bob 都采取 <strong>最优策略</strong> 。如果 Alice 赢了就返回 <em>\"Alice\"</em> <em>，</em>Bob 赢了就返回<em> \"Bob\"，</em>平局（分数相同）返回 <em>\"Tie\"</em> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>values = [1,2,3,7]\n<strong>输出：</strong>\"Bob\"\n<strong>解释：</strong>Alice 总是会输，她的最佳选择是拿走前三堆，得分变成 6 。但是 Bob 的得分为 7，Bob 获胜。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>values = [1,2,3,-9]\n<strong>输出：</strong>\"Alice\"\n<strong>解释：</strong>Alice 要想获胜就必须在第一个回合拿走前三堆石子，给 Bob 留下负分。\n如果 Alice 只拿走第一堆，那么她的得分为 1，接下来 Bob 拿走第二、三堆，得分为 5 。之后 Alice 只能拿到分数 -9 的石子堆，输掉比赛。\n如果 Alice 拿走前两堆，那么她的得分为 3，接下来 Bob 拿走第三堆，得分为 3 。之后 Alice 只能拿到分数 -9 的石子堆，同样会输掉比赛。\n注意，他们都应该采取 <strong>最优策略 </strong>，所以在这里 Alice 将选择能够使她获胜的方案。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>values = [1,2,3,6]\n<strong>输出：</strong>\"Tie\"\n<strong>解释：</strong>Alice 无法赢得比赛。如果她决定选择前三堆，她可以以平局结束比赛，否则她就会输。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>values = [1,2,3,-1,-2,-3,7]\n<strong>输出：</strong>\"Alice\"\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>values = [-1,-2,-3]\n<strong>输出：</strong>\"Tie\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= values.length &lt;= 50000</code></li> \n <li><code>-1000&nbsp;&lt;= values[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1408. 数组中的字符串匹配', '<p>给你一个字符串数组 <code>words</code> ，数组中的每个字符串都可以看作是一个单词。请你按 <strong>任意</strong> 顺序返回 <code>words</code> 中是其他单词的子字符串的所有单词。</p> \n<p>如果你可以删除 <code>words[j]</code>&nbsp;最左侧和/或最右侧的若干字符得到 <code>word[i]</code> ，那么字符串 <code>words[i]</code> 就是 <code>words[j]</code> 的一个子字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>words = [\"mass\",\"as\",\"hero\",\"superhero\"]\n<strong>输出：</strong>[\"as\",\"hero\"]\n<strong>解释：</strong>\"as\" 是 \"mass\" 的子字符串，\"hero\" 是 \"superhero\" 的子字符串。\n[\"hero\",\"as\"] 也是有效的答案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>words = [\"leetcode\",\"et\",\"code\"]\n<strong>输出：</strong>[\"et\",\"code\"]\n<strong>解释：</strong>\"et\" 和 \"code\" 都是 \"leetcode\" 的子字符串。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>words = [\"blue\",\"green\",\"bu\"]\n<strong>输出：</strong>[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 100</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 30</code></li> \n <li><code>words[i]</code> 仅包含小写英文字母。</li> \n <li>题目数据 <strong>保证</strong> 每个 <code>words[i]</code> 都是独一无二的。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1409. 查询带键的排列', '<p>给你一个待查数组 <code>queries</code> ，数组中的元素为 <code>1</code> 到 <code>m</code> 之间的正整数。 请你根据以下规则处理所有待查项 <code>queries[i]</code>（从 <code>i=0</code> 到 <code>i=queries.length-1</code>）：</p> \n<ul> \n <li>一开始，排列 <code>P=[1,2,3,...,m]</code>。</li> \n <li>对于当前的 <code>i</code> ，请你找出待查项 <code>queries[i]</code> 在排列 <code>P</code> 中的位置（<strong>下标从 0 开始</strong>），然后将其从原位置移动到排列 <code>P</code> 的起始位置（即下标为 0 处）。注意， <code>queries[i]</code> 在 <code>P</code> 中的位置就是 <code>queries[i]</code> 的查询结果。</li> \n</ul> \n<p>请你以数组形式返回待查数组&nbsp; <code>queries</code> 的查询结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>queries = [3,1,2,1], m = 5\n<strong>输出：</strong>[2,1,2,1] \n<strong>解释：</strong>待查数组 queries 处理如下：\n对于 i=0: queries[i]=3, P=[1,2,3,4,5], 3 在 P 中的位置是 <strong>2</strong>，接着我们把 3 移动到 P 的起始位置，得到 P=[3,1,2,4,5] 。\n对于 i=1: queries[i]=1, P=[3,1,2,4,5], 1 在 P 中的位置是 <strong>1</strong>，接着我们把 1 移动到 P 的起始位置，得到 P=[1,3,2,4,5] 。 \n对于 i=2: queries[i]=2, P=[1,3,2,4,5], 2 在 P 中的位置是 <strong>2</strong>，接着我们把 2 移动到 P 的起始位置，得到 P=[2,1,3,4,5] 。\n对于 i=3: queries[i]=1, P=[2,1,3,4,5], 1 在 P 中的位置是 <strong>1</strong>，接着我们把 1 移动到 P 的起始位置，得到 P=[1,2,3,4,5] 。 \n因此，返回的结果数组为 [2,1,2,1] 。  \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>queries = [4,1,2,2], m = 4\n<strong>输出：</strong>[3,1,2,0]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>queries = [7,5,5,8,3], m = 8\n<strong>输出：</strong>[6,5,0,7,5]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= m &lt;= 10^3</code></li> \n <li><code>1 &lt;= queries.length &lt;= m</code></li> \n <li><code>1 &lt;= queries[i] &lt;= m</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('141. 环形链表', '<p>给定一个链表，判断链表中是否有环。</p> \n<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p> \n<p>如果链表中存在环，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<p>你能用 <em>O(1)</em>（即，常量）内存解决此问题吗？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 97px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [3,2,0,-4], pos = 1\n<strong>输出：</strong>true\n<strong>解释：</strong>链表中有一个环，其尾部连接到第二个节点。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<p><img style=\"height: 74px; width: 141px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [1,2], pos = 0\n<strong>输出：</strong>true\n<strong>解释：</strong>链表中有一个环，其尾部连接到第一个节点。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 45px; width: 45px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [1], pos = -1\n<strong>输出：</strong>false\n<strong>解释：</strong>链表中没有环。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表中节点的数目范围是 <code>[0, 10<sup>4</sup>]</code></li> \n <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> \n <li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong> 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1410. HTML 实体解析器', '<p>「HTML&nbsp;实体解析器」 是一种特殊的解析器，它将 HTML 代码作为输入，并用字符本身替换掉所有这些特殊的字符实体。</p> \n<p>HTML 里这些特殊字符和它们对应的字符实体包括：</p> \n<ul> \n <li><strong>双引号：</strong>字符实体为&nbsp;<code>&amp;quot;</code>&nbsp;，对应的字符是&nbsp;<code>\"</code>&nbsp;。</li> \n <li><strong>单引号：</strong>字符实体为&nbsp;<code>&amp;apos;</code>&nbsp;，对应的字符是&nbsp;<code>\'</code>&nbsp;。</li> \n <li><strong>与符号：</strong>字符实体为&nbsp;<code>&amp;amp;</code>&nbsp;，对应对的字符是&nbsp;<code>&amp;</code>&nbsp;。</li> \n <li><strong>大于号：</strong>字符实体为&nbsp;<code>&amp;gt;</code>&nbsp;，对应的字符是&nbsp;<code>&gt;</code>&nbsp;。</li> \n <li><strong>小于号：</strong>字符实体为&nbsp;<code>&amp;lt;</code>&nbsp;，对应的字符是&nbsp;<code>&lt;</code>&nbsp;。</li> \n <li><strong>斜线号：</strong>字符实体为&nbsp;<code>&amp;frasl;</code>&nbsp;，对应的字符是&nbsp;<code>/</code>&nbsp;。</li> \n</ul> \n<p>给你输入字符串&nbsp;<code>text</code>&nbsp;，请你实现一个 HTML&nbsp;实体解析器，返回解析器解析后的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>text = \"&amp;amp; is an HTML entity but &amp;ambassador; is not.\"\n<strong>输出：</strong>\"&amp; is an HTML entity but &amp;ambassador; is not.\"\n<strong>解释：</strong>解析器把字符实体 &amp;amp; 用 &amp; 替换\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>text = \"and I quote: &amp;quot;...&amp;quot;\"\n<strong>输出：</strong>\"and I quote: \\\"...\\\"\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>text = \"Stay home! Practice on Leetcode :)\"\n<strong>输出：</strong>\"Stay home! Practice on Leetcode :)\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>text = \"x &amp;gt; y &amp;amp;&amp;amp; x &amp;lt; y is always false\"\n<strong>输出：</strong>\"x &gt; y &amp;&amp; x &lt; y is always false\"\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>text = \"leetcode.com&amp;frasl;problemset&amp;frasl;all\"\n<strong>输出：</strong>\"leetcode.com/problemset/all\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= text.length &lt;= 10^5</code></li> \n <li>字符串可能包含 256 个ASCII 字符中的任意字符。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1411. 给 N x 3 网格图涂色的方案数', '<p>你有一个 <code>n x 3</code>&nbsp;的网格图 <code>grid</code>&nbsp;，你需要用 <strong>红，黄，绿</strong>&nbsp;三种颜色之一给每一个格子上色，且确保相邻格子颜色不同（也就是有相同水平边或者垂直边的格子颜色不同）。</p> \n<p>给你网格图的行数 <code>n</code>&nbsp;。</p> \n<p>请你返回给&nbsp;<code>grid</code>&nbsp;涂色的方案数。由于答案可能会非常大，请你返回答案对&nbsp;<code>10^9 + 7</code>&nbsp;取余的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>12\n<strong>解释：</strong>总共有 12 种可行的方法：\n<img style=\"height: 289px; width: 450px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/04/12/e1.png\" alt=\"\">\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>54\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>246\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 7\n<strong>输出：</strong>106494\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 5000\n<strong>输出：</strong>30228214\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == grid.length</code></li> \n <li><code>grid[i].length == 3</code></li> \n <li><code>1 &lt;= n &lt;= 5000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1413. 逐步求和得到正数的最小值', '<p>给你一个整数数组 <code>nums</code>&nbsp;。你可以选定任意的&nbsp;<strong>正数</strong> startValue 作为初始值。</p> \n<p>你需要从左到右遍历 <code>nums</code>&nbsp;数组，并将 startValue 依次累加上&nbsp;<code>nums</code>&nbsp;数组中的值。</p> \n<p>请你在确保累加和始终大于等于 1 的前提下，选出一个最小的&nbsp;<strong>正数</strong>&nbsp;作为 startValue 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [-3,2,-3,4,2]\n<strong>输出：</strong>5\n<strong>解释：</strong>如果你选择 startValue = 4，在第三次累加时，和小于 1 。\n<strong>                累加求和\n&nbsp;               startValue = 4 | startValue = 5 | nums\n</strong>&nbsp;                 (4 <strong>-3</strong> ) = 1  | (5 <strong>-3</strong> ) = 2    |  -3\n&nbsp;                 (1 <strong>+2</strong> ) = 3  | (2 <strong>+2</strong> ) = 4    |   2\n&nbsp;                 (3 <strong>-3</strong> ) = 0  | (4 <strong>-3</strong> ) = 1    |  -3\n&nbsp;                 (0 <strong>+4</strong> ) = 4  | (1 <strong>+4</strong> ) = 5    |   4\n&nbsp;                 (4 <strong>+2</strong> ) = 6  | (5 <strong>+2</strong> ) = 7    |   2\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2]\n<strong>输出：</strong>1\n<strong>解释：</strong>最小的 startValue 需要是正数。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,-2,-3]\n<strong>输出：</strong>5\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 100</code></li> \n <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1414. 和为 K 的最少斐波那契数字数目', '<p>给你数字 <code>k</code>&nbsp;，请你返回和为&nbsp;<code>k</code>&nbsp;的斐波那契数字的最少数目，其中，每个斐波那契数字都可以被使用多次。</p> \n<p>斐波那契数字定义为：</p> \n<ul> \n <li>F<sub>1</sub> = 1</li> \n <li>F<sub>2</sub> = 1</li> \n <li>F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub>&nbsp;， 其中 n &gt; 2 。</li> \n</ul> \n<p>数据保证对于给定的 <code>k</code>&nbsp;，一定能找到可行解。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>k = 7\n<strong>输出：</strong>2 \n<strong>解释：</strong>斐波那契数字为：1，1，2，3，5，8，13，……\n对于 k = 7 ，我们可以得到 2 + 5 = 7 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>k = 10\n<strong>输出：</strong>2 \n<strong>解释：</strong>对于 k = 10 ，我们可以得到 2 + 8 = 10 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>k = 19\n<strong>输出：</strong>3 \n<strong>解释：</strong>对于 k = 19 ，我们可以得到 1 + 5 + 13 = 19 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1415. 长度为 n 的开心字符串中字典序第 k 小的字符串', '<p>一个 「开心字符串」定义为：</p> \n<ul> \n <li>仅包含小写字母&nbsp;<code>[\'a\', \'b\', \'c\']</code>.</li> \n <li>对所有在&nbsp;<code>1</code>&nbsp;到&nbsp;<code>s.length - 1</code>&nbsp;之间的&nbsp;<code>i</code>&nbsp;，满足&nbsp;<code>s[i] != s[i + 1]</code>&nbsp;（字符串的下标从 1 开始）。</li> \n</ul> \n<p>比方说，字符串&nbsp;<strong>\"abc\"</strong>，<strong>\"ac\"，\"b\"</strong> 和&nbsp;<strong>\"abcbabcbcb\"</strong>&nbsp;都是开心字符串，但是&nbsp;<strong>\"aa\"</strong>，<strong>\"baa\"</strong>&nbsp;和&nbsp;<strong>\"ababbc\"</strong>&nbsp;都不是开心字符串。</p> \n<p>给你两个整数 <code>n</code>&nbsp;和 <code>k</code>&nbsp;，你需要将长度为 <code>n</code>&nbsp;的所有开心字符串按字典序排序。</p> \n<p>请你返回排序后的第 k 个开心字符串，如果长度为 <code>n</code>&nbsp;的开心字符串少于 <code>k</code>&nbsp;个，那么请你返回 <strong>空字符串</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 1, k = 3\n<strong>输出：</strong>\"c\"\n<strong>解释：</strong>列表 [\"a\", \"b\", \"c\"] 包含了所有长度为 1 的开心字符串。按照字典序排序后第三个字符串为 \"c\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1, k = 4\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>长度为 1 的开心字符串只有 3 个。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 3, k = 9\n<strong>输出：</strong>\"cab\"\n<strong>解释：</strong>长度为 3 的开心字符串总共有 12 个 [\"aba\", \"abc\", \"aca\", \"acb\", \"bab\", \"bac\", \"bca\", \"bcb\", \"cab\", \"cac\", \"cba\", \"cbc\"] 。第 9 个字符串为 \"cab\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 2, k = 7\n<strong>输出：</strong>\"\"\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 10, k = 100\n<strong>输出：</strong>\"abacbabacb\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10</code></li> \n <li><code>1 &lt;= k &lt;= 100</code></li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('1416. 恢复数组', '<p>某个程序本来应该输出一个整数数组。但是这个程序忘记输出空格了以致输出了一个数字字符串，我们所知道的信息只有：数组中所有整数都在 <code>[1, k]</code>&nbsp;之间，且数组中的数字都没有前导 0 。</p> \n<p>给你字符串&nbsp;<code>s</code>&nbsp;和整数&nbsp;<code>k</code>&nbsp;。可能会有多种不同的数组恢复结果。</p> \n<p>按照上述程序，请你返回所有可能输出字符串&nbsp;<code>s</code>&nbsp;的数组方案数。</p> \n<p>由于数组方案数可能会很大，请你返回它对&nbsp;<code>10^9 + 7</code>&nbsp;<strong>取余</strong>&nbsp;后的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"1000\", k = 10000\n<strong>输出：</strong>1\n<strong>解释：</strong>唯一一种可能的数组方案是 [1000]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"1000\", k = 10\n<strong>输出：</strong>0\n<strong>解释：</strong>不存在任何数组方案满足所有整数都 &gt;= 1 且 &lt;= 10 同时输出结果为 s 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"1317\", k = 2000\n<strong>输出：</strong>8\n<strong>解释：</strong>可行的数组方案为 [1317]，[131,7]，[13,17]，[1,317]，[13,1,7]，[1,31,7]，[1,3,17]，[1,3,1,7]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"2020\", k = 30\n<strong>输出：</strong>1\n<strong>解释：</strong>唯一可能的数组方案是 [20,20] 。 [2020] 不是可行的数组方案，原因是 2020 &gt; 30 。 [2,020] 也不是可行的数组方案，因为 020 含有前导 0 。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>s = \"1234567890\", k = 90\n<strong>输出：</strong>34\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10^5</code>.</li> \n <li><code>s</code>&nbsp;只包含数字且不包含前导 0 。</li> \n <li><code>1 &lt;= k &lt;= 10^9</code>.</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1417. 重新格式化字符串', '<p>给你一个混合了数字和字母的字符串 <code>s</code>，其中的字母均为小写英文字母。</p> \n<p>请你将该字符串重新格式化，使得任意两个相邻字符的类型都不同。也就是说，字母后面应该跟着数字，而数字后面应该跟着字母。</p> \n<p>请你返回 <strong>重新格式化后</strong> 的字符串；如果无法按要求重新格式化，则返回一个 <strong>空字符串</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"a0b1c2\"\n<strong>输出：</strong>\"0a1b2c\"\n<strong>解释：</strong>\"0a1b2c\" 中任意两个相邻字符的类型都不同。 \"a0b1c2\", \"0a1b2c\", \"0c2a1b\" 也是满足题目要求的答案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"leetcode\"\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>\"leetcode\" 中只有字母，所以无法满足重新格式化的条件。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"1229857369\"\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>\"1229857369\" 中只有数字，所以无法满足重新格式化的条件。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"covid2019\"\n<strong>输出：</strong>\"c2o0v1i9d\"\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>s = \"ab123\"\n<strong>输出：</strong>\"1a2b3\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 500</code></li> \n <li><code>s</code> 仅由小写英文字母和/或数字组成。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1418. 点菜展示表', '<p>给你一个数组 <code>orders</code>，表示客户在餐厅中完成的订单，确切地说， <code>orders[i]=[customerName<sub>i</sub>,tableNumber<sub>i</sub>,foodItem<sub>i</sub>]</code> ，其中 <code>customerName<sub>i</sub></code> 是客户的姓名，<code>tableNumber<sub>i</sub></code> 是客户所在餐桌的桌号，而 <code>foodItem<sub>i</sub></code> 是客户点的餐品名称。</p> \n<p>请你返回该餐厅的 <strong>点菜展示表</strong><em> 。</em>在这张表中，表中第一行为标题，其第一列为餐桌桌号 “Table” ，后面每一列都是按字母顺序排列的餐品名称。接下来每一行中的项则表示每张餐桌订购的相应餐品数量，第一列应当填对应的桌号，后面依次填写下单的餐品数量。</p> \n<p>注意：客户姓名不是点菜展示表的一部分。此外，表中的数据行应该按餐桌桌号升序排列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>orders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]]\n<strong>输出：</strong>[[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]] \n<strong>解释：\n</strong>点菜展示表如下所示：\n<strong>Table,Beef Burrito,Ceviche,Fried Chicken,Water</strong>\n3    ,0           ,2      ,1            ,0\n5    ,0           ,1      ,0            ,1\n10   ,1           ,0      ,0            ,0\n对于餐桌 3：David 点了 \"Ceviche\" 和 \"Fried Chicken\"，而 Rous 点了 \"Ceviche\"\n而餐桌 5：Carla 点了 \"Water\" 和 \"Ceviche\"\n餐桌 10：Corina 点了 \"Beef Burrito\" \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>orders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]]\n<strong>输出：</strong>[[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]] \n<strong>解释：</strong>\n对于餐桌 1：Adam 和 Brianna 都点了 \"Canadian Waffles\"\n而餐桌 12：James, Ratesh 和 Amadeus 都点了 \"Fried Chicken\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>orders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]]\n<strong>输出：</strong>[[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;orders.length &lt;= 5 * 10^4</code></li> \n <li><code>orders[i].length == 3</code></li> \n <li><code>1 &lt;= customerName<sub>i</sub>.length, foodItem<sub>i</sub>.length &lt;= 20</code></li> \n <li><code>customerName<sub>i</sub></code> 和 <code>foodItem<sub>i</sub></code> 由大小写英文字母及空格字符 <code>\' \'</code> 组成。</li> \n <li><code>tableNumber<sub>i</sub></code> 是 <code>1</code> 到 <code>500</code> 范围内的整数。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1419. 数青蛙', '<p>给你一个字符串 <code>croakOfFrogs</code>，它表示不同青蛙发出的蛙鸣声（字符串 \"croak\" ）的组合。由于同一时间可以有多只青蛙呱呱作响，所以&nbsp;<code>croakOfFrogs</code> 中会混合多个 “croak” <em>。</em>请你返回模拟字符串中所有蛙鸣所需不同青蛙的最少数目。</p> \n<p><strong>注意：</strong>要想发出蛙鸣 \"croak\"，青蛙必须 <strong>依序</strong> 输出 <code>‘c’, ’r’, ’o’, ’a’, ’k’</code> 这 5 个字母。如果没有输出全部五个字母，那么它就不会发出声音。</p> \n<p>如果字符串 <code>croakOfFrogs</code> 不是由若干有效的 \"croak\" 字符混合而成，请返回 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>croakOfFrogs = \"croakcroak\"\n<strong>输出：</strong>1 \n<strong>解释：</strong>一只青蛙 “呱呱” 两次\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>croakOfFrogs = \"crcoakroak\"\n<strong>输出：</strong>2 \n<strong>解释：</strong>最少需要两只青蛙，“呱呱” 声用黑体标注\n第一只青蛙 \"<strong>cr</strong>c<strong>oak</strong>roak\"\n第二只青蛙 \"cr<strong>c</strong>oak<strong>roak</strong>\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>croakOfFrogs = \"croakcrook\"\n<strong>输出：</strong>-1\n<strong>解释：</strong>给出的字符串不是 \"croak<strong>\"</strong> 的有效组合。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>croakOfFrogs = \"croakcroa\"\n<strong>输出：</strong>-1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;croakOfFrogs.length &lt;= 10^5</code></li> \n <li>字符串中的字符只有 <code>\'c\'</code>, <code>\'r\'</code>, <code>\'o\'</code>, <code>\'a\'</code> 或者 <code>\'k\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('142. 环形链表 II', '<p>给定一个链表，返回链表开始入环的第一个节点。&nbsp;如果链表无环，则返回&nbsp;<code>null</code>。</p> \n<p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意，<code>pos</code> 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</strong></p> \n<p><strong>说明：</strong>不允许修改给定的链表。</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你是否可以使用 <code>O(1)</code> 空间解决此题？</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 97px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [3,2,0,-4], pos = 1\n<strong>输出：</strong>返回索引为 1 的链表节点\n<strong>解释：</strong>链表中有一个环，其尾部连接到第二个节点。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<p><img style=\"height: 74px; width: 141px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [1,2], pos = 0\n<strong>输出：</strong>返回索引为 0 的链表节点\n<strong>解释：</strong>链表中有一个环，其尾部连接到第一个节点。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 45px; width: 45px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [1], pos = -1\n<strong>输出：</strong>返回 null\n<strong>解释：</strong>链表中没有环。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表中节点的数目范围在范围 <code>[0, 10<sup>4</sup>]</code> 内</li> \n <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> \n <li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1420. 生成数组', '<p>给你三个整数 <code>n</code>、<code>m</code> 和 <code>k</code> 。下图描述的算法用于找出正整数数组中最大的元素。</p> \n<p><img style=\"height: 372px; width: 424px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/04/19/e.png\" alt=\"\"></p> \n<p>请你生成一个具有下述属性的数组 <code>arr</code> ：</p> \n<ul> \n <li><code>arr</code> 中有 <code>n</code> 个整数。</li> \n <li><code>1 &lt;= arr[i] &lt;= m</code> 其中 <code>(0 &lt;= i &lt; n)</code> 。</li> \n <li>将上面提到的算法应用于 <code>arr</code> ，<code>search_cost</code> 的值等于 <code>k</code> 。</li> \n</ul> \n<p>返回上述条件下生成数组 <code>arr</code> 的 <strong>方法数</strong> ，由于答案可能会很大，所以 <strong>必须</strong> 对 <code>10^9 + 7</code> 取余。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2, m = 3, k = 1\n<strong>输出：</strong>6\n<strong>解释：</strong>可能的数组分别为 [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 5, m = 2, k = 3\n<strong>输出：</strong>0\n<strong>解释：</strong>没有数组可以满足上述条件\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 9, m = 1, k = 1\n<strong>输出：</strong>1\n<strong>解释：</strong>可能的数组只有 [1, 1, 1, 1, 1, 1, 1, 1, 1]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 50, m = 100, k = 25\n<strong>输出：</strong>34549172\n<strong>解释：</strong>不要忘了对 1000000007 取余\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 37, m = 17, k = 7\n<strong>输出：</strong>418930126\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 50</code></li> \n <li><code>1 &lt;= m &lt;= 100</code></li> \n <li><code>0 &lt;= k &lt;= n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1422. 分割字符串的最大得分', '<p>给你一个由若干 0 和 1 组成的字符串 <code>s</code> ，请你计算并返回将该字符串分割成两个 <strong>非空</strong> 子字符串（即&nbsp;<strong>左</strong> 子字符串和 <strong>右</strong> 子字符串）所能获得的最大得分。</p> \n<p>「分割字符串的得分」为 <strong>左</strong> 子字符串中 <strong>0</strong> 的数量加上 <strong>右</strong> 子字符串中 <strong>1</strong> 的数量。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"011101\"\n<strong>输出：</strong>5 \n<strong>解释：</strong>\n将字符串 s 划分为两个非空子字符串的可行方案有：\n左子字符串 = \"0\" 且 右子字符串 = \"11101\"，得分 = 1 + 4 = 5 \n左子字符串 = \"01\" 且 右子字符串 = \"1101\"，得分 = 1 + 3 = 4 \n左子字符串 = \"011\" 且 右子字符串 = \"101\"，得分 = 1 + 2 = 3 \n左子字符串 = \"0111\" 且 右子字符串 = \"01\"，得分 = 1 + 1 = 2 \n左子字符串 = \"01110\" 且 右子字符串 = \"1\"，得分 = 2 + 1 = 3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"00111\"\n<strong>输出：</strong>5\n<strong>解释：</strong>当 左子字符串 = \"00\" 且 右子字符串 = \"111\" 时，我们得到最大得分 = 2 + 3 = 5\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"1111\"\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= s.length &lt;= 500</code></li> \n <li>字符串 <code>s</code> 仅由字符 <code>\'0\'</code> 和 <code>\'1\'</code> 组成。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1423. 可获得的最大点数', '<p>几张卡牌<strong> 排成一行</strong>，每张卡牌都有一个对应的点数。点数由整数数组 <code>cardPoints</code> 给出。</p> \n<p>每次行动，你可以从行的开头或者末尾拿一张卡牌，最终你必须正好拿 <code>k</code> 张卡牌。</p> \n<p>你的点数就是你拿到手中的所有卡牌的点数之和。</p> \n<p>给你一个整数数组 <code>cardPoints</code> 和整数 <code>k</code>，请你返回可以获得的最大点数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>cardPoints = [1,2,3,4,5,6,1], k = 3\n<strong>输出：</strong>12\n<strong>解释：</strong>第一次行动，不管拿哪张牌，你的点数总是 1 。但是，先拿最右边的卡牌将会最大化你的可获得点数。最优策略是拿右边的三张牌，最终点数为 1 + 6 + 5 = 12 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>cardPoints = [2,2,2], k = 2\n<strong>输出：</strong>4\n<strong>解释：</strong>无论你拿起哪两张卡牌，可获得的点数总是 4 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>cardPoints = [9,7,7,9,7,7,9], k = 7\n<strong>输出：</strong>55\n<strong>解释：</strong>你必须拿起所有卡牌，可以获得的点数为所有卡牌的点数之和。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>cardPoints = [1,1000,1], k = 1\n<strong>输出：</strong>1\n<strong>解释：</strong>你无法拿到中间那张卡牌，所以可以获得的最大点数为 1 。 \n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>cardPoints = [1,79,80,1,1,1,200,1], k = 3\n<strong>输出：</strong>202\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= cardPoints.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= cardPoints[i] &lt;= 10^4</code></li> \n <li><code>1 &lt;= k &lt;= cardPoints.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1424. 对角线遍历 II', '<p>给你一个列表&nbsp;<code>nums</code>&nbsp;，里面每一个元素都是一个整数列表。请你依照下面各图的规则，按顺序返回&nbsp;<code>nums</code>&nbsp;中对角线上的整数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 143px; width: 158px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/04/23/sample_1_1784.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>nums = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>输出：</strong>[1,4,2,7,5,3,8,6,9]\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 177px; width: 230px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/04/23/sample_2_1784.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]\n<strong>输出：</strong>[1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [[1,2,3],[4],[5,6,7],[8],[9,10,11]]\n<strong>输出：</strong>[1,4,2,5,3,8,6,9,7,10,11]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [[1,2,3,4,5,6]]\n<strong>输出：</strong>[1,2,3,4,5,6]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= nums[i].length &lt;=&nbsp;10^5</code></li> \n <li><code>1 &lt;= nums[i][j] &lt;= 10^9</code></li> \n <li><code>nums</code>&nbsp;中最多有&nbsp;<code>10^5</code>&nbsp;个数字。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1425. 带限制的子序列和', '<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;，请你返回 <strong>非空</strong>&nbsp;子序列元素和的最大值，子序列需要满足：子序列中每两个 <strong>相邻</strong>&nbsp;的整数&nbsp;<code>nums[i]</code>&nbsp;和&nbsp;<code>nums[j]</code>&nbsp;，它们在原数组中的下标&nbsp;<code>i</code>&nbsp;和&nbsp;<code>j</code>&nbsp;满足&nbsp;<code>i &lt; j</code>&nbsp;且 <code>j - i &lt;= k</code> 。</p> \n<p>数组的子序列定义为：将数组中的若干个数字删除（可以删除 0 个数字），剩下的数字按照原本的顺序排布。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [10,2,-10,5,20], k = 2\n<strong>输出：</strong>37\n<strong>解释：</strong>子序列为 [10, 2, 5, 20] 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [-1,-2,-3], k = 1\n<strong>输出：</strong>-1\n<strong>解释：</strong>子序列必须是非空的，所以我们选择最大的数字。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [10,-2,-10,-5,20], k = 2\n<strong>输出：</strong>23\n<strong>解释：</strong>子序列为 [10, -2, -5, 20] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= nums.length &lt;= 10^5</code></li> \n <li><code>-10^4&nbsp;&lt;= nums[i] &lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('143. 重排链表', '<p>给定一个单链表 <code>L</code><em> </em>的头节点 <code>head</code> ，单链表 <code>L</code> 表示为：</p> \n<p><code>&nbsp;L<sub>0&nbsp;</sub>→ L<sub>1&nbsp;</sub>→ … → L<sub>n-1&nbsp;</sub>→ L<sub>n&nbsp;</sub></code><br> 请将其重新排列后变为：</p> \n<p><code>L<sub>0&nbsp;</sub>→&nbsp;L<sub>n&nbsp;</sub>→&nbsp;L<sub>1&nbsp;</sub>→&nbsp;L<sub>n-1&nbsp;</sub>→&nbsp;L<sub>2&nbsp;</sub>→&nbsp;L<sub>n-2&nbsp;</sub>→ …</code></p> \n<p>不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<p><img style=\"width: 240px;\" src=\"https://pic.leetcode-cn.com/1626420311-PkUiGI-image.png\" alt=\"\"></p> \n<pre><strong>输入: </strong>head = [1,2,3,4]\n<strong>输出: </strong>[1,4,2,3]</pre> \n<p><strong>示例 2:</strong></p> \n<p><img style=\"width: 320px;\" src=\"https://pic.leetcode-cn.com/1626420320-YUiulT-image.png\" alt=\"\"></p> \n<pre><strong>输入: </strong>head = [1,2,3,4,5]\n<strong>输出: </strong>[1,5,2,4,3]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表的长度范围为 <code>[1, 5 * 10<sup>4</sup>]</code></li> \n <li><code>1 &lt;= node.val &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1431. 拥有最多糖果的孩子', '<p>给你一个数组&nbsp;<code>candies</code>&nbsp;和一个整数&nbsp;<code>extraCandies</code>&nbsp;，其中&nbsp;<code>candies[i]</code>&nbsp;代表第 <code>i</code> 个孩子拥有的糖果数目。</p> \n<p>对每一个孩子，检查是否存在一种方案，将额外的&nbsp;<code>extraCandies</code>&nbsp;个糖果分配给孩子们之后，此孩子有 <strong>最多</strong>&nbsp;的糖果。注意，允许有多个孩子同时拥有 <strong>最多</strong>&nbsp;的糖果数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>candies = [2,3,5,1,3], extraCandies = 3\n<strong>输出：</strong>[true,true,true,false,true] \n<strong>解释：</strong>\n孩子 1 有 2 个糖果，如果他得到所有额外的糖果（3个），那么他总共有 5 个糖果，他将成为拥有最多糖果的孩子。\n孩子 2 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n孩子 3 有 5 个糖果，他已经是拥有最多糖果的孩子。\n孩子 4 有 1 个糖果，即使他得到所有额外的糖果，他也只有 4 个糖果，无法成为拥有糖果最多的孩子。\n孩子 5 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>candies = [4,2,1,1,2], extraCandies = 1\n<strong>输出：</strong>[true,false,false,false,false] \n<strong>解释：</strong>只有 1 个额外糖果，所以不管额外糖果给谁，只有孩子 1 可以成为拥有糖果最多的孩子。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>candies = [12,1,12], extraCandies = 10\n<strong>输出：</strong>[true,false,true]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= candies.length &lt;= 100</code></li> \n <li><code>1 &lt;= candies[i] &lt;= 100</code></li> \n <li><code>1 &lt;= extraCandies &lt;= 50</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1432. 改变一个整数能得到的最大差值', '<p>给你一个整数&nbsp;<code>num</code>&nbsp;。你可以对它进行如下步骤恰好 <strong>两次</strong>&nbsp;：</p> \n<ul> \n <li>选择一个数字&nbsp;<code>x (0&nbsp;&lt;= x &lt;= 9)</code>.</li> \n <li>选择另一个数字&nbsp;<code>y (0&nbsp;&lt;= y &lt;= 9)</code>&nbsp;。数字&nbsp;<code>y</code>&nbsp;可以等于&nbsp;<code>x</code>&nbsp;。</li> \n <li>将 <code>num</code>&nbsp;中所有出现 <code>x</code>&nbsp;的数位都用 <code>y</code>&nbsp;替换。</li> \n <li>得到的新的整数 <strong>不能</strong>&nbsp;有前导 0 ，得到的新整数也 <strong>不能</strong>&nbsp;是 0&nbsp;。</li> \n</ul> \n<p>令两次对 <code>num</code>&nbsp;的操作得到的结果分别为&nbsp;<code>a</code>&nbsp;和&nbsp;<code>b</code>&nbsp;。</p> \n<p>请你返回&nbsp;<code>a</code> 和&nbsp;<code>b</code>&nbsp;的 <strong>最大差值</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>num = 555\n<strong>输出：</strong>888\n<strong>解释：</strong>第一次选择 x = 5 且 y = 9 ，并把得到的新数字保存在 a 中。\n第二次选择 x = 5 且 y = 1 ，并把得到的新数字保存在 b 中。\n现在，我们有 a = 999 和 b = 111 ，最大差值为 888\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>num = 9\n<strong>输出：</strong>8\n<strong>解释：</strong>第一次选择 x = 9 且 y = 9 ，并把得到的新数字保存在 a 中。\n第二次选择 x = 9 且 y = 1 ，并把得到的新数字保存在 b 中。\n现在，我们有 a = 9 和 b = 1 ，最大差值为 8\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>num = 123456\n<strong>输出：</strong>820000\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>num = 10000\n<strong>输出：</strong>80000\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>num = 9288\n<strong>输出：</strong>8700\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= num &lt;= 10^8</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1433. 检查一个字符串是否可以打破另一个字符串', '<p>给你两个字符串&nbsp;<code>s1</code>&nbsp;和&nbsp;<code>s2</code>&nbsp;，它们长度相等，请你检查是否存在一个&nbsp;<code>s1</code>&nbsp; 的排列可以打破 <code>s2</code>&nbsp;的一个排列，或者是否存在一个&nbsp;<code>s2</code>&nbsp;的排列可以打破 <code>s1</code> 的一个排列。</p> \n<p>字符串&nbsp;<code>x</code>&nbsp;可以打破字符串&nbsp;<code>y</code>&nbsp;（两者长度都为&nbsp;<code>n</code>&nbsp;）需满足对于所有&nbsp;<code>i</code>（在&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;之间）都有&nbsp;<code>x[i] &gt;= y[i]</code>（字典序意义下的顺序）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s1 = \"abc\", s2 = \"xya\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\"ayx\" 是 s2=\"xya\" 的一个排列，\"abc\" 是字符串 s1=\"abc\" 的一个排列，且 \"ayx\" 可以打破 \"abc\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s1 = \"abe\", s2 = \"acd\"\n<strong>输出：</strong>false \n<strong>解释：</strong>s1=\"abe\" 的所有排列包括：\"abe\"，\"aeb\"，\"bae\"，\"bea\"，\"eab\" 和 \"eba\" ，s2=\"acd\" 的所有排列包括：\"acd\"，\"adc\"，\"cad\"，\"cda\"，\"dac\" 和 \"dca\"。然而没有任何 s1 的排列可以打破 s2 的排列。也没有 s2 的排列能打破 s1 的排列。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s1 = \"leetcodee\", s2 = \"interview\"\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>s1.length == n</code></li> \n <li><code>s2.length == n</code></li> \n <li><code>1 &lt;= n &lt;= 10^5</code></li> \n <li>所有字符串都只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1434. 每个人戴不同帽子的方案数', '<p>总共有 <code>n</code>&nbsp;个人和 <code>40</code> 种不同的帽子，帽子编号从 <code>1</code> 到 <code>40</code> 。</p> \n<p>给你一个整数列表的列表&nbsp;<code>hats</code>&nbsp;，其中&nbsp;<code>hats[i]</code>&nbsp;是第 <code>i</code>&nbsp;个人所有喜欢帽子的列表。</p> \n<p>请你给每个人安排一顶他喜欢的帽子，确保每个人戴的帽子跟别人都不一样，并返回方案数。</p> \n<p>由于答案可能很大，请返回它对&nbsp;<code>10^9 + 7</code>&nbsp;取余后的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>hats = [[3,4],[4,5],[5]]\n<strong>输出：</strong>1\n<strong>解释：</strong>给定条件下只有一种方法选择帽子。\n第一个人选择帽子 3，第二个人选择帽子 4，最后一个人选择帽子 5。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>hats = [[3,5,1],[3,5]]\n<strong>输出：</strong>4\n<strong>解释：</strong>总共有 4 种安排帽子的方法：\n(3,5)，(5,3)，(1,3) 和 (1,5)\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\n<strong>输出：</strong>24\n<strong>解释：</strong>每个人都可以从编号为 1 到 4 的帽子中选。\n(1,2,3,4) 4 个帽子的排列方案数为 24 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>hats = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]]\n<strong>输出：</strong>111\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == hats.length</code></li> \n <li><code>1 &lt;= n &lt;= 10</code></li> \n <li><code>1 &lt;= hats[i].length &lt;= 40</code></li> \n <li><code>1 &lt;= hats[i][j] &lt;= 40</code></li> \n <li><code>hats[i]</code>&nbsp;包含一个数字互不相同的整数列表。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1436. 旅行终点站', '<p>给你一份旅游线路图，该线路图中的旅行线路用数组 <code>paths</code> 表示，其中 <code>paths[i] = [cityA<sub>i</sub>, cityB<sub>i</sub>]</code> 表示该线路将会从 <code>cityA<sub>i</sub></code> 直接前往 <code>cityB<sub>i</sub></code> 。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市<em>。</em></p> \n<p>题目数据保证线路图会形成一条不存在循环的线路，因此只会有一个旅行终点站。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]\n<strong>输出：</strong>\"Sao Paulo\" \n<strong>解释：</strong>从 \"London\" 出发，最后抵达终点站 \"Sao Paulo\" 。本次旅行的路线是 \"London\" -&gt; \"New York\" -&gt; \"Lima\" -&gt; \"Sao Paulo\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]\n<strong>输出：</strong>\"A\"\n<strong>解释：</strong>所有可能的线路是：\n\"D\" -&gt; \"B\" -&gt; \"C\" -&gt; \"A\".&nbsp;\n\"B\" -&gt; \"C\" -&gt; \"A\".&nbsp;\n\"C\" -&gt; \"A\".&nbsp;\n\"A\".&nbsp;\n显然，旅行终点站是 \"A\" 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>paths = [[\"A\",\"Z\"]]\n<strong>输出：</strong>\"Z\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= paths.length &lt;= 100</code></li> \n <li><code>paths[i].length == 2</code></li> \n <li><code>1 &lt;=&nbsp;cityA<sub>i</sub>.length,&nbsp;cityB<sub>i</sub>.length &lt;= 10</code></li> \n <li><code>cityA<sub>i&nbsp;</sub>!=&nbsp;cityB<sub>i</sub></code></li> \n <li>所有字符串均由大小写英文字母和空格字符组成。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1437. 是否所有 1 都至少相隔 k 个元素', '<p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的数组 <code>nums</code> 以及整数 <code>k</code>。如果所有 <code>1</code> 都至少相隔 <code>k</code> 个元素，则返回 <code>True</code> ；否则，返回 <code>False</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"width: 214px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/03/sample_1_1791.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>nums = [1,0,0,0,1,0,0,1], k = 2\n<strong>输出：</strong>true\n<strong>解释：</strong>每个 1 都至少相隔 2 个元素。</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 86px; width: 160px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/03/sample_2_1791.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>nums = [1,0,0,1,0,1], k = 2\n<strong>输出：</strong>false\n<strong>解释：</strong>第二个 1 和第三个 1 之间只隔了 1 个元素。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,1,1,1], k = 0\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [0,1,0,1], k = 1\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10^5</code></li> \n <li><code>0 &lt;= k &lt;= nums.length</code></li> \n <li><code>nums[i]</code> 的值为 <code>0</code> 或 <code>1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1438. 绝对差不超过限制的最长连续子数组', '<p>给你一个整数数组 <code>nums</code> ，和一个表示限制的整数 <code>limit</code>，请你返回最长连续子数组的长度，该子数组中的任意两个元素之间的绝对差必须小于或者等于 <code>limit</code><em> 。</em></p> \n<p>如果不存在满足条件的子数组，则返回 <code>0</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [8,2,4,7], limit = 4\n<strong>输出：</strong>2 \n<strong>解释：</strong>所有子数组如下：\n[8] 最大绝对差 |8-8| = 0 &lt;= 4.\n[8,2] 最大绝对差 |8-2| = 6 &gt; 4. \n[8,2,4] 最大绝对差 |8-2| = 6 &gt; 4.\n[8,2,4,7] 最大绝对差 |8-2| = 6 &gt; 4.\n[2] 最大绝对差 |2-2| = 0 &lt;= 4.\n[2,4] 最大绝对差 |2-4| = 2 &lt;= 4.\n[2,4,7] 最大绝对差 |2-7| = 5 &gt; 4.\n[4] 最大绝对差 |4-4| = 0 &lt;= 4.\n[4,7] 最大绝对差 |4-7| = 3 &lt;= 4.\n[7] 最大绝对差 |7-7| = 0 &lt;= 4. \n因此，满足题意的最长子数组的长度为 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [10,1,2,4,7,2], limit = 5\n<strong>输出：</strong>4 \n<strong>解释：</strong>满足题意的最长子数组是 [2,4,7,2]，其最大绝对差 |2-7| = 5 &lt;= 5 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [4,2,2,2,4,4,2,2], limit = 0\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10^9</code></li> \n <li><code>0 &lt;= limit &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1439. 有序矩阵中的第 k 个最小数组和', '<p>给你一个 <code>m&nbsp;* n</code> 的矩阵 <code>mat</code>，以及一个整数 <code>k</code> ，矩阵中的每一行都以非递减的顺序排列。</p> \n<p>你可以从每一行中选出 1 个元素形成一个数组。返回所有可能数组中的第 k 个 <strong>最小</strong> 数组和。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>mat = [[1,3,11],[2,4,6]], k = 5\n<strong>输出：</strong>7\n<strong>解释：</strong>从每一行中选出一个元素，前 k 个和最小的数组分别是：\n[1,2], [1,4], [3,2], [3,4], [1,6]。其中第 5 个的和是 7 。  </pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>mat = [[1,3,11],[2,4,6]], k = 9\n<strong>输出：</strong>17\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7\n<strong>输出：</strong>9\n<strong>解释：</strong>从每一行中选出一个元素，前 k 个和最小的数组分别是：\n[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]。其中第 7 个的和是 9 。 \n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>mat = [[1,1,10],[2,2,9]], k = 7\n<strong>输出：</strong>12\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == mat.length</code></li> \n <li><code>n == mat.length[i]</code></li> \n <li><code>1 &lt;= m, n &lt;= 40</code></li> \n <li><code>1 &lt;= k &lt;= min(200, n ^&nbsp;m)</code></li> \n <li><code>1 &lt;= mat[i][j] &lt;= 5000</code></li> \n <li><code>mat[i]</code> 是一个非递减数组</li> \n</ul>');
INSERT INTO `leecode` VALUES ('144. 二叉树的前序遍历', '<p>给你二叉树的根节点 <code>root</code> ，返回它节点值的&nbsp;<strong>前序</strong><em>&nbsp;</em>遍历。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 202px; height: 324px;\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,null,2,3]\n<strong>输出：</strong>[1,2,3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = []\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [1]\n<strong>输出：</strong>[1]\n</pre> \n<p><strong>示例 4：</strong></p> \n<img style=\"width: 202px; height: 202px;\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_5.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,2]\n<strong>输出：</strong>[1,2]\n</pre> \n<p><strong>示例 5：</strong></p> \n<img style=\"width: 202px; height: 202px;\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_4.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,null,2]\n<strong>输出：</strong>[1,2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点数目在范围 <code>[0, 100]</code> 内</li> \n <li><code>-100 &lt;= Node.val &lt;= 100</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>递归算法很简单，你可以通过迭代算法完成吗？</p>');
INSERT INTO `leecode` VALUES ('1441. 用栈操作构建数组', '<p>给你一个目标数组 <code>target</code> 和一个整数 <code>n</code>。每次迭代，需要从&nbsp; <code>list = {1,2,3..., n}</code> 中依序读取一个数字。</p> \n<p>请使用下述操作来构建目标数组 <code>target</code> ：</p> \n<ul> \n <li><strong>Push</strong>：从 <code>list</code> 中读取一个新元素， 并将其推入数组中。</li> \n <li><strong>Pop</strong>：删除数组中的最后一个元素。</li> \n <li>如果目标数组构建完成，就停止读取更多元素。</li> \n</ul> \n<p>题目数据保证目标数组严格递增，并且只包含 <code>1</code> 到 <code>n</code> 之间的数字。</p> \n<p>请返回构建目标数组所用的操作序列。</p> \n<p>题目数据保证答案是唯一的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>target = [1,3], n = 3\n<strong>输出：</strong>[\"Push\",\"Push\",\"Pop\",\"Push\"]\n<strong>解释： \n</strong>读取 1 并自动推入数组 -&gt; [1]\n读取 2 并自动推入数组，然后删除它 -&gt; [1]\n读取 3 并自动推入数组 -&gt; [1,3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>target = [1,2,3], n = 3\n<strong>输出：</strong>[\"Push\",\"Push\",\"Push\"]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>target = [1,2], n = 4\n<strong>输出：</strong>[\"Push\",\"Push\"]\n<strong>解释：</strong>只需要读取前 2 个数字就可以停止。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>target = [2,3,4], n = 4\n<strong>输出：</strong>[\"Push\",\"Pop\",\"Push\",\"Push\",\"Push\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= target.length &lt;= 100</code></li> \n <li><code>1 &lt;= target[i]&nbsp;&lt;= 100</code></li> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>target</code> 是严格递增的</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1442. 形成两个异或相等数组的三元组数目', '<p>给你一个整数数组 <code>arr</code> 。</p> \n<p>现需要从数组中取三个下标 <code>i</code>、<code>j</code> 和 <code>k</code> ，其中 <code>(0 &lt;= i &lt; j &lt;= k &lt; arr.length)</code> 。</p> \n<p><code>a</code> 和 <code>b</code> 定义如下：</p> \n<ul> \n <li><code>a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]</code></li> \n <li><code>b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]</code></li> \n</ul> \n<p>注意：<strong>^</strong> 表示 <strong>按位异或</strong> 操作。</p> \n<p>请返回能够令 <code>a == b</code> 成立的三元组 (<code>i</code>, <code>j</code> , <code>k</code>) 的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [2,3,1,6,7]\n<strong>输出：</strong>4\n<strong>解释：</strong>满足题意的三元组分别是 (0,1,2), (0,2,2), (2,3,4) 以及 (2,4,4)\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,1,1,1,1]\n<strong>输出：</strong>10\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [2,3]\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [1,3,5,7,9]\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>arr = [7,11,12,9,5,2,7,17,22]\n<strong>输出：</strong>8\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 300</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 10^8</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1443. 收集树上所有苹果的最少时间', '<p>给你一棵有&nbsp;<code>n</code>&nbsp;个节点的无向树，节点编号为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>&nbsp;，它们中有一些节点有苹果。通过树上的一条边，需要花费 1 秒钟。你从&nbsp;<strong>节点 0&nbsp;</strong>出发，请你返回最少需要多少秒，可以收集到所有苹果，并回到节点 0 。</p> \n<p>无向树的边由&nbsp;<code>edges</code>&nbsp;给出，其中&nbsp;<code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>]</code>&nbsp;，表示有一条边连接&nbsp;<code>from</code>&nbsp;和&nbsp;<code>to<sub>i</sub></code> 。除此以外，还有一个布尔数组&nbsp;<code>hasApple</code> ，其中&nbsp;<code>hasApple[i] = true</code>&nbsp;代表节点&nbsp;<code>i</code>&nbsp;有一个苹果，否则，节点&nbsp;<code>i</code>&nbsp;没有苹果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 212px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/10/min_time_collect_apple_1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]\n<strong>输出：</strong>8 \n<strong>解释：</strong>上图展示了给定的树，其中红色节点表示有苹果。一个能收集到所有苹果的最优方案由绿色箭头表示。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 212px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/10/min_time_collect_apple_2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]\n<strong>输出：</strong>6\n<strong>解释：</strong>上图展示了给定的树，其中红色节点表示有苹果。一个能收集到所有苹果的最优方案由绿色箭头表示。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^5</code></li> \n <li><code>edges.length == n-1</code></li> \n <li><code>edges[i].length == 2</code></li> \n <li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt;= n-1</code></li> \n <li><code>from<sub>i</sub>&nbsp;&lt; to<sub>i</sub></code></li> \n <li><code>hasApple.length == n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1444. 切披萨的方案数', '<p>给你一个&nbsp;<code>rows x cols</code>&nbsp;大小的矩形披萨和一个整数 <code>k</code>&nbsp;，矩形包含两种字符：&nbsp;<code>\'A\'</code> （表示苹果）和&nbsp;<code>\'.\'</code>&nbsp;（表示空白格子）。你需要切披萨 <code>k-1</code> 次，得到&nbsp;<code>k</code>&nbsp;块披萨并送给别人。</p> \n<p>切披萨的每一刀，先要选择是向垂直还是水平方向切，再在矩形的边界上选一个切的位置，将披萨一分为二。如果垂直地切披萨，那么需要把左边的部分送给一个人，如果水平地切，那么需要把上面的部分送给一个人。在切完最后一刀后，需要把剩下来的一块送给最后一个人。</p> \n<p>请你返回确保每一块披萨包含&nbsp;<strong>至少</strong>&nbsp;一个苹果的切披萨方案数。由于答案可能是个很大的数字，请你返回它对 10^9 + 7 取余的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 378px; width: 500px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/10/ways_to_cut_apple_1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>pizza = [\"A..\",\"AAA\",\"...\"], k = 3\n<strong>输出：</strong>3 \n<strong>解释：</strong>上图展示了三种切披萨的方案。注意每一块披萨都至少包含一个苹果。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>pizza = [\"A..\",\"AA.\",\"...\"], k = 3\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>pizza = [\"A..\",\"A..\",\"...\"], k = 1\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= rows, cols &lt;= 50</code></li> \n <li><code>rows ==&nbsp;pizza.length</code></li> \n <li><code>cols ==&nbsp;pizza[i].length</code></li> \n <li><code>1 &lt;= k &lt;= 10</code></li> \n <li><code>pizza</code>&nbsp;只包含字符&nbsp;<code>\'A\'</code>&nbsp;和&nbsp;<code>\'.\'</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1446. 连续字符', '<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，字符串的「能量」定义为：只包含一种字符的最长非空子字符串的长度。</p> \n<p>请你返回字符串的能量。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"leetcode\"\n<strong>输出：</strong>2\n<strong>解释：</strong>子字符串 \"ee\" 长度为 2 ，只包含字符 \'e\' 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abbcccddddeeeeedcba\"\n<strong>输出：</strong>5\n<strong>解释：</strong>子字符串 \"eeeee\" 长度为 5 ，只包含字符 \'e\' 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"triplepillooooow\"\n<strong>输出：</strong>5\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"hooraaaaaaaaaaay\"\n<strong>输出：</strong>11\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>s = \"tourist\"\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 500</code></li> \n <li><code>s</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1447. 最简分数', '<p>给你一个整数&nbsp;<code>n</code>&nbsp;，请你返回所有 0 到 1 之间（不包括 0 和 1）满足分母小于等于&nbsp;&nbsp;<code>n</code>&nbsp;的 <strong>最简&nbsp;</strong>分数&nbsp;。分数可以以 <strong>任意&nbsp;</strong>顺序返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>[\"1/2\"]\n<strong>解释：</strong>\"1/2\" 是唯一一个分母小于等于 2 的最简分数。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>[\"1/2\",\"1/3\",\"2/3\"]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 4\n<strong>输出：</strong>[\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]\n<strong>解释：</strong>\"2/4\" 不是最简分数，因为它可以化简为 \"1/2\" 。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1448. 统计二叉树中好节点的数目', '<p>给你一棵根为&nbsp;<code>root</code>&nbsp;的二叉树，请你返回二叉树中好节点的数目。</p> \n<p>「好节点」X 定义为：从根到该节点 X 所经过的节点中，没有任何节点的值大于 X 的值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 156px; width: 263px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/16/test_sample_1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [3,1,4,3,null,1,5]\n<strong>输出：</strong>4\n<strong>解释：</strong>图中蓝色节点为好节点。\n根节点 (3) 永远是个好节点。\n节点 4 -&gt; (3,4) 是路径中的最大值。\n节点 5 -&gt; (3,4,5) 是路径中的最大值。\n节点 3 -&gt; (3,1,3) 是路径中的最大值。</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 161px; width: 157px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/16/test_sample_2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [3,3,null,4,2]\n<strong>输出：</strong>3\n<strong>解释：</strong>节点 2 -&gt; (3, 3, 2) 不是好节点，因为 \"3\" 比它大。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [1]\n<strong>输出：</strong>1\n<strong>解释：</strong>根节点是好节点。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>二叉树中节点数目范围是&nbsp;<code>[1, 10^5]</code>&nbsp;。</li> \n <li>每个节点权值的范围是&nbsp;<code>[-10^4, 10^4]</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1449. 数位成本和为目标值的最大数字', '<p>给你一个整数数组&nbsp;<code>cost</code>&nbsp;和一个整数&nbsp;<code>target</code>&nbsp;。请你返回满足如下规则可以得到的&nbsp;<strong>最大</strong>&nbsp;整数：</p> \n<ul> \n <li>给当前结果添加一个数位（<code>i + 1</code>）的成本为&nbsp;<code>cost[i]</code>&nbsp;（<code>cost</code>&nbsp;数组下标从 0 开始）。</li> \n <li>总成本必须恰好等于&nbsp;<code>target</code>&nbsp;。</li> \n <li>添加的数位中没有数字 0 。</li> \n</ul> \n<p>由于答案可能会很大，请你以字符串形式返回。</p> \n<p>如果按照上述要求无法得到任何整数，请你返回 \"0\" 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>cost = [4,3,2,5,6,7,2,5,5], target = 9\n<strong>输出：</strong>\"7772\"\n<strong>解释：</strong>添加数位 \'7\' 的成本为 2 ，添加数位 \'2\' 的成本为 3 。所以 \"7772\" 的代价为 2*3+ 3*1 = 9 。 \"977\" 也是满足要求的数字，但 \"7772\" 是较大的数字。\n<strong> 数字     成本</strong>\n  1  -&gt;   4\n  2  -&gt;   3\n  3  -&gt;   2\n  4  -&gt;   5\n  5  -&gt;   6\n  6  -&gt;   7\n  7  -&gt;   2\n  8  -&gt;   5\n  9  -&gt;   5\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>cost = [7,6,5,5,5,6,8,7,8], target = 12\n<strong>输出：</strong>\"85\"\n<strong>解释：</strong>添加数位 \'8\' 的成本是 7 ，添加数位 \'5\' 的成本是 5 。\"85\" 的成本为 7 + 5 = 12 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>cost = [2,4,6,2,4,6,4,4,4], target = 5\n<strong>输出：</strong>\"0\"\n<strong>解释：</strong>总成本是 target 的条件下，无法生成任何整数。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>cost = [6,10,15,40,40,40,40,40,40], target = 47\n<strong>输出：</strong>\"32211\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>cost.length == 9</code></li> \n <li><code>1 &lt;= cost[i] &lt;= 5000</code></li> \n <li><code>1 &lt;= target &lt;= 5000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('145. 二叉树的后序遍历', '<p>给定一个二叉树，返回它的 <em>后序&nbsp;</em>遍历。</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \n\n<strong>输出:</strong> [3,2,1]</pre> \n<p><strong>进阶:</strong>&nbsp;递归算法很简单，你可以通过迭代算法完成吗？</p>');
INSERT INTO `leecode` VALUES ('1450. 在既定时间做作业的学生人数', '<p>给你两个整数数组 <code>startTime</code>（开始时间）和 <code>endTime</code>（结束时间），并指定一个整数 <code>queryTime</code> 作为查询时间。</p> \n<p>已知，第 <code>i</code> 名学生在 <code>startTime[i]</code> 时开始写作业并于 <code>endTime[i]</code> 时完成作业。</p> \n<p>请返回在查询时间 <code>queryTime</code> 时正在做作业的学生人数。形式上，返回能够使 <code>queryTime</code> 处于区间 <code>[startTime[i], endTime[i]]</code>（含）的学生人数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>startTime = [1,2,3], endTime = [3,2,7], queryTime = 4\n<strong>输出：</strong>1\n<strong>解释：</strong>一共有 3 名学生。\n第一名学生在时间 1 开始写作业，并于时间 3 完成作业，在时间 4 没有处于做作业的状态。\n第二名学生在时间 2 开始写作业，并于时间 2 完成作业，在时间 4 没有处于做作业的状态。\n第三名学生在时间 3 开始写作业，预计于时间 7 完成作业，这是是唯一一名在时间 4 时正在做作业的学生。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>startTime = [4], endTime = [4], queryTime = 4\n<strong>输出：</strong>1\n<strong>解释：</strong>在查询时间只有一名学生在做作业。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>startTime = [4], endTime = [4], queryTime = 5\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>startTime = [1,1,1,1], endTime = [1,3,2,4], queryTime = 7\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>startTime = [9,8,7,6,5,4,3,2,1], endTime = [10,10,10,10,10,10,10,10,10], queryTime = 5\n<strong>输出：</strong>5\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>startTime.length == endTime.length</code></li> \n <li><code>1 &lt;= startTime.length &lt;= 100</code></li> \n <li><code>1 &lt;= startTime[i] &lt;= endTime[i] &lt;= 1000</code></li> \n <li><code>1 &lt;=&nbsp;queryTime &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1451. 重新排列句子中的单词', '<p>「句子」是一个用空格分隔单词的字符串。给你一个满足下述格式的句子 <code>text</code> :</p> \n<ul> \n <li>句子的首字母大写</li> \n <li><code>text</code> 中的每个单词都用单个空格分隔。</li> \n</ul> \n<p>请你重新排列 <code>text</code> 中的单词，使所有单词按其长度的升序排列。如果两个单词的长度相同，则保留其在原句子中的相对顺序。</p> \n<p>请同样按上述格式返回新的句子。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>text = \"Leetcode is cool\"\n<strong>输出：</strong>\"Is cool leetcode\"\n<strong>解释：</strong>句子中共有 3 个单词，长度为 8 的 \"Leetcode\" ，长度为 2 的 \"is\" 以及长度为 4 的 \"cool\" 。\n输出需要按单词的长度升序排列，新句子中的第一个单词首字母需要大写。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>text = \"Keep calm and code on\"\n<strong>输出：</strong>\"On and keep calm code\"\n<strong>解释：</strong>输出的排序情况如下：\n\"On\" 2 个字母。\n\"and\" 3 个字母。\n\"keep\" 4 个字母，因为存在长度相同的其他单词，所以它们之间需要保留在原句子中的相对顺序。\n\"calm\" 4 个字母。\n\"code\" 4 个字母。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>text = \"To be or not to be\"\n<strong>输出：</strong>\"To be or to be not\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>text</code> 以大写字母开头，然后包含若干小写字母以及单词间的单个空格。</li> \n <li><code>1 &lt;= text.length &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1452. 收藏清单', '<p>给你一个数组 <code>favoriteCompanies</code> ，其中 <code>favoriteCompanies[i]</code> 是第 <code>i</code> 名用户收藏的公司清单（<strong>下标从 0 开始</strong>）。</p> \n<p>请找出不是其他任何人收藏的公司清单的子集的收藏清单，并返回该清单下标<em>。</em>下标需要按升序排列<em>。</em></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]\n<strong>输出：</strong>[0,1,4] \n<strong>解释：</strong>\nfavoriteCompanies[2]=[\"google\",\"facebook\"] 是 favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] 的子集。\nfavoriteCompanies[3]=[\"google\"] 是 favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] 和 favoriteCompanies[1]=[\"google\",\"microsoft\"] 的子集。\n其余的收藏清单均不是其他任何人收藏的公司清单的子集，因此，答案为 [0,1,4] 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]]\n<strong>输出：</strong>[0,1] \n<strong>解释：</strong>favoriteCompanies[2]=[\"facebook\",\"google\"] 是 favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] 的子集，因此，答案为 [0,1] 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>favoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]\n<strong>输出：</strong>[0,1,2,3]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;favoriteCompanies.length &lt;= 100</code></li> \n <li><code>1 &lt;=&nbsp;favoriteCompanies[i].length &lt;= 500</code></li> \n <li><code>1 &lt;=&nbsp;favoriteCompanies[i][j].length &lt;= 20</code></li> \n <li><code>favoriteCompanies[i]</code> 中的所有字符串 <strong>各不相同</strong> 。</li> \n <li>用户收藏的公司清单也 <strong>各不相同</strong> ，也就是说，即便我们按字母顺序排序每个清单， <code>favoriteCompanies[i] != favoriteCompanies[j] </code>仍然成立。</li> \n <li>所有字符串仅包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1453. 圆形靶内的最大飞镖数量', '<p>墙壁上挂着一个圆形的飞镖靶。现在请你蒙着眼睛向靶上投掷飞镖。</p> \n<p>投掷到墙上的飞镖用二维平面上的点坐标数组表示。飞镖靶的半径为 <code>r</code> 。</p> \n<p>请返回能够落在 <strong>任意</strong> 半径为 <code>r</code> 的圆形靶内或靶上的最大飞镖数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 159px; width: 186px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/16/sample_1_1806.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\n<strong>输出：</strong>4\n<strong>解释：</strong>如果圆形的飞镖靶的圆心为 (0,0) ，半径为 2 ，所有的飞镖都落在靶上，此时落在靶上的飞镖数最大，值为 4 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 183px; width: 224px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/16/sample_2_1806.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\n<strong>输出：</strong>5\n<strong>解释：</strong>如果圆形的飞镖靶的圆心为 (0,4) ，半径为 5 ，则除了 (7,8) 之外的飞镖都落在靶上，此时落在靶上的飞镖数最大，值为 5 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= points.length &lt;= 100</code></li> \n <li><code>points[i].length == 2</code></li> \n <li><code>-10^4 &lt;= points[i][0], points[i][1] &lt;= 10^4</code></li> \n <li><code>1 &lt;= r &lt;= 5000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1455. 检查单词是否为句中其他单词的前缀', '<p>给你一个字符串 <code>sentence</code> 作为句子并指定检索词为 <code>searchWord</code> ，其中句子由若干用 <strong>单个空格</strong> 分隔的单词组成。</p> \n<p>请你检查检索词 <code>searchWord</code> 是否为句子 <code>sentence</code> 中任意单词的前缀。</p> \n<ul> \n <li>如果&nbsp;<code>searchWord</code> 是某一个单词的前缀，则返回句子&nbsp;<code>sentence</code> 中该单词所对应的下标（<strong>下标从 1 开始</strong>）。</li> \n <li>如果 <code>searchWord</code> 是多个单词的前缀，则返回匹配的第一个单词的下标（<strong>最小下标</strong>）。</li> \n <li>如果 <code>searchWord</code> 不是任何单词的前缀，则返回 <strong>-1 </strong>。</li> \n</ul> \n<p>字符串 <code>S</code> 的 <strong>前缀</strong> 是 <code>S</code> 的任何前导连续子字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>sentence = \"i love eating burger\", searchWord = \"burg\"\n<strong>输出：</strong>4\n<strong>解释：</strong>\"burg\" 是 \"burger\" 的前缀，而 \"burger\" 是句子中第 4 个单词。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>sentence = \"this problem is an easy problem\", searchWord = \"pro\"\n<strong>输出：</strong>2\n<strong>解释：</strong>\"pro\" 是 \"problem\" 的前缀，而 \"problem\" 是句子中第 2 个也是第 6 个单词，但是应该返回最小下标 2 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>sentence = \"i am tired\", searchWord = \"you\"\n<strong>输出：</strong>-1\n<strong>解释：</strong>\"you\" 不是句子中任何单词的前缀。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>sentence = \"i use triple pillow\", searchWord = \"pill\"\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>sentence = \"hello from the other side\", searchWord = \"they\"\n<strong>输出：</strong>-1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= sentence.length &lt;= 100</code></li> \n <li><code>1 &lt;= searchWord.length &lt;= 10</code></li> \n <li><code>sentence</code> 由小写英文字母和空格组成。</li> \n <li><code>searchWord</code> 由小写英文字母组成。</li> \n <li>前缀就是紧密附着于词根的语素，中间不能插入其它成分，并且它的位置是固定的——-位于词根之前。（引用自 <a href=\"https://baike.baidu.com/item/%E5%89%8D%E7%BC%80\">前缀_百度百科</a> ）</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1456. 定长子串中元音的最大数目', '<p>给你字符串 <code>s</code> 和整数 <code>k</code> 。</p> \n<p>请返回字符串 <code>s</code> 中长度为 <code>k</code> 的单个子字符串中可能包含的最大元音字母数。</p> \n<p>英文中的 <strong>元音字母 </strong>为（<code>a</code>, <code>e</code>, <code>i</code>, <code>o</code>, <code>u</code>）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"abciiidef\", k = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>子字符串 \"iii\" 包含 3 个元音字母。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"aeiou\", k = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>任意长度为 2 的子字符串都包含 2 个元音字母。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"leetcode\", k = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>\"lee\"、\"eet\" 和 \"ode\" 都包含 2 个元音字母。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"rhythms\", k = 4\n<strong>输出：</strong>0\n<strong>解释：</strong>字符串 s 中不含任何元音字母。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>s = \"tryhard\", k = 4\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10^5</code></li> \n <li><code>s</code> 由小写英文字母组成</li> \n <li><code>1 &lt;= k &lt;= s.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1457. 二叉树中的伪回文路径', '<p>给你一棵二叉树，每个节点的值为 1 到 9 。我们称二叉树中的一条路径是 「<strong>伪回文</strong>」的，当它满足：路径经过的所有节点值的排列中，存在一个回文序列。</p> \n<p>请你返回从根到叶子节点的所有路径中&nbsp;<strong>伪回文&nbsp;</strong>路径的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 201px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/23/palindromic_paths_1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [2,3,1,3,1,null,1]\n<strong>输出：</strong>2 \n<strong>解释：</strong>上图为给定的二叉树。总共有 3 条从根到叶子的路径：红色路径 [2,3,3] ，绿色路径 [2,1,1] 和路径 [2,3,1] 。\n     在这些路径中，只有红色和绿色的路径是伪回文路径，因为红色路径 [2,3,3] 存在回文排列 [3,2,3] ，绿色路径 [2,1,1] 存在回文排列 [1,2,1] 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 314px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/23/palindromic_paths_2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [2,1,1,1,3,null,null,null,null,null,1]\n<strong>输出：</strong>1 \n<strong>解释：</strong>上图为给定二叉树。总共有 3 条从根到叶子的路径：绿色路径 [2,1,1] ，路径 [2,1,3,1] 和路径 [2,1] 。\n     这些路径中只有绿色路径是伪回文路径，因为 [2,1,1] 存在回文排列 [1,2,1] 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [9]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>给定二叉树的节点数目在&nbsp;<code>1</code>&nbsp;到&nbsp;<code>10^5</code>&nbsp;之间。</li> \n <li>节点值在&nbsp;<code>1</code> 到&nbsp;<code>9</code>&nbsp;之间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1458. 两个子序列的最大点积', '<p>给你两个数组&nbsp;<code>nums1</code>&nbsp;和&nbsp;<code>nums2</code>&nbsp;。</p> \n<p>请你返回 <code>nums1</code> 和 <code>nums2</code> 中两个长度相同的 <strong>非空</strong> 子序列的最大点积。</p> \n<p>数组的非空子序列是通过删除原数组中某些元素（可能一个也不删除）后剩余数字组成的序列，但不能改变数字间相对顺序。比方说，<code>[2,3,5]</code>&nbsp;是&nbsp;<code>[1,2,3,4,5]</code>&nbsp;的一个子序列而&nbsp;<code>[1,5,3]</code>&nbsp;不是。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums1 = [2,1,-2,5], nums2 = [3,0,-6]\n<strong>输出：</strong>18\n<strong>解释：</strong>从 nums1 中得到子序列 [2,-2] ，从 nums2 中得到子序列 [3,-6] 。\n它们的点积为 (2*3 + (-2)*(-6)) = 18 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums1 = [3,-2], nums2 = [2,-6,7]\n<strong>输出：</strong>21\n<strong>解释：</strong>从 nums1 中得到子序列 [3] ，从 nums2 中得到子序列 [7] 。\n它们的点积为 (3*7) = 21 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums1 = [-1,-1], nums2 = [1,1]\n<strong>输出：</strong>-1\n<strong>解释：</strong>从 nums1 中得到子序列 [-1] ，从 nums2 中得到子序列 [1] 。\n它们的点积为 -1 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums1.length, nums2.length &lt;= 500</code></li> \n <li><code>-1000 &lt;= nums1[i], nums2[i] &lt;= 100</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>点积：</strong></p> \n<pre>定义 <code><strong>a</strong>&nbsp;= [<em>a</em><sub>1</sub>,&nbsp;<em>a</em><sub>2</sub>,…,&nbsp;<em>a</em><sub><em>n</em></sub>]</code> 和<strong> <code>b</code></strong><code>&nbsp;= [<em>b</em><sub>1</sub>,&nbsp;<em>b</em><sub>2</sub>,…,&nbsp;<em>b</em><sub><em>n</em></sub>]</code> 的点积为：\n\n<img src=\"http://upload.wikimedia.org/math/c/3/2/c329bf86e747d74f55ed2e17c36fd83f.png\" class=\"tex\" alt=\"\\mathbf{a}\\cdot \\mathbf{b} = \\sum_{i=1}^n a_ib_i = a_1b_1 + a_2b_2 + \\cdots + a_nb_n\">\n\n这里的 <strong>Σ</strong> 指示总和符号。\n</pre>');
INSERT INTO `leecode` VALUES ('146. LRU 缓存机制', '<div class=\"title__3Vvk\">\n 运用你所掌握的数据结构，设计和实现一个&nbsp; \n <a href=\"https://baike.baidu.com/item/LRU\">LRU (最近最少使用) 缓存机制</a> 。\n</div> \n<div class=\"original__bRMd\"> \n <div> \n  <p>实现 <code>LRUCache</code> 类：</p> \n  <ul> \n   <li><code>LRUCache(int capacity)</code> 以正整数作为容量&nbsp;<code>capacity</code> 初始化 LRU 缓存</li> \n   <li><code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li> \n   <li><code>void put(int key, int value)</code>&nbsp;如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</li> \n  </ul> \n  <p>&nbsp;</p> \n </div> \n</div> \n<p><strong>进阶</strong>：你是否可以在&nbsp;<code>O(1)</code> 时间复杂度内完成这两种操作？</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入</strong>\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n<strong>输出</strong>\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\n<strong>解释</strong>\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // 缓存是 {1=1}\nlRUCache.put(2, 2); // 缓存是 {1=1, 2=2}\nlRUCache.get(1);    // 返回 1\nlRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}\nlRUCache.get(2);    // 返回 -1 (未找到)\nlRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}\nlRUCache.get(1);    // 返回 -1 (未找到)\nlRUCache.get(3);    // 返回 3\nlRUCache.get(4);    // 返回 4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= capacity &lt;= 3000</code></li> \n <li><code>0 &lt;= key &lt;= 10000</code></li> \n <li><code>0 &lt;= value &lt;= 10<sup>5</sup></code></li> \n <li>最多调用 <code>2 * 10<sup>5</sup></code> 次 <code>get</code> 和 <code>put</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1460. 通过翻转子数组使两个数组相等', '<p>给你两个长度相同的整数数组&nbsp;<code>target</code>&nbsp;和&nbsp;<code>arr</code>&nbsp;。</p> \n<p>每一步中，你可以选择&nbsp;<code>arr</code>&nbsp;的任意 <strong>非空子数组</strong>&nbsp;并将它翻转。你可以执行此过程任意次。</p> \n<p>如果你能让 <code>arr</code>&nbsp;变得与 <code>target</code>&nbsp;相同，返回 True；否则，返回 False 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>target = [1,2,3,4], arr = [2,4,1,3]\n<strong>输出：</strong>true\n<strong>解释：</strong>你可以按照如下步骤使 arr 变成 target：\n1- 翻转子数组 [2,4,1] ，arr 变成 [1,4,2,3]\n2- 翻转子数组 [4,2] ，arr 变成 [1,2,4,3]\n3- 翻转子数组 [4,3] ，arr 变成 [1,2,3,4]\n上述方法并不是唯一的，还存在多种将 arr 变成 target 的方法。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>target = [7], arr = [7]\n<strong>输出：</strong>true\n<strong>解释：</strong>arr 不需要做任何翻转已经与 target 相等。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>target = [1,12], arr = [12,1]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>target = [3,7,9], arr = [3,7,11]\n<strong>输出：</strong>false\n<strong>解释：</strong>arr 没有数字 9 ，所以无论如何也无法变成 target 。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>target = [1,1,1,1,1], arr = [1,1,1,1,1]\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>target.length == arr.length</code></li> \n <li><code>1 &lt;= target.length &lt;= 1000</code></li> \n <li><code>1 &lt;= target[i] &lt;= 1000</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1461. 检查一个字符串是否包含所有长度为 K 的二进制子串', '<p>给你一个二进制字符串&nbsp;<code>s</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;。</p> \n<p>如果所有长度为 <code>k</code>&nbsp;的二进制字符串都是 <code>s</code>&nbsp;的子串，请返回 <code>true</code> ，否则请返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"00110110\", k = 2\n<strong>输出：</strong>true\n<strong>解释：</strong>长度为 2 的二进制串包括 \"00\"，\"01\"，\"10\" 和 \"11\"。它们分别是 s 中下标为 0，1，3，2 开始的长度为 2 的子串。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"00110\", k = 2\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"0110\", k = 1\n<strong>输出：</strong>true\n<strong>解释：</strong>长度为 1 的二进制串包括 \"0\" 和 \"1\"，显然它们都是 s 的子串。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"0110\", k = 2\n<strong>输出：</strong>false\n<strong>解释：</strong>长度为 2 的二进制串 \"00\" 没有出现在 s 中。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>s = \"0000000001011100\", k = 4\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 5 * 10<sup>5</sup></code></li> \n <li><code>s[i]</code> 不是<code>\'0\'</code> 就是 <code>\'1\'</code></li> \n <li><code>1 &lt;= k &lt;= 20</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1462. 课程表 IV', '<p>你总共需要上 <code>n</code>&nbsp;门课，课程编号依次为 <code>0</code>&nbsp;到 <code>n-1</code>&nbsp;。</p> \n<p>有的课会有直接的先修课程，比如如果想上课程&nbsp;0 ，你必须先上课程 1 ，那么会以 <code>[1,0]</code>&nbsp;数对的形式给出先修课程数对。</p> \n<p>给你课程总数 <code>n</code>&nbsp;和一个直接先修课程数对列表&nbsp;<code>prerequisite</code> 和一个查询对列表&nbsp;<code>queries</code>&nbsp;。</p> \n<p>对于每个查询对 <code>queries[i]</code>&nbsp;，请判断&nbsp;<code>queries[i][0]</code>&nbsp;是否是&nbsp;<code>queries[i][1]</code>&nbsp;的先修课程。</p> \n<p>请返回一个布尔值列表，列表中每个元素依次分别对应 <code>queries</code>&nbsp;每个查询对的判断结果。</p> \n<p><strong>注意：</strong>如果课程&nbsp;<strong>a</strong>&nbsp;是课程&nbsp;<strong>b</strong>&nbsp;的先修课程且课程&nbsp;<strong>b</strong>&nbsp;是课程&nbsp;<strong>c</strong>&nbsp;的先修课程，那么课程&nbsp;<strong>a</strong>&nbsp;也是课程&nbsp;<strong>c</strong>&nbsp;的先修课程。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 300px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/30/graph.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]\n<strong>输出：</strong>[false,true]\n<strong>解释：</strong>课程 0 不是课程 1 的先修课程，但课程 1 是课程 0 的先修课程。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2, prerequisites = [], queries = [[1,0],[0,1]]\n<strong>输出：</strong>[false,false]\n<strong>解释：</strong>没有先修课程对，所以每门课程之间是独立的。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 300px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/30/graph-1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]\n<strong>输出：</strong>[true,true]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 3, prerequisites = [[1,0],[2,0]], queries = [[0,1],[2,0]]\n<strong>输出：</strong>[false,true]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,4],[4,0],[1,3],[3,0]]\n<strong>输出：</strong>[true,false,true,false]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 100</code></li> \n <li><code>0 &lt;= prerequisite.length &lt;= (n * (n - 1) / 2)</code></li> \n <li><code>0 &lt;= prerequisite[i][0], prerequisite[i][1] &lt; n</code></li> \n <li><code>prerequisite[i][0] != prerequisite[i][1]</code></li> \n <li>先修课程图中没有环。</li> \n <li>先修课程图中没有重复的边。</li> \n <li><code>1 &lt;= queries.length &lt;= 10^4</code></li> \n <li><code>queries[i][0] != queries[i][1]</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1463. 摘樱桃 II', '<p>给你一个&nbsp;<code>rows x cols</code> 的矩阵&nbsp;<code>grid</code>&nbsp;来表示一块樱桃地。 <code>grid</code>&nbsp;中每个格子的数字表示你能获得的樱桃数目。</p> \n<p>你有两个机器人帮你收集樱桃，机器人 1 从左上角格子 <code>(0,0)</code> 出发，机器人 2 从右上角格子 <code>(0, cols-1)</code> 出发。</p> \n<p>请你按照如下规则，返回两个机器人能收集的最多樱桃数目：</p> \n<ul> \n <li>从格子&nbsp;<code>(i,j)</code> 出发，机器人可以移动到格子&nbsp;<code>(i+1, j-1)</code>，<code>(i+1, j)</code> 或者&nbsp;<code>(i+1, j+1)</code>&nbsp;。</li> \n <li>当一个机器人经过某个格子时，它会把该格子内所有的樱桃都摘走，然后这个位置会变成空格子，即没有樱桃的格子。</li> \n <li>当两个机器人同时到达同一个格子时，它们中只有一个可以摘到樱桃。</li> \n <li>两个机器人在任意时刻都不能移动到 <code>grid</code>&nbsp;外面。</li> \n <li>两个机器人最后都要到达&nbsp;<code>grid</code>&nbsp;最底下一行。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 182px; width: 139px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/30/sample_1_1802.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]\n<strong>输出：</strong>24\n<strong>解释：</strong>机器人 1 和机器人 2 的路径在上图中分别用绿色和蓝色表示。\n机器人 1 摘的樱桃数目为 (3 + 2 + 5 + 2) = 12 。\n机器人 2 摘的樱桃数目为 (1 + 5 + 5 + 1) = 12 。\n樱桃总数为： 12 + 12 = 24 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 257px; width: 284px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/30/sample_2_1802.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]\n<strong>输出：</strong>28\n<strong>解释：</strong>机器人 1 和机器人 2 的路径在上图中分别用绿色和蓝色表示。\n机器人 1 摘的樱桃数目为 (1 + 9 + 5 + 2) = 17 。\n机器人 2 摘的樱桃数目为 (1 + 3 + 4 + 3) = 11 。\n樱桃总数为： 17 + 11 = 28 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,0,0,3],[0,0,0,3],[0,0,3,3],[9,0,3,3]]\n<strong>输出：</strong>22\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,1],[1,1]]\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>rows == grid.length</code></li> \n <li><code>cols == grid[i].length</code></li> \n <li><code>2 &lt;= rows, cols &lt;= 70</code></li> \n <li><code>0 &lt;= grid[i][j] &lt;= 100&nbsp;</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1464. 数组中两元素的最大乘积', '<p>给你一个整数数组 <code>nums</code>，请你选择数组的两个不同下标 <code>i</code> 和 <code>j</code><em>，</em>使 <code>(nums[i]-1)*(nums[j]-1)</code> 取得最大值。</p> \n<p>请你计算并返回该式的最大值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [3,4,5,2]\n<strong>输出：</strong>12 \n<strong>解释：</strong>如果选择下标 i=1 和 j=2（下标从 0 开始），则可以获得最大值，(nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12 。 \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,5,4,5]\n<strong>输出：</strong>16\n<strong>解释：</strong>选择下标 i=1 和 j=3（下标从 0 开始），则可以获得最大值 (5-1)*(5-1) = 16 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [3,7]\n<strong>输出：</strong>12\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= nums.length &lt;= 500</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10^3</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1465. 切割后面积最大的蛋糕', '<p>矩形蛋糕的高度为 <code>h</code> 且宽度为 <code>w</code>，给你两个整数数组 <code>horizontalCuts</code> 和 <code>verticalCuts</code>，其中 <code>horizontalCuts[i]</code> 是从矩形蛋糕顶部到第&nbsp; <code>i</code> 个水平切口的距离，类似地， <code>verticalCuts[j]</code> 是从矩形蛋糕的左侧到第 <code>j</code> 个竖直切口的距离。</p> \n<p>请你按数组 <em><code>horizontalCuts</code> </em>和<em> <code>verticalCuts</code> </em>中提供的水平和竖直位置切割后，请你找出 <strong>面积最大</strong> 的那份蛋糕，并返回其 <strong>面积</strong> 。由于答案可能是一个很大的数字，因此需要将结果对 <code>10^9 + 7</code> 取余后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 320px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/30/leetcode_max_area_2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]\n<strong>输出：</strong>4 \n<strong>解释：</strong>上图所示的矩阵蛋糕中，红色线表示水平和竖直方向上的切口。切割蛋糕后，绿色的那份蛋糕面积最大。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 320px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/30/leetcode_max_area_3.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]\n<strong>输出：</strong>6\n<strong>解释：</strong>上图所示的矩阵蛋糕中，红色线表示水平和竖直方向上的切口。切割蛋糕后，绿色和黄色的两份蛋糕面积最大。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]\n<strong>输出：</strong>9\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= h,&nbsp;w &lt;= 10^9</code></li> \n <li><code>1 &lt;=&nbsp;horizontalCuts.length &lt;&nbsp;min(h, 10^5)</code></li> \n <li><code>1 &lt;=&nbsp;verticalCuts.length &lt; min(w, 10^5)</code></li> \n <li><code>1 &lt;=&nbsp;horizontalCuts[i] &lt; h</code></li> \n <li><code>1 &lt;=&nbsp;verticalCuts[i] &lt; w</code></li> \n <li>题目数据保证 <code>horizontalCuts</code> 中的所有元素各不相同</li> \n <li>题目数据保证 <code>verticalCuts</code>&nbsp;中的所有元素各不相同</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1466. 重新规划路线', '<p><code>n</code> 座城市，从 <code>0</code> 到 <code>n-1</code> 编号，其间共有 <code>n-1</code> 条路线。因此，要想在两座不同城市之间旅行只有唯一一条路线可供选择（路线网形成一颗树）。去年，交通运输部决定重新规划路线，以改变交通拥堵的状况。</p> \n<p>路线用 <code>connections</code> 表示，其中 <code>connections[i] = [a, b]</code> 表示从城市 <code>a</code> 到 <code>b</code> 的一条有向路线。</p> \n<p>今年，城市 0 将会举办一场大型比赛，很多游客都想前往城市 0 。</p> \n<p>请你帮助重新规划路线方向，使每个城市都可以访问城市 0 。返回需要变更方向的最小路线数。</p> \n<p>题目数据 <strong>保证</strong> 每个城市在重新规划路线方向后都能到达城市 0 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 150px; width: 240px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/30/sample_1_1819.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]\n<strong>输出：</strong>3\n<strong>解释：</strong>更改以红色显示的路线的方向，使每个城市都可以到达城市 0 。</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 60px; width: 380px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/30/sample_2_1819.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]\n<strong>输出：</strong>2\n<strong>解释：</strong>更改以红色显示的路线的方向，使每个城市都可以到达城市 0 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 3, connections = [[1,0],[2,0]]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 5 * 10^4</code></li> \n <li><code>connections.length == n-1</code></li> \n <li><code>connections[i].length == 2</code></li> \n <li><code>0 &lt;= connections[i][0], connections[i][1] &lt;= n-1</code></li> \n <li><code>connections[i][0] != connections[i][1]</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1467. 两个盒子中球的颜色数相同的概率', '<p>桌面上有 <code>2n</code> 个颜色不完全相同的球，球上的颜色共有 <code>k</code> 种。给你一个大小为 <code>k</code> 的整数数组 <code>balls</code> ，其中 <code>balls[i]</code> 是颜色为&nbsp;<code>i</code> 的球的数量。</p> \n<p>所有的球都已经 <strong>随机打乱顺序</strong> ，前 <code>n</code> 个球放入第一个盒子，后 <code>n</code> 个球放入另一个盒子（请认真阅读示例 2 的解释部分）。</p> \n<p><strong>注意：</strong>这两个盒子是不同的。例如，两个球颜色分别为 <code>a</code> 和 <code>b</code>，盒子分别为 <code>[]</code> 和 <code>()</code>，那么 <code>[a] (b)</code> 和 <code>[b] (a)</code> 这两种分配方式是不同的（请认真阅读示例 1 的解释部分）。</p> \n<p>请计算「两个盒子中球的颜色数相同」的情况的概率。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>balls = [1,1]\n<strong>输出：</strong>1.00000\n<strong>解释：</strong>球平均分配的方式只有两种：\n- 颜色为 1 的球放入第一个盒子，颜色为 2 的球放入第二个盒子\n- 颜色为 2 的球放入第一个盒子，颜色为 1 的球放入第二个盒子\n这两种分配，两个盒子中球的颜色数都相同。所以概率为 2/2 = 1 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>balls = [2,1,1]\n<strong>输出：</strong>0.66667\n<strong>解释：</strong>球的列表为 [1, 1, 2, 3]\n随机打乱，得到 12 种等概率的不同打乱方案，每种方案概率为 1/12 ：\n[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\n然后，我们将前两个球放入第一个盒子，后两个球放入第二个盒子。\n这 12 种可能的随机打乱方式中的 8 种满足「两个盒子中球的颜色数相同」。\n概率 = 8/12 = 0.66667\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>balls = [1,2,1,2]\n<strong>输出：</strong>0.60000\n<strong>解释：</strong>球的列表为 [1, 2, 2, 3, 4, 4]。要想显示所有 180 种随机打乱方案是很难的，但只检查「两个盒子中球的颜色数相同」的 108 种情况是比较容易的。\n概率 = 108 / 180 = 0.6 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>balls = [3,2,1]\n<strong>输出：</strong>0.30000\n<strong>解释：</strong>球的列表为 [1, 1, 1, 2, 2, 3]。要想显示所有 60 种随机打乱方案是很难的，但只检查「两个盒子中球的颜色数相同」的 18 种情况是比较容易的。\n概率 = 18 / 60 = 0.3 。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>balls = [6,6,6,6,6,6]\n<strong>输出：</strong>0.90327\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= balls.length &lt;= 8</code></li> \n <li><code>1 &lt;= balls[i] &lt;= 6</code></li> \n <li><code>sum(balls)</code> 是偶数</li> \n <li>答案与真实值误差在 <code>10^-5</code> 以内，则被视为正确答案</li> \n</ul>');
INSERT INTO `leecode` VALUES ('147. 对链表进行插入排序', '<p>对链表进行插入排序。</p> \n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif\" alt=\"\"><br> <small>插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。<br> 每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。</small></p> \n<p>&nbsp;</p> \n<p><strong>插入排序算法：</strong></p> \n<ol> \n <li>插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。</li> \n <li>每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。</li> \n <li>重复直到所有输入数据插入完为止。</li> \n</ol> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> 4-&gt;2-&gt;1-&gt;3\n<strong>输出:</strong> 1-&gt;2-&gt;3-&gt;4\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入:</strong> -1-&gt;5-&gt;3-&gt;4-&gt;0\n<strong>输出:</strong> -1-&gt;0-&gt;3-&gt;4-&gt;5\n</pre>');
INSERT INTO `leecode` VALUES ('1470. 重新排列数组', '<p>给你一个数组 <code>nums</code> ，数组中有 <code>2n</code> 个元素，按 <code>[x<sub>1</sub>,x<sub>2</sub>,...,x<sub>n</sub>,y<sub>1</sub>,y<sub>2</sub>,...,y<sub>n</sub>]</code> 的格式排列。</p> \n<p>请你将数组按 <code>[x<sub>1</sub>,y<sub>1</sub>,x<sub>2</sub>,y<sub>2</sub>,...,x<sub>n</sub>,y<sub>n</sub>]</code> 格式重新排列，返回重排后的数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [2,5,1,3,4,7], n = 3\n<strong>输出：</strong>[2,3,5,4,1,7] \n<strong>解释：</strong>由于 x<sub>1</sub>=2, x<sub>2</sub>=5, x<sub>3</sub>=1, y<sub>1</sub>=3, y<sub>2</sub>=4, y<sub>3</sub>=7 ，所以答案为 [2,3,5,4,1,7]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4,4,3,2,1], n = 4\n<strong>输出：</strong>[1,4,2,3,3,2,4,1]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,2,2], n = 2\n<strong>输出：</strong>[1,2,1,2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 500</code></li> \n <li><code>nums.length == 2n</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10^3</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1471. 数组中的 k 个最强值', '<p>给你一个整数数组 <code>arr</code> 和一个整数 <code>k</code> 。</p> \n<p>设 <code>m</code> 为数组的中位数，只要满足下述两个前提之一，就可以判定 <code>arr[i]</code> 的值比 <code>arr[j]</code> 的值更强：</p> \n<ul> \n <li>&nbsp;<code>|arr[i] - m| &gt; |arr[j]&nbsp;- m|</code></li> \n <li>&nbsp;<code>|arr[i] - m| == |arr[j] - m|</code>，且 <code>arr[i] &gt; arr[j]</code></li> \n</ul> \n<p>请返回由数组中最强的 <code>k</code> 个值组成的列表。答案可以以 <strong>任意顺序</strong> 返回。</p> \n<p><strong>中位数</strong> 是一个有序整数列表中处于中间位置的值。形式上，如果列表的长度为 <code>n</code> ，那么中位数就是该有序列表（下标从 0 开始）中位于 <code>((n - 1) / 2)</code> 的元素。</p> \n<ul> \n <li>例如 <code>arr =&nbsp;[6, -3, 7, 2, 11]</code>，<code>n = 5</code>：数组排序后得到 <code>arr = [-3, 2, 6, 7, 11]</code> ，数组的中间位置为 <code>m = ((5 - 1) / 2) = 2</code> ，中位数 <code>arr[m]</code> 的值为 <code>6</code> 。</li> \n <li>例如 <code>arr =&nbsp;[-7, 22, 17, 3]</code>，<code>n = 4</code>：数组排序后得到&nbsp;<code>arr = [-7, 3, 17, 22]</code> ，数组的中间位置为&nbsp;<code>m = ((4 - 1) / 2) = 1</code> ，中位数 <code>arr[m]</code> 的值为 <code>3</code> 。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,3,4,5], k = 2\n<strong>输出：</strong>[5,1]\n<strong>解释：</strong>中位数为 3，按从强到弱顺序排序后，数组变为 [5,1,4,2,3]。最强的两个元素是 [5, 1]。[1, 5] 也是正确答案。\n注意，尽管 |5 - 3| == |1 - 3| ，但是 5 比 1 更强，因为 5 &gt; 1 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,1,3,5,5], k = 2\n<strong>输出：</strong>[5,5]\n<strong>解释：</strong>中位数为 3, 按从强到弱顺序排序后，数组变为 [5,5,1,1,3]。最强的两个元素是 [5, 5]。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [6,7,11,7,6,8], k = 5\n<strong>输出：</strong>[11,8,6,6,7]\n<strong>解释：</strong>中位数为 7, 按从强到弱顺序排序后，数组变为 [11,8,6,6,7,7]。\n[11,8,6,6,7] 的任何排列都是正确答案。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [6,-3,7,2,11], k = 3\n<strong>输出：</strong>[-3,11,2]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>arr = [-7,22,17,3], k = 2\n<strong>输出：</strong>[22,17]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10^5</code></li> \n <li><code>-10^5 &lt;= arr[i] &lt;= 10^5</code></li> \n <li><code>1 &lt;= k &lt;= arr.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1472. 设计浏览器历史记录', '<p>你有一个只支持单个标签页的 <strong>浏览器</strong>&nbsp;，最开始你浏览的网页是&nbsp;<code>homepage</code>&nbsp;，你可以访问其他的网站&nbsp;<code>url</code>&nbsp;，也可以在浏览历史中后退&nbsp;<code>steps</code>&nbsp;步或前进&nbsp;<code>steps</code>&nbsp;步。</p> \n<p>请你实现&nbsp;<code>BrowserHistory</code> 类：</p> \n<ul> \n <li><code>BrowserHistory(string homepage)</code>&nbsp;，用&nbsp;<code>homepage</code>&nbsp;初始化浏览器类。</li> \n <li><code>void visit(string url)</code>&nbsp;从当前页跳转访问 <code>url</code> 对应的页面&nbsp;&nbsp;。执行此操作会把浏览历史前进的记录全部删除。</li> \n <li><code>string back(int steps)</code>&nbsp;在浏览历史中后退&nbsp;<code>steps</code>&nbsp;步。如果你只能在浏览历史中后退至多&nbsp;<code>x</code> 步且&nbsp;<code>steps &gt; x</code>&nbsp;，那么你只后退&nbsp;<code>x</code>&nbsp;步。请返回后退 <strong>至多</strong> <code>steps</code>&nbsp;步以后的&nbsp;<code>url</code>&nbsp;。</li> \n <li><code>string forward(int steps)</code>&nbsp;在浏览历史中前进&nbsp;<code>steps</code>&nbsp;步。如果你只能在浏览历史中前进至多&nbsp;<code>x</code>&nbsp;步且&nbsp;<code>steps &gt; x</code>&nbsp;，那么你只前进 <code>x</code>&nbsp;步。请返回前进&nbsp;<strong>至多</strong>&nbsp;<code>steps</code>步以后的 <code>url</code>&nbsp;。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]\n[[\"leetcode.com\"],[\"google.com\"],[\"facebook.com\"],[\"youtube.com\"],[1],[1],[1],[\"linkedin.com\"],[2],[2],[7]]\n<strong>输出：</strong>\n[null,null,null,null,\"facebook.com\",\"google.com\",\"facebook.com\",null,\"linkedin.com\",\"google.com\",\"leetcode.com\"]\n\n<strong>解释：</strong>\nBrowserHistory browserHistory = new BrowserHistory(\"leetcode.com\");\nbrowserHistory.visit(\"google.com\");       // 你原本在浏览 \"leetcode.com\" 。访问 \"google.com\"\nbrowserHistory.visit(\"facebook.com\");     // 你原本在浏览 \"google.com\" 。访问 \"facebook.com\"\nbrowserHistory.visit(\"youtube.com\");      // 你原本在浏览 \"facebook.com\" 。访问 \"youtube.com\"\nbrowserHistory.back(1);                   // 你原本在浏览 \"youtube.com\" ，后退到 \"facebook.com\" 并返回 \"facebook.com\"\nbrowserHistory.back(1);                   // 你原本在浏览 \"facebook.com\" ，后退到 \"google.com\" 并返回 \"google.com\"\nbrowserHistory.forward(1);                // 你原本在浏览 \"google.com\" ，前进到 \"facebook.com\" 并返回 \"facebook.com\"\nbrowserHistory.visit(\"linkedin.com\");     // 你原本在浏览 \"facebook.com\" 。 访问 \"linkedin.com\"\nbrowserHistory.forward(2);                // 你原本在浏览 \"linkedin.com\" ，你无法前进任何步数。\nbrowserHistory.back(2);                   // 你原本在浏览 \"linkedin.com\" ，后退两步依次先到 \"facebook.com\" ，然后到 \"google.com\" ，并返回 \"google.com\"\nbrowserHistory.back(7);                   // 你原本在浏览 \"google.com\"， 你只能后退一步到 \"leetcode.com\" ，并返回 \"leetcode.com\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= homepage.length &lt;= 20</code></li> \n <li><code>1 &lt;= url.length &lt;= 20</code></li> \n <li><code>1 &lt;= steps &lt;= 100</code></li> \n <li><code>homepage</code> 和&nbsp;<code>url</code>&nbsp;都只包含&nbsp;\'.\' 或者小写英文字母。</li> \n <li>最多调用&nbsp;<code>5000</code>&nbsp;次&nbsp;<code>visit</code>，&nbsp;<code>back</code>&nbsp;和&nbsp;<code>forward</code>&nbsp;函数。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1473. 粉刷房子 III', '<p>在一个小城市里，有&nbsp;<code>m</code>&nbsp;个房子排成一排，你需要给每个房子涂上 <code>n</code>&nbsp;种颜色之一（颜色编号为 <code>1</code> 到 <code>n</code>&nbsp;）。有的房子去年夏天已经涂过颜色了，所以这些房子不可以被重新涂色。</p> \n<p>我们将连续相同颜色尽可能多的房子称为一个街区。（比方说 <code>houses = [1,2,2,3,3,2,1,1]</code> ，它包含 5 个街区&nbsp;<code> [{1}, {2,2}, {3,3}, {2}, {1,1}]</code> 。）</p> \n<p>给你一个数组&nbsp;<code>houses</code>&nbsp;，一个&nbsp;<code>m * n</code>&nbsp;的矩阵&nbsp;<code>cost</code>&nbsp;和一个整数&nbsp;<code>target</code>&nbsp;，其中：</p> \n<ul> \n <li><code>houses[i]</code>：是第&nbsp;<code>i</code>&nbsp;个房子的颜色，<strong>0</strong>&nbsp;表示这个房子还没有被涂色。</li> \n <li><code>cost[i][j]</code>：是将第&nbsp;<code>i</code>&nbsp;个房子涂成颜色&nbsp;<code>j+1</code>&nbsp;的花费。</li> \n</ul> \n<p>请你返回房子涂色方案的最小总花费，使得每个房子都被涂色后，恰好组成&nbsp;<code>target</code>&nbsp;个街区。如果没有可用的涂色方案，请返回&nbsp;<strong>-1</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\n<strong>输出：</strong>9\n<strong>解释：</strong>房子涂色方案为 [1,2,2,1,1]\n此方案包含 target = 3 个街区，分别是 [{1}, {2,2}, {1,1}]。\n涂色的总花费为 (1 + 1 + 1 + 1 + 5) = 9。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\n<strong>输出：</strong>11\n<strong>解释：</strong>有的房子已经被涂色了，在此基础上涂色方案为 [2,2,1,2,2]\n此方案包含 target = 3 个街区，分别是 [{2,2}, {1}, {2,2}]。\n给第一个和最后一个房子涂色的花费为 (10 + 1) = 11。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>houses = [0,0,0,0,0], cost = [[1,10],[10,1],[1,10],[10,1],[1,10]], m = 5, n = 2, target = 5\n<strong>输出：</strong>5\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3\n<strong>输出：</strong>-1\n<strong>解释：</strong>房子已经被涂色并组成了 4 个街区，分别是 [{3},{1},{2},{3}] ，无法形成 target = 3 个街区。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == houses.length == cost.length</code></li> \n <li><code>n == cost[i].length</code></li> \n <li><code>1 &lt;= m &lt;= 100</code></li> \n <li><code>1 &lt;= n &lt;= 20</code></li> \n <li><code>1 &lt;= target&nbsp;&lt;= m</code></li> \n <li><code>0 &lt;= houses[i]&nbsp;&lt;= n</code></li> \n <li><code>1 &lt;= cost[i][j] &lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1475. 商品折扣后的最终价格', '<p>给你一个数组&nbsp;<code>prices</code>&nbsp;，其中&nbsp;<code>prices[i]</code>&nbsp;是商店里第&nbsp;<code>i</code>&nbsp;件商品的价格。</p> \n<p>商店里正在进行促销活动，如果你要买第&nbsp;<code>i</code>&nbsp;件商品，那么你可以得到与 <code>prices[j]</code> 相等的折扣，其中&nbsp;<code>j</code>&nbsp;是满足&nbsp;<code>j &gt; i</code>&nbsp;且&nbsp;<code>prices[j] &lt;= prices[i]</code>&nbsp;的&nbsp;<strong>最小下标</strong>&nbsp;，如果没有满足条件的&nbsp;<code>j</code>&nbsp;，你将没有任何折扣。</p> \n<p>请你返回一个数组，数组中第&nbsp;<code>i</code>&nbsp;个元素是折扣后你购买商品 <code>i</code>&nbsp;最终需要支付的价格。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>prices = [8,4,6,2,3]\n<strong>输出：</strong>[4,2,4,2,3]\n<strong>解释：</strong>\n商品 0 的价格为 price[0]=8 ，你将得到 prices[1]=4 的折扣，所以最终价格为 8 - 4 = 4 。\n商品 1 的价格为 price[1]=4 ，你将得到 prices[3]=2 的折扣，所以最终价格为 4 - 2 = 2 。\n商品 2 的价格为 price[2]=6 ，你将得到 prices[3]=2 的折扣，所以最终价格为 6 - 2 = 4 。\n商品 3 和 4 都没有折扣。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>prices = [1,2,3,4,5]\n<strong>输出：</strong>[1,2,3,4,5]\n<strong>解释：</strong>在这个例子中，所有商品都没有折扣。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>prices = [10,1,1,6]\n<strong>输出：</strong>[9,0,1,6]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= prices.length &lt;= 500</code></li> \n <li><code>1 &lt;= prices[i] &lt;= 10^3</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1476. 子矩形查询', '<p>请你实现一个类&nbsp;<code>SubrectangleQueries</code>&nbsp;，它的构造函数的参数是一个 <code>rows x cols</code>&nbsp;的矩形（这里用整数矩阵表示），并支持以下两种操作：</p> \n<p>1.<code>&nbsp;updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)</code></p> \n<ul> \n <li>用&nbsp;<code>newValue</code>&nbsp;更新以&nbsp;<code>(row1,col1)</code>&nbsp;为左上角且以&nbsp;<code>(row2,col2)</code>&nbsp;为右下角的子矩形。</li> \n</ul> \n<p>2.<code>&nbsp;getValue(int row, int col)</code></p> \n<ul> \n <li>返回矩形中坐标 <code>(row,col)</code> 的当前值。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\n[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]\n[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]\n<strong>输出：</strong>\n[null,1,null,5,5,null,10,5]\n<strong>解释：</strong>\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  \n// 初始的 (4x3) 矩形如下：\n// 1 2 1\n// 4 3 4\n// 3 2 1\n// 1 1 1\nsubrectangleQueries.getValue(0, 2); // 返回 1\nsubrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);\n// 此次更新后矩形变为：\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 5 5 5 \nsubrectangleQueries.getValue(0, 2); // 返回 5\nsubrectangleQueries.getValue(3, 1); // 返回 5\nsubrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);\n// 此次更新后矩形变为：\n// 5   5   5\n// 5   5   5\n// 5   5   5\n// 10  10  10 \nsubrectangleQueries.getValue(3, 1); // 返回 10\nsubrectangleQueries.getValue(0, 2); // 返回 5\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\n[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]\n<strong>输出：</strong>\n[null,1,null,100,100,null,20]\n<strong>解释：</strong>\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);\nsubrectangleQueries.getValue(0, 0); // 返回 1\nsubrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);\nsubrectangleQueries.getValue(0, 0); // 返回 100\nsubrectangleQueries.getValue(2, 2); // 返回 100\nsubrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);\nsubrectangleQueries.getValue(2, 2); // 返回 20\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>最多有&nbsp;<code>500</code>&nbsp;次<code>updateSubrectangle</code> 和&nbsp;<code>getValue</code>&nbsp;操作。</li> \n <li><code>1 &lt;= rows, cols &lt;= 100</code></li> \n <li><code>rows ==&nbsp;rectangle.length</code></li> \n <li><code>cols == rectangle[i].length</code></li> \n <li><code>0 &lt;= row1 &lt;= row2 &lt; rows</code></li> \n <li><code>0 &lt;= col1 &lt;= col2 &lt; cols</code></li> \n <li><code>1 &lt;= newValue, rectangle[i][j] &lt;= 10^9</code></li> \n <li><code>0 &lt;= row &lt; rows</code></li> \n <li><code>0 &lt;= col &lt; cols</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1477. 找两个和为目标值且不重叠的子数组', '<p>给你一个整数数组&nbsp;<code>arr</code> 和一个整数值&nbsp;<code>target</code>&nbsp;。</p> \n<p>请你在 <code>arr</code>&nbsp;中找 <strong>两个互不重叠的子数组</strong>&nbsp;且它们的和都等于&nbsp;<code>target</code>&nbsp;。可能会有多种方案，请你返回满足要求的两个子数组长度和的 <strong>最小值</strong> 。</p> \n<p>请返回满足要求的最小长度和，如果无法找到这样的两个子数组，请返回 <strong>-1</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [3,2,2,4,3], target = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>只有两个子数组和为 3 （[3] 和 [3]）。它们的长度和为 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [7,3,4,7], target = 7\n<strong>输出：</strong>2\n<strong>解释：</strong>尽管我们有 3 个互不重叠的子数组和为 7 （[7], [3,4] 和 [7]），但我们会选择第一个和第三个子数组，因为它们的长度和 2 是最小值。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [4,3,2,6,2,3,4], target = 6\n<strong>输出：</strong>-1\n<strong>解释：</strong>我们只有一个和为 6 的子数组。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [5,5,4,4,5], target = 3\n<strong>输出：</strong>-1\n<strong>解释：</strong>我们无法找到和为 3 的子数组。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>arr = [3,1,1,1,5,1,2,1], target = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>注意子数组 [1,2] 和 [2,1] 不能成为一个方案因为它们重叠了。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 1000</code></li> \n <li><code>1 &lt;= target &lt;= 10^8</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1478. 安排邮筒', '<p>给你一个房屋数组<code>houses</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;，其中&nbsp;<code>houses[i]</code>&nbsp;是第 <code>i</code>&nbsp;栋房子在一条街上的位置，现需要在这条街上安排 <code>k</code>&nbsp;个邮筒。</p> \n<p>请你返回每栋房子与离它最近的邮筒之间的距离的 <strong>最小 </strong>总和。</p> \n<p>答案保证在 32 位有符号整数范围以内。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 154px; width: 454px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/06/13/sample_11_1816.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>houses = [1,4,8,10,20], k = 3\n<strong>输出：</strong>5\n<strong>解释：</strong>将邮筒分别安放在位置 3， 9 和 20 处。\n每个房子到最近邮筒的距离和为 |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 154px; width: 433px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/06/13/sample_2_1816.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>houses = [2,3,5,12,18], k = 2\n<strong>输出：</strong>9\n<strong>解释：</strong>将邮筒分别安放在位置 3 和 14 处。\n每个房子到最近邮筒距离和为 |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>houses = [7,4,6,1], k = 1\n<strong>输出：</strong>8\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>houses = [3,6,14,10], k = 4\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == houses.length</code></li> \n <li><code>1 &lt;= n&nbsp;&lt;= 100</code></li> \n <li><code>1 &lt;= houses[i] &lt;= 10^4</code></li> \n <li><code>1 &lt;= k &lt;= n</code></li> \n <li>数组&nbsp;<code>houses</code>&nbsp;中的整数互不相同。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('148. 排序链表', '<p>给你链表的头结点&nbsp;<code>head</code>&nbsp;，请将其按 <strong>升序</strong> 排列并返回 <strong>排序后的链表</strong> 。</p> \n<p><b>进阶：</b></p> \n<ul> \n <li>你可以在&nbsp;<code>O(n&nbsp;log&nbsp;n)</code> 时间复杂度和常数级空间复杂度下，对链表进行排序吗？</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 302px;\" src=\"https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg\" alt=\"\"> \n<pre><b>输入：</b>head = [4,2,1,3]\n<b>输出：</b>[1,2,3,4]\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 402px;\" src=\"https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg\" alt=\"\"> \n<pre><b>输入：</b>head = [-1,5,3,4,0]\n<b>输出：</b>[-1,0,3,4,5]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>head = []\n<b>输出：</b>[]\n</pre> \n<p>&nbsp;</p> \n<p><b>提示：</b></p> \n<ul> \n <li>链表中节点的数目在范围&nbsp;<code>[0, 5 * 10<sup>4</sup>]</code>&nbsp;内</li> \n <li><code>-10<sup>5</sup>&nbsp;&lt;= Node.val &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1480. 一维数组的动态和', '<p>给你一个数组 <code>nums</code> 。数组「动态和」的计算公式为：<code>runningSum[i] = sum(nums[0]…nums[i])</code> 。</p> \n<p>请返回 <code>nums</code> 的动态和。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4]\n<strong>输出：</strong>[1,3,6,10]\n<strong>解释：</strong>动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4] 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,1,1,1]\n<strong>输出：</strong>[1,2,3,4,5]\n<strong>解释：</strong>动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1] 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [3,1,2,10,1]\n<strong>输出：</strong>[3,4,6,16,17]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 1000</code></li> \n <li><code>-10^6&nbsp;&lt;= nums[i] &lt;=&nbsp;10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1481. 不同整数的最少数目', '<p>给你一个整数数组 <code>arr</code> 和一个整数 <code>k</code> 。现需要从数组中恰好移除 <code>k</code> 个元素，请找出移除后数组中不同整数的最少数目。</p> \n<ol> \n</ol> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [5,5,4], k = 1\n<strong>输出：</strong>1\n<strong>解释：</strong>移除 1 个 4 ，数组中只剩下 5 一种整数。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [4,3,1,1,3,3,2], k = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>先移除 4、2 ，然后再移除两个 1 中的任意 1 个或者三个 3 中的任意 1 个，最后剩下 1 和 3 两种整数。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length&nbsp;&lt;= 10^5</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 10^9</code></li> \n <li><code>0 &lt;= k&nbsp;&lt;= arr.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1482. 制作 m 束花所需的最少天数', '<p>给你一个整数数组 <code>bloomDay</code>，以及两个整数 <code>m</code> 和 <code>k</code> 。</p> \n<p>现需要制作 <code>m</code> 束花。制作花束时，需要使用花园中 <strong>相邻的 <code>k</code> 朵花</strong> 。</p> \n<p>花园中有 <code>n</code> 朵花，第 <code>i</code> 朵花会在 <code>bloomDay[i]</code> 时盛开，<strong>恰好</strong> 可以用于 <strong>一束</strong> 花中。</p> \n<p>请你返回从花园中摘 <code>m</code> 束花需要等待的最少的天数。如果不能摘到 <code>m</code> 束花则返回 <strong>-1</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>bloomDay = [1,10,3,10,2], m = 3, k = 1\n<strong>输出：</strong>3\n<strong>解释：</strong>让我们一起观察这三天的花开过程，x 表示花开，而 _ 表示花还未开。\n现在需要制作 3 束花，每束只需要 1 朵。\n1 天后：[x, _, _, _, _]   // 只能制作 1 束花\n2 天后：[x, _, _, _, x]   // 只能制作 2 束花\n3 天后：[x, _, x, _, x]   // 可以制作 3 束花，答案为 3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>bloomDay = [1,10,3,10,2], m = 3, k = 2\n<strong>输出：</strong>-1\n<strong>解释：</strong>要制作 3 束花，每束需要 2 朵花，也就是一共需要 6 朵花。而花园中只有 5 朵花，无法满足制作要求，返回 -1 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3\n<strong>输出：</strong>12\n<strong>解释：</strong>要制作 2 束花，每束需要 3 朵。\n花园在 7 天后和 12 天后的情况如下：\n7 天后：[x, x, x, x, _, x, x]\n可以用前 3 朵盛开的花制作第一束花。但不能使用后 3 朵盛开的花，因为它们不相邻。\n12 天后：[x, x, x, x, x, x, x]\n显然，我们可以用不同的方式制作两束花。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>bloomDay = [1000000000,1000000000], m = 1, k = 1\n<strong>输出：</strong>1000000000\n<strong>解释：</strong>需要等 1000000000 天才能采到花来制作花束\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>bloomDay = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2\n<strong>输出：</strong>9\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>bloomDay.length == n</code></li> \n <li><code>1 &lt;= n &lt;= 10^5</code></li> \n <li><code>1 &lt;= bloomDay[i] &lt;= 10^9</code></li> \n <li><code>1 &lt;= m &lt;= 10^6</code></li> \n <li><code>1 &lt;= k &lt;= n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1483. 树节点的第 K 个祖先', '<p>给你一棵树，树上有 <code>n</code> 个节点，按从 <code>0</code> 到 <code>n-1</code> 编号。树以父节点数组的形式给出，其中 <code>parent[i]</code> 是节点 <code>i</code> 的父节点。树的根节点是编号为 <code>0</code> 的节点。</p> \n<p>请你设计并实现 <code>getKthAncestor</code><code>(int node, int k)</code> 函数，函数返回节点 <code>node</code> 的第 <code>k</code> 个祖先节点。如果不存在这样的祖先节点，返回 <code>-1</code> 。</p> \n<p>树节点的第 <em><code>k</code> </em>个祖先节点是从该节点到根节点路径上的第 <code>k</code> 个节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<p><strong><img style=\"height: 262px; width: 396px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/06/14/1528_ex1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>\n[\"TreeAncestor\",\"getKthAncestor\",\"getKthAncestor\",\"getKthAncestor\"]\n[[7,[-1,0,0,1,1,2,2]],[3,1],[5,2],[6,3]]\n\n<strong>输出：</strong>\n[null,1,0,-1]\n\n<strong>解释：</strong>\nTreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);\n\ntreeAncestor.getKthAncestor(3, 1);  // 返回 1 ，它是 3 的父节点\ntreeAncestor.getKthAncestor(5, 2);  // 返回 0 ，它是 5 的祖父节点\ntreeAncestor.getKthAncestor(6, 3);  // 返回 -1 因为不存在满足要求的祖先节点\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;=&nbsp;n &lt;= 5*10^4</code></li> \n <li><code>parent[0] == -1</code> 表示编号为 <code>0</code> 的节点是根节点。</li> \n <li>对于所有的 <code>0 &lt;&nbsp;i &lt; n</code> ，<code>0 &lt;= parent[i] &lt; n</code> 总成立</li> \n <li><code>0 &lt;= node &lt; n</code></li> \n <li>至多查询 <code>5*10^4</code> 次</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1486. 数组异或操作', '<p>给你两个整数，<code>n</code> 和 <code>start</code> 。</p> \n<p>数组 <code>nums</code> 定义为：<code>nums[i] = start + 2*i</code>（下标从 0 开始）且 <code>n == nums.length</code> 。</p> \n<p>请返回 <code>nums</code> 中所有元素按位异或（<strong>XOR</strong>）后得到的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 5, start = 0\n<strong>输出：</strong>8\n<strong>解释：</strong>数组 nums 为 [0, 2, 4, 6, 8]，其中 (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8 。\n     \"^\" 为按位异或 XOR 运算符。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 4, start = 3\n<strong>输出：</strong>8\n<strong>解释：</strong>数组 nums 为 [3, 5, 7, 9]，其中 (3 ^ 5 ^ 7 ^ 9) = 8.</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 1, start = 7\n<strong>输出：</strong>7\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 10, start = 5\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 1000</code></li> \n <li><code>0 &lt;= start &lt;= 1000</code></li> \n <li><code>n == nums.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1487. 保证文件名唯一', '<p>给你一个长度为 <code>n</code> 的字符串数组 <code>names</code> 。你将会在文件系统中创建 <code>n</code> 个文件夹：在第 <code>i</code> 分钟，新建名为 <code>names[i]</code> 的文件夹。</p> \n<p>由于两个文件 <strong>不能</strong> 共享相同的文件名，因此如果新建文件夹使用的文件名已经被占用，系统会以 <code>(k)</code> 的形式为新文件夹的文件名添加后缀，其中 <code>k</code> 是能保证文件名唯一的 <strong>最小正整数</strong> 。</p> \n<p>返回长度为<em> <code>n</code></em> 的字符串数组，其中 <code>ans[i]</code> 是创建第 <code>i</code> 个文件夹时系统分配给该文件夹的实际名称。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>names = [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\n<strong>输出：</strong>[\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\n<strong>解释：</strong>文件系统将会这样创建文件名：\n\"pes\" --&gt; 之前未分配，仍为 \"pes\"\n\"fifa\" --&gt; 之前未分配，仍为 \"fifa\"\n\"gta\" --&gt; 之前未分配，仍为 \"gta\"\n\"pes(2019)\" --&gt; 之前未分配，仍为 \"pes(2019)\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>names = [\"gta\",\"gta(1)\",\"gta\",\"avalon\"]\n<strong>输出：</strong>[\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]\n<strong>解释：</strong>文件系统将会这样创建文件名：\n\"gta\" --&gt; 之前未分配，仍为 \"gta\"\n\"gta(1)\" --&gt; 之前未分配，仍为 \"gta(1)\"\n\"gta\" --&gt; 文件名被占用，系统为该名称添加后缀 (k)，由于 \"gta(1)\" 也被占用，所以 k = 2 。实际创建的文件名为 \"gta(2)\" 。\n\"avalon\" --&gt; 之前未分配，仍为 \"avalon\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>names = [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]\n<strong>输出：</strong>[\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]\n<strong>解释：</strong>当创建最后一个文件夹时，最小的正有效 k 为 4 ，文件名变为 \"onepiece(4)\"。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>names = [\"wano\",\"wano\",\"wano\",\"wano\"]\n<strong>输出：</strong>[\"wano\",\"wano(1)\",\"wano(2)\",\"wano(3)\"]\n<strong>解释：</strong>每次创建文件夹 \"wano\" 时，只需增加后缀中 k 的值即可。</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>names = [\"kaido\",\"kaido(1)\",\"kaido\",\"kaido(1)\"]\n<strong>输出：</strong>[\"kaido\",\"kaido(1)\",\"kaido(2)\",\"kaido(1)(1)\"]\n<strong>解释：</strong>注意，如果含后缀文件名被占用，那么系统也会按规则在名称后添加新的后缀 (k) 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= names.length &lt;= 5 * 10^4</code></li> \n <li><code>1 &lt;= names[i].length &lt;= 20</code></li> \n <li><code>names[i]</code> 由小写英文字母、数字和/或圆括号组成。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1488. 避免洪水泛滥', '<p>你的国家有无数个湖泊，所有湖泊一开始都是空的。当第 <code>n</code>&nbsp;个湖泊下雨的时候，如果第 <code>n</code>&nbsp;个湖泊是空的，那么它就会装满水，否则这个湖泊会发生洪水。你的目标是避免任意一个湖泊发生洪水。</p> \n<p>给你一个整数数组&nbsp;<code>rains</code>&nbsp;，其中：</p> \n<ul> \n <li><code>rains[i] &gt; 0</code>&nbsp;表示第 <code>i</code>&nbsp;天时，第 <code>rains[i]</code>&nbsp;个湖泊会下雨。</li> \n <li><code>rains[i] == 0</code>&nbsp;表示第 <code>i</code>&nbsp;天没有湖泊会下雨，你可以选择 <strong>一个</strong>&nbsp;湖泊并 <strong>抽干</strong>&nbsp;这个湖泊的水。</li> \n</ul> \n<p>请返回一个数组<em>&nbsp;</em><code>ans</code>&nbsp;，满足：</p> \n<ul> \n <li><code>ans.length == rains.length</code></li> \n <li>如果&nbsp;<code>rains[i] &gt; 0</code> ，那么<code>ans[i] == -1</code>&nbsp;。</li> \n <li>如果&nbsp;<code>rains[i] == 0</code>&nbsp;，<code>ans[i]</code>&nbsp;是你第&nbsp;<code>i</code>&nbsp;天选择抽干的湖泊。</li> \n</ul> \n<p>如果有多种可行解，请返回它们中的 <strong>任意一个</strong>&nbsp;。如果没办法阻止洪水，请返回一个 <strong>空的数组</strong>&nbsp;。</p> \n<p>请注意，如果你选择抽干一个装满水的湖泊，它会变成一个空的湖泊。但如果你选择抽干一个空的湖泊，那么将无事发生（详情请看示例 4）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>rains = [1,2,3,4]\n<strong>输出：</strong>[-1,-1,-1,-1]\n<strong>解释：</strong>第一天后，装满水的湖泊包括 [1]\n第二天后，装满水的湖泊包括 [1,2]\n第三天后，装满水的湖泊包括 [1,2,3]\n第四天后，装满水的湖泊包括 [1,2,3,4]\n没有哪一天你可以抽干任何湖泊的水，也没有湖泊会发生洪水。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>rains = [1,2,0,0,2,1]\n<strong>输出：</strong>[-1,-1,2,1,-1,-1]\n<strong>解释：</strong>第一天后，装满水的湖泊包括 [1]\n第二天后，装满水的湖泊包括 [1,2]\n第三天后，我们抽干湖泊 2 。所以剩下装满水的湖泊包括 [1]\n第四天后，我们抽干湖泊 1 。所以暂时没有装满水的湖泊了。\n第五天后，装满水的湖泊包括 [2]。\n第六天后，装满水的湖泊包括 [1,2]。\n可以看出，这个方案下不会有洪水发生。同时， [-1,-1,1,2,-1,-1] 也是另一个可行的没有洪水的方案。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>rains = [1,2,0,1,2]\n<strong>输出：</strong>[]\n<strong>解释：</strong>第二天后，装满水的湖泊包括 [1,2]。我们可以在第三天抽干一个湖泊的水。\n但第三天后，湖泊 1 和 2 都会再次下雨，所以不管我们第三天抽干哪个湖泊的水，另一个湖泊都会发生洪水。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>rains = [69,0,0,0,69]\n<strong>输出：</strong>[-1,69,1,1,-1]\n<strong>解释：</strong>任何形如 [-1,69,x,y,-1], [-1,x,69,y,-1] 或者 [-1,x,y,69,-1] 都是可行的解，其中 1 &lt;= x,y &lt;= 10^9\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>rains = [10,20,20]\n<strong>输出：</strong>[]\n<strong>解释：</strong>由于湖泊 20 会连续下 2 天的雨，所以没有没有办法阻止洪水。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= rains.length &lt;= 10^5</code></li> \n <li><code>0 &lt;= rains[i] &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1489. 找到最小生成树里的关键边和伪关键边', '<p>给你一个 <code>n</code>&nbsp;个点的带权无向连通图，节点编号为 <code>0</code>&nbsp;到 <code>n-1</code>&nbsp;，同时还有一个数组 <code>edges</code>&nbsp;，其中 <code>edges[i] = [from</code><code><sub>i</sub>, to<sub>i</sub>, weight<sub>i</sub>]</code>&nbsp;表示在&nbsp;<code>from<sub>i</sub></code>&nbsp;和&nbsp;<code>to<sub>i</sub></code>&nbsp;节点之间有一条带权无向边。最小生成树&nbsp;(MST) 是给定图中边的一个子集，它连接了所有节点且没有环，而且这些边的权值和最小。</p> \n<p>请你找到给定图中最小生成树的所有关键边和伪关键边。如果从图中删去某条边，会导致最小生成树的权值和增加，那么我们就说它是一条关键边。伪关键边则是可能会出现在某些最小生成树中但不会出现在所有最小生成树中的边。</p> \n<p>请注意，你可以分别以任意顺序返回关键边的下标和伪关键边的下标。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 262px; width: 259px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/06/21/ex1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]\n<strong>输出：</strong>[[0,1],[2,3,4,5]]\n<strong>解释：</strong>上图描述了给定图。\n下图是所有的最小生成树。\n<img style=\"height: 553px; width: 540px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/06/21/msts.png\" alt=\"\">\n注意到第 0 条边和第 1 条边出现在了所有最小生成树中，所以它们是关键边，我们将这两个下标作为输出的第一个列表。\n边 2，3，4 和 5 是所有 MST 的剩余边，所以它们是伪关键边。我们将它们作为输出的第二个列表。\n</pre> \n<p><strong>示例 2 ：</strong></p> \n<p><img style=\"height: 253px; width: 247px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/06/21/ex2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]\n<strong>输出：</strong>[[],[0,1,2,3]]\n<strong>解释：</strong>可以观察到 4 条边都有相同的权值，任选它们中的 3 条可以形成一棵 MST 。所以 4 条边都是伪关键边。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 100</code></li> \n <li><code>1 &lt;= edges.length &lt;= min(200, n * (n - 1) / 2)</code></li> \n <li><code>edges[i].length == 3</code></li> \n <li><code>0 &lt;= from<sub>i</sub> &lt; to<sub>i</sub> &lt; n</code></li> \n <li><code>1 &lt;= weight<sub>i</sub>&nbsp;&lt;= 1000</code></li> \n <li>所有 <code>(from<sub>i</sub>, to<sub>i</sub>)</code>&nbsp;数对都是互不相同的。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('149. 直线上最多的点数', '<p>给你一个数组 <code>points</code> ，其中 <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> 表示 <strong>X-Y</strong> 平面上的一个点。求最多有多少个点在同一条直线上。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 300px; height: 294px;\" src=\"https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>points = [[1,1],[2,2],[3,3]]\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 300px; height: 294px;\" src=\"https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= points.length &lt;= 300</code></li> \n <li><code>points[i].length == 2</code></li> \n <li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li> \n <li><code>points</code> 中的所有点 <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1491. 去掉最低工资和最高工资后的工资平均值', '<p>给你一个整数数组&nbsp;<code>salary</code>&nbsp;，数组里每个数都是 <strong>唯一</strong>&nbsp;的，其中&nbsp;<code>salary[i]</code> 是第&nbsp;<code>i</code>&nbsp;个员工的工资。</p> \n<p>请你返回去掉最低工资和最高工资以后，剩下员工工资的平均值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>salary = [4000,3000,1000,2000]\n<strong>输出：</strong>2500.00000\n<strong>解释：</strong>最低工资和最高工资分别是 1000 和 4000 。\n去掉最低工资和最高工资以后的平均工资是 (2000+3000)/2= 2500\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>salary = [1000,2000,3000]\n<strong>输出：</strong>2000.00000\n<strong>解释：</strong>最低工资和最高工资分别是 1000 和 3000 。\n去掉最低工资和最高工资以后的平均工资是 (2000)/1= 2000\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>salary = [6000,5000,4000,3000,2000,1000]\n<strong>输出：</strong>3500.00000\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>salary = [8000,9000,2000,3000,6000,1000]\n<strong>输出：</strong>4750.00000\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= salary.length &lt;= 100</code></li> \n <li><code>10^3&nbsp;&lt;= salary[i] &lt;= 10^6</code></li> \n <li><code>salary[i]</code>&nbsp;是唯一的。</li> \n <li>与真实值误差在&nbsp;<code>10^-5</code> 以内的结果都将视为正确答案。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1492. n 的第 k 个因子', '<p>给你两个正整数&nbsp;<code>n</code> 和&nbsp;<code>k</code>&nbsp;。</p> \n<p>如果正整数 <code>i</code> 满足 <code>n % i == 0</code> ，那么我们就说正整数 <code>i</code> 是整数 <code>n</code>&nbsp;的因子。</p> \n<p>考虑整数 <code>n</code>&nbsp;的所有因子，将它们 <strong>升序排列</strong>&nbsp;。请你返回第 <code>k</code>&nbsp;个因子。如果 <code>n</code>&nbsp;的因子数少于 <code>k</code>&nbsp;，请你返回 <strong>-1</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 12, k = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>因子列表包括 [1, 2, 3, 4, 6, 12]，第 3 个因子是 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 7, k = 2\n<strong>输出：</strong>7\n<strong>解释：</strong>因子列表包括 [1, 7] ，第 2 个因子是 7 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 4, k = 4\n<strong>输出：</strong>-1\n<strong>解释：</strong>因子列表包括 [1, 2, 4] ，只有 3 个因子，所以我们应该返回 -1 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 1, k = 1\n<strong>输出：</strong>1\n<strong>解释：</strong>因子列表包括 [1] ，第 1 个因子为 1 。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 1000, k = 3\n<strong>输出：</strong>4\n<strong>解释：</strong>因子列表包括 [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= n &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1493. 删掉一个元素以后全为 1 的最长子数组', '<p>给你一个二进制数组&nbsp;<code>nums</code>&nbsp;，你需要从中删掉一个元素。</p> \n<p>请你在删掉元素的结果数组中，返回最长的且只包含 1 的非空子数组的长度。</p> \n<p>如果不存在这样的子数组，请返回 0 。</p> \n<p>&nbsp;</p> \n<p><strong>提示 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,0,1]\n<strong>输出：</strong>3\n<strong>解释：</strong>删掉位置 2 的数后，[1,1,1] 包含 3 个 1 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,1,1,1,0,1,1,0,1]\n<strong>输出：</strong>5\n<strong>解释：</strong>删掉位置 4 的数字后，[0,1,1,1,1,1,0,1] 的最长全 1 子数组为 [1,1,1,1,1] 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,1]\n<strong>输出：</strong>2\n<strong>解释：</strong>你必须要删除一个元素。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,0,0,1,1,1,0,1]\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>nums = [0,0,0]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10^5</code></li> \n <li><code>nums[i]</code>&nbsp;要么是&nbsp;<code>0</code>&nbsp;要么是&nbsp;<code>1</code> 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1494. 并行课程 II', '<p>给你一个整数&nbsp;<code>n</code>&nbsp;表示某所大学里课程的数目，编号为&nbsp;<code>1</code>&nbsp;到&nbsp;<code>n</code>&nbsp;，数组&nbsp;<code>dependencies</code>&nbsp;中，&nbsp;<code>dependencies[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>&nbsp; 表示一个先修课的关系，也就是课程&nbsp;<code>x<sub>i</sub></code>&nbsp;必须在课程&nbsp;<code>y<sub>i</sub></code><sub>&nbsp;</sub>之前上。同时你还有一个整数&nbsp;<code>k</code>&nbsp;。</p> \n<p>在一个学期中，你 <strong>最多</strong>&nbsp;可以同时上 <code>k</code>&nbsp;门课，前提是这些课的先修课在之前的学期里已经上过了。</p> \n<p>请你返回上完所有课最少需要多少个学期。题目保证一定存在一种上完所有课的方式。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 164px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/06/27/leetcode_parallel_courses_1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 4, dependencies = [[2,1],[3,1],[1,4]], k = 2\n<strong>输出：</strong>3 \n<strong>解释：</strong>上图展示了题目输入的图。在第一个学期中，我们可以上课程 2 和课程 3 。然后第二个学期上课程 1 ，第三个学期上课程 4 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 234px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/06/27/leetcode_parallel_courses_2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 5, dependencies = [[2,1],[3,1],[4,1],[1,5]], k = 2\n<strong>输出：</strong>4 \n<strong>解释：</strong>上图展示了题目输入的图。一个最优方案是：第一学期上课程 2 和 3，第二学期上课程 4 ，第三学期上课程 1 ，第四学期上课程 5 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 11, dependencies = [], k = 2\n<strong>输出：</strong>6\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 15</code></li> \n <li><code>1 &lt;= k &lt;= n</code></li> \n <li><code>0 &lt;=&nbsp;dependencies.length &lt;= n * (n-1) / 2</code></li> \n <li><code>dependencies[i].length == 2</code></li> \n <li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub>&nbsp;&lt;= n</code></li> \n <li><code>x<sub>i</sub> != y<sub>i</sub></code></li> \n <li>所有先修关系都是不同的，也就是说&nbsp;<code>dependencies[i] != dependencies[j]</code>&nbsp;。</li> \n <li>题目输入的图是个有向无环图。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1496. 判断路径是否相交', '<p>给你一个字符串 <code>path</code>，其中 <code>path[i]</code> 的值可以是 <code>\'N\'</code>、<code>\'S\'</code>、<code>\'E\'</code> 或者 <code>\'W\'</code>，分别表示向北、向南、向东、向西移动一个单位。</p> \n<p>机器人从二维平面上的原点 <code>(0, 0)</code> 处开始出发，按 <code>path</code> 所指示的路径行走。</p> \n<p>如果路径在任何位置上出现相交的情况，也就是走到之前已经走过的位置，请返回 <code>True</code> ；否则，返回 <code>False</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 224px; width: 250px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/06/28/screen-shot-2020-06-10-at-123929-pm.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>path = \"NES\"\n<strong>输出：</strong>false \n<strong>解释：</strong>该路径没有在任何位置相交。</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 212px; width: 250px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/06/28/screen-shot-2020-06-10-at-123843-pm.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>path = \"NESWW\"\n<strong>输出：</strong>true\n<strong>解释：</strong>该路径经过原点两次。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= path.length &lt;= 10^4</code></li> \n <li><code>path</code> 仅由 <code>{\'N\', \'S\', \'E\', \'W}</code> 中的字符组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1497. 检查数组对是否可以被 k 整除', '<p>给你一个整数数组 <code>arr</code> 和一个整数 <code>k</code> ，其中数组长度是偶数，值为 <code>n</code> 。</p> \n<p>现在需要把数组恰好分成 <code>n /&nbsp;2</code> 对，以使每对数字的和都能够被 <code>k</code> 整除。</p> \n<p>如果存在这样的分法，请返回 <em>True</em> ；否则，返回 <em>False</em> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,3,4,5,10,6,7,8,9], k = 5\n<strong>输出：</strong>true\n<strong>解释：</strong>划分后的数字对为 (1,9),(2,8),(3,7),(4,6) 以及 (5,10) 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,3,4,5,6], k = 7\n<strong>输出：</strong>true\n<strong>解释：</strong>划分后的数字对为 (1,6),(2,5) 以及 (3,4) 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,3,4,5,6], k = 10\n<strong>输出：</strong>false\n<strong>解释：</strong>无法在将数组中的数字分为三对的同时满足每对数字和能够被 10 整除的条件。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [-10,10], k = 2\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>arr = [-1,1,-2,2,-3,3,-4,4], k = 3\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>arr.length == n</code></li> \n <li><code>1 &lt;= n &lt;= 10^5</code></li> \n <li><code>n</code> 为偶数</li> \n <li><code>-10^9 &lt;= arr[i] &lt;= 10^9</code></li> \n <li><code>1 &lt;= k &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1498. 满足条件的子序列数目', '<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>target</code> 。</p> \n<p>请你统计并返回 <code>nums</code> 中能满足其最小元素与最大元素的 <strong>和</strong> 小于或等于 <code>target</code> 的 <strong>非空</strong> 子序列的数目。</p> \n<p>由于答案可能很大，请将结果对 10^9 + 7 取余后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [3,5,6,7], target = 9\n<strong>输出：</strong>4\n<strong>解释：</strong>有 4 个子序列满足该条件。\n[3] -&gt; 最小元素 + 最大元素 &lt;= target (3 + 3 &lt;= 9)\n[3,5] -&gt; (3 + 5 &lt;= 9)\n[3,5,6] -&gt; (3 + 6 &lt;= 9)\n[3,6] -&gt; (3 + 6 &lt;= 9)\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [3,3,6,8], target = 10\n<strong>输出：</strong>6\n<strong>解释：</strong>有 6 个子序列满足该条件。（nums 中可以有重复数字）\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [2,3,3,4,6,7], target = 12\n<strong>输出：</strong>61\n<strong>解释：</strong>共有 63 个非空子序列，其中 2 个不满足条件（[6,7], [7]）\n有效序列总数为（63 - 2 = 61）\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [5,2,4,1,7,6,8], target = 16\n<strong>输出：</strong>127\n<strong>解释：</strong>所有非空子序列都满足条件 (2^7 - 1) = 127</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10^6</code></li> \n <li><code>1 &lt;= target &lt;= 10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1499. 满足不等式的最大值', '<p>给你一个数组 <code>points</code> 和一个整数 <code>k</code> 。数组中每个元素都表示二维平面上的点的坐标，并按照横坐标 x 的值从小到大排序。也就是说 <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> ，并且在 <code>1 &lt;= i &lt; j &lt;= points.length</code> 的前提下， <code>x<sub>i</sub> &lt; x<sub>j</sub></code> 总成立。</p> \n<p>请你找出<em> </em><code>y<sub>i</sub>&nbsp;+ y<sub>j</sub>&nbsp;+ |x<sub>i</sub>&nbsp;- x<sub>j</sub>|</code> 的 <strong>最大值</strong>，其中 <code>|x<sub>i</sub>&nbsp;- x<sub>j</sub>|&nbsp;&lt;= k</code> 且 <code>1 &lt;= i &lt; j &lt;= points.length</code>。</p> \n<p>题目测试数据保证至少存在一对能够满足 <code>|x<sub>i</sub>&nbsp;- x<sub>j</sub>|&nbsp;&lt;= k</code> 的点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>points = [[1,3],[2,0],[5,10],[6,-10]], k = 1\n<strong>输出：</strong>4\n<strong>解释：</strong>前两个点满足 |x<sub>i</sub>&nbsp;- x<sub>j</sub>| &lt;= 1 ，代入方程计算，则得到值 3 + 0 + |1 - 2| = 4 。第三个和第四个点也满足条件，得到值 10 + -10 + |5 - 6| = 1 。\n没有其他满足条件的点，所以返回 4 和 1 中最大的那个。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>points = [[0,0],[3,0],[9,2]], k = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>只有前两个点满足 |x<sub>i</sub>&nbsp;- x<sub>j</sub>| &lt;= 3 ，代入方程后得到值 0 + 0 + |0 - 3| = 3 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= points.length &lt;= 10^5</code></li> \n <li><code>points[i].length == 2</code></li> \n <li><code>-10^8&nbsp;&lt;= points[i][0], points[i][1] &lt;= 10^8</code></li> \n <li><code>0 &lt;= k &lt;= 2 * 10^8</code></li> \n <li>对于所有的<code>1 &lt;= i &lt; j &lt;= points.length</code> ，<code>points[i][0] &lt; points[j][0]</code> 都成立。也就是说，<code>x<sub>i</sub></code> 是严格递增的。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('15. 三数之和', '<p>给你一个包含 <code>n</code> 个整数的数组&nbsp;<code>nums</code>，判断&nbsp;<code>nums</code>&nbsp;中是否存在三个元素 <em>a，b，c ，</em>使得&nbsp;<em>a + b + c = </em>0 ？请你找出所有和为 <code>0</code> 且不重复的三元组。</p> \n<p><strong>注意：</strong>答案中不可以包含重复的三元组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [-1,0,1,2,-1,-4]\n<strong>输出：</strong>[[-1,-1,2],[-1,0,1]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = []\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [0]\n<strong>输出：</strong>[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= nums.length &lt;= 3000</code></li> \n <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('150. 逆波兰表达式求值', '<p>根据<a href=\"https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437\"> 逆波兰表示法</a>，求表达式的值。</p> \n<p>有效的算符包括&nbsp;<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>&nbsp;。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p> \n<p>&nbsp;</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li>整数除法只保留整数部分。</li> \n <li>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\n<strong>输出：</strong>9\n<strong>解释：</strong>该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\n<strong>输出：</strong>6\n<strong>解释：</strong>该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<pre><strong>输入：</strong>tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\n<strong>输出：</strong>22\n<strong>解释：</strong>\n该算式转化为常见的中缀算术表达式为：\n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= tokens.length &lt;= 10<sup>4</sup></code></li> \n <li><code>tokens[i]</code> 要么是一个算符（<code>\"+\"</code>、<code>\"-\"</code>、<code>\"*\"</code> 或 <code>\"/\"</code>），要么是一个在范围 <code>[-200, 200]</code> 内的整数</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>逆波兰表达式：</strong></p> \n<p>逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。</p> \n<ul> \n <li>平常使用的算式则是一种中缀表达式，如 <code>( 1 + 2 ) * ( 3 + 4 )</code> 。</li> \n <li>该算式的逆波兰表达式写法为 <code>( ( 1 2 + ) ( 3 4 + ) * )</code> 。</li> \n</ul> \n<p>逆波兰表达式主要有以下两个优点：</p> \n<ul> \n <li>去掉括号后表达式无歧义，上式即便写成 <code>1 2 + 3 4 + * </code>也可以依据次序计算出正确结果。</li> \n <li>适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1502. 判断能否形成等差数列', '<p>给你一个数字数组 <code>arr</code> 。</p> \n<p>如果一个数列中，任意相邻两项的差总等于同一个常数，那么这个数列就称为 <strong>等差数列</strong> 。</p> \n<p>如果可以重新排列数组形成等差数列，请返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [3,5,1]\n<strong>输出：</strong>true\n<strong>解释：</strong>对数组重新排序得到 [1,3,5] 或者 [5,3,1] ，任意相邻两项的差分别为 2 或 -2 ，可以形成等差数列。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,4]\n<strong>输出：</strong>false\n<strong>解释：</strong>无法通过重新排序得到等差数列。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= arr.length &lt;= 1000</code></li> \n <li><code>-10^6 &lt;= arr[i] &lt;= 10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1503. 所有蚂蚁掉下来前的最后一刻', '<p>有一块木板，长度为 <code>n</code> 个 <strong>单位</strong> 。一些蚂蚁在木板上移动，每只蚂蚁都以 <strong>每秒一个单位</strong> 的速度移动。其中，一部分蚂蚁向 <strong>左</strong> 移动，其他蚂蚁向 <strong>右</strong> 移动。</p> \n<p>当两只向 <strong>不同</strong> 方向移动的蚂蚁在某个点相遇时，它们会同时改变移动方向并继续移动。假设更改方向不会花费任何额外时间。</p> \n<p>而当蚂蚁在某一时刻 <code>t</code> 到达木板的一端时，它立即从木板上掉下来。</p> \n<p>给你一个整数 <code>n</code> 和两个整数数组 <code>left</code> 以及 <code>right</code> 。两个数组分别标识向左或者向右移动的蚂蚁在 <code>t = 0</code> 时的位置。请你返回最后一只蚂蚁从木板上掉下来的时刻。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p>&nbsp;</p> \n<p><img style=\"height: 610px; width: 450px;\" src=\"https://assets.leetcode.com/uploads/2020/06/17/ants.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 4, left = [4,3], right = [0,1]\n<strong>输出：</strong>4\n<strong>解释：</strong>如上图所示：\n-下标 0 处的蚂蚁命名为 A 并向右移动。\n-下标 1 处的蚂蚁命名为 B 并向右移动。\n-下标 3 处的蚂蚁命名为 C 并向左移动。\n-下标 4 处的蚂蚁命名为 D 并向左移动。\n请注意，蚂蚁在木板上的最后时刻是 t = 4 秒，之后蚂蚁立即从木板上掉下来。（也就是说在 t = 4.0000000001 时，木板上没有蚂蚁）。</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 101px; width: 639px;\" src=\"https://assets.leetcode.com/uploads/2020/06/17/ants2.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 7, left = [], right = [0,1,2,3,4,5,6,7]\n<strong>输出：</strong>7\n<strong>解释：</strong>所有蚂蚁都向右移动，下标为 0 的蚂蚁需要 7 秒才能从木板上掉落。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 100px; width: 639px;\" src=\"https://assets.leetcode.com/uploads/2020/06/17/ants3.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 7, left = [0,1,2,3,4,5,6,7], right = []\n<strong>输出：</strong>7\n<strong>解释：</strong>所有蚂蚁都向左移动，下标为 7 的蚂蚁需要 7 秒才能从木板上掉落。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 9, left = [5], right = [4]\n<strong>输出：</strong>5\n<strong>解释：</strong>t = 1 秒时，两只蚂蚁将回到初始位置，但移动方向与之前相反。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 6, left = [6], right = [0]\n<strong>输出：</strong>6\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^4</code></li> \n <li><code>0 &lt;= left.length &lt;= n + 1</code></li> \n <li><code>0 &lt;= left[i] &lt;= n</code></li> \n <li><code>0 &lt;= right.length &lt;= n + 1</code></li> \n <li><code>0 &lt;= right[i] &lt;= n</code></li> \n <li><code>1 &lt;= left.length + right.length &lt;= n + 1</code></li> \n <li><code>left</code> 和 <code>right</code> 中的所有值都是唯一的，并且每个值 <strong>只能出现在二者之一</strong> 中。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1504. 统计全 1 子矩形', '<p>给你一个只包含 0 和 1 的&nbsp;<code>rows * columns</code>&nbsp;矩阵&nbsp;<code>mat</code>&nbsp;，请你返回有多少个&nbsp;<strong>子矩形</strong>&nbsp;的元素全部都是 1 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>mat = [[1,0,1],\n&nbsp;           [1,1,0],\n&nbsp;           [1,1,0]]\n<strong>输出：</strong>13\n<strong>解释：\n</strong>有 <strong>6</strong>&nbsp;个 1x1 的矩形。\n有 <strong>2</strong> 个 1x2 的矩形。\n有 <strong>3</strong> 个 2x1 的矩形。\n有 <strong>1</strong> 个 2x2 的矩形。\n有 <strong>1</strong> 个 3x1 的矩形。\n矩形数目总共 = 6 + 2 + 3 + 1 + 1 = <strong>13</strong>&nbsp;。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>mat = [[0,1,1,0],\n&nbsp;           [0,1,1,1],\n&nbsp;           [1,1,1,0]]\n<strong>输出：</strong>24\n<strong>解释：</strong>\n有 <strong>8</strong> 个 1x1 的子矩形。\n有 <strong>5</strong> 个 1x2 的子矩形。\n有 <strong>2</strong> 个 1x3 的子矩形。\n有 <strong>4</strong> 个 2x1 的子矩形。\n有 <strong>2</strong> 个 2x2 的子矩形。\n有 <strong>2</strong> 个 3x1 的子矩形。\n有 <strong>1</strong> 个 3x2 的子矩形。\n矩形数目总共 = 8 + 5 + 2 + 4 + 2 + 2 + 1 = <strong>24</strong><strong> 。</strong>\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>mat = [[1,1,1,1,1,1]]\n<strong>输出：</strong>21\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>mat = [[1,0,1],[0,1,0],[1,0,1]]\n<strong>输出：</strong>5\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= rows&nbsp;&lt;= 150</code></li> \n <li><code>1 &lt;= columns&nbsp;&lt;= 150</code></li> \n <li><code>0 &lt;= mat[i][j] &lt;= 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1505. 最多 K 次交换相邻数位后得到的最小整数', '<p>给你一个字符串&nbsp;<code>num</code> 和一个整数&nbsp;<code>k</code> 。其中，<code>num</code> 表示一个很大的整数，字符串中的每个字符依次对应整数上的各个 <strong>数位</strong> 。</p> \n<p>你可以交换这个整数相邻数位的数字 <strong>最多</strong>&nbsp;<code>k</code>&nbsp;次。</p> \n<p>请你返回你能得到的最小整数，并以字符串形式返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height:40px; width:500px\" src=\"https://assets.leetcode.com/uploads/2020/06/17/q4_1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>num = \"4321\", k = 4\n<strong>输出：</strong>\"1342\"\n<strong>解释：</strong>4321 通过 4 次交换相邻数位得到最小整数的步骤如上图所示。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>num = \"100\", k = 1\n<strong>输出：</strong>\"010\"\n<strong>解释：</strong>输出可以包含前导 0 ，但输入保证不会有前导 0 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>num = \"36789\", k = 1000\n<strong>输出：</strong>\"36789\"\n<strong>解释：</strong>不需要做任何交换。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>num = \"22\", k = 22\n<strong>输出：</strong>\"22\"\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>num = \"9438957234785635408\", k = 23\n<strong>输出：</strong>\"0345989723478563548\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= num.length &lt;= 30000</code></li> \n <li><code>num</code>&nbsp;只包含&nbsp;<strong>数字</strong>&nbsp;且不含有<strong>&nbsp;前导 0&nbsp;</strong>。</li> \n <li><code>1 &lt;= k &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1507. 转变日期格式', '<p>给你一个字符串&nbsp;<code>date</code>&nbsp;，它的格式为&nbsp;<code>Day Month Year</code>&nbsp;，其中：</p> \n<ul> \n <li><code>Day</code>&nbsp;是集合&nbsp;<code>{\"1st\", \"2nd\", \"3rd\", \"4th\", ..., \"30th\", \"31st\"}</code>&nbsp;中的一个元素。</li> \n <li><code>Month</code>&nbsp;是集合&nbsp;<code>{\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}</code>&nbsp;中的一个元素。</li> \n <li><code>Year</code>&nbsp;的范围在 ​<code>[1900, 2100]</code>&nbsp;之间。</li> \n</ul> \n<p>请你将字符串转变为&nbsp;<code>YYYY-MM-DD</code>&nbsp;的格式，其中：</p> \n<ul> \n <li><code>YYYY</code>&nbsp;表示 4 位的年份。</li> \n <li><code>MM</code>&nbsp;表示 2 位的月份。</li> \n <li><code>DD</code>&nbsp;表示 2 位的天数。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>date = \"20th Oct 2052\"\n<strong>输出：</strong>\"2052-10-20\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>date = \"6th Jun 1933\"\n<strong>输出：</strong>\"1933-06-06\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>date = \"26th May 1960\"\n<strong>输出：</strong>\"1960-05-26\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>给定日期保证是合法的，所以不需要处理异常输入。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1508. 子数组和排序后的区间和', '<p>给你一个数组&nbsp;<code>nums</code>&nbsp;，它包含&nbsp;<code>n</code>&nbsp;个正整数。你需要计算所有非空连续子数组的和，并将它们按升序排序，得到一个新的包含&nbsp;<code>n * (n + 1) / 2</code>&nbsp;个数字的数组。</p> \n<p>请你返回在新数组中下标为<em>&nbsp;</em><code>left</code>&nbsp;到&nbsp;<code>right</code> <strong>（下标从 1 开始）</strong>的所有数字和（包括左右端点）。由于答案可能很大，请你将它对 10^9 + 7 取模后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4], n = 4, left = 1, right = 5\n<strong>输出：</strong>13 \n<strong>解释：</strong>所有的子数组和为 1, 3, 6, 10, 2, 5, 9, 3, 7, 4 。将它们升序排序后，我们得到新的数组 [1, 2, 3, 3, 4, 5, 6, 7, 9, 10] 。下标从 le = 1 到 ri = 5 的和为 1 + 2 + 3 + 3 + 4 = 13 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4], n = 4, left = 3, right = 4\n<strong>输出：</strong>6\n<strong>解释：</strong>给定数组与示例 1 一样，所以新数组为 [1, 2, 3, 3, 4, 5, 6, 7, 9, 10] 。下标从 le = 3 到 ri = 4 的和为 3 + 3 = 6 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4], n = 4, left = 1, right = 10\n<strong>输出：</strong>50\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10^3</code></li> \n <li><code>nums.length == n</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 100</code></li> \n <li><code>1 &lt;= left &lt;= right&nbsp;&lt;= n * (n + 1) / 2</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1509. 三次操作后最大值与最小值的最小差', '<p>给你一个数组&nbsp;<code>nums</code>&nbsp;，每次操作你可以选择&nbsp;<code>nums</code>&nbsp;中的任意一个元素并将它改成任意值。</p> \n<p>请你返回三次操作后， <code>nums</code>&nbsp;中最大值与最小值的差的最小值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [5,3,2,4]\n<strong>输出：</strong>0\n<strong>解释：</strong>将数组 [5,3,2,4] 变成 [<strong>2</strong>,<strong>2</strong>,2,<strong>2</strong>].\n最大值与最小值的差为 2-2 = 0 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,5,0,10,14]\n<strong>输出：</strong>1\n<strong>解释：</strong>将数组 [1,5,0,10,14] 变成 [1,<strong>1</strong>,0,<strong>1</strong>,<strong>1</strong>] 。\n最大值与最小值的差为 1-0 = 1 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [6,6,0,1,1,4,6]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [1,5,6,14,15]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10^5</code></li> \n <li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('151. 翻转字符串里的单词', '<p>给你一个字符串 <code>s</code> ，逐个翻转字符串中的所有 <strong>单词</strong> 。</p> \n<p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p> \n<p>请你返回一个翻转 <code>s</code> 中单词顺序并用单个空格相连的字符串。</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li>输入字符串 <code>s</code> 可以在前面、后面或者单词间包含多余的空格。</li> \n <li>翻转后单词间应当仅用一个空格分隔。</li> \n <li>翻转后的字符串中不应包含额外的空格。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"<code>the sky is blue</code>\"\n<strong>输出：</strong>\"<code>blue is sky the</code>\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \" &nbsp;hello world &nbsp;\"\n<strong>输出：</strong>\"world hello\"\n<strong>解释：</strong>输入字符串可以在前面或者后面包含多余的空格，但是翻转后的字符不能包括。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"a good &nbsp; example\"\n<strong>输出：</strong>\"example good a\"\n<strong>解释：</strong>如果两个单词间有多余的空格，将翻转后单词间的空格减少到只含一个。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"  Bob    Loves  Alice   \"\n<strong>输出：</strong>\"Alice Loves Bob\"\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>s = \"Alice does not even like bob\"\n<strong>输出：</strong>\"bob like even not does Alice\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> \n <li><code>s</code> 包含英文大小写字母、数字和空格 <code>\' \'</code></li> \n <li><code>s</code> 中 <strong>至少存在一个</strong> 单词</li> \n</ul> \n<ul> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>请尝试使用&nbsp;<code><em>O</em>(1)</code> 额外空间复杂度的原地解法。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1510. 石子游戏 IV', '<p>Alice 和 Bob 两个人轮流玩一个游戏，Alice 先手。</p> \n<p>一开始，有 <code>n</code>&nbsp;个石子堆在一起。每个人轮流操作，正在操作的玩家可以从石子堆里拿走 <strong>任意</strong>&nbsp;非零 <strong>平方数</strong>&nbsp;个石子。</p> \n<p>如果石子堆里没有石子了，则无法操作的玩家输掉游戏。</p> \n<p>给你正整数&nbsp;<code>n</code>&nbsp;，且已知两个人都采取最优策略。如果 Alice 会赢得比赛，那么返回&nbsp;<code>True</code>&nbsp;，否则返回&nbsp;<code>False</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>true\n<strong>解释：</strong>Alice 拿走 1 个石子并赢得胜利，因为 Bob 无法进行任何操作。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>false\n<strong>解释：</strong>Alice 只能拿走 1 个石子，然后 Bob 拿走最后一个石子并赢得胜利（2 -&gt; 1 -&gt; 0）。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 4\n<strong>输出：</strong>true\n<strong>解释：</strong>n 已经是一个平方数，Alice 可以一次全拿掉 4 个石子并赢得胜利（4 -&gt; 0）。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 7\n<strong>输出：</strong>false\n<strong>解释：</strong>当 Bob 采取最优策略时，Alice 无法赢得比赛。\n如果 Alice 一开始拿走 4 个石子， Bob 会拿走 1 个石子，然后 Alice 只能拿走 1 个石子，Bob 拿走最后一个石子并赢得胜利（7 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; 0）。\n如果 Alice 一开始拿走 1 个石子， Bob 会拿走 4 个石子，然后 Alice 只能拿走 1 个石子，Bob 拿走最后一个石子并赢得胜利（7 -&gt; 6 -&gt; 2 -&gt; 1 -&gt; 0）。</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 17\n<strong>输出：</strong>false\n<strong>解释：</strong>如果 Bob 采取最优策略，Alice 无法赢得胜利。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1512. 好数对的数目', '<p>给你一个整数数组 <code>nums</code> 。</p> \n<p>如果一组数字 <code>(i,j)</code> 满足 <code>nums[i]</code> == <code>nums[j]</code> 且 <code>i</code> &lt; <code>j</code> ，就可以认为这是一组 <strong>好数对</strong> 。</p> \n<p>返回好数对的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,1,1,3]\n<strong>输出：</strong>4\n<strong>解释：</strong>有 4 组好数对，分别是 (0,3), (0,4), (3,4), (2,5) ，下标从 0 开始\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,1,1]\n<strong>输出：</strong>6\n<strong>解释：</strong>数组中的每组数字都是好数对</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 100</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1513. 仅含 1 的子串数', '<p>给你一个二进制字符串 <code>s</code>（仅由 \'0\' 和 \'1\' 组成的字符串）。</p> \n<p>返回所有字符都为 1 的子字符串的数目。</p> \n<p>由于答案可能很大，请你将它对 10^9 + 7 取模后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"0110111\"\n<strong>输出</strong>：9\n<strong>解释：</strong>共有 9 个子字符串仅由 \'1\' 组成\n\"1\" -&gt; 5 次\n\"11\" -&gt; 3 次\n\"111\" -&gt; 1 次</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"101\"\n<strong>输出：</strong>2\n<strong>解释：</strong>子字符串 \"1\" 在 s 中共出现 2 次\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"111111\"\n<strong>输出：</strong>21\n<strong>解释：</strong>每个子字符串都仅由 \'1\' 组成\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"000\"\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>s[i] == \'0\'</code> 或 <code>s[i] == \'1\'</code></li> \n <li><code>1 &lt;= s.length &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1514. 概率最大的路径', '<p>给你一个由 <code>n</code> 个节点（下标从 0 开始）组成的无向加权图，该图由一个描述边的列表组成，其中 <code>edges[i] = [a, b]</code> 表示连接节点 a 和 b 的一条无向边，且该边遍历成功的概率为 <code>succProb[i]</code> 。</p> \n<p>指定两个节点分别作为起点 <code>start</code> 和终点 <code>end</code> ，请你找出从起点到终点成功概率最大的路径，并返回其成功概率。</p> \n<p>如果不存在从 <code>start</code> 到 <code>end</code> 的路径，请 <strong>返回 0</strong> 。只要答案与标准答案的误差不超过 <strong>1e-5 </strong>，就会被视作正确答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 186px; width: 187px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/12/1558_ex1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2\n<strong>输出：</strong>0.25000\n<strong>解释：</strong>从起点到终点有两条路径，其中一条的成功概率为 0.2 ，而另一条为 0.5 * 0.5 = 0.25\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 186px; width: 189px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/12/1558_ex2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2\n<strong>输出：</strong>0.30000\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"height: 191px; width: 215px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/12/1558_ex3.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2\n<strong>输出：</strong>0.00000\n<strong>解释：</strong>节点 0 和 节点 2 之间不存在路径\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 10^4</code></li> \n <li><code>0 &lt;= start, end &lt; n</code></li> \n <li><code>start != end</code></li> \n <li><code>0 &lt;= a, b &lt; n</code></li> \n <li><code>a != b</code></li> \n <li><code>0 &lt;= succProb.length == edges.length &lt;= 2*10^4</code></li> \n <li><code>0 &lt;= succProb[i] &lt;= 1</code></li> \n <li>每两个节点之间最多有一条边</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1515. 服务中心的最佳位置', '<p>一家快递公司希望在新城市建立新的服务中心。公司统计了该城市所有客户在二维地图上的坐标，并希望能够以此为依据为新的服务中心选址：使服务中心 <strong>到所有客户的欧几里得距离的总和最小</strong> 。</p> \n<p>给你一个数组 <code>positions</code> ，其中 <code>positions[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> 表示第 <code>i</code> 个客户在二维地图上的位置，返回到所有客户的 <strong>欧几里得距离的最小总和 。</strong></p> \n<p>换句话说，请你为服务中心选址，该位置的坐标 <code>[x<sub>centre</sub>, y<sub>centre</sub>]</code> 需要使下面的公式取到最小值：</p> \n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/12/q4_edited.jpg\" alt=\"\"></p> \n<p>与真实值误差在 <code>10^-5</code> 之内的答案将被视作正确答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 362px; width: 377px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/12/q4_e1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>positions = [[0,1],[1,0],[1,2],[2,1]]\n<strong>输出：</strong>4.00000\n<strong>解释：</strong>如图所示，你可以选 [x<sub>centre</sub>, y<sub>centre</sub>] = [1, 1] 作为新中心的位置，这样一来到每个客户的距离就都是 1，所有距离之和为 4 ，这也是可以找到的最小值。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 419px; width: 419px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/12/q4_e3.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>positions = [[1,1],[3,3]]\n<strong>输出：</strong>2.82843\n<strong>解释：</strong>欧几里得距离可能的最小总和为 sqrt(2) + sqrt(2) = 2.82843\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>positions = [[1,1]]\n<strong>输出：</strong>0.00000\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>positions = [[1,1],[0,0],[2,0]]\n<strong>输出：</strong>2.73205\n<strong>解释：</strong>乍一看，你可能会将中心定在 [1, 0] 并期待能够得到最小总和，但是如果选址在 [1, 0] 距离总和为 3\n如果将位置选在 [1.0, 0.5773502711] ，距离总和将会变为 2.73205\n当心精度问题！\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>positions = [[0,1],[3,2],[4,5],[7,6],[8,9],[11,1],[2,12]]\n<strong>输出：</strong>32.94036\n<strong>解释：</strong>你可以用 [4.3460852395, 4.9813795505] 作为新中心的位置\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;positions.length &lt;= 50</code></li> \n <li><code>positions[i].length == 2</code></li> \n <li><code>0 &lt;=&nbsp;positions[i][0],&nbsp;positions[i][1] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1518. 换酒问题', '<p>小区便利店正在促销，用 <code>numExchange</code> 个空酒瓶可以兑换一瓶新酒。你购入了 <code>numBottles</code> 瓶酒。</p> \n<p>如果喝掉了酒瓶中的酒，那么酒瓶就会变成空的。</p> \n<p>请你计算 <strong>最多</strong> 能喝到多少瓶酒。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 240px; width: 480px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/19/sample_1_1875.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>numBottles = 9, numExchange = 3\n<strong>输出：</strong>13\n<strong>解释：</strong>你可以用 <code>3</code> 个空酒瓶兑换 1 瓶酒。\n所以最多能喝到 9 + 3 + 1 = 13 瓶酒。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 240px; width: 790px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/19/sample_2_1875.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>numBottles = 15, numExchange = 4\n<strong>输出：</strong>19\n<strong>解释：</strong>你可以用 <code>4</code> 个空酒瓶兑换 1 瓶酒。\n所以最多能喝到 15 + 3 + 1 = 19 瓶酒。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>numBottles = 5, numExchange = 5\n<strong>输出：</strong>6\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>numBottles = 2, numExchange = 3\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;numBottles &lt;= 100</code></li> \n <li><code>2 &lt;=&nbsp;numExchange &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1519. 子树中标签相同的节点数', '<p>给你一棵树（即，一个连通的无环无向图），这棵树由编号从 <code>0</code>&nbsp; 到 <code>n - 1</code> 的 n 个节点组成，且恰好有 <code>n - 1</code> 条 <code>edges</code> 。树的根节点为节点 <code>0</code> ，树上的每一个节点都有一个标签，也就是字符串 <code>labels</code> 中的一个小写字符（编号为 <code>i</code> 的 节点的标签就是 <code>labels[i]</code> ）</p> \n<p>边数组 <code>edges</code> 以 <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> 的形式给出，该格式表示节点 <code>a<sub>i</sub></code> 和 <code>b<sub>i</sub></code> 之间存在一条边。</p> \n<p>返回一个大小为 <em><code>n</code></em> 的数组，其中 <code>ans[i]</code> 表示第 <code>i</code> 个节点的子树中与节点 <code>i</code> 标签相同的节点数。</p> \n<p>树 <code>T</code> 中的子树是由 <code>T</code> 中的某个节点及其所有后代节点组成的树。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 321px; width: 441px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/19/q3e1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \"abaedcd\"\n<strong>输出：</strong>[2,1,1,1,1,1,1]\n<strong>解释：</strong>节点 0 的标签为 \'a\' ，以 \'a\' 为根节点的子树中，节点 2 的标签也是 \'a\' ，因此答案为 2 。注意树中的每个节点都是这棵子树的一部分。\n节点 1 的标签为 \'b\' ，节点 1 的子树包含节点 1、4 和 5，但是节点 4、5 的标签与节点 1 不同，故而答案为 1（即，该节点本身）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 321px; width: 381px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/19/q3e2.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 4, edges = [[0,1],[1,2],[0,3]], labels = \"bbbb\"\n<strong>输出：</strong>[4,2,1,1]\n<strong>解释：</strong>节点 2 的子树中只有节点 2 ，所以答案为 1 。\n节点 3 的子树中只有节点 3 ，所以答案为 1 。\n节点 1 的子树中包含节点 1 和 2 ，标签都是 \'b\' ，因此答案为 2 。\n节点 0 的子树中包含节点 0、1、2 和 3，标签都是 \'b\'，因此答案为 4 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 321px; width: 381px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/19/q3e3.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \"aabab\"\n<strong>输出：</strong>[3,2,1,1,1]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 6, edges = [[0,1],[0,2],[1,3],[3,4],[4,5]], labels = \"cbabaa\"\n<strong>输出：</strong>[1,2,1,1,2,1]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], labels = \"aaabaaa\"\n<strong>输出：</strong>[6,5,4,1,3,2,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^5</code></li> \n <li><code>edges.length == n - 1</code></li> \n <li><code>edges[i].length == 2</code></li> \n <li><code>0 &lt;= a<sub>i</sub>,&nbsp;b<sub>i</sub> &lt; n</code></li> \n <li><code>a<sub>i</sub> !=&nbsp;b<sub>i</sub></code></li> \n <li><code>labels.length == n</code></li> \n <li><code>labels</code> 仅由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('152. 乘积最大子数组', '<p>给你一个整数数组 <code>nums</code>&nbsp;，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [2,3,-2,4]\n<strong>输出:</strong> <code>6</code>\n<strong>解释:</strong>&nbsp;子数组 [2,3] 有最大乘积 6。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> [-2,0,-1]\n<strong>输出:</strong> 0\n<strong>解释:</strong>&nbsp;结果不能为 2, 因为 [-2,-1] 不是子数组。</pre>');
INSERT INTO `leecode` VALUES ('1520. 最多的不重叠子字符串', '<p>给你一个只包含小写字母的字符串&nbsp;<code>s</code>&nbsp;，你需要找到 <code>s</code>&nbsp;中最多数目的非空子字符串，满足如下条件：</p> \n<ol> \n <li>这些字符串之间互不重叠，也就是说对于任意两个子字符串&nbsp;<code>s[i..j]</code> 和&nbsp;<code>s[k..l]</code>&nbsp;，要么&nbsp;<code>j &lt; k</code>&nbsp;要么&nbsp;<code>i &gt; l</code>&nbsp;。</li> \n <li>如果一个子字符串包含字符&nbsp;<code>char</code> ，那么&nbsp;<code>s</code>&nbsp;中所有&nbsp;<code>char</code> 字符都应该在这个子字符串中。</li> \n</ol> \n<p>请你找到满足上述条件的最多子字符串数目。如果有多个解法有相同的子字符串数目，请返回这些子字符串总长度最小的一个解。可以证明最小总长度解是唯一的。</p> \n<p>请注意，你可以以 <strong>任意</strong>&nbsp;顺序返回最优解的子字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"adefaddaccc\"\n<strong>输出：</strong>[\"e\",\"f\",\"ccc\"]\n<strong>解释：</strong>下面为所有满足第二个条件的子字符串：\n[\n&nbsp; \"adefaddaccc\"\n&nbsp; \"adefadda\",\n&nbsp; \"ef\",\n&nbsp; \"e\",\n  \"f\",\n&nbsp; \"ccc\",\n]\n如果我们选择第一个字符串，那么我们无法再选择其他任何字符串，所以答案为 1 。如果我们选择 \"adefadda\" ，剩下子字符串中我们只可以选择 \"ccc\" ，它是唯一不重叠的子字符串，所以答案为 2 。同时我们可以发现，选择 \"ef\" 不是最优的，因为它可以被拆分成 2 个子字符串。所以最优解是选择 [\"e\",\"f\",\"ccc\"] ，答案为 3 。不存在别的相同数目子字符串解。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abbaccd\"\n<strong>输出：</strong>[\"d\",\"bb\",\"cc\"]\n<strong>解释：</strong>注意到解 [\"d\",\"abba\",\"cc\"] 答案也为 3 ，但它不是最优解，因为它的总长度更长。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10^5</code></li> \n <li><code>s</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1521. 找到最接近目标值的函数值', '<p><img style=\"height: 312px; width: 635px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/19/change.png\" alt=\"\"></p> \n<p>Winston 构造了一个如上所示的函数&nbsp;<code>func</code>&nbsp;。他有一个整数数组&nbsp;<code>arr</code>&nbsp;和一个整数&nbsp;<code>target</code>&nbsp;，他想找到让&nbsp;<code>|func(arr, l, r) - target|</code>&nbsp;最小的 <code>l</code>&nbsp;和 <code>r</code>&nbsp;。</p> \n<p>请你返回&nbsp;<code>|func(arr, l, r) - target|</code>&nbsp;的最小值。</p> \n<p>请注意，&nbsp;<code>func</code> 的输入参数&nbsp;<code>l</code> 和&nbsp;<code>r</code>&nbsp;需要满足&nbsp;<code>0 &lt;= l, r &lt; arr.length</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [9,12,3,7,15], target = 5\n<strong>输出：</strong>2\n<strong>解释：</strong>所有可能的 [l,r] 数对包括 [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]]， Winston 得到的相应结果为 [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0] 。最接近 5 的值是 7 和 3，所以最小差值为 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1000000,1000000,1000000], target = 1\n<strong>输出：</strong>999999\n<strong>解释：</strong>Winston 输入函数的所有可能 [l,r] 数对得到的函数值都为 1000000 ，所以最小差值为 999999 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,4,8,16], target = 0\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 10^6</code></li> \n <li><code>0 &lt;= target &lt;= 10^7</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1523. 在区间范围内统计奇数数目', '<p>给你两个非负整数&nbsp;<code>low</code> 和&nbsp;<code>high</code>&nbsp;。请你返回<em>&nbsp;</em><code>low</code><em> </em>和<em>&nbsp;</em><code>high</code><em>&nbsp;</em>之间（包括二者）奇数的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>low = 3, high = 7\n<strong>输出：</strong>3\n<strong>解释：</strong>3 到 7 之间奇数数字为 [3,5,7] 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>low = 8, high = 10\n<strong>输出：</strong>1\n<strong>解释：</strong>8 到 10 之间奇数数字为 [9] 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= low &lt;= high&nbsp;&lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1524. 和为奇数的子数组数目', '<p>给你一个整数数组&nbsp;<code>arr</code>&nbsp;。请你返回和为 <strong>奇数</strong>&nbsp;的子数组数目。</p> \n<p>由于答案可能会很大，请你将结果对&nbsp;<code>10^9 + 7</code>&nbsp;取余后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [1,3,5]\n<strong>输出：</strong>4\n<strong>解释：</strong>所有的子数组为 [[1],[1,3],[1,3,5],[3],[3,5],[5]] 。\n所有子数组的和为 [1,4,9,3,8,5].\n奇数和包括 [1,9,3,5] ，所以答案为 4 。\n</pre> \n<p><strong>示例 2 ：</strong></p> \n<pre><strong>输入：</strong>arr = [2,4,6]\n<strong>输出：</strong>0\n<strong>解释：</strong>所有子数组为 [[2],[2,4],[2,4,6],[4],[4,6],[6]] 。\n所有子数组和为 [2,6,12,4,10,6] 。\n所有子数组和都是偶数，所以答案为 0 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,3,4,5,6,7]\n<strong>输出：</strong>16\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [100,100,99,99]\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>arr = [7]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1525. 字符串的好分割数目', '<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，一个分割被称为 「好分割」&nbsp;当它满足：将&nbsp;<code>s</code>&nbsp;分割成 2 个字符串&nbsp;<code>p</code> 和&nbsp;<code>q</code>&nbsp;，它们连接起来等于&nbsp;<code>s</code>&nbsp;且 <code>p</code>&nbsp;和 <code>q</code>&nbsp;中不同字符的数目相同。</p> \n<p>请你返回 <code>s</code>&nbsp;中好分割的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"aacaba\"\n<strong>输出：</strong>2\n<strong>解释：</strong>总共有 5 种分割字符串 <code>\"aacaba\"</code> 的方法，其中 2 种是好分割。\n(\"a\", \"acaba\") 左边字符串和右边字符串分别包含 1 个和 3 个不同的字符。\n(\"aa\", \"caba\") 左边字符串和右边字符串分别包含 1 个和 3 个不同的字符。\n(\"aac\", \"aba\") 左边字符串和右边字符串分别包含 2 个和 2 个不同的字符。这是一个好分割。\n(\"aaca\", \"ba\") 左边字符串和右边字符串分别包含 2 个和 2 个不同的字符。这是一个好分割。\n(\"aacab\", \"a\") 左边字符串和右边字符串分别包含 3 个和 1 个不同的字符。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abcd\"\n<strong>输出：</strong>1\n<strong>解释：</strong>好分割为将字符串分割成 (\"ab\", \"cd\") 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"aaaaa\"\n<strong>输出：</strong>4\n<strong>解释：</strong>所有分割都是好分割。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"acbadbaada\"\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>s</code>&nbsp;只包含小写英文字母。</li> \n <li><code>1 &lt;= s.length &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1526. 形成目标数组的子数组最少增加次数', '<p>给你一个整数数组&nbsp;<code>target</code>&nbsp;和一个数组&nbsp;<code>initial</code>&nbsp;，<code>initial</code>&nbsp;数组与 <code>target</code>&nbsp; 数组有同样的维度，且一开始全部为 0 。</p> \n<p>请你返回从 <code>initial</code>&nbsp;得到&nbsp; <code>target</code>&nbsp;的最少操作次数，每次操作需遵循以下规则：</p> \n<ul> \n <li>在 <code>initial</code>&nbsp;中选择 <strong>任意</strong>&nbsp;子数组，并将子数组中每个元素增加 1 。</li> \n</ul> \n<p>答案保证在 32 位有符号整数以内。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>target = [1,2,3,2,1]\n<strong>输出：</strong>3\n<strong>解释：</strong>我们需要至少 3 次操作从 intial 数组得到 target 数组。\n[0,0,0,0,0] 将下标为 0 到 4&nbsp;的元素（包含二者）加 1 。\n[1,1,1,1,1] 将下标为 1 到 3 的元素（包含二者）加 1 。\n[1,2,2,2,1] 将下表为 2 的元素增加 1 。\n[1,2,3,2,1] 得到了目标数组。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>target = [3,1,1,2]\n<strong>输出：</strong>4\n<strong>解释：</strong>(initial)[0,0,0,0] -&gt; [1,1,1,1] -&gt; [1,1,1,2] -&gt; [2,1,1,2] -&gt; [3,1,1,2] (target) 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>target = [3,1,5,4,2]\n<strong>输出：</strong>7\n<strong>解释：</strong>(initial)[0,0,0,0,0] -&gt; [1,1,1,1,1] -&gt; [2,1,1,1,1] -&gt; [3,1,1,1,1] \n                                  -&gt; [3,1,2,2,2] -&gt; [3,1,3,3,2] -&gt; [3,1,4,4,2] -&gt; [3,1,5,4,2] (target)。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>target = [1,1,1,1]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= target.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= target[i] &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1528. 重新排列字符串', '<p>给你一个字符串 <code>s</code> 和一个 <strong>长度相同</strong> 的整数数组 <code>indices</code> 。</p> \n<p>请你重新排列字符串 <code>s</code> ，其中第 <code>i</code> 个字符需要移动到 <code>indices[i]</code> 指示的位置。</p> \n<p>返回重新排列后的字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 243px; width: 321px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/26/q1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>s = \"codeleet\", <code>indices</code> = [4,5,6,7,0,2,1,3]\n<strong>输出：</strong>\"leetcode\"\n<strong>解释：</strong>如图所示，\"codeleet\" 重新排列后变为 \"leetcode\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abc\", <code>indices</code> = [0,1,2]\n<strong>输出：</strong>\"abc\"\n<strong>解释：</strong>重新排列后，每个字符都还留在原来的位置上。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"aiohn\", <code>indices</code> = [3,1,4,2,0]\n<strong>输出：</strong>\"nihao\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"aaiougrt\", <code>indices</code> = [4,0,2,6,7,3,1,5]\n<strong>输出：</strong>\"arigatou\"\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>s = \"art\", <code>indices</code> = [1,0,2]\n<strong>输出：</strong>\"rat\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>s.length == indices.length == n</code></li> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>s</code> 仅包含小写英文字母。</li> \n <li><code>0 &lt;= indices[i] &lt;&nbsp;n</code></li> \n <li><code>indices</code> 的所有的值都是唯一的（也就是说，<code>indices</code> 是整数 <code>0</code> 到 <code>n - 1</code> 形成的一组排列）。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1529. 灯泡开关 IV', '<p>房间中有 <code>n</code> 个灯泡，编号从 <code>0</code> 到 <code>n-1</code> ，自左向右排成一行。最开始的时候，所有的灯泡都是 <strong>关</strong> 着的。</p> \n<p>请你设法使得灯泡的开关状态和 <code>target</code> 描述的状态一致，其中 <code>target[i]</code> 等于 <code>1</code> 第 <code>i</code> 个灯泡是开着的，等于 <code>0</code> 意味着第 <code>i</code> 个灯是关着的。</p> \n<p>有一个开关可以用于翻转灯泡的状态，翻转操作定义如下：</p> \n<ul> \n <li>选择当前配置下的任意一个灯泡（下标为 <code>i</code> ）</li> \n <li>翻转下标从 <code>i</code> 到 <code>n-1</code> 的每个灯泡</li> \n</ul> \n<p>翻转时，如果灯泡的状态为 <code>0</code> 就变为 <code>1</code>，为 <code>1</code> 就变为 <code>0</code> 。</p> \n<p>返回达成 <code>target</code> 描述的状态所需的 <strong>最少</strong> 翻转次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>target = \"10111\"\n<strong>输出：</strong>3\n<strong>解释：</strong>初始配置 \"00000\".\n从第 3 个灯泡（下标为 2）开始翻转 \"00000\" -&gt; \"00111\"\n从第 1 个灯泡（下标为 0）开始翻转 \"00111\" -&gt; \"11000\"\n从第 2 个灯泡（下标为 1）开始翻转 \"11000\" -&gt; \"10111\"\n至少需要翻转 3 次才能达成 target 描述的状态</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>target = \"101\"\n<strong>输出：</strong>3\n<strong>解释：</strong>\"000\" -&gt; \"111\" -&gt; \"100\" -&gt; \"101\".\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>target = \"00000\"\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>target = \"001011101\"\n<strong>输出：</strong>5\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= target.length &lt;= 10^5</code></li> \n <li><code>target[i] == \'0\'</code> 或者 <code>target[i] == \'1\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('153. 寻找旋转排序数组中的最小值', '已知一个长度为 \n<code>n</code> 的数组，预先按照升序排列，经由 \n<code>1</code> 到 \n<code>n</code> 次 \n<strong>旋转</strong> 后，得到输入数组。例如，原数组 \n<code>nums = [0,1,2,4,5,6,7]</code> 在变化后可能得到： \n<ul> \n <li>若旋转 <code>4</code> 次，则可以得到 <code>[4,5,6,7,0,1,2]</code></li> \n <li>若旋转 <code>7</code> 次，则可以得到 <code>[0,1,2,4,5,6,7]</code></li> \n</ul> \n<p>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> <strong>旋转一次</strong> 的结果为数组 <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> 。</p> \n<p>给你一个元素值 <strong>互不相同</strong> 的数组 <code>nums</code> ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 <strong>最小元素</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [3,4,5,1,2]\n<strong>输出：</strong>1\n<strong>解释：</strong>原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [4,5,6,7,0,1,2]\n<strong>输出：</strong>0\n<strong>解释：</strong>原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [11,13,15,17]\n<strong>输出：</strong>11\n<strong>解释：</strong>原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>1 &lt;= n &lt;= 5000</code></li> \n <li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li> \n <li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li> \n <li><code>nums</code> 原来是一个升序排序的数组，并进行了 <code>1</code> 至 <code>n</code> 次旋转</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1530. 好叶子节点对的数量', '<p>给你二叉树的根节点 <code>root</code> 和一个整数 <code>distance</code> 。</p> \n<p>如果二叉树中两个 <strong>叶</strong> 节点之间的 <strong>最短路径长度</strong> 小于或者等于 <code>distance</code> ，那它们就可以构成一组 <strong>好叶子节点对</strong> 。</p> \n<p>返回树中 <strong>好叶子节点对的数量</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p>&nbsp;</p> \n<p><img style=\"height: 321px; width: 321px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/26/e1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [1,2,3,null,4], distance = 3\n<strong>输出：</strong>1\n<strong>解释：</strong>树的叶节点是 3 和 4 ，它们之间的最短路径的长度是 3 。这是唯一的好叶子节点对。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 321px; width: 441px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/26/e2.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [1,2,3,4,5,6,7], distance = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>好叶子节点对为 [4,5] 和 [6,7] ，最短路径长度都是 2 。但是叶子节点对 [4,6] 不满足要求，因为它们之间的最短路径长度为 4 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3\n<strong>输出：</strong>1\n<strong>解释：</strong>唯一的好叶子节点对是 [2,5] 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>root = [100], distance = 1\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>root = [1,1,1], distance = 2\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>tree</code> 的节点数在 <code>[1, 2^10]</code> 范围内。</li> \n <li>每个节点的值都在 <code>[1, 100]</code> 之间。</li> \n <li><code>1 &lt;= distance &lt;= 10</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1531. 压缩字符串 II', '<p><a href=\"https://baike.baidu.com/item/%E8%A1%8C%E7%A8%8B%E9%95%BF%E5%BA%A6%E7%BC%96%E7%A0%81/2931940?fr=aladdin\">行程长度编码</a> 是一种常用的字符串压缩方法，它将连续的相同字符（重复 2 次或更多次）替换为字符和表示字符计数的数字（行程长度）。例如，用此方法压缩字符串 <code>\"aabccc\"</code> ，将 <code>\"aa\"</code> 替换为 <code>\"a2\"</code> ，<code>\"ccc\"</code> 替换为` <code>\"c3\"</code> 。因此压缩后的字符串变为 <code>\"a2bc3\"</code> 。</p> \n<p>注意，本问题中，压缩时没有在单个字符后附加计数 <code>\'1\'</code> 。</p> \n<p>给你一个字符串 <code>s</code> 和一个整数 <code>k</code> 。你需要从字符串 <code>s</code> 中删除最多 <code>k</code> 个字符，以使 <code>s</code> 的行程长度编码长度最小。</p> \n<p>请你返回删除最多 <code>k</code> 个字符后，<code>s</code> <strong>行程长度编码的最小长度</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"aaabcccd\", k = 2\n<strong>输出：</strong>4\n<strong>解释：</strong>在不删除任何内容的情况下，压缩后的字符串是 \"a3bc3d\" ，长度为 6 。最优的方案是删除 \'b\' 和 \'d\'，这样一来，压缩后的字符串为 \"a3c3\" ，长度是 4 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"aabbaa\", k = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>如果删去两个 \'b\' 字符，那么压缩后的字符串是长度为 2 的 \"a4\" 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"aaaaaaaaaaa\", k = 0\n<strong>输出：</strong>3\n<strong>解释：</strong>由于 k 等于 0 ，不能删去任何字符。压缩后的字符串是 \"a11\" ，长度为 3 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 100</code></li> \n <li><code>0 &lt;= k &lt;= s.length</code></li> \n <li><code>s</code> 仅包含小写英文字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1534. 统计好三元组', '<p>给你一个整数数组 <code>arr</code> ，以及 <code>a</code>、<code>b</code> 、<code>c</code> 三个整数。请你统计其中好三元组的数量。</p> \n<p>如果三元组 <code>(arr[i], arr[j], arr[k])</code> 满足下列全部条件，则认为它是一个 <strong>好三元组</strong> 。</p> \n<ul> \n <li><code>0 &lt;= i &lt; j &lt; k &lt;&nbsp;arr.length</code></li> \n <li><code>|arr[i] - arr[j]| &lt;= a</code></li> \n <li><code>|arr[j] - arr[k]| &lt;= b</code></li> \n <li><code>|arr[i] - arr[k]| &lt;= c</code></li> \n</ul> \n<p>其中 <code>|x|</code> 表示 <code>x</code> 的绝对值。</p> \n<p>返回 <strong>好三元组的数量</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3\n<strong>输出：</strong>4\n<strong>解释：</strong>一共有 4 个好三元组：[(3,0,1), (3,0,1), (3,1,1), (0,1,1)] 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,1,2,2,3], a = 0, b = 0, c = 1\n<strong>输出：</strong>0\n<strong>解释：</strong>不存在满足所有条件的三元组。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= arr.length &lt;= 100</code></li> \n <li><code>0 &lt;= arr[i] &lt;= 1000</code></li> \n <li><code>0 &lt;= a, b, c &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1535. 找出数组游戏的赢家', '<p>给你一个由 <strong>不同</strong> 整数组成的整数数组 <code>arr</code> 和一个整数 <code>k</code> 。</p> \n<p>每回合游戏都在数组的前两个元素（即 <code>arr[0]</code> 和 <code>arr[1]</code> ）之间进行。比较 <code>arr[0]</code> 与 <code>arr[1]</code> 的大小，较大的整数将会取得这一回合的胜利并保留在位置 <code>0</code> ，较小的整数移至数组的末尾。当一个整数赢得 <code>k</code> 个连续回合时，游戏结束，该整数就是比赛的 <strong>赢家</strong> 。</p> \n<p>返回赢得比赛的整数。</p> \n<p>题目数据 <strong>保证</strong> 游戏存在赢家。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [2,1,3,5,4,6,7], k = 2\n<strong>输出：</strong>5\n<strong>解释：</strong>一起看一下本场游戏每回合的情况：\n<img style=\"height: 90px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/30/q-example.png\" alt=\"\">\n因此将进行 4 回合比赛，其中 5 是赢家，因为它连胜 2 回合。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [3,2,1], k = 10\n<strong>输出：</strong>3\n<strong>解释：</strong>3 将会在前 10 个回合中连续获胜。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [1,9,8,2,3,7,6,4,5], k = 7\n<strong>输出：</strong>9\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000\n<strong>输出：</strong>99\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= arr.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 10^6</code></li> \n <li><code>arr</code> 所含的整数 <strong>各不相同</strong> 。</li> \n <li><code>1 &lt;= k &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1536. 排布二进制网格的最少交换次数', '<p>给你一个&nbsp;<code>n&nbsp;x n</code>&nbsp;的二进制网格&nbsp;<code>grid</code>，每一次操作中，你可以选择网格的&nbsp;<strong>相邻两行</strong>&nbsp;进行交换。</p> \n<p>一个符合要求的网格需要满足主对角线以上的格子全部都是 <strong>0</strong>&nbsp;。</p> \n<p>请你返回使网格满足要求的最少操作次数，如果无法使网格符合要求，请你返回 <strong>-1</strong>&nbsp;。</p> \n<p>主对角线指的是从&nbsp;<code>(1, 1)</code>&nbsp;到&nbsp;<code>(n, n)</code>&nbsp;的这些格子。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 141px; width: 750px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/02/fw.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>grid = [[0,0,1],[1,1,0],[1,0,0]]\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 270px; width: 270px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/02/e2.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]\n<strong>输出：</strong>-1\n<strong>解释：</strong>所有行都是一样的，交换相邻行无法使网格符合要求。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 210px; width: 210px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/02/e3.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>grid = [[1,0,0],[1,1,0],[1,1,1]]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= n&nbsp;&lt;= 200</code></li> \n <li><code>grid[i][j]</code>&nbsp;要么是&nbsp;<code>0</code>&nbsp;要么是&nbsp;<code>1</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1537. 最大得分', '<p>你有两个 <strong>有序</strong>&nbsp;且数组内元素互不相同的数组&nbsp;<code>nums1</code> 和&nbsp;<code>nums2</code>&nbsp;。</p> \n<p>一条&nbsp;<strong>合法路径</strong>&nbsp;定义如下：</p> \n<ul> \n <li>选择数组 nums1 或者 nums2 开始遍历（从下标 0 处开始）。</li> \n <li>从左到右遍历当前数组。</li> \n <li>如果你遇到了 <code>nums1</code>&nbsp;和 <code>nums2</code>&nbsp;中都存在的值，那么你可以切换路径到另一个数组对应数字处继续遍历（但在合法路径中重复数字只会被统计一次）。</li> \n</ul> \n<p>得分定义为合法路径中不同数字的和。</p> \n<p>请你返回所有可能合法路径中的最大得分。</p> \n<p>由于答案可能很大，请你将它对 10^9 + 7 取余后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 163px; width: 538px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/02/sample_1_1893.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]\n<strong>输出：</strong>30\n<strong>解释：</strong>合法路径包括：\n[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],（从 nums1 开始遍历）\n[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]  （从 nums2 开始遍历）\n最大得分为上图中的绿色路径 <strong>[2,4,6,8,10]</strong>&nbsp;。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums1 = [1,3,5,7,9], nums2 = [3,5,100]\n<strong>输出：</strong>109\n<strong>解释：</strong>最大得分由路径 <strong>[1,3,5,100]</strong> 得到。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]\n<strong>输出：</strong>40\n<strong>解释：</strong>nums1 和 nums2 之间无相同数字。\n最大得分由路径 <strong>[6,7,8,9,10]</strong> 得到。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums1 = [1,4,5,8,9,11,19], nums2 = [2,3,4,11,12]\n<strong>输出：</strong>61\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums1.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= nums2.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10^7</code></li> \n <li><code>nums1</code> 和&nbsp;<code>nums2</code>&nbsp;都是严格递增的数组。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1539. 第 k 个缺失的正整数', '<p>给你一个 <strong>严格升序排列</strong>&nbsp;的正整数数组 <code>arr</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;。</p> \n<p>请你找到这个数组里第&nbsp;<code>k</code>&nbsp;个缺失的正整数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [2,3,4,7,11], k = 5\n<strong>输出：</strong>9\n<strong>解释：</strong>缺失的正整数包括 [1,5,6,8,9,10,12,13,...] 。第 5 个缺失的正整数为 9 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,3,4], k = 2\n<strong>输出：</strong>6\n<strong>解释：</strong>缺失的正整数包括 [5,6,7,...] 。第 2 个缺失的正整数为 6 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 1000</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 1000</code></li> \n <li><code>1 &lt;= k &lt;= 1000</code></li> \n <li>对于所有&nbsp;<code>1 &lt;= i &lt; j &lt;= arr.length</code>&nbsp;的 <code>i</code>&nbsp;和 <code>j</code> 满足&nbsp;<code>arr[i] &lt; arr[j]</code>&nbsp;</li> \n</ul>');
INSERT INTO `leecode` VALUES ('154. 寻找旋转排序数组中的最小值 II', '已知一个长度为 \n<code>n</code> 的数组，预先按照升序排列，经由 \n<code>1</code> 到 \n<code>n</code> 次 \n<strong>旋转</strong> 后，得到输入数组。例如，原数组 \n<code>nums = [0,1,4,4,5,6,7]</code> 在变化后可能得到： \n<ul> \n <li>若旋转 <code>4</code> 次，则可以得到 <code>[4,5,6,7,0,1,4]</code></li> \n <li>若旋转 <code>7</code> 次，则可以得到 <code>[0,1,4,4,5,6,7]</code></li> \n</ul> \n<p>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> <strong>旋转一次</strong> 的结果为数组 <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> 。</p> \n<p>给你一个可能存在 <strong>重复</strong> 元素值的数组 <code>nums</code> ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 <strong>最小元素</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,3,5]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [2,2,2,0,1]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>1 &lt;= n &lt;= 5000</code></li> \n <li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li> \n <li><code>nums</code> 原来是一个升序排序的数组，并进行了 <code>1</code> 至 <code>n</code> 次旋转</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>这道题是&nbsp;<a href=\"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/description/\">寻找旋转排序数组中的最小值</a>&nbsp;的延伸题目。</li> \n <li>允许重复会影响算法的时间复杂度吗？会如何影响，为什么？</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1540. K 次操作转变字符串', '<p>给你两个字符串&nbsp;<code>s</code>&nbsp;和&nbsp;<code>t</code>&nbsp;，你的目标是在 <code>k</code>&nbsp;次操作以内把字符串&nbsp;<code>s</code>&nbsp;转变成&nbsp;<code>t</code>&nbsp;。</p> \n<p>在第 <code>i</code>&nbsp;次操作时（<code>1 &lt;= i &lt;= k</code>），你可以选择进行如下操作：</p> \n<ul> \n <li>选择字符串 <code>s</code>&nbsp;中满足 <code>1 &lt;= j &lt;= s.length</code>&nbsp;且之前未被选过的任意下标 <code>j</code>&nbsp;（下标从 1 开始），并将此位置的字符切换 <code>i</code>&nbsp;次。</li> \n <li>不进行任何操作。</li> \n</ul> \n<p>切换 1 次字符的意思是用字母表中该字母的下一个字母替换它（字母表环状接起来，所以 <code>\'z\'</code>&nbsp;切换后会变成 <code>\'a\'</code>）。</p> \n<p>请记住任意一个下标 <code>j</code>&nbsp;最多只能被操作&nbsp;1 次。</p> \n<p>如果在不超过 <code>k</code>&nbsp;次操作内可以把字符串 <code>s</code>&nbsp;转变成 <code>t</code>&nbsp;，那么请你返回&nbsp;<code>true</code>&nbsp;，否则请你返回&nbsp;<code>false</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"input\", t = \"ouput\", k = 9\n<strong>输出：</strong>true\n<strong>解释：</strong>第 6 次操作时，我们将 \'i\' 切换 6 次得到 \'o\' 。第 7 次操作时，我们将 \'n\' 切换 7 次得到 \'u\' 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abc\", t = \"bcd\", k = 10\n<strong>输出：</strong>false\n<strong>解释：</strong>我们需要将每个字符切换 1 次才能得到 t 。我们可以在第 1 次操作时将 \'a\' 切换成 \'b\' ，但另外 2 个字母在剩余操作中无法再转变为 t 中对应字母。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"aab\", t = \"bbb\", k = 27\n<strong>输出：</strong>true\n<strong>解释：</strong>第 1 次操作时，我们将第一个 \'a\' 切换 1 次得到 \'b\' 。在第 27 次操作时，我们将第二个字母 \'a\' 切换 27 次得到 \'b\' 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length, t.length &lt;= 10^5</code></li> \n <li><code>0 &lt;= k &lt;= 10^9</code></li> \n <li><code>s</code>&nbsp;和&nbsp;<code>t</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1541. 平衡括号字符串的最少插入次数', '<p>给你一个括号字符串&nbsp;<code>s</code>&nbsp;，它只包含字符&nbsp;<code>\'(\'</code> 和&nbsp;<code>\')\'</code>&nbsp;。一个括号字符串被称为平衡的当它满足：</p> \n<ul> \n <li>任何左括号&nbsp;<code>\'(\'</code>&nbsp;必须对应两个连续的右括号&nbsp;<code>\'))\'</code>&nbsp;。</li> \n <li>左括号&nbsp;<code>\'(\'</code>&nbsp;必须在对应的连续两个右括号&nbsp;<code>\'))\'</code>&nbsp;之前。</li> \n</ul> \n<p>比方说&nbsp;<code>\"())\"</code>，&nbsp;<code>\"())(())))\"</code> 和&nbsp;<code>\"(())())))\"</code>&nbsp;都是平衡的，&nbsp;<code>\")()\"</code>，&nbsp;<code>\"()))\"</code> 和&nbsp;<code>\"(()))\"</code>&nbsp;都是不平衡的。</p> \n<p>你可以在任意位置插入字符 \'(\' 和 \')\' 使字符串平衡。</p> \n<p>请你返回让 <code>s</code>&nbsp;平衡的最少插入次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"(()))\"\n<strong>输出：</strong>1\n<strong>解释：</strong>第二个左括号有与之匹配的两个右括号，但是第一个左括号只有一个右括号。我们需要在字符串结尾额外增加一个 \')\' 使字符串变成平衡字符串 \"(())))\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"())\"\n<strong>输出：</strong>0\n<strong>解释：</strong>字符串已经平衡了。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"))())(\"\n<strong>输出：</strong>3\n<strong>解释：</strong>添加 \'(\' 去匹配最开头的 \'))\' ，然后添加 \'))\' 去匹配最后一个 \'(\' 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"((((((\"\n<strong>输出：</strong>12\n<strong>解释：</strong>添加 12 个 \')\' 得到平衡字符串。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>s = \")))))))\"\n<strong>输出：</strong>5\n<strong>解释：</strong>在字符串开头添加 4 个 \'(\' 并在结尾添加 1 个 \')\' ，字符串变成平衡字符串 \"(((())))))))\" 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10^5</code></li> \n <li><code>s</code>&nbsp;只包含&nbsp;<code>\'(\'</code> 和&nbsp;<code>\')\'</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1542. 找出最长的超赞子字符串', '<p>给你一个字符串 <code>s</code> 。请返回 <code>s</code> 中最长的 <strong>超赞子字符串</strong> 的长度。</p> \n<p>「超赞子字符串」需满足满足下述两个条件：</p> \n<ul> \n <li>该字符串是 <code>s</code> 的一个非空子字符串</li> \n <li>进行任意次数的字符交换后，该字符串可以变成一个回文字符串</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"3242415\"\n<strong>输出：</strong>5\n<strong>解释：</strong>\"24241\" 是最长的超赞子字符串，交换其中的字符后，可以得到回文 \"24142\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"12345678\"\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"213123\"\n<strong>输出：</strong>6\n<strong>解释：</strong>\"213123\" 是最长的超赞子字符串，交换其中的字符后，可以得到回文 \"231132\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"00\"\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10^5</code></li> \n <li><code>s</code> 仅由数字组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1544. 整理字符串', '<p>给你一个由大小写英文字母组成的字符串 <code>s</code> 。</p> \n<p>一个整理好的字符串中，两个相邻字符 <code>s[i]</code> 和 <code>s[i+1]</code>，其中 <code>0&lt;= i &lt;= s.length-2</code> ，要满足如下条件:</p> \n<ul> \n <li>若 <code>s[i]</code> 是小写字符，则 <code>s[i+1]</code> 不可以是相同的大写字符。</li> \n <li>若 <code>s[i]</code> 是大写字符，则 <code>s[i+1]</code> 不可以是相同的小写字符。</li> \n</ul> \n<p>请你将字符串整理好，每次你都可以从字符串中选出满足上述条件的 <strong>两个相邻</strong> 字符并删除，直到字符串整理好为止。</p> \n<p>请返回整理好的 <strong>字符串</strong> 。题目保证在给出的约束条件下，测试样例对应的答案是唯一的。</p> \n<p><strong>注意：</strong>空字符串也属于整理好的字符串，尽管其中没有任何字符。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"leEeetcode\"\n<strong>输出：</strong>\"leetcode\"\n<strong>解释：</strong>无论你第一次选的是 i = 1 还是 i = 2，都会使 \"leEeetcode\" 缩减为 \"leetcode\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abBAcC\"\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>存在多种不同情况，但所有的情况都会导致相同的结果。例如：\n\"abBAcC\" --&gt; \"aAcC\" --&gt; \"cC\" --&gt; \"\"\n\"abBAcC\" --&gt; \"abBA\" --&gt; \"aA\" --&gt; \"\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"s\"\n<strong>输出：</strong>\"s\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 100</code></li> \n <li><code>s</code> 只包含小写和大写英文字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1545. 找出第 N 个二进制字符串中的第 K 位', '<p>给你两个正整数 <code>n</code> 和 <code>k</code>，二进制字符串&nbsp; <code>S<sub>n</sub></code> 的形成规则如下：</p> \n<ul> \n <li><code>S<sub>1</sub>&nbsp;= \"0\"</code></li> \n <li>当 <code>i &gt; 1</code> 时，<code>S<sub>i</sub>&nbsp;=&nbsp;S<sub>i-1</sub>&nbsp;+ \"1\" + reverse(invert(S<sub>i-1</sub>))</code></li> \n</ul> \n<p>其中 <code>+</code> 表示串联操作，<code>reverse(x)</code> 返回反转 <code>x</code> 后得到的字符串，而 <code>invert(x)</code> 则会翻转 x 中的每一位（0 变为 1，而 1 变为 0）。</p> \n<p>例如，符合上述描述的序列的前 4 个字符串依次是：</p> \n<ul> \n <li><code>S<sub>1&nbsp;</sub>= \"0\"</code></li> \n <li><code>S<sub>2&nbsp;</sub>= \"0<strong>1</strong>1\"</code></li> \n <li><code>S<sub>3&nbsp;</sub>= \"011<strong>1</strong>001\"</code></li> \n <li><code>S<sub>4</sub> = \"0111001<strong>1</strong>0110001\"</code></li> \n</ul> \n<p>请你返回&nbsp; <code>S<sub>n</sub></code> 的 <strong>第 <code>k</code> 位字符</strong> ，题目数据保证 <code>k</code> 一定在 <code>S<sub>n</sub></code> 长度范围以内。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 3, k = 1\n<strong>输出：</strong>\"0\"\n<strong>解释：</strong>S<sub>3</sub> 为 \"<strong>0</strong>111001\"，其第 1 位为 \"0\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 4, k = 11\n<strong>输出：</strong>\"1\"\n<strong>解释：</strong>S<sub>4</sub> 为 \"0111001101<strong>1</strong>0001\"，其第 11 位为 \"1\" 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 1, k = 1\n<strong>输出：</strong>\"0\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 2, k = 3\n<strong>输出：</strong>\"1\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 20</code></li> \n <li><code>1 &lt;= k &lt;= 2<sup>n</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1546. 和为目标值且不重叠的非空子数组的最大数目', '<p>给你一个数组&nbsp;<code>nums</code>&nbsp;和一个整数&nbsp;<code>target</code>&nbsp;。</p> \n<p>请你返回&nbsp;<strong>非空不重叠</strong>&nbsp;子数组的最大数目，且每个子数组中数字和都为 <code>target</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,1,1,1], target = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>总共有 2 个不重叠子数组（加粗数字表示） [<strong>1,1</strong>,1,<strong>1,1</strong>] ，它们的和为目标值 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [-1,3,5,1,4,2,-9], target = 6\n<strong>输出：</strong>2\n<strong>解释：</strong>总共有 3 个子数组和为 6 。\n([5,1], [4,2], [3,5,1,4,2,-9]) 但只有前 2 个是不重叠的。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [-2,6,6,3,5,4,1,2,8], target = 10\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [0,0,0], target = 0\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;=&nbsp;10^5</code></li> \n <li><code>-10^4 &lt;= nums[i] &lt;=&nbsp;10^4</code></li> \n <li><code>0 &lt;= target &lt;= 10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1547. 切棍子的最小成本', '<p>有一根长度为 <code>n</code> 个单位的木棍，棍上从 <code>0</code> 到 <code>n</code> 标记了若干位置。例如，长度为 <strong>6</strong> 的棍子可以标记如下：</p> \n<p><img style=\"height: 111px; width: 521px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/09/statement.jpg\" alt=\"\"></p> \n<p>给你一个整数数组 <code>cuts</code> ，其中 <code>cuts[i]</code> 表示你需要将棍子切开的位置。</p> \n<p>你可以按顺序完成切割，也可以根据需要更改切割的顺序。</p> \n<p>每次切割的成本都是当前要切割的棍子的长度，切棍子的总成本是历次切割成本的总和。对棍子进行切割将会把一根木棍分成两根较小的木棍（这两根木棍的长度和就是切割前木棍的长度）。请参阅第一个示例以获得更直观的解释。</p> \n<p>返回切棍子的 <strong>最小总成本</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 284px; width: 350px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/09/e1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 7, cuts = [1,3,4,5]\n<strong>输出：</strong>16\n<strong>解释：</strong>按 [1, 3, 4, 5] 的顺序切割的情况如下所示：\n<img style=\"height: 284px; width: 350px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/09/e11.jpg\" alt=\"\">\n第一次切割长度为 7 的棍子，成本为 7 。第二次切割长度为 6 的棍子（即第一次切割得到的第二根棍子），第三次切割为长度 4 的棍子，最后切割长度为 3 的棍子。总成本为 7 + 6 + 4 + 3 = 20 。\n而将切割顺序重新排列为 [3, 5, 1, 4] 后，总成本 = 16（如示例图中 7 + 4 + 3 + 2 = 16）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 9, cuts = [5,6,1,4,2]\n<strong>输出：</strong>22\n<strong>解释：</strong>如果按给定的顺序切割，则总成本为 25 。总成本 &lt;= 25 的切割顺序很多，例如，[4, 6, 5, 2, 1] 的总成本 = 22，是所有可能方案中成本最小的。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 10^6</code></li> \n <li><code>1 &lt;= cuts.length &lt;= min(n - 1, 100)</code></li> \n <li><code>1 &lt;= cuts[i] &lt;= n - 1</code></li> \n <li><code>cuts</code> 数组中的所有整数都 <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('155. 最小栈', '<p>设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在常数时间内检索到最小元素的栈。</p> \n<ul> \n <li><code>push(x)</code> —— 将元素 x 推入栈中。</li> \n <li><code>pop()</code>&nbsp;—— 删除栈顶的元素。</li> \n <li><code>top()</code>&nbsp;—— 获取栈顶元素。</li> \n <li><code>getMin()</code> —— 检索栈中的最小元素。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入：</strong>\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\n<strong>输出：</strong>\n[null,null,null,null,-3,null,0,-2]\n\n<strong>解释：</strong>\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();   --&gt; 返回 -3.\nminStack.pop();\nminStack.top();      --&gt; 返回 0.\nminStack.getMin();   --&gt; 返回 -2.\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>pop</code>、<code>top</code> 和 <code>getMin</code> 操作总是在 <strong>非空栈</strong> 上调用。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1550. 存在连续三个奇数的数组', '<p>给你一个整数数组 <code>arr</code>，请你判断数组中是否存在连续三个元素都是奇数的情况：如果存在，请返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [2,6,4,1]\n<strong>输出：</strong>false\n<strong>解释：</strong>不存在连续三个元素都是奇数的情况。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,34,3,4,5,7,23,12]\n<strong>输出：</strong>true\n<strong>解释：</strong>存在连续三个元素都是奇数的情况，即 [5,7,23] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 1000</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1551. 使数组中所有元素相等的最小操作数', '<p>存在一个长度为 <code>n</code> 的数组 <code>arr</code> ，其中 <code>arr[i] = (2 * i) + 1</code> （ <code>0 &lt;= i &lt; n</code> ）。</p> \n<p>一次操作中，你可以选出两个下标，记作 <code>x</code> 和 <code>y</code> （ <code>0 &lt;= x, y &lt; n</code> ）并使 <code>arr[x]</code> 减去 <code>1</code> 、<code>arr[y]</code> 加上 <code>1</code> （即 <code>arr[x] -=1 </code>且 <code>arr[y] += 1</code> ）。最终的目标是使数组中的所有元素都 <strong>相等</strong> 。题目测试用例将会 <strong>保证</strong> ：在执行若干步操作后，数组中的所有元素最终可以全部相等。</p> \n<p>给你一个整数 <code>n</code>，即数组的长度。请你返回使数组 <code>arr</code> 中所有元素相等所需的 <strong>最小操作数</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>arr = [1, 3, 5]\n第一次操作选出 x = 2 和 y = 0，使数组变为 [2, 3, 4]\n第二次操作继续选出 x = 2 和 y = 0，数组将会变成 [3, 3, 3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 6\n<strong>输出：</strong>9\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1552. 两球之间的磁力', '<p>在代号为 C-137 的地球上，Rick 发现如果他将两个球放在他新发明的篮子里，它们之间会形成特殊形式的磁力。Rick 有&nbsp;<code>n</code>&nbsp;个空的篮子，第&nbsp;<code>i</code>&nbsp;个篮子的位置在&nbsp;<code>position[i]</code>&nbsp;，Morty&nbsp;想把&nbsp;<code>m</code>&nbsp;个球放到这些篮子里，使得任意两球间&nbsp;<strong>最小磁力</strong>&nbsp;最大。</p> \n<p>已知两个球如果分别位于&nbsp;<code>x</code>&nbsp;和&nbsp;<code>y</code>&nbsp;，那么它们之间的磁力为&nbsp;<code>|x - y|</code>&nbsp;。</p> \n<p>给你一个整数数组&nbsp;<code>position</code>&nbsp;和一个整数&nbsp;<code>m</code>&nbsp;，请你返回最大化的最小磁力。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 195px; width: 562px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/16/q3v1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>position = [1,2,3,4,7], m = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>将 3 个球分别放入位于 1，4 和 7 的三个篮子，两球间的磁力分别为 [3, 3, 6]。最小磁力为 3 。我们没办法让最小磁力大于 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>position = [5,4,3,2,1,1000000000], m = 2\n<strong>输出：</strong>999999999\n<strong>解释：</strong>我们使用位于 1 和 1000000000 的篮子时最小磁力最大。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == position.length</code></li> \n <li><code>2 &lt;= n &lt;= 10^5</code></li> \n <li><code>1 &lt;= position[i] &lt;= 10^9</code></li> \n <li>所有&nbsp;<code>position</code>&nbsp;中的整数 <strong>互不相同</strong>&nbsp;。</li> \n <li><code>2 &lt;= m &lt;= position.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1553. 吃掉 N 个橘子的最少天数', '<p>厨房里总共有 <code>n</code>&nbsp;个橘子，你决定每一天选择如下方式之一吃这些橘子：</p> \n<ul> \n <li>吃掉一个橘子。</li> \n <li>如果剩余橘子数 <code>n</code>&nbsp;能被 2 整除，那么你可以吃掉 <code>n/2</code> 个橘子。</li> \n <li>如果剩余橘子数&nbsp;<code>n</code>&nbsp;能被 3 整除，那么你可以吃掉 <code>2*(n/3)</code> 个橘子。</li> \n</ul> \n<p>每天你只能从以上 3 种方案中选择一种方案。</p> \n<p>请你返回吃掉所有 <code>n</code>&nbsp;个橘子的最少天数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 10\n<strong>输出：</strong>4\n<strong>解释：</strong>你总共有 10 个橘子。\n第 1 天：吃 1 个橘子，剩余橘子数 10 - 1 = 9。\n第 2 天：吃 6 个橘子，剩余橘子数 9 - 2*(9/3) = 9 - 6 = 3。（9 可以被 3 整除）\n第 3 天：吃 2 个橘子，剩余橘子数 3 - 2*(3/3) = 3 - 2 = 1。\n第 4 天：吃掉最后 1 个橘子，剩余橘子数 1 - 1 = 0。\n你需要至少 4 天吃掉 10 个橘子。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 6\n<strong>输出：</strong>3\n<strong>解释：</strong>你总共有 6 个橘子。\n第 1 天：吃 3 个橘子，剩余橘子数 6 - 6/2 = 6 - 3 = 3。（6 可以被 2 整除）\n第 2 天：吃 2 个橘子，剩余橘子数 3 - 2*(3/3) = 3 - 2 = 1。（3 可以被 3 整除）\n第 3 天：吃掉剩余 1 个橘子，剩余橘子数 1 - 1 = 0。\n你至少需要 3 天吃掉 6 个橘子。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 56\n<strong>输出：</strong>6\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 2*10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1556. 千位分隔数', '<p>给你一个整数&nbsp;<code>n</code>，请你每隔三位添加点（即 \".\" 符号）作为千位分隔符，并将结果以字符串格式返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 987\n<strong>输出：</strong>\"987\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1234\n<strong>输出：</strong>\"1.234\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 123456789\n<strong>输出：</strong>\"123.456.789\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 0\n<strong>输出：</strong>\"0\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= n &lt; 2^31</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1557. 可以到达所有点的最少点数目', '<p>给你一个 <strong>有向无环图</strong>&nbsp;， <code>n</code>&nbsp;个节点编号为 <code>0</code>&nbsp;到 <code>n-1</code>&nbsp;，以及一个边数组 <code>edges</code>&nbsp;，其中 <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>]</code>&nbsp;表示一条从点&nbsp;&nbsp;<code>from<sub>i</sub></code>&nbsp;到点&nbsp;<code>to<sub>i</sub></code>&nbsp;的有向边。</p> \n<p>找到最小的点集使得从这些点出发能到达图中所有点。题目保证解存在且唯一。</p> \n<p>你可以以任意顺序返回这些节点编号。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 181px; width: 231px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/22/5480e1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]\n<strong>输出：</strong>[0,3]\n<strong>解释：</strong>从单个节点出发无法到达所有节点。从 0 出发我们可以到达 [0,1,2,5] 。从 3 出发我们可以到达 [3,4,2,5] 。所以我们输出 [0,3] 。</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 201px; width: 201px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/22/5480e2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]\n<strong>输出：</strong>[0,2,3]\n<strong>解释：</strong>注意到节点 0，3 和 2 无法从其他节点到达，所以我们必须将它们包含在结果点集中，这些点都能到达节点 1 和 4 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 10^5</code></li> \n <li><code>1 &lt;= edges.length &lt;= min(10^5, n * (n - 1) / 2)</code></li> \n <li><code>edges[i].length == 2</code></li> \n <li><code>0 &lt;= from<sub>i,</sub>&nbsp;to<sub>i</sub> &lt; n</code></li> \n <li>所有点对&nbsp;<code>(from<sub>i</sub>, to<sub>i</sub>)</code>&nbsp;互不相同。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1558. 得到目标数组的最少函数调用次数', '<p><img style=\"height:294px; width:573px\" src=\"https://assets.leetcode.com/uploads/2020/07/10/sample_2_1887.png\" alt=\"\"></p> \n<p>给你一个与 <code>nums</code>&nbsp;大小相同且初始值全为 0 的数组 <code>arr</code> ，请你调用以上函数得到整数数组 <code>nums</code>&nbsp;。</p> \n<p>请你返回将 <code>arr</code>&nbsp;变成 <code>nums</code>&nbsp;的最少函数调用次数。</p> \n<p>答案保证在 32 位有符号整数以内。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,5]\n<strong>输出：</strong>5\n<strong>解释：</strong>给第二个数加 1 ：[0, 0] 变成 [0, 1] （1 次操作）。\n将所有数字乘以 2 ：[0, 1] -&gt; [0, 2] -&gt; [0, 4] （2 次操作）。\n给两个数字都加 1 ：[0, 4] -&gt; [1, 4] -&gt; <strong>[1, 5]</strong> （2 次操作）。\n总操作次数为：1 + 2 + 2 = 5 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [2,2]\n<strong>输出：</strong>3\n<strong>解释：</strong>给两个数字都加 1 ：[0, 0] -&gt; [0, 1] -&gt; [1, 1] （2 次操作）。\n将所有数字乘以 2 ： [1, 1] -&gt; <strong>[2, 2]</strong> （1 次操作）。\n总操作次数为： 2 + 1 = 3 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [4,2,5]\n<strong>输出：</strong>6\n<strong>解释：</strong>（初始）[0,0,0] -&gt; [1,0,0] -&gt; [1,0,1] -&gt; [2,0,2] -&gt; [2,1,2] -&gt; [4,2,4] -&gt; <strong>[4,2,5] </strong>（nums 数组）。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [3,2,2,4]\n<strong>输出：</strong>7\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>nums = [2,4,8,16]\n<strong>输出：</strong>8\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10^5</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1559. 二维网格图中探测环', '<p>给你一个二维字符网格数组&nbsp;<code>grid</code>&nbsp;，大小为&nbsp;<code>m x n</code>&nbsp;，你需要检查&nbsp;<code>grid</code>&nbsp;中是否存在 <strong>相同值</strong> 形成的环。</p> \n<p>一个环是一条开始和结束于同一个格子的长度 <strong>大于等于 4</strong>&nbsp;的路径。对于一个给定的格子，你可以移动到它上、下、左、右四个方向相邻的格子之一，可以移动的前提是这两个格子有 <strong>相同的值&nbsp;</strong>。</p> \n<p>同时，你也不能回到上一次移动时所在的格子。比方说，环&nbsp;&nbsp;<code>(1, 1) -&gt; (1, 2) -&gt; (1, 1)</code>&nbsp;是不合法的，因为从 <code>(1, 2)</code>&nbsp;移动到 <code>(1, 1)</code> 回到了上一次移动时的格子。</p> \n<p>如果 <code>grid</code>&nbsp;中有相同值形成的环，请你返回 <code>true</code>&nbsp;，否则返回 <code>false</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 152px; width: 231px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/22/5482e1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]\n<strong>输出：</strong>true\n<strong>解释：</strong>如下图所示，有 2 个用不同颜色标出来的环：\n<img style=\"height: 163px; width: 225px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/22/5482e11.png\" alt=\"\">\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 154px; width: 236px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/22/5482e2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]\n<strong>输出：</strong>true\n<strong>解释：</strong>如下图所示，只有高亮所示的一个合法环：\n<img style=\"height: 157px; width: 229px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/22/5482e22.png\" alt=\"\">\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"height: 120px; width: 183px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/22/5482e3.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>grid = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= m &lt;= 500</code></li> \n <li><code>1 &lt;= n &lt;= 500</code></li> \n <li><code>grid</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1560. 圆形赛道上经过次数最多的扇区', '<p>给你一个整数 <code>n</code> 和一个整数数组 <code>rounds</code> 。有一条圆形赛道由 <code>n</code> 个扇区组成，扇区编号从 <code>1</code> 到 <code>n</code> 。现将在这条赛道上举办一场马拉松比赛，该马拉松全程由 <code>m</code> 个阶段组成。其中，第 <code>i</code> 个阶段将会从扇区 <code>rounds[i - 1]</code> 开始，到扇区 <code>rounds[i]</code> 结束。举例来说，第 <code>1</code> 阶段从&nbsp;<code>rounds[0]</code>&nbsp;开始，到&nbsp;<code>rounds[1]</code>&nbsp;结束。</p> \n<p>请你以数组形式返回经过次数最多的那几个扇区，按扇区编号 <strong>升序</strong> 排列。</p> \n<p>注意，赛道按扇区编号升序逆时针形成一个圆（请参见第一个示例）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 341px; width: 433px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/22/3rd45e.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 4, rounds = [1,3,1,2]\n<strong>输出：</strong>[1,2]\n<strong>解释：</strong>本场马拉松比赛从扇区 1 开始。经过各个扇区的次序如下所示：\n1 --&gt; 2 --&gt; 3（阶段 1 结束）--&gt; 4 --&gt; 1（阶段 2 结束）--&gt; 2（阶段 3 结束，即本场马拉松结束）\n其中，扇区 1 和 2 都经过了两次，它们是经过次数最多的两个扇区。扇区 3 和 4 都只经过了一次。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2, rounds = [2,1,2,1,2,1,2,1,2]\n<strong>输出：</strong>[2]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 7, rounds = [1,3,5,7]\n<strong>输出：</strong>[1,2,3,4,5,6,7]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 100</code></li> \n <li><code>1 &lt;= m &lt;= 100</code></li> \n <li><code>rounds.length == m + 1</code></li> \n <li><code>1 &lt;= rounds[i] &lt;= n</code></li> \n <li><code>rounds[i] != rounds[i + 1]</code> ，其中 <code>0 &lt;= i &lt; m</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1561. 你可以获得的最大硬币数目', '<p>有 3n 堆数目不一的硬币，你和你的朋友们打算按以下方式分硬币：</p> \n<ul> \n <li>每一轮中，你将会选出 <strong>任意</strong> 3 堆硬币（不一定连续）。</li> \n <li>Alice 将会取走硬币数量最多的那一堆。</li> \n <li>你将会取走硬币数量第二多的那一堆。</li> \n <li>Bob 将会取走最后一堆。</li> \n <li>重复这个过程，直到没有更多硬币。</li> \n</ul> \n<p>给你一个整数数组 <code>piles</code> ，其中 <code>piles[i]</code> 是第 <code>i</code> 堆中硬币的数目。</p> \n<p>返回你可以获得的最大硬币数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>piles = [2,4,1,2,7,8]\n<strong>输出：</strong>9\n<strong>解释：</strong>选出 (2, 7, 8) ，Alice 取走 8 枚硬币的那堆，你取走 <strong>7</strong> 枚硬币的那堆，Bob 取走最后一堆。\n选出 (1, 2, 4) , Alice 取走 4 枚硬币的那堆，你取走 <strong>2</strong> 枚硬币的那堆，Bob 取走最后一堆。\n你可以获得的最大硬币数目：7 + 2 = 9.\n考虑另外一种情况，如果选出的是 (1, <strong>2</strong>, 8) 和 (2, <strong>4</strong>, 7) ，你就只能得到 2 + 4 = 6 枚硬币，这不是最优解。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>piles = [2,4,5]\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>piles = [9,8,7,6,5,1,2,3,4]\n<strong>输出：</strong>18\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= piles.length &lt;= 10^5</code></li> \n <li><code>piles.length % 3 == 0</code></li> \n <li><code>1 &lt;= piles[i] &lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1562. 查找大小为 M 的最新分组', '<p>给你一个数组 <code>arr</code> ，该数组表示一个从 <code>1</code> 到 <code>n</code> 的数字排列。有一个长度为 <code>n</code> 的二进制字符串，该字符串上的所有位最初都设置为 <code>0</code> 。</p> \n<p>在从 <code>1</code> 到 <code>n</code> 的每个步骤 <code>i</code> 中（假设二进制字符串和 <code>arr</code> 都是从 <code>1</code> 开始索引的情况下），二进制字符串上位于位置 <code>arr[i]</code> 的位将会设为 <code>1</code> 。</p> \n<p>给你一个整数 <code>m</code> ，请你找出二进制字符串上存在长度为 <code>m</code> 的一组 <code>1</code> 的最后步骤。一组 <code>1</code> 是一个连续的、由 <code>1</code> 组成的子串，且左右两边不再有可以延伸的 <code>1</code> 。</p> \n<p>返回存在长度 <strong>恰好</strong> 为 <code>m</code> 的 <strong>一组 <code>1</code>&nbsp;</strong> 的最后步骤。如果不存在这样的步骤，请返回 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [3,5,1,2,4], m = 1\n<strong>输出：</strong>4\n<strong>解释：\n</strong>步骤 1：\"00<strong>1</strong>00\"，由 1 构成的组：[\"1\"]\n步骤 2：\"0010<strong>1</strong>\"，由 1 构成的组：[\"1\", \"1\"]\n步骤 3：\"<strong>1</strong>0101\"，由 1 构成的组：[\"1\", \"1\", \"1\"]\n步骤 4：\"1<strong>1</strong>101\"，由 1 构成的组：[\"111\", \"1\"]\n步骤 5：\"111<strong>1</strong>1\"，由 1 构成的组：[\"11111\"]\n存在长度为 1 的一组 1 的最后步骤是步骤 4 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [3,1,5,4,2], m = 2\n<strong>输出：</strong>-1\n<strong>解释：\n</strong>步骤 1：\"00<strong>1</strong>00\"，由 1 构成的组：[\"1\"]\n步骤 2：\"<strong>1</strong>0100\"，由 1 构成的组：[\"1\", \"1\"]\n步骤 3：\"1010<strong>1</strong>\"，由 1 构成的组：[\"1\", \"1\", \"1\"]\n步骤 4：\"101<strong>1</strong>1\"，由 1 构成的组：[\"1\", \"111\"]\n步骤 5：\"1<strong>1</strong>111\"，由 1 构成的组：[\"11111\"]\n不管是哪一步骤都无法形成长度为 2 的一组 1 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [1], m = 1\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [2,1], m = 2\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == arr.length</code></li> \n <li><code>1 &lt;= n &lt;= 10^5</code></li> \n <li><code>1 &lt;= arr[i] &lt;= n</code></li> \n <li><code>arr</code> 中的所有整数 <strong>互不相同</strong></li> \n <li><code>1 &lt;= m&nbsp;&lt;= arr.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1563. 石子游戏 V', '<p>几块石子 <strong>排成一行</strong> ，每块石子都有一个关联值，关联值为整数，由数组 <code>stoneValue</code> 给出。</p> \n<p>游戏中的每一轮：Alice 会将这行石子分成两个 <strong>非空行</strong>（即，左侧行和右侧行）；Bob 负责计算每一行的值，即此行中所有石子的值的总和。Bob 会丢弃值最大的行，Alice 的得分为剩下那行的值（每轮累加）。如果两行的值相等，Bob 让 Alice 决定丢弃哪一行。下一轮从剩下的那一行开始。</p> \n<p>只 <strong>剩下一块石子</strong> 时，游戏结束。Alice 的分数最初为 <strong><code>0</code></strong> 。</p> \n<p>返回 <strong>Alice 能够获得的最大分数</strong><em> 。</em></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>stoneValue = [6,2,3,4,5,5]\n<strong>输出：</strong>18\n<strong>解释：</strong>在第一轮中，Alice 将行划分为 [6，2，3]，[4，5，5] 。左行的值是 11 ，右行的值是 14 。Bob 丢弃了右行，Alice 的分数现在是 11 。\n在第二轮中，Alice 将行分成 [6]，[2，3] 。这一次 Bob 扔掉了左行，Alice 的分数变成了 16（11 + 5）。\n最后一轮 Alice 只能将行分成 [2]，[3] 。Bob 扔掉右行，Alice 的分数现在是 18（16 + 2）。游戏结束，因为这行只剩下一块石头了。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>stoneValue = [7,7,7,7,7,7,7]\n<strong>输出：</strong>28\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>stoneValue = [4]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= stoneValue.length &lt;= 500</code></li> \n <li><code>1 &lt;=&nbsp;stoneValue[i] &lt;= 10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1566. 重复至少 K 次且长度为 M 的模式', '<p>给你一个正整数数组 <code>arr</code>，请你找出一个长度为 <code>m</code> 且在数组中至少重复 <code>k</code> 次的模式。</p> \n<p><strong>模式</strong> 是由一个或多个值组成的子数组（连续的子序列），<strong>连续</strong> 重复多次但 <strong>不重叠</strong> 。 模式由其长度和重复次数定义。</p> \n<p>如果数组中存在至少重复 <code>k</code> 次且长度为 <code>m</code> 的模式，则返回 <code>true</code> ，否则返回&nbsp; <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,4,4,4,4], m = 1, k = 3\n<strong>输出：</strong>true\n<strong>解释：</strong>模式 <strong>(4)</strong> 的长度为 1 ，且连续重复 4 次。注意，模式可以重复 k 次或更多次，但不能少于 k 次。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,1,2,1,1,1,3], m = 2, k = 2\n<strong>输出：</strong>true\n<strong>解释：</strong>模式 <strong>(1,2)</strong> 长度为 2 ，且连续重复 2 次。另一个符合题意的模式是 <strong>(2,1) </strong>，同样重复 2 次。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,1,2,1,3], m = 2, k = 3\n<strong>输出：</strong>false\n<strong>解释：</strong>模式 <strong>(1,2)</strong> 长度为 2 ，但是只连续重复 2 次。不存在长度为 2 且至少重复 3 次的模式。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,3,1,2], m = 2, k = 2\n<strong>输出：</strong>false\n<strong>解释：</strong>模式 <strong>(1,2)</strong> 出现 2 次但并不连续，所以不能算作连续重复 2 次。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>arr = [2,2,2,2], m = 2, k = 3\n<strong>输出：</strong>false\n<strong>解释：</strong>长度为 2 的模式只有 <strong>(2,2)</strong> ，但是只连续重复 2 次。注意，不能计算重叠的重复次数。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= arr.length &lt;= 100</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 100</code></li> \n <li><code>1 &lt;= m&nbsp;&lt;= 100</code></li> \n <li><code>2 &lt;= k&nbsp;&lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1567. 乘积为正数的最长子数组长度', '<p>给你一个整数数组 <code>nums</code>&nbsp;，请你求出乘积为正数的最长子数组的长度。</p> \n<p>一个数组的子数组是由原数组中零个或者更多个连续数字组成的数组。</p> \n<p>请你返回乘积为正数的最长子数组长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp; 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,-2,-3,4]\n<strong>输出：</strong>4\n<strong>解释：</strong>数组本身乘积就是正数，值为 24 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,1,-2,-3,-4]\n<strong>输出：</strong>3\n<strong>解释：</strong>最长乘积为正数的子数组为 [1,-2,-3] ，乘积为 6 。\n注意，我们不能把 0 也包括到子数组中，因为这样乘积为 0 ，不是正数。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [-1,-2,-3,0,1]\n<strong>输出：</strong>2\n<strong>解释：</strong>乘积为正数的最长子数组是 [-1,-2] 或者 [-2,-3] 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [-1,2]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,5,-6,4,0,10]\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10^5</code></li> \n <li><code>-10^9 &lt;= nums[i]&nbsp;&lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1568. 使陆地分离的最少天数', '<p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的二维网格 <code>grid</code> ，其中 <code>0</code> 表示水，而 <code>1</code> 表示陆地。岛屿由水平方向或竖直方向上相邻的 <code>1</code> （陆地）连接形成。</p> \n<p>如果 <strong>恰好只有一座岛屿 </strong>，则认为陆地是 <strong>连通的</strong> ；否则，陆地就是 <strong>分离的</strong> 。</p> \n<p>一天内，可以将任何单个陆地单元（<code>1</code>）更改为水单元（<code>0</code>）。</p> \n<p>返回使陆地分离的最少天数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 139px; width: 498px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/1926_island.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]\n<strong>输出：</strong>2\n<strong>解释：</strong>至少需要 2 天才能得到分离的陆地。\n将陆地 grid[1][1] 和 grid[0][2] 更改为水，得到两个分离的岛屿。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,1]]\n<strong>输出：</strong>2\n<strong>解释：</strong>如果网格中都是水，也认为是分离的 ([[1,1]] -&gt; [[0,0]])，0 岛屿。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,0,1,0]]\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,1,0,1,1],\n&nbsp;            [1,1,1,1,1],\n&nbsp;            [1,1,0,1,1],\n&nbsp;            [1,1,0,1,1]]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,1,0,1,1],\n&nbsp;            [1,1,1,1,1],\n&nbsp;            [1,1,0,1,1],\n&nbsp;            [1,1,1,1,1]]\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= grid.length, grid[i].length &lt;= 30</code></li> \n <li><code>grid[i][j]</code> 为 <code>0</code> 或 <code>1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1569. 将子数组重新排序得到同一个二叉查找树的方案数', '<p>给你一个数组 <code>nums</code>&nbsp;表示 <code>1</code>&nbsp;到 <code>n</code>&nbsp;的一个排列。我们按照元素在 <code>nums</code>&nbsp;中的顺序依次插入一个初始为空的二叉查找树（BST）。请你统计将 <code>nums</code>&nbsp;重新排序后，统计满足如下条件的方案数：重排后得到的二叉查找树与 <code>nums</code>&nbsp;原本数字顺序得到的二叉查找树相同。</p> \n<p>比方说，给你&nbsp;<code>nums = [2,1,3]</code>，我们得到一棵 2 为根，1 为左孩子，3 为右孩子的树。数组&nbsp;<code>[2,3,1]</code>&nbsp;也能得到相同的 BST，但&nbsp;<code>[3,2,1]</code>&nbsp;会得到一棵不同的&nbsp;BST 。</p> \n<p>请你返回重排 <code>nums</code>&nbsp;后，与原数组 <code>nums</code>&nbsp;得到相同二叉查找树的方案数。</p> \n<p>由于答案可能会很大，请将结果对<strong>&nbsp;</strong><code>10^9 + 7</code>&nbsp;取余数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 101px; width: 121px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/bb.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>nums = [2,1,3]\n<strong>输出：</strong>1\n<strong>解释：</strong>我们将 nums 重排， [2,3,1] 能得到相同的 BST 。没有其他得到相同 BST 的方案了。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 161px; width: 241px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/ex1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>nums = [3,4,5,1,2]\n<strong>输出：</strong>5\n<strong>解释：</strong>下面 5 个数组会得到相同的 BST：\n[3,1,2,4,5]\n[3,1,4,2,5]\n[3,1,4,5,2]\n[3,4,1,2,5]\n[3,4,1,5,2]\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"height: 161px; width: 121px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/ex4.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3]\n<strong>输出：</strong>0\n<strong>解释：</strong>没有别的排列顺序能得到相同的 BST 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<p><strong><img style=\"height: 161px; width: 241px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/abc.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>nums = [3,1,2,5,4,6]\n<strong>输出：</strong>19\n</pre> \n<p><strong>示例&nbsp; 5：</strong></p> \n<pre><strong>输入：</strong>nums = [9,4,2,1,3,6,5,7,8,14,11,10,12,13,16,15,17,18]\n<strong>输出：</strong>216212978\n<strong>解释：</strong>得到相同 BST 的方案数是 3216212999。将它对 10^9 + 7 取余后得到 216212978。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 1000</code></li> \n <li><code>1 &lt;= nums[i] &lt;= nums.length</code></li> \n <li><code>nums</code>&nbsp;中所有数 <strong>互不相同</strong>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1572. 矩阵对角线元素的和', '<p>给你一个正方形矩阵 <code>mat</code>，请你返回矩阵对角线元素的和。</p> \n<p>请你返回在矩阵主对角线上的元素和副对角线上且不在主对角线上元素的和。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp; 1：</strong></p> \n<p><img style=\"height:174px; width:336px\" src=\"https://assets.leetcode.com/uploads/2020/08/14/sample_1911.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>mat = [[<strong>1</strong>,2,<strong>3</strong>],\n&nbsp;           [4,<strong>5</strong>,6],\n&nbsp;           [<strong>7</strong>,8,<strong>9</strong>]]\n<strong>输出：</strong>25\n<strong>解释：</strong>对角线的和为：1 + 5 + 9 + 3 + 7 = 25\n请注意，元素 mat[1][1] = 5 只会被计算一次。\n</pre> \n<p><strong>示例&nbsp; 2：</strong></p> \n<pre><strong>输入：</strong>mat = [[<strong>1</strong>,1,1,<strong>1</strong>],\n&nbsp;           [1,<strong>1</strong>,<strong>1</strong>,1],\n&nbsp;           [1,<strong>1</strong>,<strong>1</strong>,1],\n&nbsp;           [<strong>1</strong>,1,1,<strong>1</strong>]]\n<strong>输出：</strong>8\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>mat = [[<strong>5</strong>]]\n<strong>输出：</strong>5\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == mat.length == mat[i].length</code></li> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>1 &lt;= mat[i][j] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1573. 分割字符串的方案数', '<p>给你一个二进制串&nbsp;<code>s</code>&nbsp; （一个只包含 0 和 1 的字符串），我们可以将 <code>s</code>&nbsp;分割成 3 个 <strong>非空</strong>&nbsp;字符串 s1, s2, s3 （s1 + s2 + s3 = s）。</p> \n<p>请你返回分割&nbsp;<code>s</code>&nbsp;的方案数，满足 s1，s2 和 s3 中字符 \'1\' 的数目相同。</p> \n<p>由于答案可能很大，请将它对 10^9 + 7 取余后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"10101\"\n<strong>输出：</strong>4\n<strong>解释：</strong>总共有 4 种方法将 s 分割成含有 \'1\' 数目相同的三个子字符串。\n\"1|010|1\"\n\"1|01|01\"\n\"10|10|1\"\n\"10|1|01\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"1001\"\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"0000\"\n<strong>输出：</strong>3\n<strong>解释：</strong>总共有 3 种分割 s 的方法。\n\"0|0|00\"\n\"0|00|0\"\n\"00|0|0\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"100100010100110\"\n<strong>输出：</strong>12\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>s[i] == \'0\'</code>&nbsp;或者&nbsp;<code>s[i] == \'1\'</code></li> \n <li><code>3 &lt;= s.length &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1574. 删除最短的子数组使剩余数组有序', '<p>给你一个整数数组 <code>arr</code>&nbsp;，请你删除一个子数组（可以为空），使得 <code>arr</code>&nbsp;中剩下的元素是 <strong>非递减</strong> 的。</p> \n<p>一个子数组指的是原数组中连续的一个子序列。</p> \n<p>请你返回满足题目要求的最短子数组的长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,3,10,4,2,3,5]\n<strong>输出：</strong>3\n<strong>解释：</strong>我们需要删除的最短子数组是 [10,4,2] ，长度为 3 。剩余元素形成非递减数组 [1,2,3,3,5] 。\n另一个正确的解为删除子数组 [3,10,4] 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [5,4,3,2,1]\n<strong>输出：</strong>4\n<strong>解释：</strong>由于数组是严格递减的，我们只能保留一个元素。所以我们需要删除长度为 4 的子数组，要么删除 [5,4,3,2]，要么删除 [4,3,2,1]。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,3]\n<strong>输出：</strong>0\n<strong>解释：</strong>数组已经是非递减的了，我们不需要删除任何元素。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [1]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10^5</code></li> \n <li><code>0 &lt;= arr[i] &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1575. 统计所有可行路径', '<p>给你一个 <strong>互不相同</strong>&nbsp;的整数数组，其中&nbsp;<code>locations[i]</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;个城市的位置。同时给你&nbsp;<code>start</code>，<code>finish</code>&nbsp;和&nbsp;<code>fuel</code>&nbsp;分别表示出发城市、目的地城市和你初始拥有的汽油总量</p> \n<p>每一步中，如果你在城市 <code>i</code>&nbsp;，你可以选择任意一个城市 <code>j</code>&nbsp;，满足 &nbsp;<code>j != i</code>&nbsp;且&nbsp;<code>0 &lt;= j &lt; locations.length</code>&nbsp;，并移动到城市&nbsp;<code>j</code>&nbsp;。从城市&nbsp;<code>i</code>&nbsp;移动到&nbsp;<code>j</code>&nbsp;消耗的汽油量为&nbsp;<code>|locations[i] - locations[j]|</code>，<code>|x|</code>&nbsp;表示&nbsp;<code>x</code>&nbsp;的绝对值。</p> \n<p>请注意，&nbsp;<code>fuel</code>&nbsp;任何时刻都&nbsp;<strong>不能</strong>&nbsp;为负，且你&nbsp;<strong>可以</strong>&nbsp;经过任意城市超过一次（包括&nbsp;<code>start</code>&nbsp;和&nbsp;<code>finish</code>&nbsp;）。</p> \n<p>请你返回从<em>&nbsp;</em><code>start</code>&nbsp;到&nbsp;<code>finish</code>&nbsp;所有可能路径的数目。</p> \n<p>由于答案可能很大， 请将它对&nbsp;<code>10^9 + 7</code>&nbsp;取余后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5\n<strong>输出：</strong>4\n<strong>解释：</strong>以下为所有可能路径，每一条都用了 5 单位的汽油：\n1 -&gt; 3\n1 -&gt; 2 -&gt; 3\n1 -&gt; 4 -&gt; 3\n1 -&gt; 4 -&gt; 2 -&gt; 3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>locations = [4,3,1], start = 1, finish = 0, fuel = 6\n<strong>输出：</strong>5\n<strong>解释：</strong>以下为所有可能的路径：\n1 -&gt; 0，使用汽油量为 fuel = 1\n1 -&gt; 2 -&gt; 0，使用汽油量为 fuel = 5\n1 -&gt; 2 -&gt; 1 -&gt; 0，使用汽油量为 fuel = 5\n1 -&gt; 0 -&gt; 1 -&gt; 0，使用汽油量为 fuel = 3\n1 -&gt; 0 -&gt; 1 -&gt; 0 -&gt; 1 -&gt; 0，使用汽油量为 fuel = 5\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>locations = [5,2,1], start = 0, finish = 2, fuel = 3\n<strong>输出：</strong>0\n<strong>解释：</strong>没有办法只用 3 单位的汽油从 0 到达 2 。因为最短路径需要 4 单位的汽油。</pre> \n<p><strong>示例 4 ：</strong></p> \n<pre><strong>输入：</strong>locations = [2,1,5], start = 0, finish = 0, fuel = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>总共有两条可行路径，0 和 0 -&gt; 1 -&gt; 0 。</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>locations = [1,2,3], start = 0, finish = 2, fuel = 40\n<strong>输出：</strong>615088286\n<strong>解释：</strong>路径总数为 2615088300 。将结果对 10^9 + 7 取余，得到 615088286 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= locations.length &lt;= 100</code></li> \n <li><code>1 &lt;= locations[i] &lt;= 10^9</code></li> \n <li>所有&nbsp;<code>locations</code>&nbsp;中的整数 <strong>互不相同</strong>&nbsp;。</li> \n <li><code>0 &lt;= start, finish &lt;&nbsp;locations.length</code></li> \n <li><code>1 &lt;= fuel &lt;= 200</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1576. 替换所有的问号', '<p>给你一个仅包含小写英文字母和 <code>\'?\'</code> 字符的字符串 <code>s</code>，请你将所有的 <code>\'?\'</code> 转换为若干小写字母，使最终的字符串不包含任何 <strong>连续重复</strong> 的字符。</p> \n<p>注意：你 <strong>不能</strong> 修改非 <code>\'?\'</code> 字符。</p> \n<p>题目测试用例保证 <strong>除</strong> <code>\'?\'</code> 字符 <strong>之外</strong>，不存在连续重复的字符。</p> \n<p>在完成所有转换（可能无需转换）后返回最终的字符串。如果有多个解决方案，请返回其中任何一个。可以证明，在给定的约束条件下，答案总是存在的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"?zs\"\n<strong>输出：</strong>\"azs\"\n<strong>解释：</strong>该示例共有 25 种解决方案，从 \"azs\" 到 \"yzs\" 都是符合题目要求的。只有 \"z\" 是无效的修改，因为字符串 \"zzs\" 中有连续重复的两个 \'z\' 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"ubv?w\"\n<strong>输出：</strong>\"ubvaw\"\n<strong>解释：</strong>该示例共有 24 种解决方案，只有替换成 \"v\" 和 \"w\" 不符合题目要求。因为 \"ubvvw\" 和 \"ubvww\" 都包含连续重复的字符。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"j?qg??b\"\n<strong>输出：</strong>\"jaqgacb\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"??yw?ipkj?\"\n<strong>输出：</strong>\"acywaipkja\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li> <p><code>1 &lt;= s.length&nbsp;&lt;= 100</code></p> </li> \n <li> <p><code>s</code> 仅包含小写英文字母和 <code>\'?\'</code> 字符</p> </li> \n</ul>');
INSERT INTO `leecode` VALUES ('1577. 数的平方等于两数乘积的方法数', '<p>给你两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，请你返回根据以下规则形成的三元组的数目（类型 1 和类型 2 ）：</p> \n<ul> \n <li>类型 1：三元组 <code>(i, j, k)</code> ，如果 <code>nums1[i]<sup>2</sup>&nbsp;== nums2[j] * nums2[k]</code> 其中 <code>0 &lt;= i &lt; nums1.length</code> 且 <code>0 &lt;= j &lt; k &lt; nums2.length</code></li> \n <li>类型 2：三元组 <code>(i, j, k)</code> ，如果 <code>nums2[i]<sup>2</sup>&nbsp;== nums1[j] * nums1[k]</code> 其中 <code>0 &lt;= i &lt; nums2.length</code> 且 <code>0 &lt;= j &lt; k &lt; nums1.length</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums1 = [7,4], nums2 = [5,2,8,9]\n<strong>输出：</strong>1\n<strong>解释：</strong>类型 1：(1,1,2), nums1[1]^2 = nums2[1] * nums2[2] (4^2 = 2 * 8)</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums1 = [1,1], nums2 = [1,1,1]\n<strong>输出：</strong>9\n<strong>解释：</strong>所有三元组都符合题目要求，因为 1^2 = 1 * 1\n类型 1：(0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2), nums1[i]^2 = nums2[j] * nums2[k]\n类型 2：(0,0,1), (1,0,1), (2,0,1), nums2[i]^2 = nums1[j] * nums1[k]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums1 = [7,7,8,3], nums2 = [1,2,9,7]\n<strong>输出：</strong>2\n<strong>解释：</strong>有两个符合题目要求的三元组\n类型 1：(3,0,2), nums1[3]^2 = nums2[0] * nums2[2]\n类型 2：(3,0,1), nums2[3]^2 = nums1[0] * nums1[1]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums1 = [4,7,9,11,23], nums2 = [3,5,1024,12,18]\n<strong>输出：</strong>0\n<strong>解释：</strong>不存在符合题目要求的三元组\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li> \n <li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1578. 避免重复字母的最小删除成本', '<p>给你一个字符串 <code>s</code> 和一个整数数组 <code>cost</code> ，其中 <code>cost[i]</code> 是从 <code>s</code> 中删除字符 <code>i</code> 的代价。</p> \n<p>返回使字符串任意相邻两个字母不相同的最小删除成本。</p> \n<p>请注意，删除一个字符后，删除其他字符的成本不会改变。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"abaac\", cost = [1,2,3,4,5]\n<strong>输出：</strong>3\n<strong>解释：</strong>删除字母 \"a\" 的成本为 3，然后得到 \"abac\"（字符串中相邻两个字母不相同）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abc\", cost = [1,2,3]\n<strong>输出：</strong>0\n<strong>解释：</strong>无需删除任何字母，因为字符串中不存在相邻两个字母相同的情况。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"aabaa\", cost = [1,2,3,4,1]\n<strong>输出：</strong>2\n<strong>解释：</strong>删除第一个和最后一个字母，得到字符串 (\"aba\") 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>s.length == cost.length</code></li> \n <li><code>1 &lt;= s.length, cost.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= cost[i] &lt;=&nbsp;10^4</code></li> \n <li><code>s</code> 中只含有小写英文字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1579. 保证图可完全遍历', '<p>Alice 和 Bob 共有一个无向图，其中包含 n 个节点和 3&nbsp; 种类型的边：</p> \n<ul> \n <li>类型 1：只能由 Alice 遍历。</li> \n <li>类型 2：只能由 Bob 遍历。</li> \n <li>类型 3：Alice 和 Bob 都可以遍历。</li> \n</ul> \n<p>给你一个数组 <code>edges</code> ，其中 <code>edges[i] = [type<sub>i</sub>, u<sub>i</sub>, v<sub>i</sub>]</code>&nbsp;表示节点 <code>u<sub>i</sub></code> 和 <code>v<sub>i</sub></code> 之间存在类型为 <code>type<sub>i</sub></code> 的双向边。请你在保证图仍能够被 Alice和 Bob 完全遍历的前提下，找出可以删除的最大边数。如果从任何节点开始，Alice 和 Bob 都可以到达所有其他节点，则认为图是可以完全遍历的。</p> \n<p>返回可以删除的最大边数，如果 Alice 和 Bob 无法完全遍历图，则返回 -1 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 191px; width: 179px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/06/5510ex1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]\n<strong>输出：</strong>2\n<strong>解释：</strong>如果删除<strong> </strong>[1,1,2] 和 [1,1,3] 这两条边，Alice 和 Bob 仍然可以完全遍历这个图。再删除任何其他的边都无法保证图可以完全遍历。所以可以删除的最大边数是 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 190px; width: 178px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/06/5510ex2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]\n<strong>输出：</strong>0\n<strong>解释：</strong>注意，删除任何一条边都会使 Alice 和 Bob 无法完全遍历这个图。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"height: 190px; width: 178px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/06/5510ex3.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]\n<strong>输出：</strong>-1\n<strong>解释：</strong>在当前图中，Alice 无法从其他节点到达节点 4 。类似地，Bob 也不能达到节点 1 。因此，图无法完全遍历。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10^5</code></li> \n <li><code>1 &lt;= edges.length &lt;= min(10^5, 3 * n * (n-1) / 2)</code></li> \n <li><code>edges[i].length == 3</code></li> \n <li><code>1 &lt;= edges[i][0] &lt;= 3</code></li> \n <li><code>1 &lt;= edges[i][1] &lt; edges[i][2] &lt;= n</code></li> \n <li>所有元组 <code>(type<sub>i</sub>, u<sub>i</sub>, v<sub>i</sub>)</code> 互不相同</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1582. 二进制矩阵中的特殊位置', '<p>给你一个大小为 <code>rows x cols</code> 的矩阵 <code>mat</code>，其中 <code>mat[i][j]</code> 是 <code>0</code> 或 <code>1</code>，请返回 <strong>矩阵&nbsp;<em><code>mat</code></em> 中特殊位置的数目</strong> 。</p> \n<p><strong>特殊位置</strong> 定义：如果 <code>mat[i][j] == 1</code> 并且第 <code>i</code> 行和第 <code>j</code> 列中的所有其他元素均为 <code>0</code>（行和列的下标均 <strong>从 0 开始</strong> ），则位置 <code>(i, j)</code> 被称为特殊位置。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>mat = [[1,0,0],\n&nbsp;           [0,0,<strong>1</strong>],\n&nbsp;           [1,0,0]]\n<strong>输出：</strong>1\n<strong>解释：</strong>(1,2) 是一个特殊位置，因为 mat[1][2] == 1 且所处的行和列上所有其他元素都是 0\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>mat = [[<strong>1</strong>,0,0],\n&nbsp;           [0,<strong>1</strong>,0],\n&nbsp;           [0,0,<strong>1</strong>]]\n<strong>输出：</strong>3\n<strong>解释：</strong>(0,0), (1,1) 和 (2,2) 都是特殊位置\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>mat = [[0,0,0,<strong>1</strong>],\n&nbsp;           [<strong>1</strong>,0,0,0],\n&nbsp;           [0,1,1,0],\n&nbsp;           [0,0,0,0]]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>mat = [[0,0,0,0,0],\n&nbsp;           [<strong>1</strong>,0,0,0,0],\n&nbsp;           [0,<strong>1</strong>,0,0,0],\n&nbsp;           [0,0,<strong>1</strong>,0,0],\n&nbsp;           [0,0,0,1,1]]\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>rows == mat.length</code></li> \n <li><code>cols == mat[i].length</code></li> \n <li><code>1 &lt;= rows, cols &lt;= 100</code></li> \n <li><code>mat[i][j]</code> 是 <code>0</code> 或 <code>1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1583. 统计不开心的朋友', '<p>给你一份 <code>n</code> 位朋友的亲近程度列表，其中 <code>n</code> 总是 <strong>偶数</strong> 。</p> \n<p>对每位朋友 <code>i</code>，<code>preferences[i]</code> 包含一份 <strong>按亲近程度从高</strong><strong>到低排列</strong> 的朋友列表。换句话说，排在列表前面的朋友与 <code>i</code> 的亲近程度比排在列表后面的朋友更高。每个列表中的朋友均以 <code>0</code> 到 <code>n-1</code> 之间的整数表示。</p> \n<p>所有的朋友被分成几对，配对情况以列表 <code>pairs</code> 给出，其中 <code>pairs[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> 表示 <code>x<sub>i</sub></code> 与 <code>y<sub>i</sub></code> 配对，且 <code>y<sub>i</sub></code> 与 <code>x<sub>i</sub></code> 配对。</p> \n<p>但是，这样的配对情况可能会使其中部分朋友感到不开心。在 <code>x</code> 与 <code>y</code> 配对且 <code>u</code> 与 <code>v</code> 配对的情况下，如果同时满足下述两个条件，<code>x</code> 就会不开心：</p> \n<ul> \n <li><code>x</code> 与 <code>u</code> 的亲近程度胜过 <code>x</code> 与 <code>y</code>，且</li> \n <li><code>u</code> 与 <code>x</code> 的亲近程度胜过 <code>u</code> 与 <code>v</code></li> \n</ul> \n<p>返回 <strong>不开心的朋友的数目</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]\n<strong>输出：</strong>2\n<strong>解释：</strong>\n朋友 1 不开心，因为：\n- <strong>1 与 0 </strong>配对，但 <strong>1 与 3</strong> 的亲近程度比 <strong>1 与 0</strong> 高，且\n- <strong>3 与 1</strong> 的亲近程度比 <strong>3 与 2</strong> 高。\n朋友 3 不开心，因为：\n- 3 与 2 配对，但 <strong>3 与 1</strong> 的亲近程度比 <strong>3 与 2</strong> 高，且\n- <strong>1 与 3</strong> 的亲近程度比 <strong>1 与 0</strong> 高。\n朋友 0 和 2 都是开心的。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2, preferences = [[1], [0]], pairs = [[1, 0]]\n<strong>输出：</strong>0\n<strong>解释：</strong>朋友 0 和 1 都开心。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 500</code></li> \n <li><code>n</code> 是偶数</li> \n <li><code>preferences.length&nbsp;== n</code></li> \n <li><code>preferences[i].length&nbsp;== n - 1</code></li> \n <li><code>0 &lt;= preferences[i][j] &lt;= n - 1</code></li> \n <li><code>preferences[i]</code> 不包含 <code>i</code></li> \n <li><code>preferences[i]</code> 中的所有值都是独一无二的</li> \n <li><code>pairs.length&nbsp;== n/2</code></li> \n <li><code>pairs[i].length&nbsp;== 2</code></li> \n <li><code>x<sub>i</sub> != y<sub>i</sub></code></li> \n <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub>&nbsp;&lt;= n - 1</code></li> \n <li>每位朋友都 <strong>恰好</strong> 被包含在一对中</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1584. 连接所有点的最小费用', '<p>给你一个<code>points</code>&nbsp;数组，表示 2D 平面上的一些点，其中&nbsp;<code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>&nbsp;。</p> \n<p>连接点&nbsp;<code>[x<sub>i</sub>, y<sub>i</sub>]</code> 和点&nbsp;<code>[x<sub>j</sub>, y<sub>j</sub>]</code>&nbsp;的费用为它们之间的 <strong>曼哈顿距离</strong>&nbsp;：<code>|x<sub>i</sub> - x<sub>j</sub>| + |y<sub>i</sub> - y<sub>j</sub>|</code>&nbsp;，其中&nbsp;<code>|val|</code>&nbsp;表示&nbsp;<code>val</code>&nbsp;的绝对值。</p> \n<p>请你返回将所有点连接的最小总费用。只有任意两点之间 <strong>有且仅有</strong>&nbsp;一条简单路径时，才认为所有点都已连接。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height:268px; width:214px\" src=\"https://assets.leetcode.com/uploads/2020/08/26/d.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>points = [[0,0],[2,2],[3,10],[5,2],[7,0]]\n<strong>输出：</strong>20\n<strong>解释：\n</strong><img style=\"height:268px; width:214px\" src=\"https://assets.leetcode.com/uploads/2020/08/26/c.png\" alt=\"\">\n我们可以按照上图所示连接所有点得到最小总费用，总费用为 20 。\n注意到任意两个点之间只有唯一一条路径互相到达。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>points = [[3,12],[-2,5],[-4,1]]\n<strong>输出：</strong>18\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>points = [[0,0],[1,1],[1,0],[-1,1]]\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>points = [[-1000000,-1000000],[1000000,1000000]]\n<strong>输出：</strong>4000000\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>points = [[0,0]]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= points.length &lt;= 1000</code></li> \n <li><code>-10<sup>6</sup>&nbsp;&lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>6</sup></code></li> \n <li>所有点&nbsp;<code>(x<sub>i</sub>, y<sub>i</sub>)</code>&nbsp;两两不同。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1585. 检查字符串是否可以通过排序子字符串得到另一个字符串', '<p>给你两个字符串&nbsp;<code>s</code> 和&nbsp;<code>t</code>&nbsp;，请你通过若干次以下操作将字符串&nbsp;<code>s</code>&nbsp;转化成字符串&nbsp;<code>t</code>&nbsp;：</p> \n<ul> \n <li>选择 <code>s</code>&nbsp;中一个 <strong>非空</strong>&nbsp;子字符串并将它包含的字符就地 <strong>升序</strong>&nbsp;排序。</li> \n</ul> \n<p>比方说，对下划线所示的子字符串进行操作可以由&nbsp;<code>\"1<strong>4234</strong>\"</code>&nbsp;得到&nbsp;<code>\"1<strong>2344</strong>\"</code>&nbsp;。</p> \n<p>如果可以将字符串 <code>s</code>&nbsp;变成 <code>t</code>&nbsp;，返回 <code>true</code>&nbsp;。否则，返回 <code>false</code>&nbsp;。</p> \n<p>一个 <strong>子字符串</strong>&nbsp;定义为一个字符串中连续的若干字符。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"84532\", t = \"34852\"\n<strong>输出：</strong>true\n<strong>解释：</strong>你可以按以下操作将 s 转变为 t ：\n\"84<strong>53</strong>2\" （从下标 2 到下标 3）-&gt; \"84<strong>35</strong>2\"\n\"<strong>843</strong>52\" （从下标 0 到下标 2） -&gt; \"<strong>348</strong>52\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"34521\", t = \"23415\"\n<strong>输出：</strong>true\n<strong>解释：</strong>你可以按以下操作将 s 转变为 t ：\n\"<strong>3452</strong>1\" -&gt; \"<strong>2345</strong>1\"\n\"234<strong>51</strong>\" -&gt; \"234<strong>15</strong>\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"12345\", t = \"12435\"\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"1\", t = \"2\"\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>s.length == t.length</code></li> \n <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s</code> 和&nbsp;<code>t</code>&nbsp;都只包含数字字符，即&nbsp;<code>\'0\'</code>&nbsp;到&nbsp;<code>\'9\'</code> 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1588. 所有奇数长度子数组的和', '<p>给你一个正整数数组&nbsp;<code>arr</code>&nbsp;，请你计算所有可能的奇数长度子数组的和。</p> \n<p><strong>子数组</strong> 定义为原数组中的一个连续子序列。</p> \n<p>请你返回 <code>arr</code>&nbsp;中 <strong>所有奇数长度子数组的和</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [1,4,2,5,3]\n<strong>输出：</strong>58\n<strong>解释：</strong>所有奇数长度子数组和它们的和为：\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\n我们将所有值求和得到 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2]\n<strong>输出：</strong>3\n<strong>解释：</strong>总共只有 2 个长度为奇数的子数组，[1] 和 [2]。它们的和为 3 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [10,11,12]\n<strong>输出：</strong>66\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 100</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1589. 所有排列中的最大和', '<p>有一个整数数组&nbsp;<code>nums</code>&nbsp;，和一个查询数组&nbsp;<code>requests</code>&nbsp;，其中&nbsp;<code>requests[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>&nbsp;。第&nbsp;<code>i</code>&nbsp;个查询求&nbsp;<code>nums[start<sub>i</sub>] + nums[start<sub>i</sub> + 1] + ... + nums[end<sub>i</sub> - 1] + nums[end<sub>i</sub>]</code>&nbsp;的结果&nbsp;，<code>start<sub>i</sub></code> 和&nbsp;<code>end<sub>i</sub></code>&nbsp;数组索引都是 <strong>从 0 开始</strong> 的。</p> \n<p>你可以任意排列 <code>nums</code>&nbsp;中的数字，请你返回所有查询结果之和的最大值。</p> \n<p>由于答案可能会很大，请你将它对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4,5], requests = [[1,3],[0,1]]\n<strong>输出：</strong>19\n<strong>解释：</strong>一个可行的 nums 排列为 [2,1,3,4,5]，并有如下结果：\nrequests[0] -&gt; nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8\nrequests[1] -&gt; nums[0] + nums[1] = 2 + 1 = 3\n总和为：8 + 3 = 11。\n一个总和更大的排列为 [3,5,4,2,1]，并有如下结果：\nrequests[0] -&gt; nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11\nrequests[1] -&gt; nums[0] + nums[1] = 3 + 5  = 8\n总和为： 11 + 8 = 19，这个方案是所有排列中查询之和最大的结果。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4,5,6], requests = [[0,1]]\n<strong>输出：</strong>11\n<strong>解释：</strong>一个总和最大的排列为 [6,5,4,3,2,1] ，查询和为 [11]。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]\n<strong>输出：</strong>47\n<strong>解释：</strong>一个和最大的排列为 [4,10,5,3,2,1] ，查询结果分别为 [19,18,10]。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= nums[i]&nbsp;&lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= requests.length &lt;=&nbsp;10<sup>5</sup></code></li> \n <li><code>requests[i].length == 2</code></li> \n <li><code>0 &lt;= start<sub>i</sub>&nbsp;&lt;= end<sub>i</sub>&nbsp;&lt;&nbsp;n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1590. 使数组和能被 P 整除', '<p>给你一个正整数数组&nbsp;<code>nums</code>，请你移除 <strong>最短</strong>&nbsp;子数组（可以为 <strong>空</strong>），使得剩余元素的 <strong>和</strong>&nbsp;能被 <code>p</code>&nbsp;整除。 <strong>不允许</strong>&nbsp;将整个数组都移除。</p> \n<p>请你返回你需要移除的最短子数组的长度，如果无法满足题目要求，返回 <code>-1</code>&nbsp;。</p> \n<p><strong>子数组</strong>&nbsp;定义为原数组中连续的一组元素。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [3,1,4,2], p = 6\n<strong>输出：</strong>1\n<strong>解释：</strong>nums 中元素和为 10，不能被 p 整除。我们可以移除子数组 [4] ，剩余元素的和为 6 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [6,3,5,2], p = 9\n<strong>输出：</strong>2\n<strong>解释：</strong>我们无法移除任何一个元素使得和被 9 整除，最优方案是移除子数组 [5,2] ，剩余元素为 [6,3]，和为 9 。\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3], p = 3\n<strong>输出：</strong>0\n<strong>解释：</strong>和恰好为 6 ，已经能被 3 整除了。所以我们不需要移除任何元素。\n</pre> \n<p><strong>示例&nbsp; 4：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3], p = 7\n<strong>输出：</strong>-1\n<strong>解释：</strong>没有任何方案使得移除子数组后剩余元素的和被 7 整除。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>nums = [1000000000,1000000000,1000000000], p = 3\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>1 &lt;= p &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1591. 奇怪的打印机 II', '<p>给你一个奇怪的打印机，它有如下两个特殊的打印规则：</p> \n<ul> \n <li>每一次操作时，打印机会用同一种颜色打印一个矩形的形状，每次打印会覆盖矩形对应格子里原本的颜色。</li> \n <li>一旦矩形根据上面的规则使用了一种颜色，那么 <strong>相同的颜色不能再被使用&nbsp;</strong>。</li> \n</ul> \n<p>给你一个初始没有颜色的&nbsp;<code>m x n</code>&nbsp;的矩形&nbsp;<code>targetGrid</code>&nbsp;，其中&nbsp;<code>targetGrid[row][col]</code>&nbsp;是位置&nbsp;<code>(row, col)</code>&nbsp;的颜色。</p> \n<p>如果你能按照上述规则打印出矩形<em>&nbsp;</em><code>targetGrid</code>&nbsp;，请你返回&nbsp;<code>true</code>&nbsp;，否则返回&nbsp;<code>false</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 138px; width: 483px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/19/sample_1_1929.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 290px; width: 483px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/19/sample_2_1929.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>targetGrid = [[1,2,1],[2,1,2],[1,2,1]]\n<strong>输出：</strong>false\n<strong>解释：</strong>没有办法得到 targetGrid ，因为每一轮操作使用的颜色互不相同。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>targetGrid = [[1,1,1],[3,1,3]]\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == targetGrid.length</code></li> \n <li><code>n == targetGrid[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 60</code></li> \n <li><code>1 &lt;= targetGrid[row][col] &lt;= 60</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1592. 重新排列单词间的空格', '<p>给你一个字符串 <code>text</code> ，该字符串由若干被空格包围的单词组成。每个单词由一个或者多个小写英文字母组成，并且两个单词之间至少存在一个空格。题目测试用例保证 <code>text</code> <strong>至少包含一个单词</strong> 。</p> \n<p>请你重新排列空格，使每对相邻单词之间的空格数目都 <strong>相等</strong> ，并尽可能 <strong>最大化</strong> 该数目。如果不能重新平均分配所有空格，请 <strong>将多余的空格放置在字符串末尾</strong> ，这也意味着返回的字符串应当与原 <code>text</code> 字符串的长度相等。</p> \n<p>返回 <strong>重新排列空格后的字符串</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>text = \"  this   is  a sentence \"\n<strong>输出：</strong>\"this   is   a   sentence\"\n<strong>解释：</strong>总共有 9 个空格和 4 个单词。可以将 9 个空格平均分配到相邻单词之间，相邻单词间空格数为：9 / (4-1) = 3 个。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>text = \" practice   makes   perfect\"\n<strong>输出：</strong>\"practice   makes   perfect \"\n<strong>解释：</strong>总共有 7 个空格和 3 个单词。7 / (3-1) = 3 个空格加上 1 个多余的空格。多余的空格需要放在字符串的末尾。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>text = \"hello   world\"\n<strong>输出：</strong>\"hello   world\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>text = \"  walks  udp package   into  bar a\"\n<strong>输出：</strong>\"walks  udp  package  into  bar  a \"\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>text = \"a\"\n<strong>输出：</strong>\"a\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= text.length &lt;= 100</code></li> \n <li><code>text</code> 由小写英文字母和 <code>\' \'</code> 组成</li> \n <li><code>text</code> 中至少包含一个单词</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1593. 拆分字符串使唯一子字符串的数目最大', '<p>给你一个字符串 <code>s</code> ，请你拆分该字符串，并返回拆分后唯一子字符串的最大数目。</p> \n<p>字符串 <code>s</code> 拆分后可以得到若干 <strong>非空子字符串</strong> ，这些子字符串连接后应当能够还原为原字符串。但是拆分出来的每个子字符串都必须是 <strong>唯一的</strong> 。</p> \n<p>注意：<strong>子字符串</strong> 是字符串中的一个连续字符序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"ababccc\"\n<strong>输出：</strong>5\n<strong>解释：</strong>一种最大拆分方法为 [\'a\', \'b\', \'ab\', \'c\', \'cc\'] 。像 [\'a\', \'b\', \'a\', \'b\', \'c\', \'cc\'] 这样拆分不满足题目要求，因为其中的 \'a\' 和 \'b\' 都出现了不止一次。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"aba\"\n<strong>输出：</strong>2\n<strong>解释：</strong>一种最大拆分方法为 [\'a\', \'ba\'] 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"aa\"\n<strong>输出：</strong>1\n<strong>解释：</strong>无法进一步拆分字符串。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li> <p><code>1 &lt;= s.length&nbsp;&lt;= 16</code></p> </li> \n <li> <p><code>s</code> 仅包含小写英文字母</p> </li> \n</ul>');
INSERT INTO `leecode` VALUES ('1594. 矩阵的最大非负积', '<p>给你一个大小为 <code>rows x cols</code> 的矩阵 <code>grid</code> 。最初，你位于左上角 <code>(0, 0)</code> ，每一步，你可以在矩阵中 <strong>向右</strong> 或 <strong>向下</strong> 移动。</p> \n<p>在从左上角 <code>(0, 0)</code> 开始到右下角 <code>(rows - 1, cols - 1)</code> 结束的所有路径中，找出具有 <strong>最大非负积</strong> 的路径。路径的积是沿路径访问的单元格中所有整数的乘积。</p> \n<p>返回 <strong>最大非负积 </strong>对<strong><em> </em><code>10<sup>9</sup>&nbsp;+ 7</code></strong> <strong>取余</strong> 的结果。如果最大积为负数，则返回<em> </em><code>-1</code> 。</p> \n<p><strong>注意，</strong>取余是在得到最大积之后执行的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>grid = [[-1,-2,-3],\n&nbsp;            [-2,-3,-3],\n&nbsp;            [-3,-3,-2]]\n<strong>输出：</strong>-1\n<strong>解释：</strong>从 (0, 0) 到 (2, 2) 的路径中无法得到非负积，所以返回 -1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>grid = [[<strong>1</strong>,-2,1],\n&nbsp;            [<strong>1</strong>,<strong>-2</strong>,1],\n&nbsp;            [3,<strong>-4</strong>,<strong>1</strong>]]\n<strong>输出：</strong>8\n<strong>解释：</strong>最大非负积对应的路径已经用粗体标出 (1 * 1 * -2 * -4 * 1 = 8)\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>grid = [[<strong>1</strong>, 3],\n&nbsp;            [<strong>0</strong>,<strong>-4</strong>]]\n<strong>输出：</strong>0\n<strong>解释：</strong>最大非负积对应的路径已经用粗体标出 (1 * 0 * -4 = 0)\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>grid = [[ <strong>1</strong>, 4,4,0],\n&nbsp;            [<strong>-2</strong>, 0,0,1],\n&nbsp;            [ <strong>1</strong>,<strong>-1</strong>,<strong>1</strong>,<strong>1</strong>]]\n<strong>输出：</strong>2\n<strong>解释：</strong>最大非负积对应的路径已经用粗体标出 (1 * -2 * 1 * -1 * 1 * 1 = 2)\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= rows, cols &lt;= 15</code></li> \n <li><code>-4 &lt;= grid[i][j] &lt;= 4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1595. 连通两组点的最小成本', '<p>给你两组点，其中第一组中有 <code>size<sub>1</sub></code> 个点，第二组中有 <code>size<sub>2</sub></code> 个点，且 <code>size<sub>1</sub> &gt;= size<sub>2</sub></code> 。</p> \n<p>任意两点间的连接成本 <code>cost</code> 由大小为 <code>size<sub>1</sub> x size<sub>2</sub></code> 矩阵给出，其中 <code>cost[i][j]</code> 是第一组中的点 <code>i</code> 和第二组中的点 <code>j</code> 的连接成本。<strong>如果两个组中的每个点都与另一组中的一个或多个点连接，则称这两组点是连通的。</strong>换言之，第一组中的每个点必须至少与第二组中的一个点连接，且第二组中的每个点必须至少与第一组中的一个点连接。</p> \n<p>返回连通两组点所需的最小成本。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 243px; width: 322px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/20/ex1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>cost = [[15, 96], [36, 2]]\n<strong>输出：</strong>17\n<strong>解释：</strong>连通两组点的最佳方法是：\n1--A\n2--B\n总成本为 17 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 403px; width: 322px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/20/ex2.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]\n<strong>输出：</strong>4\n<strong>解释：</strong>连通两组点的最佳方法是：\n1--A\n2--B\n2--C\n3--A\n最小成本为 4 。\n请注意，虽然有多个点连接到第一组中的点 2 和第二组中的点 A ，但由于题目并不限制连接点的数目，所以只需要关心最低总成本。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]\n<strong>输出：</strong>10\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>size<sub>1</sub> == cost.length</code></li> \n <li><code>size<sub>2</sub> == cost[i].length</code></li> \n <li><code>1 &lt;= size<sub>1</sub>, size<sub>2</sub> &lt;= 12</code></li> \n <li><code>size<sub>1</sub> &gt;=&nbsp;size<sub>2</sub></code></li> \n <li><code>0 &lt;= cost[i][j] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1598. 文件夹操作日志搜集器', '<p>每当用户执行变更文件夹操作时，LeetCode 文件系统都会保存一条日志记录。</p> \n<p>下面给出对变更操作的说明：</p> \n<ul> \n <li><code>\"../\"</code> ：移动到当前文件夹的父文件夹。如果已经在主文件夹下，则 <strong>继续停留在当前文件夹</strong> 。</li> \n <li><code>\"./\"</code> ：继续停留在当前文件夹<strong>。</strong></li> \n <li><code>\"x/\"</code> ：移动到名为 <code>x</code> 的子文件夹中。题目数据 <strong>保证总是存在文件夹 <code>x</code></strong> 。</li> \n</ul> \n<p>给你一个字符串列表 <code>logs</code> ，其中 <code>logs[i]</code> 是用户在 <code>i<sup>th</sup></code> 步执行的操作。</p> \n<p>文件系统启动时位于主文件夹，然后执行 <code>logs</code> 中的操作。</p> \n<p>执行完所有变更文件夹操作后，请你找出 <strong>返回主文件夹所需的最小步数</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 151px; width: 775px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/26/sample_11_1957.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]\n<strong>输出：</strong>2\n<strong>解释：</strong>执行 \"../\" 操作变更文件夹 2 次，即可回到主文件夹\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 270px; width: 600px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/26/sample_22_1957.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>logs = [\"d1/\",\"../\",\"../\",\"../\"]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= logs.length &lt;= 10<sup>3</sup></code></li> \n <li><code>2 &lt;= logs[i].length &lt;= 10</code></li> \n <li><code>logs[i]</code> 包含小写英文字母，数字，<code>\'.\'</code> 和 <code>\'/\'</code></li> \n <li><code>logs[i]</code> 符合语句中描述的格式</li> \n <li>文件夹名称由小写英文字母和数字组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1599. 经营摩天轮的最大利润', '<p>你正在经营一座摩天轮，该摩天轮共有 <strong>4 个座舱</strong> ，每个座舱<strong> 最多可以容纳 4 位游客</strong> 。你可以 <strong>逆时针</strong>&nbsp;轮转座舱，但每次轮转都需要支付一定的运行成本 <code>runningCost</code> 。摩天轮每次轮转都恰好转动 1 / 4 周。</p> \n<p>给你一个长度为 <code>n</code> 的数组 <code>customers</code> ， <code>customers[i]</code> 是在第 <code>i</code> 次轮转（下标从 0 开始）之前到达的新游客的数量。这也意味着你必须在新游客到来前轮转 <code>i</code> 次。每位游客在登上离地面最近的座舱前都会支付登舱成本 <code>boardingCost</code> ，一旦该座舱再次抵达地面，他们就会离开座舱结束游玩。</p> \n<p>你可以随时停下摩天轮，即便是 <strong>在服务所有游客之前</strong> 。如果你决定停止运营摩天轮，为了保证所有游客安全着陆，<strong>将免费进行</strong><strong>所有后续轮转</strong>&nbsp;。注意，如果有超过 4 位游客在等摩天轮，那么只有 4 位游客可以登上摩天轮，其余的需要等待 <strong>下一次轮转</strong> 。</p> \n<p>返回最大化利润所需执行的 <strong>最小轮转次数</strong> 。 如果不存在利润为正的方案，则返回 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 291px; width: 906px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/26/wheeldiagram12.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>customers = [8,3], boardingCost = 5, runningCost = 6\n<strong>输出：</strong>3\n<strong>解释：</strong>座舱上标注的数字是该座舱的当前游客数。\n1. 8 位游客抵达，4 位登舱，4 位等待下一舱，摩天轮轮转。当前利润为 4 * $5 - 1 * $6 = $14 。\n2. 3 位游客抵达，4 位在等待的游客登舱，其他 3 位等待，摩天轮轮转。当前利润为 8 * $5 - 2 * $6 = $28 。\n3. 最后 3 位游客登舱，摩天轮轮转。当前利润为 11 * $5 - 3 * $6 = $37 。\n轮转 3 次得到最大利润，最大利润为 $37 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>customers = [10,9,6], boardingCost = 6, runningCost = 4\n<strong>输出：</strong>7\n<strong>解释：</strong>\n1. 10 位游客抵达，4 位登舱，6 位等待下一舱，摩天轮轮转。当前利润为 4 * $6 - 1 * $4 = $20 。\n2. 9 位游客抵达，4 位登舱，11 位等待（2 位是先前就在等待的，9 位新加入等待的），摩天轮轮转。当前利润为 8 * $6 - 2 * $4 = $40 。\n3. 最后 6 位游客抵达，4 位登舱，13 位等待，摩天轮轮转。当前利润为 12 * $6 - 3 * $4 = $60 。\n4. 4 位登舱，9 位等待，摩天轮轮转。当前利润为 * $6 - 4 * $4 = $80 。\n5. 4 位登舱，5 位等待，摩天轮轮转。当前利润为 20 * $6 - 5 * $4 = $100 。\n6. 4 位登舱，1 位等待，摩天轮轮转。当前利润为 24 * $6 - 6 * $4 = $120 。\n7. 1 位登舱，摩天轮轮转。当前利润为 25 * $6 - 7 * $4 = $122 。\n轮转 7 次得到最大利润，最大利润为$122 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92\n<strong>输出：</strong>-1\n<strong>解释：</strong>\n1. 3 位游客抵达，3 位登舱，0 位等待，摩天轮轮转。当前利润为 3 * $1 - 1 * $92 = -$89 。\n2. 4 位游客抵达，4 位登舱，0 位等待，摩天轮轮转。当前利润为 is 7 * $1 - 2 * $92 = -$177 。\n3. 0 位游客抵达，0 位登舱，0 位等待，摩天轮轮转。当前利润为 7 * $1 - 3 * $92 = -$269 。\n4. 5 位游客抵达，4 位登舱，1 位等待，摩天轮轮转。当前利润为 12 * $1 - 4 * $92 = -$356 。\n5. 1 位游客抵达，2 位登舱，0 位等待，摩天轮轮转。当前利润为 13 * $1 - 5 * $92 = -$447 。\n利润永不为正，所以返回 -1 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>customers = [10,10,6,4,7], boardingCost = 3, runningCost = 8\n<strong>输出：</strong>9\n<strong>解释：</strong>\n1. 10 位游客抵达，4 位登舱，6 位等待，摩天轮轮转。当前利润为 4 * $3 - 1 * $8 = $4 。\n2. 10 位游客抵达，4 位登舱，12 位等待，摩天轮轮转。当前利润为 8 * $3 - 2 * $8 = $8 。\n3. 6 位游客抵达，4 位登舱，14 位等待，摩天轮轮转。当前利润为 12 * $3 - 3 * $8 = $12 。\n4. 4 位游客抵达，4 位登舱，14 位等待，摩天轮轮转。当前利润为 16 * $3 - 4 * $8 = $16 。\n5. 7 位游客抵达，4 位登舱，17 位等待，摩天轮轮转。当前利润为 20 * $3 - 5 * $8 = $20 。\n6. 4 位登舱，13 位等待，摩天轮轮转。当前利润为 24 * $3 - 6 * $8 = $24 。\n7. 4 位登舱，9 位等待，摩天轮轮转。当前利润为 28 * $3 - 7 * $8 = $28 。\n8. 4 位登舱，5 位等待，摩天轮轮转。当前利润为 32 * $3 - 8 * $8 = $32 。\n9. 4 位登舱，1 位等待，摩天轮轮转。当前利润为 36 * $3 - 9 * $8 = $36 。\n​​​​​​​10. 1 位登舱，0 位等待，摩天轮轮转。当前利润为 37 * $3 - 10 * $8 = $31 。\n轮转 9 次得到最大利润，最大利润为 $36 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == customers.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= customers[i] &lt;= 50</code></li> \n <li><code>1 &lt;= boardingCost, runningCost &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('16. 最接近的三数之和', '<p>给定一个包括&nbsp;<em>n</em> 个整数的数组&nbsp;<code>nums</code><em>&nbsp;</em>和 一个目标值&nbsp;<code>target</code>。找出&nbsp;<code>nums</code><em>&nbsp;</em>中的三个整数，使得它们的和与&nbsp;<code>target</code>&nbsp;最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>nums = [-1,2,1,-4], target = 1\n<strong>输出：</strong>2\n<strong>解释：</strong>与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= nums.length &lt;= 10^3</code></li> \n <li><code>-10^3&nbsp;&lt;= nums[i]&nbsp;&lt;= 10^3</code></li> \n <li><code>-10^4&nbsp;&lt;= target&nbsp;&lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('160. 相交链表', '<p>给你两个单链表的头节点&nbsp;<code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p> \n<p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p> \n<p><a href=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\"><img style=\"height: 130px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\" alt=\"\"></a></p> \n<p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p> \n<p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png\"><img style=\"height: 130px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png\" alt=\"\"></a></p> \n<pre><strong>输入：</strong>intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n<strong>输出：</strong>Intersected at \'8\'\n<strong>解释：</strong>相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。\n在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png\"><img style=\"height: 136px; width: 350px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png\" alt=\"\"></a></p> \n<pre><strong>输入：</strong>intersectVal&nbsp;= 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n<strong>输出：</strong>Intersected at \'2\'\n<strong>解释：</strong>相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。\n在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png\"><img style=\"height: 126px; width: 200px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png\" alt=\"\"></a></p> \n<pre><strong>输入：</strong>intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n<strong>输出：</strong>null\n<strong>解释：</strong>从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。\n由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n这两个链表不相交，因此返回 null 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>listA</code> 中节点数目为 <code>m</code></li> \n <li><code>listB</code> 中节点数目为 <code>n</code></li> \n <li><code>0 &lt;= m, n &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= skipA &lt;= m</code></li> \n <li><code>0 &lt;= skipB &lt;= n</code></li> \n <li>如果 <code>listA</code> 和 <code>listB</code> 没有交点，<code>intersectVal</code> 为 <code>0</code></li> \n <li>如果 <code>listA</code> 和 <code>listB</code> 有交点，<code>intersectVal == listA[skipA + 1] == listB[skipB + 1]</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你能否设计一个时间复杂度 <code>O(n)</code> 、仅用 <code>O(1)</code> 内存的解决方案？</p>');
INSERT INTO `leecode` VALUES ('1600. 皇位继承顺序', '<p>一个王国里住着国王、他的孩子们、他的孙子们等等。每一个时间点，这个家庭里有人出生也有人死亡。</p> \n<p>这个王国有一个明确规定的皇位继承顺序，第一继承人总是国王自己。我们定义递归函数&nbsp;<code>Successor(x, curOrder)</code>&nbsp;，给定一个人&nbsp;<code>x</code>&nbsp;和当前的继承顺序，该函数返回 <code>x</code>&nbsp;的下一继承人。</p> \n<pre>Successor(x, curOrder):\n    如果 x 没有孩子或者所有 x 的孩子都在 curOrder 中：\n        如果 x 是国王，那么返回 null\n        否则，返回 Successor(x 的父亲, curOrder)\n    否则，返回 x 不在 curOrder 中最年长的孩子\n</pre> \n<p>比方说，假设王国由国王，他的孩子&nbsp;Alice 和 Bob （Alice 比 Bob&nbsp;年长）和 Alice 的孩子&nbsp;Jack 组成。</p> \n<ol> \n <li>一开始，&nbsp;<code>curOrder</code>&nbsp;为&nbsp;<code>[\"king\"]</code>.</li> \n <li>调用&nbsp;<code>Successor(king, curOrder)</code>&nbsp;，返回 Alice ，所以我们将 Alice 放入 <code>curOrder</code>&nbsp;中，得到&nbsp;<code>[\"king\", \"Alice\"]</code>&nbsp;。</li> \n <li>调用&nbsp;<code>Successor(Alice, curOrder)</code>&nbsp;，返回 Jack ，所以我们将 Jack 放入&nbsp;<code>curOrder</code>&nbsp;中，得到&nbsp;<code>[\"king\", \"Alice\", \"Jack\"]</code>&nbsp;。</li> \n <li>调用&nbsp;<code>Successor(Jack, curOrder)</code>&nbsp;，返回 Bob ，所以我们将 Bob 放入&nbsp;<code>curOrder</code>&nbsp;中，得到&nbsp;<code>[\"king\", \"Alice\", \"Jack\", \"Bob\"]</code>&nbsp;。</li> \n <li>调用&nbsp;<code>Successor(Bob, curOrder)</code>&nbsp;，返回&nbsp;<code>null</code>&nbsp;。最终得到继承顺序为&nbsp;<code>[\"king\", \"Alice\", \"Jack\", \"Bob\"]</code>&nbsp;。</li> \n</ol> \n<p>通过以上的函数，我们总是能得到一个唯一的继承顺序。</p> \n<p>请你实现&nbsp;<code>ThroneInheritance</code>&nbsp;类：</p> \n<ul> \n <li><code>ThroneInheritance(string kingName)</code> 初始化一个&nbsp;<code>ThroneInheritance</code>&nbsp;类的对象。国王的名字作为构造函数的参数传入。</li> \n <li><code>void birth(string parentName, string childName)</code>&nbsp;表示&nbsp;<code>parentName</code>&nbsp;新拥有了一个名为&nbsp;<code>childName</code>&nbsp;的孩子。</li> \n <li><code>void death(string name)</code>&nbsp;表示名为&nbsp;<code>name</code>&nbsp;的人死亡。一个人的死亡不会影响&nbsp;<code>Successor</code>&nbsp;函数，也不会影响当前的继承顺序。你可以只将这个人标记为死亡状态。</li> \n <li><code>string[] getInheritanceOrder()</code>&nbsp;返回 <strong>除去</strong>&nbsp;死亡人员的当前继承顺序列表。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"ThroneInheritance\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"getInheritanceOrder\", \"death\", \"getInheritanceOrder\"]\n[[\"king\"], [\"king\", \"andy\"], [\"king\", \"bob\"], [\"king\", \"catherine\"], [\"andy\", \"matthew\"], [\"bob\", \"alex\"], [\"bob\", \"asha\"], [null], [\"bob\"], [null]]\n<strong>输出：</strong>\n[null, null, null, null, null, null, null, [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"], null, [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]]\n\n<strong>解释：</strong>\nThroneInheritance t= new ThroneInheritance(\"king\"); // 继承顺序：<strong>king</strong>\nt.birth(\"king\", \"andy\"); // 继承顺序：king &gt; <strong>andy</strong>\nt.birth(\"king\", \"bob\"); // 继承顺序：king &gt; andy &gt; <strong>bob</strong>\nt.birth(\"king\", \"catherine\"); // 继承顺序：king &gt; andy &gt; bob &gt; <strong>catherine</strong>\nt.birth(\"andy\", \"matthew\"); // 继承顺序：king &gt; andy &gt; <strong>matthew</strong> &gt; bob &gt; catherine\nt.birth(\"bob\", \"alex\"); // 继承顺序：king &gt; andy &gt; matthew &gt; bob &gt; <strong>alex</strong> &gt; catherine\nt.birth(\"bob\", \"asha\"); // 继承顺序：king &gt; andy &gt; matthew &gt; bob &gt; alex &gt; <strong>asha</strong> &gt; catherine\nt.getInheritanceOrder(); // 返回 [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"]\nt.death(\"bob\"); // 继承顺序：king &gt; andy &gt; matthew &gt; <strong>bob（已经去世）</strong>&gt; alex &gt; asha &gt; catherine\nt.getInheritanceOrder(); // 返回 [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= kingName.length, parentName.length, childName.length, name.length &lt;= 15</code></li> \n <li><code>kingName</code>，<code>parentName</code>，&nbsp;<code>childName</code>&nbsp;和&nbsp;<code>name</code>&nbsp;仅包含小写英文字母。</li> \n <li>所有的参数&nbsp;<code>childName</code> 和&nbsp;<code>kingName</code>&nbsp;<strong>互不相同</strong>。</li> \n <li>所有&nbsp;<code>death</code>&nbsp;函数中的死亡名字 <code>name</code>&nbsp;要么是国王，要么是已经出生了的人员名字。</li> \n <li>每次调用 <code>birth(parentName, childName)</code> 时，测试用例都保证 <code>parentName</code> 对应的人员是活着的。</li> \n <li>最多调用&nbsp;<code>10<sup>5</sup></code>&nbsp;次<code>birth</code> 和&nbsp;<code>death</code>&nbsp;。</li> \n <li>最多调用&nbsp;<code>10</code>&nbsp;次&nbsp;<code>getInheritanceOrder</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1601. 最多可达成的换楼请求数目', '<p>我们有&nbsp;<code>n</code>&nbsp;栋楼，编号从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;。每栋楼有若干员工。由于现在是换楼的季节，部分员工想要换一栋楼居住。</p> \n<p>给你一个数组 <code>requests</code>&nbsp;，其中&nbsp;<code>requests[i] = [from<sub>i</sub>, to<sub>i</sub>]</code>&nbsp;，表示一个员工请求从编号为&nbsp;<code>from<sub>i</sub></code>&nbsp;的楼搬到编号为&nbsp;<code>to<sub>i</sub></code><sub>&nbsp;</sub>的楼。</p> \n<p>一开始&nbsp;<strong>所有楼都是满的</strong>，所以从请求列表中选出的若干个请求是可行的需要满足 <strong>每栋楼员工净变化为 0&nbsp;</strong>。意思是每栋楼 <strong>离开</strong>&nbsp;的员工数目 <strong>等于</strong>&nbsp;该楼 <strong>搬入</strong>&nbsp;的员工数数目。比方说&nbsp;<code>n = 3</code>&nbsp;且两个员工要离开楼&nbsp;<code>0</code>&nbsp;，一个员工要离开楼&nbsp;<code>1</code>&nbsp;，一个员工要离开楼 <code>2</code>&nbsp;，如果该请求列表可行，应该要有两个员工搬入楼&nbsp;<code>0</code>&nbsp;，一个员工搬入楼&nbsp;<code>1</code>&nbsp;，一个员工搬入楼&nbsp;<code>2</code>&nbsp;。</p> \n<p>请你从原请求列表中选出若干个请求，使得它们是一个可行的请求列表，并返回所有可行列表中最大请求数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 406px; width: 600px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/26/move1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]\n<strong>输出：</strong>5\n<strong>解释：</strong>请求列表如下：\n从楼 0 离开的员工为 x 和 y ，且他们都想要搬到楼 1 。\n从楼 1 离开的员工为 a 和 b ，且他们分别想要搬到楼 2 和 0 。\n从楼 2 离开的员工为 z ，且他想要搬到楼 0 。\n从楼 3 离开的员工为 c ，且他想要搬到楼 4 。\n没有员工从楼 4 离开。\n我们可以让 x 和 b 交换他们的楼，以满足他们的请求。\n我们可以让 y，a 和 z 三人在三栋楼间交换位置，满足他们的要求。\n所以最多可以满足 5 个请求。</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 327px; width: 450px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/26/move2.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 3, requests = [[0,0],[1,2],[2,1]]\n<strong>输出：</strong>3\n<strong>解释：</strong>请求列表如下：\n从楼 0 离开的员工为 x ，且他想要回到原来的楼 0 。\n从楼 1 离开的员工为 y ，且他想要搬到楼 2 。\n从楼 2 离开的员工为 z ，且他想要搬到楼 1 。\n我们可以满足所有的请求。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 20</code></li> \n <li><code>1 &lt;= requests.length &lt;= 16</code></li> \n <li><code>requests[i].length == 2</code></li> \n <li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt; n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1603. 设计停车系统', '<p>请你给一个停车场设计一个停车系统。停车场总共有三种不同大小的车位：大，中和小，每种尺寸分别有固定数目的车位。</p> \n<p>请你实现&nbsp;<code>ParkingSystem</code>&nbsp;类：</p> \n<ul> \n <li><code>ParkingSystem(int big, int medium, int small)</code>&nbsp;初始化&nbsp;<code>ParkingSystem</code>&nbsp;类，三个参数分别对应每种停车位的数目。</li> \n <li><code>bool addCar(int carType)</code>&nbsp;检查是否有&nbsp;<code>carType</code>&nbsp;对应的停车位。&nbsp;<code>carType</code>&nbsp;有三种类型：大，中，小，分别用数字&nbsp;<code>1</code>，&nbsp;<code>2</code>&nbsp;和&nbsp;<code>3</code>&nbsp;表示。<strong>一辆车只能停在</strong>&nbsp;<strong>&nbsp;</strong><code>carType</code>&nbsp;对应尺寸的停车位中。如果没有空车位，请返回&nbsp;<code>false</code>&nbsp;，否则将该车停入车位并返回&nbsp;<code>true</code>&nbsp;。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\n[\"ParkingSystem\", \"addCar\", \"addCar\", \"addCar\", \"addCar\"]\n[[1, 1, 0], [1], [2], [3], [1]]\n<strong>输出：</strong>\n[null, true, true, false, false]\n\n<strong>解释：</strong>\nParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\nparkingSystem.addCar(1); // 返回 true ，因为有 1 个空的大车位\nparkingSystem.addCar(2); // 返回 true ，因为有 1 个空的中车位\nparkingSystem.addCar(3); // 返回 false ，因为没有空的小车位\nparkingSystem.addCar(1); // 返回 false ，因为没有空的大车位，唯一一个大车位已经被占据了\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= big, medium, small &lt;= 1000</code></li> \n <li><code>carType</code>&nbsp;取值为&nbsp;<code>1</code>，&nbsp;<code>2</code>&nbsp;或&nbsp;<code>3</code></li> \n <li>最多会调用&nbsp;<code>addCar</code>&nbsp;函数&nbsp;<code>1000</code>&nbsp;次</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1604. 警告一小时内使用相同员工卡大于等于三次的人', '<p>力扣公司的员工都使用员工卡来开办公室的门。每当一个员工使用一次他的员工卡，安保系统会记录下员工的名字和使用时间。如果一个员工在一小时时间内使用员工卡的次数大于等于三次，这个系统会自动发布一个 <strong>警告</strong>&nbsp;。</p> \n<p>给你字符串数组&nbsp;<code>keyName</code>&nbsp;和&nbsp;<code>keyTime</code> ，其中&nbsp;<code>[keyName[i], keyTime[i]]</code>&nbsp;对应一个人的名字和他在&nbsp;<strong>某一天</strong> 内使用员工卡的时间。</p> \n<p>使用时间的格式是 <strong>24小时制</strong>&nbsp;，形如<strong>&nbsp;\"HH:MM\"</strong>&nbsp;，比方说&nbsp;<code>\"23:51\"</code> 和&nbsp;<code>\"09:49\"</code>&nbsp;。</p> \n<p>请你返回去重后的收到系统警告的员工名字，将它们按 <strong>字典序</strong><strong>升序&nbsp;</strong>排序后返回。</p> \n<p>请注意&nbsp;<code>\"10:00\"</code> - <code>\"11:00\"</code>&nbsp;视为一个小时时间范围内，而&nbsp;<code>\"23:51\"</code> - <code>\"00:10\"</code>&nbsp;不被视为一小时内，因为系统记录的是某一天内的使用情况。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>keyName = [\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"], keyTime = [\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"]\n<strong>输出：</strong>[\"daniel\"]\n<strong>解释：</strong>\"daniel\" 在一小时内使用了 3 次员工卡（\"10:00\"，\"10:40\"，\"11:00\"）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>keyName = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\",\"bob\"], keyTime = [\"12:01\",\"12:00\",\"18:00\",\"21:00\",\"21:20\",\"21:30\",\"23:00\"]\n<strong>输出：</strong>[\"bob\"]\n<strong>解释：</strong>\"bob\" 在一小时内使用了 3 次员工卡（\"21:00\"，\"21:20\"，\"21:30\"）。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>keyName = [\"john\",\"john\",\"john\"], keyTime = [\"23:58\",\"23:59\",\"00:01\"]\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>keyName = [\"leslie\",\"leslie\",\"leslie\",\"clare\",\"clare\",\"clare\",\"clare\"], keyTime = [\"13:00\",\"13:20\",\"14:00\",\"18:00\",\"18:51\",\"19:30\",\"19:49\"]\n<strong>输出：</strong>[\"clare\",\"leslie\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= keyName.length, keyTime.length &lt;= 10<sup>5</sup></code></li> \n <li><code>keyName.length == keyTime.length</code></li> \n <li><code>keyTime</code> 格式为&nbsp;<strong>\"HH:MM\"&nbsp;</strong>。</li> \n <li>保证&nbsp;<code>[keyName[i], keyTime[i]]</code>&nbsp;形成的二元对&nbsp;<strong>互不相同&nbsp;</strong>。</li> \n <li><code>1 &lt;= keyName[i].length &lt;= 10</code></li> \n <li><code>keyName[i]</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1605. 给定行和列的和求可行矩阵', '<p>给你两个非负整数数组&nbsp;<code>rowSum</code> 和&nbsp;<code>colSum</code>&nbsp;，其中&nbsp;<code>rowSum[i]</code>&nbsp;是二维矩阵中第 <code>i</code>&nbsp;行元素的和， <code>colSum[j]</code>&nbsp;是第 <code>j</code>&nbsp;列元素的和。换言之你不知道矩阵里的每个元素，但是你知道每一行和每一列的和。</p> \n<p>请找到大小为&nbsp;<code>rowSum.length x colSum.length</code>&nbsp;的任意 <strong>非负整数</strong>&nbsp;矩阵，且该矩阵满足&nbsp;<code>rowSum</code> 和&nbsp;<code>colSum</code>&nbsp;的要求。</p> \n<p>请你返回任意一个满足题目要求的二维矩阵，题目保证存在 <strong>至少一个</strong>&nbsp;可行矩阵。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>rowSum = [3,8], colSum = [4,7]\n<strong>输出：</strong>[[3,0],\n      [1,7]]\n<strong>解释：</strong>\n第 0 行：3 + 0 = 3 == rowSum[0]\n第 1 行：1 + 7 = 8 == rowSum[1]\n第 0 列：3 + 1 = 4 == colSum[0]\n第 1 列：0 + 7 = 7 == colSum[1]\n行和列的和都满足题目要求，且所有矩阵元素都是非负的。\n另一个可行的矩阵为：[[1,2],\n                  [3,5]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>rowSum = [5,7,10], colSum = [8,6,8]\n<strong>输出：</strong>[[0,5,0],\n      [6,1,0],\n      [2,0,8]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>rowSum = [14,9], colSum = [6,9,8]\n<strong>输出：</strong>[[0,9,5],\n      [6,0,3]]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>rowSum = [1,0], colSum = [1]\n<strong>输出：</strong>[[1],\n      [0]]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>rowSum = [0], colSum = [0]\n<strong>输出：</strong>[[0]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= rowSum.length, colSum.length &lt;= 500</code></li> \n <li><code>0 &lt;= rowSum[i], colSum[i] &lt;= 10<sup>8</sup></code></li> \n <li><code>sum(rows) == sum(columns)</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1606. 找到处理最多请求的服务器', '<p>你有 <code>k</code>&nbsp;个服务器，编号为 <code>0</code>&nbsp;到 <code>k-1</code>&nbsp;，它们可以同时处理多个请求组。每个服务器有无穷的计算能力但是 <strong>不能同时处理超过一个请求</strong>&nbsp;。请求分配到服务器的规则如下：</p> \n<ul> \n <li>第&nbsp;<code>i</code>&nbsp;（序号从 0 开始）个请求到达。</li> \n <li>如果所有服务器都已被占据，那么该请求被舍弃（完全不处理）。</li> \n <li>如果第&nbsp;<code>(i % k)</code>&nbsp;个服务器空闲，那么对应服务器会处理该请求。</li> \n <li>否则，将请求安排给下一个空闲的服务器（服务器构成一个环，必要的话可能从第 0 个服务器开始继续找下一个空闲的服务器）。比方说，如果第 <code>i</code>&nbsp;个服务器在忙，那么会查看第 <code>(i+1)</code>&nbsp;个服务器，第 <code>(i+2)</code>&nbsp;个服务器等等。</li> \n</ul> \n<p>给你一个 <strong>严格递增</strong>&nbsp;的正整数数组&nbsp;<code>arrival</code>&nbsp;，表示第&nbsp;<code>i</code>&nbsp;个任务的到达时间，和另一个数组&nbsp;<code>load</code>&nbsp;，其中&nbsp;<code>load[i]</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;个请求的工作量（也就是服务器完成它所需要的时间）。你的任务是找到 <strong>最繁忙的服务器</strong>&nbsp;。最繁忙定义为一个服务器处理的请求数是所有服务器里最多的。</p> \n<p>请你返回包含所有&nbsp;<strong>最繁忙服务器</strong>&nbsp;序号的列表，你可以以任意顺序返回这个列表。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 221px; width: 389px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/03/load-1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] \n<strong>输出：</strong>[1] \n<strong>解释：</strong>\n所有服务器一开始都是空闲的。\n前 3 个请求分别由前 3 台服务器依次处理。\n请求 3 进来的时候，服务器 0 被占据，所以它呗安排到下一台空闲的服务器，也就是服务器 1 。\n请求 4 进来的时候，由于所有服务器都被占据，该请求被舍弃。\n服务器 0 和 2 分别都处理了一个请求，服务器 1 处理了两个请求。所以服务器 1 是最忙的服务器。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>k = 3, arrival = [1,2,3,4], load = [1,2,1,2]\n<strong>输出：</strong>[0]\n<strong>解释：</strong>\n前 3 个请求分别被前 3 个服务器处理。\n请求 3 进来，由于服务器 0 空闲，它被服务器 0 处理。\n服务器 0 处理了两个请求，服务器 1 和 2 分别处理了一个请求。所以服务器 0 是最忙的服务器。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>k = 3, arrival = [1,2,3], load = [10,12,11]\n<strong>输出：</strong>[0,1,2]\n<strong>解释：</strong>每个服务器分别处理了一个请求，所以它们都是最忙的服务器。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>k = 3, arrival = [1,2,3,4,8,9,10], load = [5,2,10,3,1,2,2]\n<strong>输出：</strong>[1]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>k = 1, arrival = [1], load = [1]\n<strong>输出：</strong>[0]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= arrival.length, load.length &lt;= 10<sup>5</sup></code></li> \n <li><code>arrival.length == load.length</code></li> \n <li><code>1 &lt;= arrival[i], load[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>arrival</code>&nbsp;保证 <strong>严格递增</strong>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1608. 特殊数组的特征值', '<p>给你一个非负整数数组 <code>nums</code> 。如果存在一个数 <code>x</code> ，使得 <code>nums</code> 中恰好有 <code>x</code> 个元素 <strong>大于或者等于</strong> <code>x</code> ，那么就称 <code>nums</code> 是一个 <strong>特殊数组</strong> ，而 <code>x</code> 是该数组的 <strong>特征值</strong> 。</p> \n<p>注意： <code>x</code> <strong>不必</strong> 是 <code>nums</code> 的中的元素。</p> \n<p>如果数组 <code>nums</code> 是一个 <strong>特殊数组</strong> ，请返回它的特征值 <code>x</code> 。否则，返回<em> </em><code>-1</code> 。可以证明的是，如果 <code>nums</code> 是特殊数组，那么其特征值 <code>x</code> 是 <strong>唯一的</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [3,5]\n<strong>输出：</strong>2\n<strong>解释：</strong>有 2 个元素（3 和 5）大于或等于 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,0]\n<strong>输出：</strong>-1\n<strong>解释：</strong>没有满足题目要求的特殊数组，故而也不存在特征值 x 。\n如果 x = 0，应该有 0 个元素 &gt;= x，但实际有 2 个。\n如果 x = 1，应该有 1 个元素 &gt;= x，但实际有 0 个。\n如果 x = 2，应该有 2 个元素 &gt;= x，但实际有 0 个。\nx 不能取更大的值，因为 nums 中只有两个元素。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [0,4,3,0,4]\n<strong>输出：</strong>3\n<strong>解释：</strong>有 3 个元素大于或等于 3 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [3,6,7,7,0]\n<strong>输出：</strong>-1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 100</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1609. 奇偶树', '<p>如果一棵二叉树满足下述几个条件，则可以称为 <strong>奇偶树</strong> ：</p> \n<ul> \n <li>二叉树根节点所在层下标为 <code>0</code> ，根的子节点所在层下标为 <code>1</code> ，根的孙节点所在层下标为 <code>2</code> ，依此类推。</li> \n <li><strong>偶数下标</strong> 层上的所有节点的值都是 <strong>奇</strong> 整数，从左到右按顺序 <strong>严格递增</strong></li> \n <li><strong>奇数下标</strong> 层上的所有节点的值都是 <strong>偶</strong> 整数，从左到右按顺序 <strong>严格递减</strong></li> \n</ul> \n<p>给你二叉树的根节点，如果二叉树为 <strong>奇偶树 </strong>，则返回 <code>true</code> ，否则返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 229px; width: 362px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/04/sample_1_1966.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [1,10,4,3,null,7,9,12,8,6,null,null,2]\n<strong>输出：</strong>true\n<strong>解释：</strong>每一层的节点值分别是：\n0 层：[1]\n1 层：[10,4]\n2 层：[3,7,9]\n3 层：[12,8,6,2]\n由于 0 层和 2 层上的节点值都是奇数且严格递增，而 1 层和 3 层上的节点值都是偶数且严格递减，因此这是一棵奇偶树。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 167px; width: 363px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/04/sample_2_1966.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [5,4,2,3,3,7]\n<strong>输出：</strong>false\n<strong>解释：</strong>每一层的节点值分别是：\n0 层：[5]\n1 层：[4,2]\n2 层：[3,3,7]\n2 层上的节点值不满足严格递增的条件，所以这不是一棵奇偶树。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 167px; width: 363px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/04/sample_1_333_1966.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [5,9,1,3,5,7]\n<strong>输出：</strong>false\n<strong>解释：</strong>1 层上的节点值应为偶数。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>root = [1]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>root = [11,8,6,1,3,9,11,30,20,18,16,12,10,4,2,17]\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点数在范围 <code>[1, 10<sup>5</sup>]</code> 内</li> \n <li><code>1 &lt;= Node.val &lt;= 10<sup>6</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1610. 可见点的最大数目', '<p>给你一个点数组 <code>points</code> 和一个表示角度的整数 <code>angle</code> ，你的位置是 <code>location</code> ，其中 <code>location = [pos<sub>x</sub>, pos<sub>y</sub>]</code> 且 <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> 都表示 X-Y 平面上的整数坐标。</p> \n<p>最开始，你面向东方进行观测。你 <strong>不能</strong> 进行移动改变位置，但可以通过 <strong>自转</strong> 调整观测角度。换句话说，<code>pos<sub>x</sub></code> 和 <code>pos<sub>y</sub></code> 不能改变。你的视野范围的角度用 <code>angle</code> 表示， 这决定了你观测任意方向时可以多宽。设 <code>d</code> 为你逆时针自转旋转的度数，那么你的视野就是角度范围 <code>[d - angle/2, d + angle/2]</code> 所指示的那片区域。</p> \n<video width=\"750\" style=\"max-width:100%;height:auto;\" muted height=\"360\" controls=\"\" autoplay=\"\">\n <source type=\"video/mp4\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/04/angle.mp4\">Your browser does not support the video tag or this video format.\n</video> \n<p>对于每个点，如果由该点、你的位置以及从你的位置直接向东的方向形成的角度 <strong>位于你的视野中</strong> ，那么你就可以看到它。</p> \n<p>同一个坐标上可以有多个点。你所在的位置也可能存在一些点，但不管你的怎么旋转，总是可以看到这些点。同时，点不会阻碍你看到其他点。</p> \n<p>返回你能看到的点的最大数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 300px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/04/89a07e9b-00ab-4967-976a-c723b2aa8656.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]\n<strong>输出：</strong>3\n<strong>解释：</strong>阴影区域代表你的视野。在你的视野中，所有的点都清晰可见，尽管 [2,2] 和 [3,3]在同一条直线上，你仍然可以看到 [3,3] 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]\n<strong>输出：</strong>4\n<strong>解释：</strong>在你的视野中，所有的点都清晰可见，包括你所在位置的那个点。</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 348px; width: 690px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/04/5010bfd3-86e6-465f-ac64-e9df941d2e49.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>points = [[1,0],[2,1]], angle = 13, location = [1,1]\n<strong>输出：</strong>1\n<strong>解释：</strong>如图所示，你只能看到两点之一。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= points.length &lt;= 10<sup>5</sup></code></li> \n <li><code>points[i].length == 2</code></li> \n <li><code>location.length == 2</code></li> \n <li><code>0 &lt;= angle &lt; 360</code></li> \n <li><code>0 &lt;= pos<sub>x</sub>, pos<sub>y</sub>, x<sub>i</sub>, y<sub>i</sub> &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1611. 使整数变为 0 的最少操作次数', '<p>给你一个整数 <code>n</code>，你需要重复执行多次下述操作将其转换为 <code>0</code> ：</p> \n<ul> \n <li>翻转 <code>n</code> 的二进制表示中最右侧位（第 <code>0</code> 位）。</li> \n <li>如果第 <code>(i-1)</code> 位为 <code>1</code> 且从第 <code>(i-2)</code> 位到第 <code>0</code> 位都为 <code>0</code>，则翻转 <code>n</code> 的二进制表示中的第 <code>i</code> 位。</li> \n</ul> \n<p>返回将 <code>n</code> 转换为 <code>0</code> 的最小操作次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 0\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>3 的二进制表示为 \"11\"\n\"<strong>1</strong>1\" -&gt; \"<strong>0</strong>1\" ，执行的是第 2 种操作，因为第 0 位为 1 。\n\"0<strong>1</strong>\" -&gt; \"0<strong>0</strong>\" ，执行的是第 1 种操作。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 6\n<strong>输出：</strong>4\n<strong>解释：</strong>6 的二进制表示为 \"110\".\n\"<strong>1</strong>10\" -&gt; \"<strong>0</strong>10\" ，执行的是第 2 种操作，因为第 1 位为 1 ，第 0 到 0 位为 0 。\n\"01<strong>0</strong>\" -&gt; \"01<strong>1</strong>\" ，执行的是第 1 种操作。\n\"0<strong>1</strong>1\" -&gt; \"0<strong>0</strong>1\" ，执行的是第 2 种操作，因为第 0 位为 1 。\n\"00<strong>1</strong>\" -&gt; \"00<strong>0</strong>\" ，执行的是第 1 种操作。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 9\n<strong>输出：</strong>14\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 333\n<strong>输出：</strong>393\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1614. 括号的最大嵌套深度', '<p>如果字符串满足以下条件之一，则可以称之为 <strong>有效括号字符串</strong><strong>（valid parentheses string</strong>，可以简写为 <strong>VPS</strong>）：</p> \n<ul> \n <li>字符串是一个空字符串 <code>\"\"</code>，或者是一个不为 <code>\"(\"</code> 或 <code>\")\"</code> 的单字符。</li> \n <li>字符串可以写为 <code>AB</code>（<code>A</code> 与 <code>B</code>&nbsp;字符串连接），其中 <code>A</code> 和 <code>B</code> 都是 <strong>有效括号字符串</strong> 。</li> \n <li>字符串可以写为 <code>(A)</code>，其中 <code>A</code> 是一个 <strong>有效括号字符串</strong> 。</li> \n</ul> \n<p>类似地，可以定义任何有效括号字符串&nbsp;<code>S</code> 的 <strong>嵌套深度</strong> <code>depth(S)</code>：</p> \n<ul> \n <li><code>depth(\"\") = 0</code></li> \n <li><code>depth(C) = 0</code>，其中 <code>C</code> 是单个字符的字符串，且该字符不是 <code>\"(\"</code> 或者 <code>\")\"</code></li> \n <li><code>depth(A + B) = max(depth(A), depth(B))</code>，其中 <code>A</code> 和 <code>B</code> 都是 <strong>有效括号字符串</strong></li> \n <li><code>depth(\"(\" + A + \")\") = 1 + depth(A)</code>，其中 <code>A</code> 是一个 <strong>有效括号字符串</strong></li> \n</ul> \n<p>例如：<code>\"\"</code>、<code>\"()()\"</code>、<code>\"()(()())\"</code> 都是 <strong>有效括号字符串</strong>（嵌套深度分别为 0、1、2），而 <code>\")(\"</code> 、<code>\"(()\"</code> 都不是 <strong>有效括号字符串</strong> 。</p> \n<p>给你一个 <strong>有效括号字符串</strong> <code>s</code>，返回该字符串的<em> </em><code>s</code> <strong>嵌套深度</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"(1+(2*3)+((<strong>8</strong>)/4))+1\"\n<strong>输出：</strong>3\n<strong>解释：</strong>数字 8 在嵌套的 3 层括号中。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"(1)+((2))+(((<strong>3</strong>)))\"\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"1+(<strong>2</strong>*3)/(2-1)\"\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"<strong>1</strong>\"\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 100</code></li> \n <li><code>s</code> 由数字 <code>0-9</code> 和字符 <code>\'+\'</code>、<code>\'-\'</code>、<code>\'*\'</code>、<code>\'/\'</code>、<code>\'(\'</code>、<code>\')\'</code> 组成</li> \n <li>题目数据保证括号表达式 <code>s</code> 是 <strong>有效的括号表达式</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1615. 最大网络秩', '<p><code>n</code> 座城市和一些连接这些城市的道路 <code>roads</code> 共同组成一个基础设施网络。每个 <code>roads[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> 都表示在城市 <code>a<sub>i</sub></code> 和 <code>b<sub>i</sub></code> 之间有一条双向道路。</p> \n<p>两座不同城市构成的 <strong>城市对</strong> 的 <strong>网络秩</strong> 定义为：与这两座城市 <strong>直接</strong> 相连的道路总数。如果存在一条道路直接连接这两座城市，则这条道路只计算 <strong>一次</strong> 。</p> \n<p>整个基础设施网络的 <strong>最大网络秩</strong> 是所有不同城市对中的 <strong>最大网络秩</strong> 。</p> \n<p>给你整数 <code>n</code> 和数组 <code>roads</code>，返回整个基础设施网络的 <strong>最大网络秩</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"width: 292px; height: 172px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/11/ex1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]\n<strong>输出：</strong>4\n<strong>解释：</strong>城市 0 和 1 的网络秩是 4，因为共有 4 条道路与城市 0 或 1 相连。位于 0 和 1 之间的道路只计算一次。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"width: 292px; height: 172px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/11/ex2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]\n<strong>输出：</strong>5\n<strong>解释：</strong>共有 5 条道路与城市 1 或 2 相连。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]\n<strong>输出：</strong>5\n<strong>解释：</strong>2 和 5 的网络秩为 5，注意并非所有的城市都需要连接起来。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 100</code></li> \n <li><code>0 &lt;= roads.length &lt;= n * (n - 1) / 2</code></li> \n <li><code>roads[i].length == 2</code></li> \n <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub>&nbsp;&lt;= n-1</code></li> \n <li><code>a<sub>i</sub>&nbsp;!=&nbsp;b<sub>i</sub></code></li> \n <li>每对城市之间 <strong>最多只有一条</strong>&nbsp;道路相连</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1616. 分割两个字符串得到回文串', '<p>给你两个字符串&nbsp;<code>a</code> 和&nbsp;<code>b</code>&nbsp;，它们长度相同。请你选择一个下标，将两个字符串都在&nbsp;<strong>相同的下标 </strong>分割开。由&nbsp;<code>a</code>&nbsp;可以得到两个字符串：&nbsp;<code>a<sub>prefix</sub></code>&nbsp;和&nbsp;<code>a<sub>suffix</sub></code>&nbsp;，满足&nbsp;<code>a = a<sub>prefix</sub> + a<sub>suffix</sub></code><sub>&nbsp;</sub>，同理，由&nbsp;<code>b</code> 可以得到两个字符串&nbsp;<code>b<sub>prefix</sub></code> 和&nbsp;<code>b<sub>suffix</sub></code>&nbsp;，满足&nbsp;<code>b = b<sub>prefix</sub> + b<sub>suffix</sub></code>&nbsp;。请你判断&nbsp;<code>a<sub>prefix</sub> + b<sub>suffix</sub></code> 或者&nbsp;<code>b<sub>prefix</sub> + a<sub>suffix</sub></code>&nbsp;能否构成回文串。</p> \n<p>当你将一个字符串&nbsp;<code>s</code>&nbsp;分割成&nbsp;<code>s<sub>prefix</sub></code> 和&nbsp;<code>s<sub>suffix</sub></code>&nbsp;时，&nbsp;<code>s<sub>suffix</sub></code> 或者&nbsp;<code>s<sub>prefix</sub></code> 可以为空。比方说，&nbsp;<code>s = \"abc\"</code>&nbsp;那么&nbsp;<code>\"\" + \"abc\"</code>&nbsp;，&nbsp;<code>\"a\" + \"bc\"&nbsp;</code>，&nbsp;<code>\"ab\" + \"c\"</code>&nbsp;和&nbsp;<code>\"abc\" + \"\"</code>&nbsp;都是合法分割。</p> \n<p>如果 <strong>能构成回文字符串</strong> ，那么请返回&nbsp;<code>true</code>，否则返回<em>&nbsp;</em><code>false</code>&nbsp;。</p> \n<p><strong>注意</strong>，&nbsp;<code>x + y</code>&nbsp;表示连接字符串&nbsp;<code>x</code> 和&nbsp;<code>y</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>a = \"x\", b = \"y\"\n<b>输出：</b>true\n<b>解释：</b>如果 a 或者 b 是回文串，那么答案一定为 true ，因为你可以如下分割：\na<sub>prefix</sub> = \"\", a<sub>suffix</sub> = \"x\"\nb<sub>prefix</sub> = \"\", b<sub>suffix</sub> = \"y\"\n那么 a<sub>prefix</sub> + b<sub>suffix</sub> = \"\" + \"y\" = \"y\" 是回文串。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>a = \"abdef\", b = \"fecab\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>a = \"ulacfd\", b = \"jizalu\"\n<b>输出：</b>true\n<b>解释：</b>在下标为 3 处分割：\na<sub>prefix</sub> = \"ula\", a<sub>suffix</sub> = \"cfd\"\nb<sub>prefix</sub> = \"jiz\", b<sub>suffix</sub> = \"alu\"\n那么 a<sub>prefix</sub> + b<sub>suffix</sub> = \"ula\" + \"alu\" = \"ulaalu\" 是回文串。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>a = \"xbdef\", b = \"xecab\"\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= a.length, b.length &lt;= 10<sup>5</sup></code></li> \n <li><code>a.length == b.length</code></li> \n <li><code>a</code> 和&nbsp;<code>b</code>&nbsp;都只包含小写英文字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1617. 统计子树中城市之间最大距离', '<p>给你&nbsp;<code>n</code>&nbsp;个城市，编号为从&nbsp;<code>1</code> 到&nbsp;<code>n</code>&nbsp;。同时给你一个大小为&nbsp;<code>n-1</code>&nbsp;的数组&nbsp;<code>edges</code>&nbsp;，其中&nbsp;<code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code>&nbsp;表示城市&nbsp;<code>u<sub>i</sub></code>&nbsp;和&nbsp;<code>v<sub>i</sub></code><sub>&nbsp;</sub>之间有一条双向边。题目保证任意城市之间只有唯一的一条路径。换句话说，所有城市形成了一棵&nbsp;<strong>树</strong>&nbsp;。</p> \n<p>一棵&nbsp;<strong>子树</strong>&nbsp;是城市的一个子集，且子集中任意城市之间可以通过子集中的其他城市和边到达。两个子树被认为不一样的条件是至少有一个城市在其中一棵子树中存在，但在另一棵子树中不存在。</p> \n<p>对于&nbsp;<code>d</code>&nbsp;从&nbsp;<code>1</code> 到&nbsp;<code>n-1</code>&nbsp;，请你找到城市间&nbsp;<strong>最大距离</strong>&nbsp;恰好为 <code>d</code>&nbsp;的所有子树数目。</p> \n<p>请你返回一个大小为&nbsp;<code>n-1</code>&nbsp;的数组，其中第<em>&nbsp;</em><code>d</code><em>&nbsp;</em>个元素（<strong>下标从 1 开始</strong>）是城市间 <strong>最大距离</strong> 恰好等于&nbsp;<code>d</code>&nbsp;的子树数目。</p> \n<p><strong>请注意</strong>，两个城市间距离定义为它们之间需要经过的边的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"width: 161px; height: 181px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/11/p1.png\" alt=\"\"></strong></p> \n<pre><b>输入：</b>n = 4, edges = [[1,2],[2,3],[2,4]]\n<b>输出：</b>[3,4,0]\n<strong>解释：\n</strong>子树 {1,2}, {2,3} 和 {2,4} 最大距离都是 1 。\n子树 {1,2,3}, {1,2,4}, {2,3,4} 和 {1,2,3,4} 最大距离都为 2 。\n不存在城市间最大距离为 3 的子树。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>n = 2, edges = [[1,2]]\n<b>输出：</b>[1]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>n = 3, edges = [[1,2],[2,3]]\n<b>输出：</b>[2,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 15</code></li> \n <li><code>edges.length == n-1</code></li> \n <li><code>edges[i].length == 2</code></li> \n <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> \n <li>题目保证&nbsp;<code>(u<sub>i</sub>, v<sub>i</sub>)</code>&nbsp;所表示的边互不相同。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1619. 删除某些元素后的数组均值', '<p>给你一个整数数组&nbsp;<code>arr</code>&nbsp;，请你删除最小&nbsp;<code>5%</code>&nbsp;的数字和最大 <code>5%</code>&nbsp;的数字后，剩余数字的平均值。</p> \n<p>与 <strong>标准答案</strong>&nbsp;误差在&nbsp;<code>10<sup>-5</sup></code>&nbsp;的结果都被视为正确结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]\n<b>输出：</b>2.00000\n<b>解释：</b>删除数组中最大和最小的元素后，所有元素都等于 2，所以平均值为 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]\n<b>输出：</b>4.00000\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]\n<b>输出：</b>4.77778\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6,7,2,9,7,7,3,0,1,6,1,10,3]\n<b>输出：</b>5.27778\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><b>输入：</b>arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10,7,7,8,2,0,1,1]\n<b>输出：</b>5.29167\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>20 &lt;= arr.length &lt;= 1000</code></li> \n <li><code>arr.length</code><b>&nbsp;</b>是&nbsp;<code>20</code>&nbsp;的<strong>&nbsp;倍数</strong>&nbsp;</li> \n <li><code>0 &lt;= arr[i] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('162. 寻找峰值', '<p>峰值元素是指其值大于左右相邻值的元素。</p> \n<p>给你一个输入数组&nbsp;<code>nums</code>，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 <strong>任何一个峰值</strong> 所在位置即可。</p> \n<p>你可以假设&nbsp;<code>nums[-1] = nums[n] = -∞</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = <code>[1,2,3,1]</code>\n<strong>输出：</strong>2\n<strong>解释：</strong>3 是峰值元素，你的函数应该返回其索引 2。</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>nums = <code>[</code>1,2,1,3,5,6,4]\n<strong>输出：</strong>1 或 5 \n<strong>解释：</strong>你的函数可以返回索引 1，其峰值元素为 2；\n&nbsp;    或者返回索引 5， 其峰值元素为 6。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 1000</code></li> \n <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> \n <li>对于所有有效的 <code>i</code> 都有 <code>nums[i] != nums[i + 1]</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你可以实现时间复杂度为 <code>O(logN)</code><em> </em>的解决方案吗？</p>');
INSERT INTO `leecode` VALUES ('1620. 网络信号最好的坐标', '<p>给你一个数组 <code>towers</code>&nbsp;和一个整数 <code>radius</code>&nbsp;，数组中包含一些网络信号塔，其中&nbsp;<code>towers[i] = [x<sub>i</sub>, y<sub>i</sub>, q<sub>i</sub>]</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;个网络信号塔的坐标是&nbsp;<code>(x<sub>i</sub>, y<sub>i</sub>)</code>&nbsp;且信号强度参数为&nbsp;<code>q<sub>i</sub></code><sub>&nbsp;</sub>。所有坐标都是在&nbsp; X-Y 坐标系内的&nbsp;<strong>整数</strong>&nbsp;坐标。两个坐标之间的距离用 <strong>欧几里得距离</strong>&nbsp;计算。</p> \n<p>整数&nbsp;<code>radius</code>&nbsp;表示一个塔 <strong>能到达&nbsp;</strong>的 <strong>最远距离</strong>&nbsp;。如果一个坐标跟塔的距离在 <code>radius</code>&nbsp;以内，那么该塔的信号可以到达该坐标。在这个范围以外信号会很微弱，所以 <code>radius</code>&nbsp;以外的距离该塔是 <strong>不能到达的</strong>&nbsp;。</p> \n<p>如果第 <code>i</code>&nbsp;个塔能到达 <code>(x, y)</code>&nbsp;，那么该塔在此处的信号为&nbsp;<code>⌊q<sub>i</sub> / (1 + d)⌋</code>&nbsp;，其中&nbsp;<code>d</code>&nbsp;是塔跟此坐标的距离。一个坐标的 <b>网络信号</b>&nbsp;是所有 <strong>能到达&nbsp;</strong>该坐标的塔的信号强度之和。</p> \n<p>请你返回 <strong>网络信号</strong>&nbsp;最大的整数坐标点。如果有多个坐标网络信号一样大，请你返回字典序最小的一个坐标。</p> \n<p><strong>注意：</strong></p> \n<ul> \n <li>坐标&nbsp;<code>(x1, y1)</code>&nbsp;字典序比另一个坐标&nbsp;<code>(x2, y2)</code>&nbsp;小：要么&nbsp;<code>x1 &lt; x2</code>&nbsp;，要么&nbsp;<code>x1 == x2</code> 且&nbsp;<code>y1 &lt; y2</code>&nbsp;。</li> \n <li><code>⌊val⌋</code>&nbsp;表示小于等于&nbsp;<code>val</code>&nbsp;的最大整数（向下取整函数）。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 176px; height: 176px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/17/untitled-diagram.png\" alt=\"\"> \n<pre><b>输入：</b>towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2\n<b>输出：</b>[2,1]\n<strong>解释：</strong>\n坐标 (2, 1) 信号强度之和为 13\n- 塔 (2, 1) 强度参数为 7 ，在该点强度为 ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7\n- 塔 (1, 2) 强度参数为 5 ，在该点强度为 ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2\n- 塔 (3, 1) 强度参数为 9 ，在该点强度为 ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4\n没有别的坐标有更大的信号强度。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>towers = [[23,11,21]], radius = 9\n<b>输出：</b>[23,11]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2\n<b>输出：</b>[1,2]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>towers = [[2,1,9],[0,1,9]], radius = 2\n<b>输出：</b>[0,1]\n<strong>解释：</strong>坐标 (0, 1) 和坐标 (2, 1) 都是强度最大的位置，但是 (0, 1) 字典序更小。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= towers.length &lt;= 50</code></li> \n <li><code>towers[i].length == 3</code></li> \n <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub>, q<sub>i</sub> &lt;= 50</code></li> \n <li><code>1 &lt;= radius &lt;= 50</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1621. 大小为 K 的不重叠线段的数目', '<p>给你一维空间的&nbsp;<code>n</code>&nbsp;个点，其中第&nbsp;<code>i</code>&nbsp;个点（编号从&nbsp;<code>0</code> 到&nbsp;<code>n-1</code>）位于&nbsp;<code>x = i</code>&nbsp;处，请你找到&nbsp;<strong>恰好</strong>&nbsp;<code>k</code>&nbsp;<strong>个不重叠</strong>&nbsp;线段且每个线段至少覆盖两个点的方案数。线段的两个端点必须都是&nbsp;<strong>整数坐标</strong>&nbsp;。这&nbsp;<code>k</code>&nbsp;个线段不需要全部覆盖全部&nbsp;<code>n</code>&nbsp;个点，且它们的端点&nbsp;<strong>可以&nbsp;</strong>重合。</p> \n<p>请你返回 <code>k</code>&nbsp;个不重叠线段的方案数。由于答案可能很大，请将结果对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong> 后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 179px; height: 222px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/17/ex1.png\" alt=\"\"> \n<pre><b>输入：</b>n = 4, k = 2\n<b>输出：</b>5\n<strong>解释：\n</strong>如图所示，两个线段分别用红色和蓝色标出。\n上图展示了 5 种不同的方案 {(0,2),(2,3)}，{(0,1),(1,3)}，{(0,1),(2,3)}，{(1,2),(2,3)}，{(0,1),(1,2)} 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>n = 3, k = 1\n<b>输出：</b>3\n<strong>解释：</strong>总共有 3 种不同的方案 {(0,1)}, {(0,2)}, {(1,2)} 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>n = 30, k = 7\n<b>输出：</b>796297179\n<strong>解释：</strong>画 7 条线段的总方案数为 3796297200 种。将这个数对 10<sup>9</sup> + 7 取余得到 796297179 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>n = 5, k = 3\n<b>输出：</b>7\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><b>输入：</b>n = 3, k = 2\n<b>输出：</b>1</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 1000</code></li> \n <li><code>1 &lt;= k &lt;= n-1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1622. 奇妙序列', '<p>请你实现三个 API <code>append</code>，<code>addAll</code>&nbsp;和&nbsp;<code>multAll</code>&nbsp;来实现奇妙序列。</p> \n<p>请实现&nbsp;<code>Fancy</code>&nbsp;类 ：</p> \n<ul> \n <li><code>Fancy()</code>&nbsp;初始化一个空序列对象。</li> \n <li><code>void append(val)</code> 将整数&nbsp;<code>val</code>&nbsp;添加在序列末尾。</li> \n <li><code>void addAll(inc)</code>&nbsp;将所有序列中的现有数值都增加&nbsp;<code>inc</code>&nbsp;。</li> \n <li><code>void multAll(m)</code>&nbsp;将序列中的所有现有数值都乘以整数&nbsp;<code>m</code>&nbsp;。</li> \n <li><code>int getIndex(idx)</code> 得到下标为&nbsp;<code>idx</code>&nbsp;处的数值（下标从 0 开始），并将结果对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;取余。如果下标大于等于序列的长度，请返回&nbsp;<code>-1</code>&nbsp;。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"Fancy\", \"append\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"getIndex\", \"getIndex\"]\n[[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]\n<strong>输出：</strong>\n[null, null, null, null, null, 10, null, null, null, 26, 34, 20]\n\n<strong>解释：</strong>\nFancy fancy = new Fancy();\nfancy.append(2);   // 奇妙序列：[2]\nfancy.addAll(3);   // 奇妙序列：[2+3] -&gt; [5]\nfancy.append(7);   // 奇妙序列：[5, 7]\nfancy.multAll(2);  // 奇妙序列：[5*2, 7*2] -&gt; [10, 14]\nfancy.getIndex(0); // 返回 10\nfancy.addAll(3);   // 奇妙序列：[10+3, 14+3] -&gt; [13, 17]\nfancy.append(10);  // 奇妙序列：[13, 17, 10]\nfancy.multAll(2);  // 奇妙序列：[13*2, 17*2, 10*2] -&gt; [26, 34, 20]\nfancy.getIndex(0); // 返回 26\nfancy.getIndex(1); // 返回 34\nfancy.getIndex(2); // 返回 20\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= val, inc, m &lt;= 100</code></li> \n <li><code>0 &lt;= idx &lt;= 10<sup>5</sup></code></li> \n <li>总共最多会有&nbsp;<code>10<sup>5</sup></code>&nbsp;次对&nbsp;<code>append</code>，<code>addAll</code>，<code>multAll</code>&nbsp;和&nbsp;<code>getIndex</code>&nbsp;的调用。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1624. 两个相同字符之间的最长子字符串', '<p>给你一个字符串 <code>s</code>，请你返回 <strong>两个相同字符之间的最长子字符串的长度</strong> <em>，</em>计算长度时不含这两个字符。如果不存在这样的子字符串，返回 <code>-1</code> 。</p> \n<p><strong>子字符串</strong> 是字符串中的一个连续字符序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"aa\"\n<strong>输出：</strong>0\n<strong>解释：</strong>最优的子字符串是两个 \'a\' 之间的空子字符串。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abca\"\n<strong>输出：</strong>2\n<strong>解释：</strong>最优的子字符串是 \"bc\" 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"cbzxy\"\n<strong>输出：</strong>-1\n<strong>解释：</strong>s 中不存在出现出现两次的字符，所以返回 -1 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"cabbac\"\n<strong>输出：</strong>4\n<strong>解释：</strong>最优的子字符串是 \"abba\" ，其他的非最优解包括 \"bb\" 和 \"\" 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 300</code></li> \n <li><code>s</code> 只含小写英文字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1625. 执行操作后字典序最小的字符串', '<p>给你一个字符串 <code>s</code> 以及两个整数 <code>a</code> 和 <code>b</code> 。其中，字符串 <code>s</code> 的长度为偶数，且仅由数字 <code>0</code> 到 <code>9</code> 组成。</p> \n<p>你可以在 <code>s</code> 上按任意顺序多次执行下面两个操作之一：</p> \n<ul> \n <li>累加：将&nbsp; <code>a</code> 加到 <code>s</code> 中所有下标为奇数的元素上（<strong>下标从 0 开始</strong>）。数字一旦超过 <code>9</code> 就会变成 <code>0</code>，如此循环往复。例如，<code>s = \"3456\"</code> 且 <code>a = 5</code>，则执行此操作后 <code>s</code> 变成 <code>\"3951\"</code>。</li> \n <li>轮转：将 <code>s</code> 向右轮转 <code>b</code> 位。例如，<code>s = \"3456\"</code> 且 <code>b = 1</code>，则执行此操作后 <code>s</code> 变成 <code>\"6345\"</code>。</li> \n</ul> \n<p>请你返回在 <code>s</code> 上执行上述操作任意次后可以得到的 <strong>字典序最小</strong> 的字符串。</p> \n<p>如果两个字符串长度相同，那么字符串 <code>a</code> 字典序比字符串 <code>b</code> 小可以这样定义：在 <code>a</code> 和 <code>b</code> 出现不同的第一个位置上，字符串 <code>a</code> 中的字符出现在字母表中的时间早于 <code>b</code> 中的对应字符。例如，<code>\"0158”</code> 字典序比 <code>\"0190\"</code> 小，因为不同的第一个位置是在第三个字符，显然 <code>\'5\'</code> 出现在 <code>\'9\'</code> 之前。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"5525\", a = 9, b = 2\n<strong>输出：</strong>\"2050\"\n<strong>解释：</strong>执行操作如下：\n初态：\"5525\"\n轮转：\"2555\"\n累加：\"2454\"\n累加：\"2353\"\n轮转：\"5323\"\n累加：\"5222\"\n累加：\"5121\"\n轮转：\"2151\"\n累加：\"2050\"​​​​​​​​​​​​\n无法获得字典序小于 \"2050\" 的字符串。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"74\", a = 5, b = 1\n<strong>输出：</strong>\"24\"\n<strong>解释：</strong>执行操作如下：\n初态：\"74\"\n轮转：\"47\"\n累加：\"42\"\n轮转：\"24\"​​​​​​​​​​​​\n无法获得字典序小于 \"24\" 的字符串。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"0011\", a = 4, b = 2\n<strong>输出：</strong>\"0011\"\n<strong>解释：</strong>无法获得字典序小于 \"0011\" 的字符串。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"43987654\", a = 7, b = 3\n<strong>输出：</strong>\"00553311\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= s.length &lt;= 100</code></li> \n <li><code>s.length</code> 是偶数</li> \n <li><code>s</code> 仅由数字 <code>0</code> 到 <code>9</code> 组成</li> \n <li><code>1 &lt;= a &lt;= 9</code></li> \n <li><code>1 &lt;= b &lt;= s.length - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1626. 无矛盾的最佳球队', '<p>假设你是球队的经理。对于即将到来的锦标赛，你想组合一支总体得分最高的球队。球队的得分是球队中所有球员的分数 <strong>总和</strong> 。</p> \n<p>然而，球队中的矛盾会限制球员的发挥，所以必须选出一支 <strong>没有矛盾</strong> 的球队。如果一名年龄较小球员的分数 <strong>严格大于</strong> 一名年龄较大的球员，则存在矛盾。同龄球员之间不会发生矛盾。</p> \n<p>给你两个列表 <code>scores</code> 和 <code>ages</code>，其中每组 <code>scores[i]</code> 和 <code>ages[i]</code> 表示第 <code>i</code> 名球员的分数和年龄。请你返回 <strong>所有可能的无矛盾球队中得分最高那支的分数</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>scores = [1,3,5,10,15], ages = [1,2,3,4,5]\n<strong>输出：</strong>34\n<strong>解释：</strong>你可以选中所有球员。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>scores = [4,5,6,5], ages = [2,1,2,1]\n<strong>输出：</strong>16\n<strong>解释：</strong>最佳的选择是后 3 名球员。注意，你可以选中多个同龄球员。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>scores = [1,2,3,5], ages = [8,9,10,1]\n<strong>输出：</strong>6\n<strong>解释：</strong>最佳的选择是前 3 名球员。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= scores.length, ages.length &lt;= 1000</code></li> \n <li><code>scores.length == ages.length</code></li> \n <li><code>1 &lt;= scores[i] &lt;= 10<sup>6</sup></code></li> \n <li><code>1 &lt;= ages[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1627. 带阈值的图连通性', '<p>有 <code>n</code> 座城市，编号从 <code>1</code> 到 <code>n</code> 。编号为 <code>x</code> 和 <code>y</code> 的两座城市直接连通的前提是： <code>x</code> 和 <code>y</code> 的公因数中，至少有一个 <strong>严格大于</strong> 某个阈值 <code>threshold</code> 。更正式地说，如果存在整数 <code>z</code> ，且满足以下所有条件，则编号 <code>x</code> 和 <code>y</code> 的城市之间有一条道路：</p> \n<ul> \n <li><code>x % z == 0</code></li> \n <li><code>y % z == 0</code></li> \n <li><code>z &gt; threshold</code></li> \n</ul> \n<p>给你两个整数 <code>n</code> 和 <code>threshold</code> ，以及一个待查询数组，请你判断每个查询<code> queries[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> 指向的城市 <code>a<sub>i</sub></code> 和 <code>b<sub>i</sub></code> 是否连通（即，它们之间是否存在一条路径）。</p> \n<p>返回数组 <code>answer</code> ，其中<code>answer.length == queries.length</code> 。如果第 <code>i</code> 个查询中指向的城市 <code>a<sub>i</sub></code> 和 <code>b<sub>i</sub></code> 连通，则 <code>answer[i]</code> 为 <code>true</code> ；如果不连通，则 <code>answer[i]</code> 为 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 382px; height: 181px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/18/ex1.jpg\" alt=\"\"></p> \n<p>&nbsp;</p> \n<pre><strong>输入：</strong>n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]\n<strong>输出：</strong>[false,false,true]\n<strong>解释：</strong>每个数的因数如下：\n1:   1\n2:   1, 2\n3:   1, <strong>3</strong>\n4:   1, 2, <strong>4</strong>\n5:   1, <strong>5</strong>\n6:   1, 2, <strong>3</strong>, <strong>6</strong>\n所有大于阈值的的因数已经加粗标识，只有城市 3 和 6 共享公约数 3 ，因此结果是： \n[1,4]   1 与 4 不连通\n[2,5]   2 与 5 不连通\n[3,6]   3 与 6 连通，存在路径 3--6\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 532px; height: 302px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/18/tmp.jpg\" alt=\"\"></p> \n<p>&nbsp;</p> \n<pre><strong>输入：</strong>n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]\n<strong>输出：</strong>[true,true,true,true,true]\n<strong>解释：</strong>每个数的因数与上一个例子相同。但是，由于阈值为 0 ，所有的因数都大于阈值。因为所有的数字共享公因数 1 ，所以所有的城市都互相连通。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"width: 282px; height: 282px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/16/ex3.jpg\" alt=\"\"></p> \n<p>&nbsp;</p> \n<pre><strong>输入：</strong>n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]\n<strong>输出：</strong>[false,false,false,false,false]\n<strong>解释：</strong>只有城市 2 和 4 共享的公约数 2 严格大于阈值 1 ，所以只有这两座城市是连通的。\n注意，同一对节点 [x, y] 可以有多个查询，并且查询 [x，y] 等同于查询 [y，x] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= threshold &lt;= n</code></li> \n <li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li> \n <li><code>queries[i].length == 2</code></li> \n <li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= cities</code></li> \n <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1629. 按键持续时间最长的键', '<p>LeetCode 设计了一款新式键盘，正在测试其可用性。测试人员将会点击一系列键（总计 <code>n</code> 个），每次一个。</p> \n<p>给你一个长度为 <code>n</code> 的字符串 <code>keysPressed</code> ，其中 <code>keysPressed[i]</code> 表示测试序列中第 <code>i</code> 个被按下的键。<code>releaseTimes</code> 是一个升序排列的列表，其中 <code>releaseTimes[i]</code> 表示松开第 <code>i</code> 个键的时间。字符串和数组的 <strong>下标都从 0 开始</strong> 。第 <code>0</code> 个键在时间为 <code>0</code> 时被按下，接下来每个键都 <strong>恰好</strong> 在前一个键松开时被按下。</p> \n<p>测试人员想要找出按键 <strong>持续时间最长</strong> 的键。第 <code>i</code><sup> </sup>次按键的持续时间为 <code>releaseTimes[i] - releaseTimes[i - 1]</code> ，第 <code>0</code> 次按键的持续时间为 <code>releaseTimes[0]</code> 。</p> \n<p>注意，测试期间，同一个键可以在不同时刻被多次按下，而每次的持续时间都可能不同。</p> \n<p>请返回按键 <strong>持续时间最长</strong> 的键，如果有多个这样的键，则返回 <strong>按字母顺序排列最大</strong> 的那个键。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>releaseTimes = [9,29,49,50], keysPressed = \"cbcd\"\n<strong>输出：</strong>\"c\"\n<strong>解释：</strong>按键顺序和持续时间如下：\n按下 \'c\' ，持续时间 9（时间 0 按下，时间 9 松开）\n按下 \'b\' ，持续时间 29 - 9 = 20（松开上一个键的时间 9 按下，时间 29 松开）\n按下 \'c\' ，持续时间 49 - 29 = 20（松开上一个键的时间 29 按下，时间 49 松开）\n按下 \'d\' ，持续时间 50 - 49 = 1（松开上一个键的时间 49 按下，时间 50 松开）\n按键持续时间最长的键是 \'b\' 和 \'c\'（第二次按下时），持续时间都是 20\n\'c\' 按字母顺序排列比 \'b\' 大，所以答案是 \'c\'\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>releaseTimes = [12,23,36,46,62], keysPressed = \"spuda\"\n<strong>输出：</strong>\"a\"\n<strong>解释：</strong>按键顺序和持续时间如下：\n按下 \'s\' ，持续时间 12\n按下 \'p\' ，持续时间 23 - 12 = 11\n按下 \'u\' ，持续时间 36 - 23 = 13\n按下 \'d\' ，持续时间 46 - 36 = 10\n按下 \'a\' ，持续时间 62 - 46 = 16\n按键持续时间最长的键是 \'a\' ，持续时间 16</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>releaseTimes.length == n</code></li> \n <li><code>keysPressed.length == n</code></li> \n <li><code>2 &lt;= n &lt;= 1000</code></li> \n <li><code>1 &lt;= releaseTimes[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>releaseTimes[i] &lt; releaseTimes[i+1]</code></li> \n <li><code>keysPressed</code> 仅由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1630. 等差子数组', '<p>如果一个数列由至少两个元素组成，且每两个连续元素之间的差值都相同，那么这个序列就是 <strong>等差数列</strong> 。更正式地，数列 <code>s</code> 是等差数列，只需要满足：对于每个有效的 <code>i</code> ， <code>s[i+1] - s[i] == s[1] - s[0]</code> 都成立。</p> \n<p>例如，下面这些都是 <strong>等差数列</strong> ：</p> \n<pre>1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9</pre> \n<p>下面的数列 <strong>不是等差数列</strong> ：</p> \n<pre>1, 1, 2, 5, 7</pre> \n<p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code>，和两个由 <code>m</code> 个整数组成的数组 <code>l</code> 和 <code>r</code>，后两个数组表示 <code>m</code> 组范围查询，其中第 <code>i</code> 个查询对应范围 <code>[l[i], r[i]]</code> 。所有数组的下标都是 <strong>从 0 开始</strong> 的。</p> \n<p>返回<em> </em><code>boolean</code> 元素构成的答案列表 <code>answer</code> 。如果子数组 <code>nums[l[i]], nums[l[i]+1], ... , nums[r[i]]</code> 可以 <strong>重新排列</strong> 形成 <strong>等差数列</strong> ，<code>answer[i]</code> 的值就是 <code>true</code>；否则<code>answer[i]</code> 的值就是 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = <code>[4,6,5,9,3,7]</code>, l = <code>[0,0,2]</code>, r = <code>[2,3,5]</code>\n<strong>输出：</strong><code>[true,false,true]</code>\n<strong>解释：</strong>\n第 0 个查询，对应子数组 [4,6,5] 。可以重新排列为等差数列 [6,5,4] 。\n第 1 个查询，对应子数组 [4,6,5,9] 。无法重新排列形成等差数列。\n第 2 个查询，对应子数组 <code>[5,9,3,7] 。</code>可以重新排列为等差数列 <code>[3,5,7,9] 。</code></pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]\n<strong>输出：</strong>[false,true,false,false,true,true]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>m == l.length</code></li> \n <li><code>m == r.length</code></li> \n <li><code>2 &lt;= n &lt;= 500</code></li> \n <li><code>1 &lt;= m &lt;= 500</code></li> \n <li><code>0 &lt;= l[i] &lt; r[i] &lt; n</code></li> \n <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1631. 最小体力消耗路径', '<p>你准备参加一场远足活动。给你一个二维&nbsp;<code>rows x columns</code>&nbsp;的地图&nbsp;<code>heights</code>&nbsp;，其中&nbsp;<code>heights[row][col]</code>&nbsp;表示格子&nbsp;<code>(row, col)</code>&nbsp;的高度。一开始你在最左上角的格子&nbsp;<code>(0, 0)</code>&nbsp;，且你希望去最右下角的格子&nbsp;<code>(rows-1, columns-1)</code>&nbsp;（注意下标从 <strong>0</strong> 开始编号）。你每次可以往 <strong>上</strong>，<strong>下</strong>，<strong>左</strong>，<strong>右</strong>&nbsp;四个方向之一移动，你想要找到耗费 <strong>体力</strong> 最小的一条路径。</p> \n<p>一条路径耗费的 <strong>体力值</strong>&nbsp;是路径上相邻格子之间 <strong>高度差绝对值</strong>&nbsp;的 <strong>最大值</strong>&nbsp;决定的。</p> \n<p>请你返回从左上角走到右下角的最小<strong>&nbsp;体力消耗值</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 300px; height: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/25/ex1.png\" alt=\"\"></p> \n<pre><b>输入：</b>heights = [[1,2,2],[3,8,2],[5,3,5]]\n<b>输出：</b>2\n<b>解释：</b>路径 [1,3,5,3,5] 连续格子的差值绝对值最大为 2 。\n这条路径比路径 [1,2,2,2,5] 更优，因为另一条路径差值最大值为 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 300px; height: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/25/ex2.png\" alt=\"\"></p> \n<pre><b>输入：</b>heights = [[1,2,3],[3,8,4],[5,3,5]]\n<b>输出：</b>1\n<b>解释：</b>路径 [1,2,3,4,5] 的相邻格子差值绝对值最大为 1 ，比路径 [1,3,5,3,5] 更优。\n</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 300px; height: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/25/ex3.png\" alt=\"\"> \n<pre><b>输入：</b>heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]\n<b>输出：</b>0\n<b>解释：</b>上图所示路径不需要消耗任何体力。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>rows == heights.length</code></li> \n <li><code>columns == heights[i].length</code></li> \n <li><code>1 &lt;= rows, columns &lt;= 100</code></li> \n <li><code>1 &lt;= heights[i][j] &lt;= 10<sup>6</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1632. 矩阵转换后的秩', '<p>给你一个&nbsp;<code>m x n</code>&nbsp;的矩阵 <code>matrix</code>&nbsp;，请你返回一个新的矩阵<em>&nbsp;</em><code>answer</code>&nbsp;，其中<em>&nbsp;</em><code>answer[row][col]</code>&nbsp;是&nbsp;<code>matrix[row][col]</code>&nbsp;的秩。</p> \n<p>每个元素的&nbsp;<b>秩</b>&nbsp;是一个整数，表示这个元素相对于其他元素的大小关系，它按照如下规则计算：</p> \n<ul> \n <li>秩是从 1 开始的一个整数。</li> \n <li>如果两个元素&nbsp;<code>p</code> 和&nbsp;<code>q</code>&nbsp;在 <strong>同一行</strong>&nbsp;或者 <strong>同一列</strong>&nbsp;，那么： \n  <ul> \n   <li>如果&nbsp;<code>p &lt; q</code> ，那么&nbsp;<code>rank(p) &lt; rank(q)</code></li> \n   <li>如果&nbsp;<code>p == q</code>&nbsp;，那么&nbsp;<code>rank(p) == rank(q)</code></li> \n   <li>如果&nbsp;<code>p &gt; q</code>&nbsp;，那么&nbsp;<code>rank(p) &gt; rank(q)</code></li> \n  </ul> </li> \n <li><b>秩</b>&nbsp;需要越 <strong>小</strong>&nbsp;越好。</li> \n</ul> \n<p>题目保证按照上面规则&nbsp;<code>answer</code>&nbsp;数组是唯一的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 442px; height: 162px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/25/rank1.jpg\" alt=\"\"> \n<pre><b>输入：</b>matrix = [[1,2],[3,4]]\n<b>输出：</b>[[1,2],[2,3]]\n<strong>解释：</strong>\nmatrix[0][0] 的秩为 1 ，因为它是所在行和列的最小整数。\nmatrix[0][1] 的秩为 2 ，因为 matrix[0][1] &gt; matrix[0][0] 且 matrix[0][0] 的秩为 1 。\nmatrix[1][0] 的秩为 2 ，因为 matrix[1][0] &gt; matrix[0][0] 且 matrix[0][0] 的秩为 1 。\nmatrix[1][1] 的秩为 3 ，因为 matrix[1][1] &gt; matrix[0][1]， matrix[1][1] &gt; matrix[1][0] 且 matrix[0][1] 和 matrix[1][0] 的秩都为 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 442px; height: 162px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/25/rank2.jpg\" alt=\"\"> \n<pre><b>输入：</b>matrix = [[7,7],[7,7]]\n<b>输出：</b>[[1,1],[1,1]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 601px; height: 322px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/25/rank3.jpg\" alt=\"\"> \n<pre><b>输入：</b>matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]\n<b>输出：</b>[[4,2,3],[1,3,4],[5,1,6],[1,3,4]]\n</pre> \n<p><strong>示例 4：</strong></p> \n<img style=\"width: 601px; height: 242px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/25/rank4.jpg\" alt=\"\"> \n<pre><b>输入：</b>matrix = [[7,3,6],[1,4,5],[9,8,2]]\n<b>输出：</b>[[5,1,4],[1,2,3],[6,3,1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 500</code></li> \n <li><code>-10<sup>9</sup> &lt;= matrix[row][col] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1636. 按照频率将数组升序排序', '<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;，请你将数组按照每个值的频率 <strong>升序</strong> 排序。如果有多个值的频率相同，请你按照数值本身将它们 <strong>降序</strong> 排序。&nbsp;</p> \n<p>请你返回排序后的数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [1,1,2,2,2,3]\n<b>输出：</b>[3,1,1,2,2,2]\n<b>解释：</b>\'3\' 频率为 1，\'1\' 频率为 2，\'2\' 频率为 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [2,3,1,3,2]\n<b>输出：</b>[1,3,3,2,2]\n<b>解释：</b>\'2\' 和 \'3\' 频率都为 2 ，所以它们之间按照数值本身降序排序。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [-1,1,-6,4,5,-6,1,4,1]\n<b>输出：</b>[5,-1,4,4,-6,-6,1,1,1]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 100</code></li> \n <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1637. 两点之间不包含任何点的最宽垂直面积', '<p>给你&nbsp;<code>n</code>&nbsp;个二维平面上的点 <code>points</code> ，其中&nbsp;<code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>&nbsp;，请你返回两点之间内部不包含任何点的&nbsp;<strong>最宽垂直面积</strong>&nbsp;的宽度。</p> \n<p><strong>垂直面积</strong> 的定义是固定宽度，而 y 轴上无限延伸的一块区域（也就是高度为无穷大）。 <strong>最宽垂直面积</strong>&nbsp;为宽度最大的一个垂直面积。</p> \n<p>请注意，垂直区域&nbsp;<strong>边上</strong>&nbsp;的点&nbsp;<strong>不在</strong>&nbsp;区域内。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 276px; height: 371px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/31/points3.png\" alt=\"\">​ \n<pre><b>输入：</b>points = [[8,7],[9,9],[7,4],[9,7]]\n<b>输出：</b>1\n<b>解释：</b>红色区域和蓝色区域都是最优区域。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]\n<b>输出：</b>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == points.length</code></li> \n <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>points[i].length == 2</code></li> \n <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub>&nbsp;&lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1638. 统计只差一个字符的子串数目', '<p>给你两个字符串&nbsp;<code>s</code> 和&nbsp;<code>t</code>&nbsp;，请你找出 <code>s</code>&nbsp;中的非空子串的数目，这些子串满足替换 <strong>一个不同字符</strong>&nbsp;以后，是 <code>t</code>&nbsp;串的子串。换言之，请你找到 <code>s</code>&nbsp;和 <code>t</code>&nbsp;串中 <strong>恰好</strong>&nbsp;只有一个字符不同的子字符串对的数目。</p> \n<p>比方说，&nbsp;<code>\"<strong>compute</strong>r\"</code> 和&nbsp;<code>\"<strong>computa</strong>tion\"</code> 加粗部分只有一个字符不同：&nbsp;<code>\'e\'</code>/<code>\'a\'</code>&nbsp;，所以这一对子字符串会给答案加 1 。</p> \n<p>请你返回满足上述条件的不同子字符串对数目。</p> \n<p>一个 <strong>子字符串</strong>&nbsp;是一个字符串中连续的字符。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"aba\", t = \"baba\"\n<b>输出：</b>6\n<strong>解释：</strong>以下为只相差 1 个字符的 s 和 t 串的子字符串对：\n(\"<strong>a</strong>ba\", \"<strong>b</strong>aba\")\n(\"<strong>a</strong>ba\", \"ba<strong>b</strong>a\")\n(\"ab<strong>a</strong>\", \"<strong>b</strong>aba\")\n(\"ab<strong>a</strong>\", \"ba<strong>b</strong>a\")\n(\"a<strong>b</strong>a\", \"b<strong>a</strong>ba\")\n(\"a<strong>b</strong>a\", \"bab<strong>a</strong>\")\n加粗部分分别表示 s 和 t 串选出来的子字符串。\n</pre> \n<strong>示例 2：</strong> \n<pre><b>输入：</b>s = \"ab\", t = \"bb\"\n<b>输出：</b>3\n<strong>解释：</strong>以下为只相差 1 个字符的 s 和 t 串的子字符串对：\n(\"<strong>a</strong>b\", \"<strong>b</strong>b\")\n(\"<strong>a</strong>b\", \"b<strong>b</strong>\")\n(\"<strong>ab</strong>\", \"<strong>bb</strong>\")\n加粗部分分别表示 s 和 t 串选出来的子字符串。\n</pre> \n<strong>示例 3：</strong> \n<pre><b>输入：</b>s = \"a\", t = \"a\"\n<b>输出：</b>0\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>s = \"abe\", t = \"bbc\"\n<b>输出：</b>10\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length, t.length &lt;= 100</code></li> \n <li><code>s</code> 和&nbsp;<code>t</code>&nbsp;都只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1639. 通过给定词典构造目标字符串的方案数', '<p>给你一个字符串列表 <code>words</code>&nbsp;和一个目标字符串&nbsp;<code>target</code> 。<code>words</code> 中所有字符串都&nbsp;<strong>长度相同</strong>&nbsp;&nbsp;。</p> \n<p>你的目标是使用给定的 <code>words</code>&nbsp;字符串列表按照下述规则构造&nbsp;<code>target</code>&nbsp;：</p> \n<ul> \n <li>从左到右依次构造&nbsp;<code>target</code>&nbsp;的每一个字符。</li> \n <li>为了得到&nbsp;<code>target</code> 第&nbsp;<code>i</code>&nbsp;个字符（下标从 <strong>0</strong>&nbsp;开始），当&nbsp;<code>target[i] = words[j][k]</code>&nbsp;时，你可以使用&nbsp;<code>words</code>&nbsp;列表中第 <code>j</code>&nbsp;个字符串的第 <code>k</code>&nbsp;个字符。</li> \n <li>一旦你使用了 <code>words</code>&nbsp;中第 <code>j</code>&nbsp;个字符串的第 <code>k</code>&nbsp;个字符，你不能再使用 <code>words</code>&nbsp;字符串列表中任意单词的第 <code>x</code>&nbsp;个字符（<code>x &lt;= k</code>）。也就是说，所有单词下标小于等于 <code>k</code>&nbsp;的字符都不能再被使用。</li> \n <li>请你重复此过程直到得到目标字符串&nbsp;<code>target</code>&nbsp;。</li> \n</ul> \n<p><strong>请注意</strong>， 在构造目标字符串的过程中，你可以按照上述规定使用 <code>words</code>&nbsp;列表中 <strong>同一个字符串</strong>&nbsp;的 <strong>多个字符</strong>&nbsp;。</p> \n<p>请你返回使用 <code>words</code>&nbsp;构造 <code>target</code>&nbsp;的方案数。由于答案可能会很大，请对 <code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;后返回。</p> \n<p>（译者注：此题目求的是有多少个不同的 <code>k</code>&nbsp;序列，详情请见示例。）</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>words = [\"acca\",\"bbbb\",\"caca\"], target = \"aba\"\n<b>输出：</b>6\n<b>解释：</b>总共有 6 种方法构造目标串。\n\"aba\" -&gt; 下标为 0 (\"<strong>a</strong>cca\")，下标为 1 (\"b<strong>b</strong>bb\")，下标为 3 (\"cac<strong>a</strong>\")\n\"aba\" -&gt; 下标为 0 (\"<strong>a</strong>cca\")，下标为 2 (\"bb<strong>b</strong>b\")，下标为 3 (\"cac<strong>a</strong>\")\n\"aba\" -&gt; 下标为 0 (\"<strong>a</strong>cca\")，下标为 1 (\"b<strong>b</strong>bb\")，下标为 3 (\"acc<strong>a</strong>\")\n\"aba\" -&gt; 下标为 0 (\"<strong>a</strong>cca\")，下标为 2 (\"bb<strong>b</strong>b\")，下标为 3 (\"acc<strong>a</strong>\")\n\"aba\" -&gt; 下标为 1 (\"c<strong>a</strong>ca\")，下标为 2 (\"bb<strong>b</strong>b\")，下标为 3 (\"acc<strong>a</strong>\")\n\"aba\" -&gt; 下标为 1 (\"c<strong>a</strong>ca\")，下标为 2 (\"bb<strong>b</strong>b\")，下标为 3 (\"cac<strong>a</strong>\")\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>words = [\"abba\",\"baab\"], target = \"bab\"\n<b>输出：</b>4\n<b>解释：</b>总共有 4 种不同形成 target 的方法。\n\"bab\" -&gt; 下标为 0 (\"<strong>b</strong>aab\")，下标为 1 (\"b<strong>a</strong>ab\")，下标为 2 (\"ab<strong>b</strong>a\")\n\"bab\" -&gt; 下标为 0 (\"<strong>b</strong>aab\")，下标为 1 (\"b<strong>a</strong>ab\")，下标为 3 (\"baa<strong>b</strong>\")\n\"bab\" -&gt; 下标为 0 (\"<strong>b</strong>aab\")，下标为 2 (\"ba<strong>a</strong>b\")，下标为 3 (\"baa<strong>b</strong>\")\n\"bab\" -&gt; 下标为 1 (\"a<strong>b</strong>ba\")，下标为 2 (\"ba<strong>a</strong>b\")，下标为 3 (\"baa<strong>b</strong>\")\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>words = [\"abcd\"], target = \"abcd\"\n<b>输出：</b>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>words = [\"abab\",\"baba\",\"abba\",\"baab\"], target = \"abba\"\n<b>输出：</b>16\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 1000</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 1000</code></li> \n <li><code>words</code>&nbsp;中所有单词长度相同。</li> \n <li><code>1 &lt;= target.length &lt;= 1000</code></li> \n <li><code>words[i]</code>&nbsp;和&nbsp;<code>target</code>&nbsp;都仅包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('164. 最大间距', '<p>给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。</p> \n<p>如果数组元素个数小于 2，则返回 0。</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> [3,6,9,1]\n<strong>输出:</strong> 3\n<strong>解释:</strong> 排序后的数组是 [1,3,6,9]<strong><em>, </em></strong>其中相邻元素 (3,6) 和 (6,9) 之间都存在最大差值 3。</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> [10]\n<strong>输出:</strong> 0\n<strong>解释:</strong> 数组元素个数小于 2，因此返回 0。</pre> \n<p><strong>说明:</strong></p> \n<ul> \n <li>你可以假设数组中所有元素都是非负整数，且数值在 32 位有符号整数范围内。</li> \n <li>请尝试在线性时间复杂度和空间复杂度的条件下解决此问题。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1640. 能否连接形成数组', '<p>给你一个整数数组 <code>arr</code> ，数组中的每个整数 <strong>互不相同</strong> 。另有一个由整数数组构成的数组 <code>pieces</code>，其中的整数也 <strong>互不相同</strong> 。请你以 <strong>任意顺序</strong> 连接 <code>pieces</code> 中的数组以形成 <code>arr</code> 。但是，<strong>不允许</strong> 对每个数组 <code>pieces[i]</code> 中的整数重新排序。</p> \n<p>如果可以连接<em> </em><code>pieces</code> 中的数组形成 <code>arr</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [85], pieces = [[85]]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [15,88], pieces = [[88],[15]]\n<strong>输出：</strong>true\n<strong>解释：</strong>依次连接 <code>[15]</code> 和 <code>[88]</code>\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [49,18,16], pieces = [[16,18,49]]\n<strong>输出：</strong>false\n<strong>解释：</strong>即便数字相符，也不能重新排列 pieces[0]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [91,4,64,78], pieces = [[78],[4,64],[91]]\n<strong>输出：</strong>true\n<strong>解释：</strong>依次连接 <code>[91]</code>、<code>[4,64]</code> 和 <code>[78]</code></pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>arr = [1,3,5,7], pieces = [[2,4,6,8]]\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= pieces.length &lt;= arr.length &lt;= 100</code></li> \n <li><code>sum(pieces[i].length) == arr.length</code></li> \n <li><code>1 &lt;= pieces[i].length &lt;= arr.length</code></li> \n <li><code>1 &lt;= arr[i], pieces[i][j] &lt;= 100</code></li> \n <li><code>arr</code> 中的整数 <strong>互不相同</strong></li> \n <li><code>pieces</code> 中的整数 <strong>互不相同</strong>（也就是说，如果将 <code>pieces</code> 扁平化成一维数组，数组中的所有整数互不相同）</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1641. 统计字典序元音字符串的数目', '<p>给你一个整数 <code>n</code>，请返回长度为 <code>n</code> 、仅由元音 (<code>a</code>, <code>e</code>, <code>i</code>, <code>o</code>, <code>u</code>) 组成且按 <strong>字典序排列</strong> 的字符串数量。</p> \n<p>字符串 <code>s</code> 按 <strong>字典序排列</strong> 需要满足：对于所有有效的 <code>i</code>，<code>s[i]</code> 在字母表中的位置总是与 <code>s[i+1]</code> 相同或在 <code>s[i+1]</code> 之前。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>5\n<strong>解释：</strong>仅由元音组成的 5 个字典序字符串为 <code>[\"a\",\"e\",\"i\",\"o\",\"u\"]</code>\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>15\n<strong>解释：</strong>仅由元音组成的 15 个字典序字符串为\n[\"aa\",\"ae\",\"ai\",\"ao\",\"au\",\"ee\",\"ei\",\"eo\",\"eu\",\"ii\",\"io\",\"iu\",\"oo\",\"ou\",\"uu\"]\n注意，\"ea\" 不是符合题意的字符串，因为 \'e\' 在字母表中的位置比 \'a\' 靠后\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 33\n<strong>输出：</strong>66045\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 50</code>&nbsp;</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1642. 可以到达的最远建筑', '<p>给你一个整数数组 <code>heights</code> ，表示建筑物的高度。另有一些砖块 <code>bricks</code> 和梯子 <code>ladders</code> 。</p> \n<p>你从建筑物 <code>0</code> 开始旅程，不断向后面的建筑物移动，期间可能会用到砖块或梯子。</p> \n<p>当从建筑物 <code>i</code> 移动到建筑物 <code>i+1</code>（下标<strong> 从 0 开始 </strong>）时：</p> \n<ul> \n <li>如果当前建筑物的高度 <strong>大于或等于</strong> 下一建筑物的高度，则不需要梯子或砖块</li> \n <li>如果当前建筑的高度 <strong>小于</strong> 下一个建筑的高度，您可以使用 <strong>一架梯子</strong> 或 <strong><code>(h[i+1] - h[i])</code> 个砖块</strong></li> \n</ul> 如果以最佳方式使用给定的梯子和砖块，返回你可以到达的最远建筑物的下标（下标\n<strong> 从 0 开始 </strong>）。 \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 562px; height: 561px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/31/q4.gif\" alt=\"\"> \n<pre><strong>输入：</strong>heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1\n<strong>输出：</strong>4\n<strong>解释：</strong>从建筑物 0 出发，你可以按此方案完成旅程：\n- 不使用砖块或梯子到达建筑物 1 ，因为 4 &gt;= 2\n- 使用 5 个砖块到达建筑物 2 。你必须使用砖块或梯子，因为 2 &lt; 7\n- 不使用砖块或梯子到达建筑物 3 ，因为 7 &gt;= 6\n- 使用唯一的梯子到达建筑物 4 。你必须使用砖块或梯子，因为 6 &lt; 9\n无法越过建筑物 4 ，因为没有更多砖块或梯子。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2\n<strong>输出：</strong>7\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>heights = [14,3,19,3], bricks = 17, ladders = 0\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= heights.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= heights[i] &lt;= 10<sup>6</sup></code></li> \n <li><code>0 &lt;= bricks &lt;= 10<sup>9</sup></code></li> \n <li><code>0 &lt;= ladders &lt;= heights.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1643. 第 K 条最小指令', '<p>Bob 站在单元格 <code>(0, 0)</code> ，想要前往目的地 <code>destination</code> ：<code>(row, column)</code> 。他只能向 <strong>右</strong> 或向 <strong>下</strong> 走。你可以为 Bob 提供导航 <strong>指令</strong> 来帮助他到达目的地 <code>destination</code> 。</p> \n<p><strong>指令</strong> 用字符串表示，其中每个字符：</p> \n<ul> \n <li><code>\'H\'</code> ，意味着水平向右移动</li> \n <li><code>\'V\'</code> ，意味着竖直向下移动</li> \n</ul> \n<p>能够为 Bob 导航到目的地 <code>destination</code> 的指令可以有多种，例如，如果目的地 <code>destination</code> 是 <code>(2, 3)</code>，<code>\"HHHVV\"</code> 和 <code>\"HVHVH\"</code> 都是有效<strong> 指令</strong> 。</p> \n<ul> \n</ul> \n<p>然而，Bob 很挑剔。因为他的幸运数字是 <code>k</code>，他想要遵循 <strong>按字典序排列后的第 <code>k</code> 条最小指令 </strong>的导航前往目的地 <code>destination</code> 。<code>k</code>&nbsp; 的编号 <strong>从 1 开始</strong> 。</p> \n<p>给你一个整数数组 <code>destination</code> 和一个整数 <code>k</code> ，请你返回可以为<em> </em>Bob<em> </em>提供前往目的地&nbsp;<code>destination</code> 导航的<strong> 按字典序排列后的第 <code>k</code> 条最小指令 </strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/01/ex1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>destination = [2,3], k = 1\n<strong>输出：</strong>\"HHHVV\"\n<strong>解释：</strong>能前往 (2, 3) 的所有导航指令 <strong>按字典序排列后</strong> 如下所示：\n[\"HHHVV\", \"HHVHV\", \"HHVVH\", \"HVHHV\", \"HVHVH\", \"HVVHH\", \"VHHHV\", \"VHHVH\", \"VHVHH\", \"VVHHH\"].\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"width: 300px; height: 229px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/01/ex2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>destination = [2,3], k = 2\n<strong>输出：</strong>\"HHVHV\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"width: 300px; height: 229px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/01/ex3.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>destination = [2,3], k = 3\n<strong>输出：</strong>\"HHVVH\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>destination.length == 2</code></li> \n <li><code>1 &lt;= row, column &lt;= 15</code></li> \n <li><code>1 &lt;= k &lt;= nCr(row + column, row)</code>，其中 <code>nCr(a, b)</code> 表示组合数，即从 <code>a</code> 个物品中选 <code>b</code> 个物品的不同方案数。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1646. 获取生成数组中的最大值', '<p>给你一个整数 <code>n</code> 。按下述规则生成一个长度为 <code>n + 1</code> 的数组 <code>nums</code> ：</p> \n<ul> \n <li><code>nums[0] = 0</code></li> \n <li><code>nums[1] = 1</code></li> \n <li>当 <code>2 &lt;= 2 * i &lt;= n</code> 时，<code>nums[2 * i] = nums[i]</code></li> \n <li>当 <code>2 &lt;= 2 * i + 1 &lt;= n</code> 时，<code>nums[2 * i + 1] = nums[i] + nums[i + 1]</code></li> \n</ul> \n<p>返回生成数组 <code>nums</code> 中的 <strong>最大</strong> 值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 7\n<strong>输出：</strong>3\n<strong>解释：</strong>根据规则：\n  nums[0] = 0\n  nums[1] = 1\n  nums[(1 * 2) = 2] = nums[1] = 1\n  nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2\n  nums[(2 * 2) = 4] = nums[2] = 1\n  nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3\n  nums[(3 * 2) = 6] = nums[3] = 2\n  nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3\n因此，nums = [0,1,1,2,1,3,2,3]，最大值 3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>1\n<strong>解释：</strong>根据规则，nums[0]、nums[1] 和 nums[2] 之中的最大值是 1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>根据规则，nums[0]、nums[1]、nums[2] 和 nums[3] 之中的最大值是 2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= n &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1647. 字符频次唯一的最小删除次数', '<p>如果字符串 <code>s</code> 中 <strong>不存在</strong> 两个不同字符 <strong>频次</strong> 相同的情况，就称 <code>s</code> 是 <strong>优质字符串</strong> 。</p> \n<p>给你一个字符串 <code>s</code>，返回使 <code>s</code> 成为 <strong>优质字符串</strong> 需要删除的 <strong>最小</strong> 字符数。</p> \n<p>字符串中字符的 <strong>频次</strong> 是该字符在字符串中的出现次数。例如，在字符串 <code>\"aab\"</code> 中，<code>\'a\'</code> 的频次是 <code>2</code>，而 <code>\'b\'</code> 的频次是 <code>1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"aab\"\n<strong>输出：</strong>0\n<strong>解释：</strong><code>s</code> 已经是优质字符串。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"aaabbbcc\"\n<strong>输出：</strong>2\n<strong>解释：</strong>可以删除两个 \'b\' , 得到优质字符串 \"aaabcc\" 。\n另一种方式是删除一个 \'b\' 和一个 \'c\' ，得到优质字符串 \"aaabbc\" 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"ceabaacb\"\n<strong>输出：</strong>2\n<strong>解释：</strong>可以删除两个 \'c\' 得到优质字符串 \"eabaab\" 。\n注意，只需要关注结果字符串中仍然存在的字符。（即，频次为 0 的字符会忽略不计。）\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s</code> 仅含小写英文字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1648. 销售价值减少的颜色球', '<p>你有一些球的库存&nbsp;<code>inventory</code>&nbsp;，里面包含着不同颜色的球。一个顾客想要&nbsp;<strong>任意颜色</strong> 总数为&nbsp;<code>orders</code>&nbsp;的球。</p> \n<p>这位顾客有一种特殊的方式衡量球的价值：每个球的价值是目前剩下的&nbsp;<strong>同色球</strong>&nbsp;的数目。比方说还剩下&nbsp;<code>6</code>&nbsp;个黄球，那么顾客买第一个黄球的时候该黄球的价值为&nbsp;<code>6</code>&nbsp;。这笔交易以后，只剩下&nbsp;<code>5</code>&nbsp;个黄球了，所以下一个黄球的价值为&nbsp;<code>5</code>&nbsp;（也就是球的价值随着顾客购买同色球是递减的）</p> \n<p>给你整数数组&nbsp;<code>inventory</code>&nbsp;，其中&nbsp;<code>inventory[i]</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;种颜色球一开始的数目。同时给你整数&nbsp;<code>orders</code>&nbsp;，表示顾客总共想买的球数目。你可以按照 <strong>任意顺序</strong>&nbsp;卖球。</p> \n<p>请你返回卖了 <code>orders</code>&nbsp;个球以后 <strong>最大</strong>&nbsp;总价值之和。由于答案可能会很大，请你返回答案对 <code>10<sup>9</sup>&nbsp;+ 7</code>&nbsp;<strong>取余数</strong>&nbsp;的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 480px; height: 270px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/08/jj.gif\" alt=\"\"> \n<pre><b>输入：</b>inventory = [2,5], orders = 4\n<b>输出：</b>14\n<b>解释：</b>卖 1 个第一种颜色的球（价值为 2 )，卖 3 个第二种颜色的球（价值为 5 + 4 + 3）。\n最大总和为 2 + 5 + 4 + 3 = 14 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>inventory = [3,5], orders = 6\n<b>输出：</b>19\n<strong>解释：</strong>卖 2 个第一种颜色的球（价值为 3 + 2），卖 4 个第二种颜色的球（价值为 5 + 4 + 3 + 2）。\n最大总和为 3 + 2 + 5 + 4 + 3 + 2 = 19 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>inventory = [2,8,4,10,6], orders = 20\n<b>输出：</b>110\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>inventory = [1000000000], orders = 1000000000\n<b>输出：</b>21\n<strong>解释：</strong>卖 1000000000 次第一种颜色的球，总价值为 500000000500000000 。 500000000500000000 对 10<sup>9 </sup>+ 7 取余为 21 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= inventory.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= inventory[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>1 &lt;= orders &lt;= min(sum(inventory[i]), 10<sup>9</sup>)</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1649. 通过指令创建有序数组', '<p>给你一个整数数组&nbsp;<code>instructions</code>&nbsp;，你需要根据&nbsp;<code>instructions</code>&nbsp;中的元素创建一个有序数组。一开始你有一个空的数组&nbsp;<code>nums</code>&nbsp;，你需要&nbsp;<strong>从左到右</strong>&nbsp;遍历&nbsp;<code>instructions</code>&nbsp;中的元素，将它们依次插入&nbsp;<code>nums</code>&nbsp;数组中。每一次插入操作的&nbsp;<strong>代价</strong>&nbsp;是以下两者的 <strong>较小值</strong>&nbsp;：</p> \n<ul> \n <li><code>nums</code>&nbsp;中 <strong>严格小于&nbsp;</strong>&nbsp;<code>instructions[i]</code>&nbsp;的数字数目。</li> \n <li><code>nums</code>&nbsp;中 <strong>严格大于&nbsp;</strong>&nbsp;<code>instructions[i]</code>&nbsp;的数字数目。</li> \n</ul> \n<p>比方说，如果要将&nbsp;<code>3</code> 插入到&nbsp;<code>nums = [1,2,3,5]</code>&nbsp;，那么插入操作的&nbsp;<strong>代价</strong>&nbsp;为&nbsp;<code>min(2, 1)</code> (元素&nbsp;<code>1</code>&nbsp;和&nbsp;&nbsp;<code>2</code>&nbsp;小于&nbsp;<code>3</code>&nbsp;，元素&nbsp;<code>5</code>&nbsp;大于&nbsp;<code>3</code>&nbsp;），插入后&nbsp;<code>nums</code> 变成&nbsp;<code>[1,2,3,3,5]</code>&nbsp;。</p> \n<p>请你返回将&nbsp;<code>instructions</code>&nbsp;中所有元素依次插入&nbsp;<code>nums</code>&nbsp;后的 <strong>总最小代价&nbsp;</strong>。由于答案会很大，请将它对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<b>取余</b>&nbsp;后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>instructions = [1,5,6,2]\n<b>输出：</b>1\n<b>解释：</b>一开始 nums = [] 。\n插入 1 ，代价为 min(0, 0) = 0 ，现在 nums = [1] 。\n插入 5 ，代价为 min(1, 0) = 0 ，现在 nums = [1,5] 。\n插入 6 ，代价为 min(2, 0) = 0 ，现在 nums = [1,5,6] 。\n插入 2 ，代价为 min(1, 2) = 1 ，现在 nums = [1,2,5,6] 。\n总代价为 0 + 0 + 0 + 1 = 1 。</pre> \n<p><strong>示例 2:</strong></p> \n<pre><b>输入：</b>instructions = [1,2,3,6,5,4]\n<b>输出：</b>3\n<b>解释：</b>一开始 nums = [] 。\n插入 1 ，代价为 min(0, 0) = 0 ，现在 nums = [1] 。\n插入 2 ，代价为 min(1, 0) = 0 ，现在 nums = [1,2] 。\n插入 3 ，代价为 min(2, 0) = 0 ，现在 nums = [1,2,3] 。\n插入 6 ，代价为 min(3, 0) = 0 ，现在 nums = [1,2,3,6] 。\n插入 5 ，代价为 min(3, 1) = 1 ，现在 nums = [1,2,3,5,6] 。\n插入 4 ，代价为 min(3, 2) = 2 ，现在 nums = [1,2,3,4,5,6] 。\n总代价为 0 + 0 + 0 + 0 + 1 + 2 = 3 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>instructions = [1,3,3,3,2,4,2,1,2]\n<b>输出：</b>4\n<b>解释：</b>一开始 nums = [] 。\n插入 1 ，代价为 min(0, 0) = 0 ，现在 nums = [1] 。\n插入 3 ，代价为 min(1, 0) = 0 ，现在 nums = [1,3] 。\n插入 3 ，代价为 min(1, 0) = 0 ，现在 nums = [1,3,3] 。\n插入 3 ，代价为 min(1, 0) = 0 ，现在 nums = [1,3,3,3] 。\n插入 2 ，代价为 min(1, 3) = 1 ，现在 nums = [1,2,3,3,3] 。\n插入 4 ，代价为 min(5, 0) = 0 ，现在 nums = [1,2,3,3,3,4] 。\n​​​​​插入 2 ，代价为 min(1, 4) = 1 ，现在 nums = [1,2,2,3,3,3,4] 。\n插入 1 ，代价为 min(0, 6) = 0 ，现在 nums = [1,1,2,2,3,3,3,4] 。\n插入 2 ，代价为 min(2, 4) = 2 ，现在 nums = [1,1,2,2,2,3,3,3,4] 。\n总代价为 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= instructions.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= instructions[i] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('165. 比较版本号', '<p>给你两个版本号 <code>version1</code> 和 <code>version2</code> ，请你比较它们。</p> \n<p>版本号由一个或多个修订号组成，各修订号由一个 <code>\'.\'</code> 连接。每个修订号由 <strong>多位数字</strong> 组成，可能包含 <strong>前导零</strong> 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，<code>2.5.33</code> 和 <code>0.1</code> 都是有效的版本号。</p> \n<p>比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较 <strong>忽略任何前导零后的整数值</strong> 。也就是说，修订号 <code>1</code> 和修订号 <code>001</code> <strong>相等 </strong>。如果版本号没有指定某个下标处的修订号，则该修订号视为 <code>0</code> 。例如，版本 <code>1.0</code> 小于版本 <code>1.1</code> ，因为它们下标为 <code>0</code> 的修订号相同，而下标为 <code>1</code> 的修订号分别为 <code>0</code> 和 <code>1</code> ，<code>0 &lt; 1</code> 。</p> \n<p>返回规则如下：</p> \n<ul> \n <li>如果&nbsp;<code><em>version1&nbsp;</em>&gt;&nbsp;<em>version2</em></code>&nbsp;返回&nbsp;<code>1</code>，</li> \n <li>如果&nbsp;<code><em>version1&nbsp;</em>&lt;&nbsp;<em>version2</em></code> 返回 <code>-1</code>，</li> \n <li>除此之外返回 <code>0</code>。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>version1 = \"1.01\", version2 = \"1.001\"\n<strong>输出：</strong>0\n<strong>解释：</strong>忽略前导零，\"01\" 和 \"001\" 都表示相同的整数 \"1\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>version1 = \"1.0\", version2 = \"1.0.0\"\n<strong>输出：</strong>0\n<strong>解释：</strong>version1 没有指定下标为 2 的修订号，即视为 \"0\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>version1 = \"0.1\", version2 = \"1.1\"\n<strong>输出：</strong>-1\n<strong>解释：</strong>version1 中下标为 0 的修订号是 \"0\"，version2 中下标为 0 的修订号是 \"1\" 。0 &lt; 1，所以 version1 &lt; version2\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>version1 = \"1.0.1\", version2 = \"1\"\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>version1 = \"7.5.2.4\", version2 = \"7.5.3\"\n<strong>输出：</strong>-1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li> \n <li><code>version1</code> 和 <code>version2</code> 仅包含数字和 <code>\'.\'</code></li> \n <li><code>version1</code> 和 <code>version2</code> 都是 <strong>有效版本号</strong></li> \n <li><code>version1</code> 和 <code>version2</code> 的所有修订号都可以存储在 <strong>32 位整数</strong> 中</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1652. 拆炸弹', '<p>你有一个炸弹需要拆除，时间紧迫！你的情报员会给你一个长度为&nbsp;<code>n</code>&nbsp;的&nbsp;<strong>循环</strong>&nbsp;数组&nbsp;<code>code</code>&nbsp;以及一个密钥&nbsp;<code>k</code>&nbsp;。</p> \n<p>为了获得正确的密码，你需要替换掉每一个数字。所有数字会&nbsp;<strong>同时</strong>&nbsp;被替换。</p> \n<ul> \n <li>如果&nbsp;<code>k &gt; 0</code>&nbsp;，将第&nbsp;<code>i</code>&nbsp;个数字用 <strong>接下来</strong>&nbsp;<code>k</code>&nbsp;个数字之和替换。</li> \n <li>如果&nbsp;<code>k &lt; 0</code>&nbsp;，将第&nbsp;<code>i</code>&nbsp;个数字用 <strong>之前</strong>&nbsp;<code>k</code>&nbsp;个数字之和替换。</li> \n <li>如果&nbsp;<code>k == 0</code>&nbsp;，将第&nbsp;<code>i</code>&nbsp;个数字用&nbsp;<code>0</code>&nbsp;替换。</li> \n</ul> \n<p>由于&nbsp;<code>code</code>&nbsp;是循环的，&nbsp;<code>code[n-1]</code>&nbsp;下一个元素是&nbsp;<code>code[0]</code>&nbsp;，且&nbsp;<code>code[0]</code>&nbsp;前一个元素是&nbsp;<code>code[n-1]</code>&nbsp;。</p> \n<p>给你 <strong>循环</strong>&nbsp;数组&nbsp;<code>code</code>&nbsp;和整数密钥&nbsp;<code>k</code>&nbsp;，请你返回解密后的结果来拆除炸弹！</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>code = [5,7,1,4], k = 3\n<b>输出：</b>[12,10,16,13]\n<b>解释：</b>每个数字都被接下来 3 个数字之和替换。解密后的密码为 [7+1+4, 1+4+5, 4+5+7, 5+7+1]。注意到数组是循环连接的。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>code = [1,2,3,4], k = 0\n<b>输出：</b>[0,0,0,0]\n<b>解释：</b>当 k 为 0 时，所有数字都被 0 替换。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>code = [2,4,9,3], k = -2\n<b>输出：</b>[12,5,6,13]\n<b>解释：</b>解密后的密码为 [3+9, 2+3, 4+2, 9+4] 。注意到数组是循环连接的。如果 k 是负数，那么和为 <strong>之前</strong> 的数字。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == code.length</code></li> \n <li><code>1 &lt;= n&nbsp;&lt;= 100</code></li> \n <li><code>1 &lt;= code[i] &lt;= 100</code></li> \n <li><code>-(n - 1) &lt;= k &lt;= n - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1653. 使字符串平衡的最少删除次数', '<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，它仅包含字符&nbsp;<code>\'a\'</code> 和&nbsp;<code>\'b\'</code>​​​​ 。</p> \n<p>你可以删除&nbsp;<code>s</code>&nbsp;中任意数目的字符，使得&nbsp;<code>s</code> <strong>平衡</strong>&nbsp;。我们称&nbsp;<code>s</code>&nbsp;<strong>平衡的</strong>&nbsp;当不存在下标对&nbsp;<code>(i,j)</code>&nbsp;满足&nbsp;<code>i &lt; j</code> 且&nbsp;<code>s[i] = \'b\'</code>&nbsp;同时&nbsp;<code>s[j]= \'a\'</code>&nbsp;。</p> \n<p>请你返回使 <code>s</code>&nbsp;<strong>平衡</strong>&nbsp;的 <strong>最少</strong>&nbsp;删除次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"aababbab\"\n<b>输出：</b>2\n<b>解释：</b>你可以选择以下任意一种方案：\n下标从 0 开始，删除第 2 和第 6 个字符（\"aa<strong>b</strong>abb<strong>a</strong>b\" -&gt; \"aaabbb\"），\n下标从 0 开始，删除第 3 和第 6 个字符（\"aab<strong>a</strong>bb<strong>a</strong>b\" -&gt; \"aabbbb\"）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"bbaaaaabb\"\n<b>输出：</b>2\n<b>解释：</b>唯一的最优解是删除最前面两个字符。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s[i]</code>&nbsp;要么是&nbsp;<code>\'a\'</code> 要么是&nbsp;<code>\'b\'</code>​<strong>&nbsp;</strong>。​</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1654. 到家的最少跳跃次数', '<p>有一只跳蚤的家在数轴上的位置&nbsp;<code>x</code>&nbsp;处。请你帮助它从位置&nbsp;<code>0</code>&nbsp;出发，到达它的家。</p> \n<p>跳蚤跳跃的规则如下：</p> \n<ul> \n <li>它可以 <strong>往前</strong> 跳恰好 <code>a</code>&nbsp;个位置（即往右跳）。</li> \n <li>它可以 <strong>往后</strong>&nbsp;跳恰好 <code>b</code>&nbsp;个位置（即往左跳）。</li> \n <li>它不能 <strong>连续</strong> 往后跳 <code>2</code> 次。</li> \n <li>它不能跳到任何&nbsp;<code>forbidden</code>&nbsp;数组中的位置。</li> \n</ul> \n<p>跳蚤可以往前跳 <strong>超过</strong>&nbsp;它的家的位置，但是它 <strong>不能跳到负整数</strong>&nbsp;的位置。</p> \n<p>给你一个整数数组&nbsp;<code>forbidden</code>&nbsp;，其中&nbsp;<code>forbidden[i]</code>&nbsp;是跳蚤不能跳到的位置，同时给你整数&nbsp;<code>a</code>，&nbsp;<code>b</code>&nbsp;和&nbsp;<code>x</code>&nbsp;，请你返回跳蚤到家的最少跳跃次数。如果没有恰好到达 <code>x</code>&nbsp;的可行方案，请你返回 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9\n<b>输出：</b>3\n<b>解释：</b>往前跳 3 次（0 -&gt; 3 -&gt; 6 -&gt; 9），跳蚤就到家了。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11\n<b>输出：</b>-1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7\n<b>输出：</b>2\n<b>解释：</b>往前跳一次（0 -&gt; 16），然后往回跳一次（16 -&gt; 7），跳蚤就到家了。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= forbidden.length &lt;= 1000</code></li> \n <li><code>1 &lt;= a, b, forbidden[i] &lt;= 2000</code></li> \n <li><code>0 &lt;= x &lt;= 2000</code></li> \n <li><code>forbidden</code>&nbsp;中所有位置互不相同。</li> \n <li>位置&nbsp;<code>x</code>&nbsp;不在 <code>forbidden</code>&nbsp;中。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1655. 分配重复整数', '<p>给你一个长度为&nbsp;<code>n</code>&nbsp;的整数数组&nbsp;<code>nums</code>&nbsp;，这个数组中至多有&nbsp;<code>50</code>&nbsp;个不同的值。同时你有 <code>m</code>&nbsp;个顾客的订单 <code>quantity</code>&nbsp;，其中，整数&nbsp;<code>quantity[i]</code>&nbsp;是第&nbsp;<code>i</code>&nbsp;位顾客订单的数目。请你判断是否能将 <code>nums</code>&nbsp;中的整数分配给这些顾客，且满足：</p> \n<ul> \n <li>第&nbsp;<code>i</code>&nbsp;位顾客 <strong>恰好&nbsp;</strong>有&nbsp;<code>quantity[i]</code>&nbsp;个整数。</li> \n <li>第&nbsp;<code>i</code>&nbsp;位顾客拿到的整数都是 <strong>相同的</strong>&nbsp;。</li> \n <li>每位顾客都满足上述两个要求。</li> \n</ul> \n<p>如果你可以分配 <code>nums</code>&nbsp;中的整数满足上面的要求，那么请返回&nbsp;<code>true</code>&nbsp;，否则返回 <code>false</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [1,2,3,4], quantity = [2]\n<b>输出：</b>false\n<strong>解释：</strong>第 0 位顾客没办法得到两个相同的整数。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [1,2,3,3], quantity = [2]\n<b>输出：</b>true\n<b>解释：</b>第 0 位顾客得到 [3,3] 。整数 [1,2] 都没有被使用。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [1,1,2,2], quantity = [2,2]\n<b>输出：</b>true\n<b>解释：</b>第 0 位顾客得到 [1,1] ，第 1 位顾客得到 [2,2] 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>nums = [1,1,2,3], quantity = [2,2]\n<b>输出：</b>false\n<b>解释：</b>尽管第 0 位顾客可以得到 [1,1] ，第 1 位顾客没法得到 2 个一样的整数。</pre> \n<p><strong>示例 5：</strong></p> \n<pre><b>输入：</b>nums = [1,1,1,1,1], quantity = [2,3]\n<b>输出：</b>true\n<b>解释：</b>第 0 位顾客得到 [1,1] ，第 1 位顾客得到 [1,1,1] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> \n <li><code>m == quantity.length</code></li> \n <li><code>1 &lt;= m &lt;= 10</code></li> \n <li><code>1 &lt;= quantity[i] &lt;= 10<sup>5</sup></code></li> \n <li><code>nums</code>&nbsp;中至多有&nbsp;<code>50</code>&nbsp;个不同的数字。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1656. 设计有序流', '<p>有 <code>n</code> 个 <code>(id, value)</code> 对，其中 <code>id</code> 是 <code>1</code> 到 <code>n</code> 之间的一个整数，<code>value</code> 是一个字符串。不存在 <code>id</code> 相同的两个&nbsp;<code>(id, value)</code> 对。</p> \n<p>设计一个流，以 <strong>任意</strong> 顺序获取 <code>n</code>&nbsp;个&nbsp;<code>(id, value)</code>&nbsp;对，并在多次调用时 <strong>按 <code>id</code> 递增的顺序</strong> 返回一些值。</p> \n<p>实现 <code>OrderedStream</code> 类：</p> \n<ul> \n <li><code>OrderedStream(int n)</code> 构造一个能接收 <code>n</code> 个值的流，并将当前指针 <code>ptr</code> 设为 <code>1</code> 。</li> \n <li><code>String[] insert(int id, String value)</code> 向流中存储新的 <code>(id, value)</code> 对。存储后： \n  <ul> \n   <li>如果流存储有 <code>id = ptr</code> 的 <code>(id, value)</code> 对，则找出从 <code>id = ptr</code> 开始的 <strong>最长 id 连续递增序列</strong> ，并 <strong>按顺序</strong> 返回与这些 id 关联的值的列表。然后，将 <code>ptr</code> 更新为最后那个&nbsp; <code>id + 1</code>&nbsp;。</li> \n   <li> <p>否则，返回一个空列表。</p> </li> \n  </ul> </li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<p><strong><img style=\"width: 682px; height: 240px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/15/q1.gif\" alt=\"\"></strong></p> \n<pre><strong>输入</strong>\n[\"OrderedStream\", \"insert\", \"insert\", \"insert\", \"insert\", \"insert\"]\n[[5], [3, \"ccccc\"], [1, \"aaaaa\"], [2, \"bbbbb\"], [5, \"eeeee\"], [4, \"ddddd\"]]\n<strong>输出</strong>\n[null, [], [\"aaaaa\"], [\"bbbbb\", \"ccccc\"], [], [\"ddddd\", \"eeeee\"]]\n\n<strong>解释</strong>\nOrderedStream os= new OrderedStream(5);\nos.insert(3, \"ccccc\"); // 插入 (3, \"ccccc\")，返回 []\nos.insert(1, \"aaaaa\"); // 插入 (1, \"aaaaa\")，返回 [\"aaaaa\"]\nos.insert(2, \"bbbbb\"); // 插入 (2, \"bbbbb\")，返回 [\"bbbbb\", \"ccccc\"]\nos.insert(5, \"eeeee\"); // 插入 (5, \"eeeee\")，返回 []\nos.insert(4, \"ddddd\"); // 插入 (4, \"ddddd\")，返回 [\"ddddd\", \"eeeee\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 1000</code></li> \n <li><code>1 &lt;= id &lt;= n</code></li> \n <li><code>value.length == 5</code></li> \n <li><code>value</code> 仅由小写字母组成</li> \n <li>每次调用 <code>insert</code> 都会使用一个唯一的 <code>id</code></li> \n <li>恰好调用 <code>n</code> 次 <code>insert</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1657. 确定两个字符串是否接近', '<p>如果可以使用以下操作从一个字符串得到另一个字符串，则认为两个字符串 <strong>接近</strong> ：</p> \n<ul> \n <li>操作 1：交换任意两个 <strong>现有</strong> 字符。 \n  <ul> \n   <li>例如，<code>a<strong>b</strong>cd<strong>e</strong> -&gt; a<strong>e</strong>cd<strong>b</strong></code></li> \n  </ul> </li> \n <li>操作 2：将一个 <strong>现有</strong> 字符的每次出现转换为另一个 <strong>现有</strong> 字符，并对另一个字符执行相同的操作。 \n  <ul> \n   <li>例如，<code><strong>aa</strong>c<strong>abb</strong> -&gt; <strong>bb</strong>c<strong>baa</strong></code>（所有 <code>a</code> 转化为 <code>b</code> ，而所有的 <code>b</code> 转换为 <code>a</code> ）</li> \n  </ul> </li> \n</ul> \n<p>你可以根据需要对任意一个字符串多次使用这两种操作。</p> \n<p>给你两个字符串，<code>word1</code> 和 <code>word2</code> 。如果<em> </em><code>word1</code><em> </em>和<em> </em><code>word2</code><em> </em><strong>接近 </strong>，就返回 <code>true</code> ；否则，返回<em> </em><code>false</code><em> </em>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>word1 = \"abc\", word2 = \"bca\"\n<strong>输出：</strong>true\n<strong>解释：</strong>2 次操作从 word1 获得 word2 。\n执行操作 1：\"a<strong>bc</strong>\" -&gt; \"a<strong>cb</strong>\"\n执行操作 1：\"<strong>a</strong>c<strong>b</strong>\" -&gt; \"<strong>b</strong>c<strong>a</strong>\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>word1 = \"a\", word2 = \"aa\"\n<strong>输出：</strong>false\n<strong>解释：</strong>不管执行多少次操作，都无法从 word1 得到 word2 ，反之亦然。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>word1 = \"cabbba\", word2 = \"abbccc\"\n<strong>输出：</strong>true\n<strong>解释：</strong>3 次操作从 word1 获得 word2 。\n执行操作 1：\"ca<strong>b</strong>bb<strong>a</strong>\" -&gt; \"ca<strong>a</strong>bb<strong>b</strong>\"\n执行操作 2：<code>\"</code><strong>c</strong>aa<strong>bbb</strong>\" -&gt; \"<strong>b</strong>aa<strong>ccc</strong>\"\n执行操作 2：\"<strong>baa</strong>ccc\" -&gt; \"<strong>abb</strong>ccc\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>word1 = \"cabbba\", word2 = \"aabbss\"\n<strong>输出：</strong>false\n<strong>解释：</strong>不管执行多少次操作，都无法从 word1 得到 word2 ，反之亦然。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= word1.length, word2.length &lt;= 10<sup>5</sup></code></li> \n <li><code>word1</code> 和 <code>word2</code> 仅包含小写英文字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1658. 将 x 减到 0 的最小操作数', '<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>x</code> 。每一次操作时，你应当移除数组 <code>nums</code> 最左边或最右边的元素，然后从 <code>x</code> 中减去该元素的值。请注意，需要 <strong>修改</strong> 数组以供接下来的操作使用。</p> \n<p>如果可以将 <code>x</code>&nbsp;<strong>恰好</strong> 减到&nbsp;<code>0</code> ，返回<strong> 最小操作数 </strong>；否则，返回 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,4,2,3], x = 5\n<strong>输出：</strong>2\n<strong>解释：</strong>最佳解决方案是移除后两个元素，将 x 减到 0 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [5,6,7,8,9], x = 4\n<strong>输出：</strong>-1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [3,2,20,1,1,3], x = 10\n<strong>输出：</strong>5\n<strong>解释：</strong>最佳解决方案是移除后三个元素和前两个元素（总共 5 次操作），将 x 减到 0 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= x &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1659. 最大化网格幸福感', '<p>给你四个整数 <code>m</code>、<code>n</code>、<code>introvertsCount</code> 和 <code>extrovertsCount</code> 。有一个 <code>m x n</code> 网格，和两种类型的人：内向的人和外向的人。总共有&nbsp;<code>introvertsCount</code> 个内向的人和 <code>extrovertsCount</code> 个外向的人。</p> \n<p>请你决定网格中应当居住多少人，并为每个人分配一个网格单元。 注意，<strong>不必</strong> 让所有人都生活在网格中。</p> \n<p>每个人的 <strong>幸福感</strong> 计算如下：</p> \n<ul> \n <li>内向的人 <strong>开始</strong> 时有 <code>120</code> 个幸福感，但每存在一个邻居（内向的或外向的）他都会 <strong>失去</strong>&nbsp;&nbsp;<code>30</code> 个幸福感。</li> \n <li>外向的人 <strong>开始</strong> 时有 <code>40</code> 个幸福感，每存在一个邻居（内向的或外向的）他都会 <strong>得到</strong>&nbsp;&nbsp;<code>20</code> 个幸福感。</li> \n</ul> \n<p>邻居是指居住在一个人所在单元的上、下、左、右四个直接相邻的单元中的其他人。</p> \n<p><strong>网格幸福感</strong>&nbsp;是每个人幸福感的 <strong>总和</strong> 。 返回 <strong>最大可能的网格幸福感</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 261px; height: 121px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/15/grid_happiness.png\" alt=\"\"> \n<pre><strong>输入：</strong>m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2\n<strong>输出：</strong>240\n<strong>解释：</strong>假设网格坐标 (row, column) 从 1 开始编号。\n将内向的人放置在单元 (1,1) ，将外向的人放置在单元 (1,3) 和 (2,3) 。\n- 位于 (1,1) 的内向的人的幸福感：120（初始幸福感）- (0 * 30)（0 位邻居）= 120\n- 位于 (1,3) 的外向的人的幸福感：40（初始幸福感）+ (1 * 20)（1 位邻居）= 60\n- 位于 (2,3) 的外向的人的幸福感：40（初始幸福感）+ (1 * 20)（1 位邻居）= 60\n网格幸福感为：120 + 60 + 60 = 240\n上图展示该示例对应网格中每个人的幸福感。内向的人在浅绿色单元中，而外向的人在浅紫色单元中。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1\n<strong>输出：</strong>260\n<strong>解释：</strong>将内向的人放置在单元 (1,1) 和 (3,1) ，将外向的人放置在单元 (2,1) 。\n- 位于 (1,1) 的内向的人的幸福感：120（初始幸福感）- (1 * 30)（1 位邻居）= 90\n- 位于 (2,1) 的外向的人的幸福感：40（初始幸福感）+ (2 * 20)（2 位邻居）= 80\n- 位于 (3,1) 的内向的人的幸福感：120（初始幸福感）- (1 * 30)（1 位邻居）= 90\n网格幸福感为 90 + 80 + 90 = 260\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0\n<strong>输出：</strong>240\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= m, n &lt;= 5</code></li> \n <li><code>0 &lt;= introvertsCount, extrovertsCount &lt;= min(m * n, 6)</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('166. 分数到小数', '<p>给定两个整数，分别表示分数的分子&nbsp;<code>numerator</code> 和分母 <code>denominator</code>，以 <strong>字符串形式返回小数</strong> 。</p> \n<p>如果小数部分为循环小数，则将循环的部分括在括号内。</p> \n<p class=\"MachineTrans-lang-zh-CN\">如果存在多个答案，只需返回 <strong>任意一个</strong> 。</p> \n<p class=\"MachineTrans-lang-zh-CN\">对于所有给定的输入，<strong>保证</strong> 答案字符串的长度小于 <code>10<sup>4</sup></code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>numerator = 1, denominator = 2\n<strong>输出：</strong>\"0.5\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>numerator = 2, denominator = 1\n<strong>输出：</strong>\"2\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>numerator = 2, denominator = 3\n<strong>输出：</strong>\"0.(6)\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>numerator = 4, denominator = 333\n<strong>输出：</strong>\"0.(012)\"\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>numerator = 1, denominator = 5\n<strong>输出：</strong>\"0.2\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>-2<sup>31</sup> &lt;=&nbsp;numerator, denominator &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>denominator != 0</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1662. 检查两个字符串数组是否相等', '<p>给你两个字符串数组 <code>word1</code> 和 <code>word2</code> 。如果两个数组表示的字符串相同，返回<em> </em><code>true</code><em> </em>；否则，返回 <code>false</code><em> 。</em></p> \n<p><strong>数组表示的字符串</strong>&nbsp;是由数组中的所有元素 <strong>按顺序</strong> 连接形成的字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>word1 = [\"ab\", \"c\"], word2 = [\"a\", \"bc\"]\n<strong>输出：</strong>true\n<strong>解释：</strong>\nword1 表示的字符串为 \"ab\" + \"c\" -&gt; \"abc\"\nword2 表示的字符串为 \"a\" + \"bc\" -&gt; \"abc\"\n两个字符串相同，返回 true</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>word1 = [\"a\", \"cb\"], word2 = [\"ab\", \"c\"]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>word1  = [\"abc\", \"d\", \"defg\"], word2 = [\"abcddefg\"]\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= word1.length, word2.length &lt;= 10<sup>3</sup></code></li> \n <li><code>1 &lt;= word1[i].length, word2[i].length &lt;= 10<sup>3</sup></code></li> \n <li><code>1 &lt;= sum(word1[i].length), sum(word2[i].length) &lt;= 10<sup>3</sup></code></li> \n <li><code>word1[i]</code> 和 <code>word2[i]</code> 由小写字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1663. 具有给定数值的最小字符串', '<p><strong>小写字符 </strong>的 <strong>数值</strong> 是它在字母表中的位置（从 <code>1</code> 开始），因此 <code>a</code> 的数值为 <code>1</code> ，<code>b</code> 的数值为 <code>2</code> ，<code>c</code> 的数值为 <code>3</code> ，以此类推。</p> \n<p>字符串由若干小写字符组成，<strong>字符串的数值</strong> 为各字符的数值之和。例如，字符串 <code>\"abe\"</code> 的数值等于 <code>1 + 2 + 5 = 8</code> 。</p> \n<p>给你两个整数 <code>n</code> 和 <code>k</code> 。返回 <strong>长度</strong> 等于 <code>n</code> 且 <strong>数值</strong> 等于 <code>k</code> 的 <strong>字典序最小</strong> 的字符串。</p> \n<p>注意，如果字符串 <code>x</code> 在字典排序中位于 <code>y</code> 之前，就认为 <code>x</code> 字典序比 <code>y</code> 小，有以下两种情况：</p> \n<ul> \n <li><code>x</code> 是 <code>y</code> 的一个前缀；</li> \n <li>如果 <code>i</code> 是&nbsp;<code>x[i] != y[i]</code> 的第一个位置，且 <code>x[i]</code>&nbsp;在字母表中的位置比&nbsp;<code>y[i]</code>&nbsp;靠前。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 3, k = 27\n<strong>输出：</strong>\"aay\"\n<strong>解释：</strong>字符串的数值为 1 + 1 + 25 = 27，它是数值满足要求且长度等于 3 字典序最小的字符串。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 5, k = 73\n<strong>输出：</strong>\"aaszz\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>n &lt;= k &lt;= 26 * n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1664. 生成平衡数组的方案数', '<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;。你需要选择 <strong>恰好</strong>&nbsp;一个下标（下标从 <strong>0</strong>&nbsp;开始）并删除对应的元素。请注意剩下元素的下标可能会因为删除操作而发生改变。</p> \n<p>比方说，如果&nbsp;<code>nums = [6,1,7,4,1]</code>&nbsp;，那么：</p> \n<ul> \n <li>选择删除下标 <code>1</code> ，剩下的数组为&nbsp;<code>nums = [6,7,4,1]</code>&nbsp;。</li> \n <li>选择删除下标&nbsp;<code>2</code>&nbsp;，剩下的数组为&nbsp;<code>nums = [6,1,4,1]</code>&nbsp;。</li> \n <li>选择删除下标&nbsp;<code>4</code>&nbsp;，剩下的数组为&nbsp;<code>nums = [6,1,7,4]</code>&nbsp;。</li> \n</ul> \n<p>如果一个数组满足奇数下标元素的和与偶数下标元素的和相等，该数组就是一个 <strong>平衡数组</strong> 。</p> \n<p>请你返回删除操作后，剩下的数组<em>&nbsp;</em><code>nums</code><em>&nbsp;</em>是&nbsp;<strong>平衡数组</strong> 的&nbsp;<strong>方案数</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [2,1,6,4]\n<b>输出：</b>1\n<strong>解释：</strong>\n删除下标 0 ：[1,6,4] -&gt; 偶数元素下标为：1 + 4 = 5 。奇数元素下标为：6 。不平衡。\n删除下标 1 ：[2,6,4] -&gt; 偶数元素下标为：2 + 4 = 6 。奇数元素下标为：6 。平衡。\n删除下标 2 ：[2,1,4] -&gt; 偶数元素下标为：2 + 4 = 6 。奇数元素下标为：1 。不平衡。\n删除下标 3 ：[2,1,6] -&gt; 偶数元素下标为：2 + 6 = 8 。奇数元素下标为：1 。不平衡。\n只有一种让剩余数组成为平衡数组的方案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [1,1,1]\n<b>输出：</b>3\n<b>解释：</b>你可以删除任意元素，剩余数组都是平衡数组。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [1,2,3]\n<b>输出：</b>0\n<b>解释：</b>不管删除哪个元素，剩下数组都不是平衡数组。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1665. 完成所有任务的最少初始能量', '<p>给你一个任务数组&nbsp;<code>tasks</code> ，其中&nbsp;<code>tasks[i] = [actual<sub>i</sub>, minimum<sub>i</sub>]</code>&nbsp;：</p> \n<ul> \n <li><code>actual<sub>i</sub></code>&nbsp;是完成第 <code>i</code>&nbsp;个任务 <strong>需要耗费</strong>&nbsp;的实际能量。</li> \n <li><code>minimum<sub>i</sub></code>&nbsp;是开始第 <code>i</code>&nbsp;个任务前需要达到的最低能量。</li> \n</ul> \n<p>比方说，如果任务为&nbsp;<code>[10, 12]</code>&nbsp;且你当前的能量为&nbsp;<code>11</code>&nbsp;，那么你不能开始这个任务。如果你当前的能量为&nbsp;<code>13</code>&nbsp;，你可以完成这个任务，且完成它后剩余能量为 <code>3</code>&nbsp;。</p> \n<p>你可以按照 <strong>任意顺序</strong>&nbsp;完成任务。</p> \n<p>请你返回完成所有任务的 <strong>最少</strong>&nbsp;初始能量。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>tasks = [[1,2],[2,4],[4,8]]\n<b>输出：</b>8\n<strong>解释：</strong>\n一开始有 8 能量，我们按照如下顺序完成任务：\n    - 完成第 3 个任务，剩余能量为 8 - 4 = 4 。\n    - 完成第 2 个任务，剩余能量为 4 - 2 = 2 。\n    - 完成第 1 个任务，剩余能量为 2 - 1 = 1 。\n注意到尽管我们有能量剩余，但是如果一开始只有 7 能量是不能完成所有任务的，因为我们无法开始第 3 个任务。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]\n<b>输出：</b>32\n<strong>解释：</strong>\n一开始有 32 能量，我们按照如下顺序完成任务：\n    - 完成第 1 个任务，剩余能量为 32 - 1 = 31 。\n    - 完成第 2 个任务，剩余能量为 31 - 2 = 29 。\n    - 完成第 3 个任务，剩余能量为 29 - 10 = 19 。\n    - 完成第 4 个任务，剩余能量为 19 - 10 = 9 。\n    - 完成第 5 个任务，剩余能量为 9 - 8 = 1 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]\n<b>输出：</b>27\n<strong>解释：</strong>\n一开始有 27 能量，我们按照如下顺序完成任务：\n    - 完成第 5 个任务，剩余能量为 27 - 5 = 22 。\n    - 完成第 2 个任务，剩余能量为 22 - 2 = 20 。\n    - 完成第 3 个任务，剩余能量为 20 - 3 = 17 。\n    - 完成第 1 个任务，剩余能量为 17 - 1 = 16 。\n    - 完成第 4 个任务，剩余能量为 16 - 4 = 12 。\n    - 完成第 6 个任务，剩余能量为 12 - 6 = 6 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= tasks.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= actual<sub>​i</sub>&nbsp;&lt;= minimum<sub>i</sub>&nbsp;&lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1668. 最大重复子字符串', '<p>给你一个字符串&nbsp;<code>sequence</code>&nbsp;，如果字符串 <code>word</code>&nbsp;连续重复&nbsp;<code>k</code>&nbsp;次形成的字符串是&nbsp;<code>sequence</code>&nbsp;的一个子字符串，那么单词&nbsp;<code>word</code> 的 <strong>重复值为 <code>k</code></strong><strong> </strong>。单词 <code>word</code>&nbsp;的 <strong>最</strong><strong>大重复值</strong>&nbsp;是单词&nbsp;<code>word</code>&nbsp;在&nbsp;<code>sequence</code>&nbsp;中最大的重复值。如果&nbsp;<code>word</code>&nbsp;不是&nbsp;<code>sequence</code>&nbsp;的子串，那么重复值&nbsp;<code>k</code>&nbsp;为 <code>0</code> 。</p> \n<p>给你一个字符串 <code>sequence</code>&nbsp;和 <code>word</code>&nbsp;，请你返回 <strong>最大重复值&nbsp;<code>k</code> </strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>sequence = \"ababc\", word = \"ab\"\n<b>输出：</b>2\n<strong>解释：</strong>\"abab\" 是 \"<strong>abab</strong>c\" 的子字符串。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>sequence = \"ababc\", word = \"ba\"\n<b>输出：</b>1\n<strong>解释：</strong>\"ba\" 是 \"a<strong>ba</strong>bc\" 的子字符串，但 \"baba\" 不是 \"ababc\" 的子字符串。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>sequence = \"ababc\", word = \"ac\"\n<b>输出：</b>0\n<strong>解释：</strong>\"ac\" 不是 \"ababc\" 的子字符串。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= sequence.length &lt;= 100</code></li> \n <li><code>1 &lt;= word.length &lt;= 100</code></li> \n <li><code>sequence</code> 和&nbsp;<code>word</code>&nbsp;都只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1669. 合并两个链表', '<p>给你两个链表&nbsp;<code>list1</code> 和&nbsp;<code>list2</code>&nbsp;，它们包含的元素分别为&nbsp;<code>n</code> 个和&nbsp;<code>m</code> 个。</p> \n<p>请你将&nbsp;<code>list1</code>&nbsp;中第&nbsp;<code>a</code>&nbsp;个节点到第&nbsp;<code>b</code>&nbsp;个节点删除，并将<code>list2</code>&nbsp;接在被删除节点的位置。</p> \n<p>下图中蓝色边和节点展示了操作后的结果：</p> \n<img style=\"height: 130px; width: 504px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/28/fig1.png\" alt=\"\"> \n<p>请你返回结果链表的头指针。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 406px; height: 140px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/28/merge_linked_list_ex1.png\" alt=\"\"></p> \n<pre><b>输入：</b>list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]\n<b>输出：</b>[0,1,2,1000000,1000001,1000002,5]\n<b>解释：</b>我们删除 list1 中第三和第四个节点，并将 list2 接在该位置。上图中蓝色的边和节点为答案链表。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 463px; height: 140px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/28/merge_linked_list_ex2.png\" alt=\"\"> \n<pre><b>输入：</b>list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]\n<b>输出：</b>[0,1,1000000,1000001,1000002,1000003,1000004,6]\n<b>解释：</b>上图中蓝色的边和节点为答案链表。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= list1.length &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= a &lt;= b &lt; list1.length - 1</code></li> \n <li><code>1 &lt;= list2.length &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('167. 两数之和 II - 输入有序数组', '<p>给定一个已按照<strong><em> </em>升序排列&nbsp; </strong>的整数数组&nbsp;<code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数&nbsp;<code>target</code> 。</p> \n<p>函数应该以长度为 <code>2</code> 的整数数组的形式返回这两个数的下标值<em>。</em><code>numbers</code> 的下标 <strong>从 1 开始计数</strong> ，所以答案数组应当满足 <code>1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length</code> 。</p> \n<p>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>numbers = [2,7,11,15], target = 9\n<strong>输出：</strong>[1,2]\n<strong>解释：</strong>2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>numbers = [2,3,4], target = 6\n<strong>输出：</strong>[1,3]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>numbers = [-1,0], target = -1\n<strong>输出：</strong>[1,2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= numbers.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li> \n <li><code>numbers</code> 按 <strong>递增顺序</strong> 排列</li> \n <li><code>-1000 &lt;= target &lt;= 1000</code></li> \n <li>仅存在一个有效答案</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1670. 设计前中后队列', '<p>请你设计一个队列，支持在前，中，后三个位置的 <code>push</code>&nbsp;和 <code>pop</code>&nbsp;操作。</p> \n<p>请你完成&nbsp;<code>FrontMiddleBack</code>&nbsp;类：</p> \n<ul> \n <li><code>FrontMiddleBack()</code>&nbsp;初始化队列。</li> \n <li><code>void pushFront(int val)</code> 将&nbsp;<code>val</code>&nbsp;添加到队列的 <strong>最前面</strong>&nbsp;。</li> \n <li><code>void pushMiddle(int val)</code> 将&nbsp;<code>val</code>&nbsp;添加到队列的 <strong>正中间</strong>&nbsp;。</li> \n <li><code>void pushBack(int val)</code>&nbsp;将&nbsp;<code>val</code>&nbsp;添加到队里的 <strong>最后面</strong>&nbsp;。</li> \n <li><code>int popFront()</code>&nbsp;将 <strong>最前面</strong> 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 <code>-1</code>&nbsp;。</li> \n <li><code>int popMiddle()</code> 将 <b>正中间</b>&nbsp;的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 <code>-1</code>&nbsp;。</li> \n <li><code>int popBack()</code> 将 <strong>最后面</strong> 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 <code>-1</code>&nbsp;。</li> \n</ul> \n<p>请注意当有&nbsp;<strong>两个</strong>&nbsp;中间位置的时候，选择靠前面的位置进行操作。比方说：</p> \n<ul> \n <li>将 <code>6</code>&nbsp;添加到&nbsp;<code>[1, 2, 3, 4, 5]</code>&nbsp;的中间位置，结果数组为&nbsp;<code>[1, 2, <strong>6</strong>, 3, 4, 5]</code>&nbsp;。</li> \n <li>从&nbsp;<code>[1, 2, <strong>3</strong>, 4, 5, 6]</code>&nbsp;的中间位置弹出元素，返回&nbsp;<code>3</code>&nbsp;，数组变为&nbsp;<code>[1, 2, 4, 5, 6]</code>&nbsp;。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\n[\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"]\n[[], [1], [2], [3], [4], [], [], [], [], []]\n<strong>输出：</strong>\n[null, null, null, null, null, 1, 3, 4, 2, -1]\n\n<strong>解释：</strong>\nFrontMiddleBackQueue q = new FrontMiddleBackQueue();\nq.pushFront(1);   // [<strong>1</strong>]\nq.pushBack(2);    // [1, <strong>2</strong>]\nq.pushMiddle(3);  // [1, <strong>3</strong>, 2]\nq.pushMiddle(4);  // [1, <strong>4</strong>, 3, 2]\nq.popFront();     // 返回 1 -&gt; [4, 3, 2]\nq.popMiddle();    // 返回 3 -&gt; [4, 2]\nq.popMiddle();    // 返回 4 -&gt; [2]\nq.popBack();      // 返回 2 -&gt; []\nq.popFront();     // 返回 -1 -&gt; [] （队列为空）\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= val &lt;= 10<sup>9</sup></code></li> \n <li>最多调用&nbsp;<code>1000</code>&nbsp;次&nbsp;<code>pushFront</code>，&nbsp;<code>pushMiddle</code>，&nbsp;<code>pushBack</code>，&nbsp;<code>popFront</code>，&nbsp;<code>popMiddle</code>&nbsp;和&nbsp;<code>popBack</code> 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1671. 得到山形数组的最少删除次数', '<p>我们定义&nbsp;<code>arr</code>&nbsp;是 <b>山形数组</b>&nbsp;当且仅当它满足：</p> \n<ul> \n <li><code>arr.length &gt;= 3</code></li> \n <li>存在某个下标&nbsp;<code>i</code>&nbsp;（<strong>从 0 开始</strong>）&nbsp;满足&nbsp;<code>0 &lt; i &lt; arr.length - 1</code>&nbsp;且： \n  <ul> \n   <li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li> \n   <li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li> \n  </ul> </li> \n</ul> \n<p>给你整数数组&nbsp;<code>nums</code>​ ，请你返回将 <code>nums</code>&nbsp;变成 <strong>山形状数组</strong>&nbsp;的​ <strong>最少</strong>&nbsp;删除次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [1,3,1]\n<b>输出：</b>0\n<b>解释：</b>数组本身就是山形数组，所以我们不需要删除任何元素。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [2,1,1,5,6,2,3,1]\n<b>输出：</b>3\n<b>解释：</b>一种方法是将下标为 0，1 和 5 的元素删除，剩余元素为 [1,5,6,3,1] ，是山形数组。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [4,3,2,1,1,2,3,1]\n<b>输出：</b>4\n</pre> \n<p><strong>提示：</strong></p> \n<pre><b>输入：</b>nums = [1,2,3,4,4,3,2,1]\n<b>输出：</b>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= nums.length &lt;= 1000</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n <li>题目保证&nbsp;<code>nums</code> 删除一些元素后一定能得到山形数组。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1672. 最富有客户的资产总量', '<p>给你一个 <code>m x n</code> 的整数网格 <code>accounts</code> ，其中 <code>accounts[i][j]</code> 是第 <code>i​​​​​<sup>​​​​​​</sup>​</code> 位客户在第 <code>j</code> 家银行托管的资产数量。返回最富有客户所拥有的 <strong>资产总量</strong> 。</p> \n<p>客户的 <strong>资产总量</strong> 就是他们在各家银行托管的资产数量之和。最富有客户就是 <strong>资产总量</strong> 最大的客户。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>accounts = [[1,2,3],[3,2,1]]\n<strong>输出：</strong>6\n<strong>解释：</strong>\n<code>第 1 位客户的资产总量 = 1 + 2 + 3 = 6\n第 2 位客户的资产总量 = 3 + 2 + 1 = 6\n</code>两位客户都是最富有的，资产总量都是 6 ，所以返回 6 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>accounts = [[1,5],[7,3],[3,5]]\n<strong>输出：</strong>10\n<strong>解释：</strong>\n<code>第 1 位客户的资产总量</code> = 6\n<code>第 2 位客户的资产总量</code> = 10 \n<code>第 3 位客户的资产总量</code> = 8\n第 2 位客户是最富有的，资产总量是 10</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>accounts = [[2,8,7],[7,1,3],[1,9,5]]\n<strong>输出：</strong>17\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m ==&nbsp;accounts.length</code></li> \n <li><code>n ==&nbsp;accounts[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 50</code></li> \n <li><code>1 &lt;= accounts[i][j] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1673. 找出最具竞争力的子序列', '<p>给你一个整数数组 <code>nums</code> 和一个正整数 <code>k</code> ，返回长度为 <code>k</code> 且最具 <strong>竞争力</strong> 的<em> </em><code>nums</code> 子序列。</p> \n<p>数组的子序列是从数组中删除一些元素（可能不删除元素）得到的序列。</p> \n<p>在子序列&nbsp;<code>a</code> 和子序列&nbsp;<code>b</code> 第一个不相同的位置上，如果&nbsp;<code>a</code>&nbsp;中的数字小于 <code>b</code> 中对应的数字，那么我们称子序列 <code>a</code> 比子序列 <code>b</code>（相同长度下）更具 <strong>竞争力</strong> 。 例如，<code>[1,3,4]</code> 比 <code>[1,3,5]</code> 更具竞争力，在第一个不相同的位置，也就是最后一个位置上，&nbsp;<code>4</code> 小于 <code>5</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [3,5,2,6], k = 2\n<strong>输出：</strong>[2,6]\n<strong>解释：</strong>在所有可能的子序列集合 {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]} 中，[2,6] 最具竞争力。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [2,4,3,3,5,4,9,6], k = 4\n<strong>输出：</strong>[2,3,3,4]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>1 &lt;= k &lt;= nums.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1674. 使数组互补的最少操作次数', '<p>给你一个长度为<strong> 偶数</strong> <code>n</code> 的整数数组 <code>nums</code> 和一个整数 <code>limit</code> 。每一次操作，你可以将 <code>nums</code> 中的任何整数替换为&nbsp;<code>1</code>&nbsp;到&nbsp;<code>limit</code> 之间的另一个整数。</p> \n<p>如果对于所有下标 <code>i</code>（<strong>下标从 </strong><code>0</code><strong> 开始</strong>），<code>nums[i] + nums[n - 1 - i]</code>&nbsp;都等于同一个数，则数组 <code>nums</code> 是 <strong>互补的</strong> 。例如，数组 <code>[1,2,3,4]</code> 是互补的，因为对于所有下标&nbsp;<code>i</code> ，<code>nums[i] + nums[n - 1 - i] = 5</code> 。</p> \n<p>返回使数组 <strong>互补</strong> 的 <strong>最少</strong>&nbsp;操作次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,4,3], limit = 4\n<strong>输出：</strong>1\n<strong>解释：</strong>经过 1 次操作，你可以将数组 nums 变成 [1,2,<strong>2</strong>,3]（加粗元素是变更的数字）：\nnums[0] + nums[3] = 1 + 3 = 4.\nnums[1] + nums[2] = 2 + 2 = 4.\nnums[2] + nums[1] = 2 + 2 = 4.\nnums[3] + nums[0] = 3 + 1 = 4.\n对于每个 i ，nums[i] + nums[n-1-i] = 4 ，所以 nums 是互补的。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,2,1], limit = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>经过 2 次操作，你可以将数组 nums 变成 [<strong>2</strong>,2,2,<strong>2</strong>] 。你不能将任何数字变更为 3 ，因为 3 &gt; limit 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,1,2], limit = 2\n<strong>输出：</strong>0\n<strong>解释：</strong>nums 已经是互补的。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>2 &lt;= n&nbsp;&lt;=&nbsp;10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i]&nbsp;&lt;= limit &lt;=&nbsp;10<sup>5</sup></code></li> \n <li><code>n</code> 是偶数。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1675. 数组的最小偏移量', '<p>给你一个由 <code>n</code> 个正整数组成的数组 <code>nums</code> 。</p> \n<p>你可以对数组的任意元素执行任意次数的两类操作：</p> \n<ul> \n <li>如果元素是<strong> 偶数</strong> ，<strong>除以</strong> <code>2</code> \n  <ul> \n   <li>例如，如果数组是 <code>[1,2,3,4]</code> ，那么你可以对最后一个元素执行此操作，使其变成 <code>[1,2,3,<strong>2</strong>]</code></li> \n  </ul> </li> \n <li>如果元素是 <strong>奇数</strong> ，<strong>乘上</strong> <code>2</code> \n  <ul> \n   <li>例如，如果数组是 <code>[1,2,3,4]</code> ，那么你可以对第一个元素执行此操作，使其变成 <code>[<strong>2</strong>,2,3,4]</code></li> \n  </ul> </li> \n</ul> \n<p>数组的 <strong>偏移量</strong> 是数组中任意两个元素之间的 <strong>最大差值</strong> 。</p> \n<p>返回数组在执行某些操作之后可以拥有的 <strong>最小偏移量</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4]\n<strong>输出：</strong>1\n<strong>解释：</strong>你可以将数组转换为 [1,2,3,<strong>2</strong>]，然后转换成 [<strong>2</strong>,2,3,2]，偏移量是 3 - 2 = 1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [4,1,5,20,3]\n<strong>输出：</strong>3\n<strong>解释：</strong>两次操作后，你可以将数组转换为 [4,<strong>2</strong>,5,<strong>5</strong>,3]，偏移量是 5 - 2 = 3\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [2,10,8]\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>2 &lt;= n &lt;= 10<sup><span style=\"\">5</span></sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1678. 设计 Goal 解析器', '<p>请你设计一个可以解释字符串 <code>command</code> 的 <strong>Goal 解析器</strong> 。<code>command</code> 由 <code>\"G\"</code>、<code>\"()\"</code> 和/或 <code>\"(al)\"</code> 按某种顺序组成。Goal 解析器会将 <code>\"G\"</code> 解释为字符串 <code>\"G\"</code>、<code>\"()\"</code> 解释为字符串 <code>\"o\"</code> ，<code>\"(al)\"</code> 解释为字符串 <code>\"al\"</code> 。然后，按原顺序将经解释得到的字符串连接成一个字符串。</p> \n<p>给你字符串 <code>command</code> ，返回<em> </em><strong>Goal<em><strong> </strong></em>解析器 </strong>对<em> </em><code>command</code> 的解释结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>command = \"G()(al)\"\n<strong>输出：</strong>\"Goal\"\n<strong>解释：</strong>Goal 解析器解释命令的步骤如下所示：\nG -&gt; G\n() -&gt; o\n(al) -&gt; al\n最后连接得到的结果是 \"Goal\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>command = \"G()()()()(al)\"\n<strong>输出：</strong>\"Gooooal\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>command = \"(al)G(al)()()G\"\n<strong>输出：</strong>\"alGalooG\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= command.length &lt;= 100</code></li> \n <li><code>command</code> 由 <code>\"G\"</code>、<code>\"()\"</code> 和/或 <code>\"(al)\"</code> 按某种顺序组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1679. K 和数对的最大数目', '<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p> \n<p>每一步操作中，你需要从数组中选出和为 <code>k</code> 的两个整数，并将它们移出数组。</p> \n<p>返回你可以对数组执行的最大操作数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4], k = 5\n<strong>输出：</strong>2\n<strong>解释：</strong>开始时 nums = [1,2,3,4]：\n- 移出 1 和 4 ，之后 nums = [2,3]\n- 移出 2 和 3 ，之后 nums = []\n不再有和为 5 的数对，因此最多执行 2 次操作。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [3,1,3,4,3], k = 6\n<strong>输出：</strong>1\n<strong>解释：</strong>开始时 nums = [3,1,3,4,3]：\n- 移出前两个 3 ，之后nums = [1,4,3]\n不再有和为 6 的数对，因此最多执行 1 次操作。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('168. Excel表列名称', '<p>给你一个整数&nbsp;<code>columnNumber</code> ，返回它在 Excel 表中相对应的列名称。</p> \n<p>例如：</p> \n<pre>A -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28 \n...\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>columnNumber = 1\n<strong>输出：</strong>\"A\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>columnNumber = 28\n<strong>输出：</strong>\"AB\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>columnNumber = 701\n<strong>输出：</strong>\"ZY\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>columnNumber = 2147483647\n<strong>输出：</strong>\"FXSHRXW\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= columnNumber &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1680. 连接连续二进制数字', '<p>给你一个整数&nbsp;<code>n</code>&nbsp;，请你将&nbsp;<code>1</code>&nbsp;到 <code>n</code>&nbsp;的二进制表示连接起来，并返回连接结果对应的 <strong>十进制</strong>&nbsp;数字对 <code>10<sup>9</sup>&nbsp;+ 7</code>&nbsp;取余的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>n = 1\n<b>输出：</b>1\n<strong>解释：</strong>二进制的 \"1\" 对应着十进制的 1 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>n = 3\n<b>输出：</b>27\n<strong>解释：</strong>二进制下，1，2 和 3 分别对应 \"1\" ，\"10\" 和 \"11\" 。\n将它们依次连接，我们得到 \"11011\" ，对应着十进制的 27 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>n = 12\n<b>输出：</b>505379714\n<b>解释：</b>连接结果为 \"1101110010111011110001001101010111100\" 。\n对应的十进制数字为 118505380540 。\n对 10<sup>9</sup> + 7 取余后，结果为 505379714 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1681. 最小不兼容性', '<p>给你一个整数数组&nbsp;<code>nums</code>​​​ 和一个整数&nbsp;<code>k</code>&nbsp;。你需要将这个数组划分到&nbsp;<code>k</code>&nbsp;个相同大小的子集中，使得同一个子集里面没有两个相同的元素。</p> \n<p>一个子集的 <strong>不兼容性</strong>&nbsp;是该子集里面最大值和最小值的差。</p> \n<p>请你返回将数组分成 <code>k</code>&nbsp;个子集后，各子集 <strong>不兼容性 </strong>的<strong> 和</strong>&nbsp;的 <strong>最小值</strong>&nbsp;，如果无法分成分成 <code>k</code>&nbsp;个子集，返回 <code>-1</code>&nbsp;。</p> \n<p>子集的定义是数组中一些数字的集合，对数字顺序没有要求。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [1,2,1,4], k = 2\n<b>输出：</b>4\n<b>解释：</b>最优的分配是 [1,2] 和 [1,4] 。\n不兼容性和为 (2-1) + (4-1) = 4 。\n注意到 [1,1] 和 [2,4] 可以得到更小的和，但是第一个集合有 2 个相同的元素，所以不可行。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [6,3,8,1,3,1,2,2], k = 4\n<b>输出：</b>6\n<b>解释：</b>最优的子集分配为 [1,2]，[2,3]，[6,8] 和 [1,3] 。\n不兼容性和为 (2-1) + (3-2) + (8-6) + (3-1) = 6 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [5,3,3,6,3,3], k = 3\n<b>输出：</b>-1\n<b>解释：</b>没办法将这些数字分配到 3 个子集且满足每个子集里没有相同数字。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= nums.length &lt;= 16</code></li> \n <li><code>nums.length</code> 能被&nbsp;<code>k</code> 整除。</li> \n <li><code>1 &lt;= nums[i] &lt;= nums.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1684. 统计一致字符串的数目', '<p>给你一个由不同字符组成的字符串&nbsp;<code>allowed</code>&nbsp;和一个字符串数组&nbsp;<code>words</code>&nbsp;。如果一个字符串的每一个字符都在 <code>allowed</code>&nbsp;中，就称这个字符串是 <strong>一致字符串 </strong>。</p> \n<p>请你返回&nbsp;<code>words</code>&nbsp;数组中&nbsp;<strong>一致字符串</strong> 的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]\n<b>输出：</b>2\n<b>解释：</b>字符串 \"aaab\" 和 \"baa\" 都是一致字符串，因为它们只包含字符 \'a\' 和 \'b\' 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]\n<b>输出：</b>7\n<b>解释：</b>所有字符串都是一致的。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]\n<b>输出：</b>4\n<b>解释：</b>字符串 \"cc\"，\"acd\"，\"ac\" 和 \"d\" 是一致字符串。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= allowed.length &lt;=<sup> </sup>26</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 10</code></li> \n <li><code>allowed</code>&nbsp;中的字符 <strong>互不相同</strong>&nbsp;。</li> \n <li><code>words[i]</code> 和&nbsp;<code>allowed</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1685. 有序数组中差绝对值之和', '<p>给你一个 <strong>非递减&nbsp;</strong>有序整数数组&nbsp;<code>nums</code>&nbsp;。</p> \n<p>请你建立并返回一个整数数组<em>&nbsp;</em><code>result</code>，它跟<em>&nbsp;</em><code>nums</code>&nbsp;长度相同，且<code>result[i]</code>&nbsp;等于<em>&nbsp;</em><code>nums[i]</code>&nbsp;与数组中所有其他元素差的绝对值之和。</p> \n<p>换句话说，&nbsp;<code>result[i]</code>&nbsp;等于&nbsp;<code>sum(|nums[i]-nums[j]|)</code> ，其中&nbsp;<code>0 &lt;= j &lt; nums.length</code> 且&nbsp;<code>j != i</code>&nbsp;（下标从 0 开始）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [2,3,5]\n<b>输出：</b>[4,3,5]\n<b>解释：</b>假设数组下标从 0 开始，那么\nresult[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4，\nresult[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3，\nresult[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [1,4,6,8,10]\n<b>输出：</b>[24,15,13,15,21]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= nums[i + 1] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1686. 石子游戏 VI', '<p>Alice 和&nbsp;Bob 轮流玩一个游戏，Alice 先手。</p> \n<p>一堆石子里总共有&nbsp;<code>n</code>&nbsp;个石子，轮到某个玩家时，他可以 <strong>移出</strong>&nbsp;一个石子并得到这个石子的价值。Alice 和 Bob 对石子价值有 <strong>不一样的的评判标准</strong>&nbsp;。双方都知道对方的评判标准。</p> \n<p>给你两个长度为 <code>n</code>&nbsp;的整数数组&nbsp;<code>aliceValues</code> 和&nbsp;<code>bobValues</code>&nbsp;。<code>aliceValues[i]</code> 和&nbsp;<code>bobValues[i]</code>&nbsp;分别表示 Alice 和 Bob 认为第&nbsp;<code>i</code>&nbsp;个石子的价值。</p> \n<p>所有石子都被取完后，得分较高的人为胜者。如果两个玩家得分相同，那么为平局。两位玩家都会采用 <b>最优策略</b>&nbsp;进行游戏。</p> \n<p>请你推断游戏的结果，用如下的方式表示：</p> \n<ul> \n <li>如果 Alice 赢，返回&nbsp;<code>1</code>&nbsp;。</li> \n <li>如果 Bob 赢，返回&nbsp;<code>-1</code>&nbsp;。</li> \n <li>如果游戏平局，返回&nbsp;<code>0</code>&nbsp;。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>aliceValues = [1,3], bobValues = [2,1]\n<b>输出：</b>1\n<strong>解释：</strong>\n如果 Alice 拿石子 1 （下标从 0开始），那么 Alice 可以得到 3 分。\nBob 只能选择石子 0 ，得到 2 分。\nAlice 获胜。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>aliceValues = [1,2], bobValues = [3,1]\n<b>输出：</b>0\n<strong>解释：</strong>\nAlice 拿石子 0 ， Bob 拿石子 1 ，他们得分都为 1 分。\n打平。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>aliceValues = [2,4,3], bobValues = [1,6,7]\n<b>输出：</b>-1\n<strong>解释：</strong>\n不管 Alice 怎么操作，Bob 都可以得到比 Alice 更高的得分。\n比方说，Alice 拿石子 1 ，Bob 拿石子 2 ， Alice 拿石子 0 ，Alice 会得到 6 分而 Bob 得分为 7 分。\nBob 会获胜。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == aliceValues.length == bobValues.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= aliceValues[i], bobValues[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1687. 从仓库到码头运输箱子', '<p>你有一辆货运卡车，你需要用这一辆车把一些箱子从仓库运送到码头。这辆卡车每次运输有&nbsp;<strong>箱子数目的限制</strong>&nbsp;和 <strong>总重量的限制</strong>&nbsp;。</p> \n<p>给你一个箱子数组&nbsp;<code>boxes</code>&nbsp;和三个整数 <code>portsCount</code>, <code>maxBoxes</code>&nbsp;和&nbsp;<code>maxWeight</code>&nbsp;，其中&nbsp;<code>boxes[i] = [ports<sub>​​i</sub>​, weight<sub>i</sub>]</code>&nbsp;。</p> \n<ul> \n <li><code>ports<sub>​​i</sub></code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;个箱子需要送达的码头，&nbsp;<code>weights<sub>i</sub></code>&nbsp;是第&nbsp;<code>i</code>&nbsp;个箱子的重量。</li> \n <li><code>portsCount</code>&nbsp;是码头的数目。</li> \n <li><code>maxBoxes</code> 和&nbsp;<code>maxWeight</code>&nbsp;分别是卡车每趟运输箱子数目和重量的限制。</li> \n</ul> \n<p>箱子需要按照 <strong>数组顺序</strong>&nbsp;运输，同时每次运输需要遵循以下步骤：</p> \n<ul> \n <li>卡车从&nbsp;<code>boxes</code>&nbsp;队列中按顺序取出若干个箱子，但不能违反&nbsp;<code>maxBoxes</code> 和&nbsp;<code>maxWeight</code>&nbsp;限制。</li> \n <li>对于在卡车上的箱子，我们需要 <strong>按顺序</strong>&nbsp;处理它们，卡车会通过 <strong>一趟行程</strong>&nbsp;将最前面的箱子送到目的地码头并卸货。如果卡车已经在对应的码头，那么不需要 <strong>额外行程</strong>&nbsp;，箱子也会立马被卸货。</li> \n <li>卡车上所有箱子都被卸货后，卡车需要 <strong>一趟行程</strong>&nbsp;回到仓库，从箱子队列里再取出一些箱子。</li> \n</ul> \n<p>卡车在将所有箱子运输并卸货后，最后必须回到仓库。</p> \n<p>请你返回将所有箱子送到相应码头的&nbsp;<b>最少行程</b>&nbsp;次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3\n<b>输出：</b>4\n<b>解释：</b>最优策略如下：\n- 卡车将所有箱子装上车，到达码头 1 ，然后去码头 2 ，然后再回到码头 1 ，最后回到仓库，总共需要 4 趟行程。\n所以总行程数为 4 。\n注意到第一个和第三个箱子不能同时被卸货，因为箱子需要按顺序处理（也就是第二个箱子需要先被送到码头 2 ，然后才能处理第三个箱子）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6\n<b>输出：</b>6\n<b>解释：</b>最优策略如下：\n- 卡车首先运输第一个箱子，到达码头 1 ，然后回到仓库，总共 2 趟行程。\n- 卡车运输第二、第三、第四个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。\n- 卡车运输第五个箱子，到达码头 3 ，回到仓库，总共 2 趟行程。\n总行程数为 2 + 2 + 2 = 6 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7\n<b>输出：</b>6\n<b>解释：</b>最优策略如下：\n- 卡车运输第一和第二个箱子，到达码头 1 ，然后回到仓库，总共 2 趟行程。\n- 卡车运输第三和第四个箱子，到达码头 2 ，然后回到仓库，总共 2 趟行程。\n- 卡车运输第五和第六个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。\n总行程数为 2 + 2 + 2 = 6 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>boxes = [[2,4],[2,5],[3,1],[3,2],[3,7],[3,1],[4,4],[1,3],[5,2]], portsCount = 5, maxBoxes = 5, maxWeight = 7\n<b>输出：</b>14\n<b>解释：</b>最优策略如下：\n- 卡车运输第一个箱子，到达码头 2 ，然后回到仓库，总共 2 趟行程。\n- 卡车运输第二个箱子，到达码头 2 ，然后回到仓库，总共 2 趟行程。\n- 卡车运输第三和第四个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。\n- 卡车运输第五个箱子，到达码头 3 ，然后回到仓库，总共 2 趟行程。\n- 卡车运输第六和第七个箱子，到达码头 3 ，然后去码头 4 ，然后回到仓库，总共 3 趟行程。\n- 卡车运输第八和第九个箱子，到达码头 1 ，然后去码头 5 ，然后回到仓库，总共 3 趟行程。\n总行程数为 2 + 2 + 2 + 2 + 3 + 3 = 14 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= boxes.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= portsCount, maxBoxes, maxWeight &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= ports<sub>​​i</sub> &lt;= portsCount</code></li> \n <li><code>1 &lt;= weights<sub>i</sub> &lt;= maxWeight</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1688. 比赛中的配对次数', '<p>给你一个整数 <code>n</code> ，表示比赛中的队伍数。比赛遵循一种独特的赛制：</p> \n<ul> \n <li>如果当前队伍数是 <strong>偶数</strong> ，那么每支队伍都会与另一支队伍配对。总共进行 <code>n / 2</code> 场比赛，且产生 <code>n / 2</code> 支队伍进入下一轮。</li> \n <li>如果当前队伍数为 <strong>奇数</strong> ，那么将会随机轮空并晋级一支队伍，其余的队伍配对。总共进行 <code>(n - 1) / 2</code> 场比赛，且产生 <code>(n - 1) / 2 + 1</code> 支队伍进入下一轮。</li> \n</ul> \n<p>返回在比赛中进行的配对次数，直到决出获胜队伍为止。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 7\n<strong>输出：</strong>6\n<strong>解释：</strong>比赛详情：\n- 第 1 轮：队伍数 = 7 ，配对次数 = 3 ，4 支队伍晋级。\n- 第 2 轮：队伍数 = 4 ，配对次数 = 2 ，2 支队伍晋级。\n- 第 3 轮：队伍数 = 2 ，配对次数 = 1 ，决出 1 支获胜队伍。\n总配对次数 = 3 + 2 + 1 = 6\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 14\n<strong>输出：</strong>13\n<strong>解释：</strong>比赛详情：\n- 第 1 轮：队伍数 = 14 ，配对次数 = 7 ，7 支队伍晋级。\n- 第 2 轮：队伍数 = 7 ，配对次数 = 3 ，4 支队伍晋级。 \n- 第 3 轮：队伍数 = 4 ，配对次数 = 2 ，2 支队伍晋级。\n- 第 4 轮：队伍数 = 2 ，配对次数 = 1 ，决出 1 支获胜队伍。\n总配对次数 = 7 + 3 + 2 + 1 = 13\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 200</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1689. 十-二进制数的最少数目', '<p>如果一个十进制数字不含任何前导零，且每一位上的数字不是 <code>0</code> 就是 <code>1</code> ，那么该数字就是一个 <strong>十-二进制数</strong> 。例如，<code>101</code> 和 <code>1100</code> 都是 <strong>十-二进制数</strong>，而 <code>112</code> 和 <code>3001</code> 不是。</p> \n<p>给你一个表示十进制整数的字符串 <code>n</code> ，返回和为 <code>n</code> 的 <strong>十-二进制数 </strong>的最少数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = \"32\"\n<strong>输出：</strong>3\n<strong>解释：</strong>10 + 11 + 11 = 32\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = \"82734\"\n<strong>输出：</strong>8\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = \"27346209830709182346\"\n<strong>输出：</strong>9\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n.length &lt;= 10<sup>5</sup></code></li> \n <li><code>n</code> 仅由数字组成</li> \n <li><code>n</code> 不含任何前导零并总是表示正整数</li> \n</ul>');
INSERT INTO `leecode` VALUES ('169. 多数元素', '<p>给定一个大小为 <em>n </em>的数组，找到其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong>&nbsp;<code>⌊ n/2 ⌋</code>&nbsp;的元素。</p> \n<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>[3,2,3]\n<strong>输出：</strong>3</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>[2,2,1,1,1,2,2]\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1690. 石子游戏 VII', '<p>石子游戏中，爱丽丝和鲍勃轮流进行自己的回合，<strong>爱丽丝先开始</strong> 。</p> \n<p>有 <code>n</code> 块石子排成一排。每个玩家的回合中，可以从行中 <strong>移除</strong> 最左边的石头或最右边的石头，并获得与该行中剩余石头值之 <strong>和</strong> 相等的得分。当没有石头可移除时，得分较高者获胜。</p> \n<p>鲍勃发现他总是输掉游戏（可怜的鲍勃，他总是输），所以他决定尽力 <strong>减小得分的差值</strong> 。爱丽丝的目标是最大限度地 <strong>扩大得分的差值</strong> 。</p> \n<p>给你一个整数数组&nbsp;<code>stones</code> ，其中 <code>stones[i]</code> 表示 <strong>从左边开始</strong> 的第 <code>i</code> 个石头的值，如果爱丽丝和鲍勃都 <strong>发挥出最佳水平</strong> ，请返回他们 <strong>得分的差值</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>stones = [5,3,1,4,2]\n<strong>输出：</strong>6\n<strong>解释：</strong>\n- 爱丽丝移除 2 ，得分 5 + 3 + 1 + 4 = 13 。游戏情况：爱丽丝 = 13 ，鲍勃 = 0 ，石子 = [5,3,1,4] 。\n- 鲍勃移除 5 ，得分 3 + 1 + 4 = 8 。游戏情况：爱丽丝 = 13 ，鲍勃 = 8 ，石子 = [3,1,4] 。\n- 爱丽丝移除 3 ，得分 1 + 4 = 5 。游戏情况：爱丽丝 = 18 ，鲍勃 = 8 ，石子 = [1,4] 。\n- 鲍勃移除 1 ，得分 4 。游戏情况：爱丽丝 = 18 ，鲍勃 = 12 ，石子 = [4] 。\n- 爱丽丝移除 4 ，得分 0 。游戏情况：爱丽丝 = 18 ，鲍勃 = 12 ，石子 = [] 。\n得分的差值 18 - 12 = 6 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>stones = [7,90,5,1,100,10,10,2]\n<strong>输出：</strong>122</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == stones.length</code></li> \n <li><code>2 &lt;= n &lt;= 1000</code></li> \n <li><code>1 &lt;= stones[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1691. 堆叠长方体的最大高度', '<p>给你 <code>n</code> 个长方体 <code>cuboids</code> ，其中第 <code>i</code> 个长方体的长宽高表示为 <code>cuboids[i] = [width<sub>i</sub>, length<sub>i</sub>, height<sub>i</sub>]</code>（<strong>下标从 0 开始</strong>）。请你从 <code>cuboids</code> 选出一个 <strong>子集</strong> ，并将它们堆叠起来。</p> \n<p>如果 <code>width<sub>i</sub> &lt;= width<sub>j</sub></code> 且 <code>length<sub>i</sub> &lt;= length<sub>j</sub></code> 且 <code>height<sub>i</sub> &lt;= height<sub>j</sub></code> ，你就可以将长方体 <code>i</code> 堆叠在长方体 <code>j</code> 上。你可以通过旋转把长方体的长宽高重新排列，以将它放在另一个长方体上。</p> \n<p>返回 <strong>堆叠长方体</strong>&nbsp;<code>cuboids</code> 可以得到的 <strong>最大高度</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"width: 420px; height: 299px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/12/12/image.jpg\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>cuboids = [[50,45,20],[95,37,53],[45,23,12]]\n<strong>输出：</strong>190\n<strong>解释：</strong>\n第 1 个长方体放在底部，53x37 的一面朝下，高度为 95 。\n第 0 个长方体放在中间，45x20 的一面朝下，高度为 50 。\n第 2 个长方体放在上面，23x12 的一面朝下，高度为 45 。\n总高度是 95 + 50 + 45 = 190 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>cuboids = [[38,25,45],[76,35,3]]\n<strong>输出：</strong>76\n<strong>解释：</strong>\n无法将任何长方体放在另一个上面。\n选择第 1 个长方体然后旋转它，使 35x3 的一面朝下，其高度为 76 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]\n<strong>输出：</strong>102\n<strong>解释：</strong>\n重新排列长方体后，可以看到所有长方体的尺寸都相同。\n你可以把 11x7 的一面朝下，这样它们的高度就是 17 。\n堆叠长方体的最大高度为 6 * 17 = 102 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == cuboids.length</code></li> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>1 &lt;= width<sub>i</sub>, length<sub>i</sub>, height<sub>i</sub> &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1694. 重新格式化电话号码', '<p>给你一个字符串形式的电话号码 <code>number</code> 。<code>number</code> 由数字、空格 <code>\' \'</code>、和破折号 <code>\'-\'</code> 组成。</p> \n<p>请你按下述方式重新格式化电话号码。</p> \n<ul> \n <li>首先，<strong>删除</strong> 所有的空格和破折号。</li> \n <li>其次，将数组从左到右 <strong>每 3 个一组</strong> 分块，<strong>直到 </strong>剩下 4 个或更少数字。剩下的数字将按下述规定再分块： \n  <ul> \n   <li>2 个数字：单个含 2 个数字的块。</li> \n   <li>3 个数字：单个含 3 个数字的块。</li> \n   <li>4 个数字：两个分别含 2 个数字的块。</li> \n  </ul> </li> \n</ul> \n<p>最后用破折号将这些块连接起来。注意，重新格式化过程中 <strong>不应该</strong> 生成仅含 1 个数字的块，并且 <strong>最多</strong> 生成两个含 2 个数字的块。</p> \n<p>返回格式化后的电话号码。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>number = \"1-23-45 6\"\n<strong>输出：</strong>\"123-456\"\n<strong>解释：</strong>数字是 \"123456\"\n步骤 1：共有超过 4 个数字，所以先取 3 个数字分为一组。第 1 个块是 \"123\" 。\n步骤 2：剩下 3 个数字，将它们放入单个含 3 个数字的块。第 2 个块是 \"456\" 。\n连接这些块后得到 \"123-456\" 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>number = \"123 4-567\"\n<strong>输出：</strong>\"123-45-67\"\n<strong>解释：</strong>数字是 \"1234567\".\n步骤 1：共有超过 4 个数字，所以先取 3 个数字分为一组。第 1 个块是 \"123\" 。\n步骤 2：剩下 4 个数字，所以将它们分成两个含 2 个数字的块。这 2 块分别是 \"45\" 和 \"67\" 。\n连接这些块后得到 \"123-45-67\" 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>number = \"123 4-5678\"\n<strong>输出：</strong>\"123-456-78\"\n<strong>解释：</strong>数字是 \"12345678\" 。\n步骤 1：第 1 个块 \"123\" 。\n步骤 2：第 2 个块 \"456\" 。\n步骤 3：剩下 2 个数字，将它们放入单个含 2 个数字的块。第 3 个块是 \"78\" 。\n连接这些块后得到 \"123-456-78\" 。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>number = \"12\"\n<strong>输出：</strong>\"12\"\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>number = \"--17-5 229 35-39475 \"\n<strong>输出：</strong>\"175-229-353-94-75\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= number.length &lt;= 100</code></li> \n <li><code>number</code> 由数字和字符 <code>\'-\'</code> 及 <code>\' \'</code> 组成。</li> \n <li><code>number</code> 中至少含 <strong>2</strong> 个数字。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1695. 删除子数组的最大得分', '<p>给你一个正整数数组 <code>nums</code> ，请你从中删除一个含有 <strong>若干不同元素</strong> 的子数组<strong>。</strong>删除子数组的 <strong>得分</strong> 就是子数组各元素之 <strong>和</strong> 。</p> \n<p>返回 <strong>只删除一个</strong> 子数组可获得的 <strong>最大得分</strong><em> 。</em></p> \n<p>如果数组 <code>b</code> 是数组 <code>a</code> 的一个连续子序列，即如果它等于 <code>a[l],a[l+1],...,a[r]</code> ，那么它就是&nbsp;<code>a</code> 的一个子数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [4,2,4,5,6]\n<strong>输出：</strong>17\n<strong>解释：</strong>最优子数组是 [2,4,5,6]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [5,2,1,2,5,2,1,2,5]\n<strong>输出：</strong>8\n<strong>解释：</strong>最优子数组是 [5,2,1] 或 [1,2,5]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1696. 跳跃游戏 VI', '<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code>&nbsp;和一个整数 <code>k</code>&nbsp;。</p> \n<p>一开始你在下标&nbsp;<code>0</code>&nbsp;处。每一步，你最多可以往前跳&nbsp;<code>k</code>&nbsp;步，但你不能跳出数组的边界。也就是说，你可以从下标&nbsp;<code>i</code>&nbsp;跳到&nbsp;<code>[i + 1， min(n - 1, i + k)]</code>&nbsp;<strong>包含</strong> 两个端点的任意位置。</p> \n<p>你的目标是到达数组最后一个位置（下标为 <code>n - 1</code>&nbsp;），你的 <strong>得分</strong>&nbsp;为经过的所有数字之和。</p> \n<p>请你返回你能得到的 <strong>最大得分</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [<strong>1</strong>,<strong>-1</strong>,-2,<strong>4</strong>,-7,<strong>3</strong>], k = 2\n<b>输出：</b>7\n<b>解释：</b>你可以选择子序列 [1,-1,4,3] （上面加粗的数字），和为 7 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [<strong>10</strong>,-5,-2,<strong>4</strong>,0,<strong>3</strong>], k = 3\n<b>输出：</b>17\n<b>解释：</b>你可以选择子序列 [10,4,3] （上面加粗数字），和为 17 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [1,-5,-20,4,-1,3,-6,-3], k = 2\n<b>输出：</b>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>&nbsp;<code>1 &lt;= nums.length, k &lt;= 10<sup>5</sup></code></li> \n <li><code>-10<sup>4</sup>&nbsp;&lt;= nums[i]&nbsp;&lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1697. 检查边长度限制的路径是否存在', '<p>给你一个 <code>n</code>&nbsp;个点组成的无向图边集&nbsp;<code>edgeList</code>&nbsp;，其中&nbsp;<code>edgeList[i] = [u<sub>i</sub>, v<sub>i</sub>, dis<sub>i</sub>]</code>&nbsp;表示点&nbsp;<code>u<sub>i</sub></code> 和点&nbsp;<code>v<sub>i</sub></code>&nbsp;之间有一条长度为&nbsp;<code>dis<sub>i</sub></code>&nbsp;的边。请注意，两个点之间可能有 <strong>超过一条边&nbsp;</strong>。</p> \n<p>给你一个查询数组<code>queries</code>&nbsp;，其中&nbsp;<code>queries[j] = [p<sub>j</sub>, q<sub>j</sub>, limit<sub>j</sub>]</code>&nbsp;，你的任务是对于每个查询&nbsp;<code>queries[j]</code>&nbsp;，判断是否存在从&nbsp;<code>p<sub>j</sub></code>&nbsp;到&nbsp;<code>q<sub>j</sub></code><sub>&nbsp;</sub>的路径，且这条路径上的每一条边都 <strong>严格小于</strong>&nbsp;<code>limit<sub>j</sub></code>&nbsp;。</p> \n<p>请你返回一个 <b>布尔数组</b><em>&nbsp;</em><code>answer</code><em>&nbsp;</em>，其中<em>&nbsp;</em><code>answer.length == queries.length</code>&nbsp;，当&nbsp;<code>queries[j]</code>&nbsp;的查询结果为&nbsp;<code>true</code>&nbsp;时，&nbsp;<code>answer</code> 第<em>&nbsp;</em><code>j</code>&nbsp;个值为<em>&nbsp;</em><code>true</code><em>&nbsp;</em>，否则为&nbsp;<code>false</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 267px; height: 262px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/12/19/h.png\" alt=\"\"> \n<pre><b>输入：</b>n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]\n<b>输出：</b>[false,true]\n<b>解释：</b>上图为给定的输入数据。注意到 0 和 1 之间有两条重边，分别为 2 和 16 。\n对于第一个查询，0 和 1 之间没有小于 2 的边，所以我们返回 false 。\n对于第二个查询，有一条路径（0 -&gt; 1 -&gt; 2）两条边都小于 5 ，所以这个查询我们返回 true 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 390px; height: 358px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/12/19/q.png\" alt=\"\"> \n<pre><b>输入：</b>n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]\n<b>输出：</b>[true,false]\n<b>解释：</b>上图为给定数据。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= edgeList.length, queries.length &lt;= 10<sup>5</sup></code></li> \n <li><code>edgeList[i].length == 3</code></li> \n <li><code>queries[j].length == 3</code></li> \n <li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub>, p<sub>j</sub>, q<sub>j</sub> &lt;= n - 1</code></li> \n <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> \n <li><code>p<sub>j</sub> != q<sub>j</sub></code></li> \n <li><code>1 &lt;= dis<sub>i</sub>, limit<sub>j</sub> &lt;= 10<sup>9</sup></code></li> \n <li>两个点之间可能有 <strong>多条</strong>&nbsp;边。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('17. 电话号码的字母组合', '<p>给定一个仅包含数字&nbsp;<code>2-9</code>&nbsp;的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p> \n<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p> \n<p><img style=\"width: 200px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/17_telephone_keypad.png\"></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>digits = \"23\"\n<strong>输出：</strong>[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>digits = \"\"\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>digits = \"2\"\n<strong>输出：</strong>[\"a\",\"b\",\"c\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= digits.length &lt;= 4</code></li> \n <li><code>digits[i]</code> 是范围 <code>[\'2\', \'9\']</code> 的一个数字。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1700. 无法吃午餐的学生数量', '<p>学校的自助午餐提供圆形和方形的三明治，分别用数字&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;表示。所有学生站在一个队列里，每个学生要么喜欢圆形的要么喜欢方形的。<br> 餐厅里三明治的数量与学生的数量相同。所有三明治都放在一个&nbsp;<strong>栈</strong>&nbsp;里，每一轮：</p> \n<ul> \n <li>如果队列最前面的学生&nbsp;<strong>喜欢</strong>&nbsp;栈顶的三明治，那么会&nbsp;<strong>拿走它</strong>&nbsp;并离开队列。</li> \n <li>否则，这名学生会&nbsp;<strong>放弃这个三明治</strong>&nbsp;并回到队列的尾部。</li> \n</ul> \n<p>这个过程会一直持续到队列里所有学生都不喜欢栈顶的三明治为止。</p> \n<p>给你两个整数数组&nbsp;<code>students</code> 和&nbsp;<code>sandwiches</code>&nbsp;，其中&nbsp;<code>sandwiches[i]</code>&nbsp;是栈里面第&nbsp;<code>i<sup>​​​​​​</sup></code>&nbsp;个三明治的类型（<code>i = 0</code>&nbsp;是栈的顶部），&nbsp;<code>students[j]</code>&nbsp;是初始队列里第&nbsp;<code>j<sup>​​​​​​</sup></code>&nbsp;名学生对三明治的喜好（<code>j = 0</code>&nbsp;是队列的最开始位置）。请你返回无法吃午餐的学生数量。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>students = [1,1,0,0], sandwiches = [0,1,0,1]\n<b>输出：</b>0<strong> \n解释：</strong>\n- 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [1,0,0,1]。\n- 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [0,0,1,1]。\n- 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [0,1,1]，三明治栈为 sandwiches = [1,0,1]。\n- 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [1,1,0]。\n- 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [1,0]，三明治栈为 sandwiches = [0,1]。\n- 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [0,1]。\n- 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [1]，三明治栈为 sandwiches = [1]。\n- 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = []，三明治栈为 sandwiches = []。\n所以所有学生都有三明治吃。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]\n<b>输出：</b>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= students.length, sandwiches.length &lt;= 100</code></li> \n <li><code>students.length == sandwiches.length</code></li> \n <li><code>sandwiches[i]</code>&nbsp;要么是&nbsp;<code>0</code>&nbsp;，要么是&nbsp;<code>1</code>&nbsp;。</li> \n <li><code>students[i]</code>&nbsp;要么是&nbsp;<code>0</code>&nbsp;，要么是&nbsp;<code>1</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1701. 平均等待时间', '<p>有一个餐厅，只有一位厨师。你有一个顾客数组&nbsp;<code>customers</code>&nbsp;，其中&nbsp;<code>customers[i] = [arrival<sub>i</sub>, time<sub>i</sub>]</code>&nbsp;：</p> \n<ul> \n <li><code>arrival<sub>i</sub></code>&nbsp;是第&nbsp;<code>i</code>&nbsp;位顾客到达的时间，到达时间按 <strong>非递减</strong> 顺序排列。</li> \n <li><code>time<sub>i</sub></code>&nbsp;是给第 <code>i</code>&nbsp;位顾客做菜需要的时间。</li> \n</ul> \n<p>当一位顾客到达时，他将他的订单给厨师，厨师一旦空闲的时候就开始做这位顾客的菜。每位顾客会一直等待到厨师完成他的订单。厨师同时只能做一个人的订单。厨师会严格按照 <strong>订单给他的顺序</strong>&nbsp;做菜。</p> \n<p>请你返回所有顾客需要等待的 <strong>平均&nbsp;</strong>时间。与标准答案误差在&nbsp;<code>10<sup>-5</sup></code>&nbsp;范围以内，都视为正确结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>customers = [[1,2],[2,5],[4,3]]\n<b>输出：</b>5.00000\n<strong>解释：\n</strong>1) 第一位顾客在时刻 1 到达，厨师拿到他的订单并在时刻 1 立马开始做菜，并在时刻 3 完成，第一位顾客等待时间为 3 - 1 = 2 。\n2) 第二位顾客在时刻 2 到达，厨师在时刻 3 开始为他做菜，并在时刻 8 完成，第二位顾客等待时间为 8 - 2 = 6 。\n3) 第三位顾客在时刻 4 到达，厨师在时刻 8 开始为他做菜，并在时刻 11 完成，第三位顾客等待时间为 11 - 4 = 7 。\n平均等待时间为 (2 + 6 + 7) / 3 = 5 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>customers = [[5,2],[5,4],[10,3],[20,1]]\n<b>输出：</b>3.25000\n<strong>解释：\n</strong>1) 第一位顾客在时刻 5 到达，厨师拿到他的订单并在时刻 5 立马开始做菜，并在时刻 7 完成，第一位顾客等待时间为 7 - 5 = 2 。\n2) 第二位顾客在时刻 5 到达，厨师在时刻 7 开始为他做菜，并在时刻 11 完成，第二位顾客等待时间为 11 - 5 = 6 。\n3) 第三位顾客在时刻 10 到达，厨师在时刻 11 开始为他做菜，并在时刻 14 完成，第三位顾客等待时间为 14 - 10 = 4 。\n4) 第四位顾客在时刻 20 到达，厨师拿到他的订单并在时刻 20 立马开始做菜，并在时刻 21 完成，第四位顾客等待时间为 21 - 20 = 1 。\n平均等待时间为 (2 + 6 + 4 + 1) / 4 = 3.25 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= customers.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= arrival<sub>i</sub>, time<sub>i</sub> &lt;= 10<sup>4</sup></code></li> \n <li><code>arrival<sub>i&nbsp;</sub>&lt;= arrival<sub>i+1</sub></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1702. 修改后的最大二进制字符串', '<p>给你一个二进制字符串&nbsp;<code>binary</code>&nbsp;，它仅有&nbsp;<code>0</code>&nbsp;或者&nbsp;<code>1</code>&nbsp;组成。你可以使用下面的操作任意次对它进行修改：</p> \n<ul> \n <li>操作 1 ：如果二进制串包含子字符串&nbsp;<code>\"00\"</code>&nbsp;，你可以用&nbsp;<code>\"10\"</code>&nbsp;将其替换。 \n  <ul> \n   <li>比方说，&nbsp;<code>\"<strong>00</strong>010\" -&gt; \"<strong>10</strong>010\"</code></li> \n  </ul> </li> \n <li>操作 2 ：如果二进制串包含子字符串&nbsp;<code>\"10\"</code>&nbsp;，你可以用&nbsp;<code>\"01\"</code>&nbsp;将其替换。 \n  <ul> \n   <li>比方说，&nbsp;<code>\"000<strong>10</strong>\" -&gt; \"000<strong>01</strong>\"</code></li> \n  </ul> </li> \n</ul> \n<p>请你返回执行上述操作任意次以后能得到的 <strong>最大二进制字符串</strong>&nbsp;。如果二进制字符串 <code>x</code>&nbsp;对应的十进制数字大于二进制字符串 <code>y</code>&nbsp;对应的十进制数字，那么我们称二进制字符串<em>&nbsp;</em><code>x</code><em>&nbsp;</em>大于二进制字符串<em>&nbsp;</em><code>y</code><em>&nbsp;</em>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>binary = \"000110\"\n<b>输出：</b>\"111011\"\n<b>解释：</b>一个可行的转换为：\n\"0001<strong>10</strong>\" -&gt; \"0001<strong>01</strong>\" \n\"<strong>00</strong>0101\" -&gt; \"<strong>10</strong>0101\" \n\"1<strong>00</strong>101\" -&gt; \"1<strong>10</strong>101\" \n\"110<strong>10</strong>1\" -&gt; \"110<strong>01</strong>1\" \n\"11<strong>00</strong>11\" -&gt; \"11<strong>10</strong>11\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>binary = \"01\"\n<b>输出：</b>\"01\"\n<b>解释：</b>\"01\" 没办法进行任何转换。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= binary.length &lt;= 10<sup>5</sup></code></li> \n <li><code>binary</code> 仅包含&nbsp;<code>\'0\'</code> 和&nbsp;<code>\'1\'</code> 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1703. 得到连续 K 个 1 的最少相邻交换次数', '<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;。&nbsp;<code>nums</code> 仅包含&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;。每一次移动，你可以选择 <strong>相邻</strong>&nbsp;两个数字并将它们交换。</p> \n<p>请你返回使&nbsp;<code>nums</code>&nbsp;中包含&nbsp;<code>k</code>&nbsp;个 <strong>连续&nbsp;</strong><code>1</code>&nbsp;的 <strong>最少</strong>&nbsp;交换次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [1,0,0,1,0,1], k = 2\n<b>输出：</b>1\n<b>解释：</b>在第一次操作时，nums 可以变成 [1,0,0,0,<strong>1</strong>,<strong>1</strong>] 得到连续两个 1 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [1,0,0,0,0,0,1,1], k = 3\n<b>输出：</b>5\n<b>解释：</b>通过 5 次操作，最左边的 1 可以移到右边直到 nums 变为 [0,0,0,0,0,<strong>1</strong>,<strong>1</strong>,<strong>1</strong>] 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [1,1,0,1], k = 2\n<b>输出：</b>0\n<b>解释：</b>nums 已经有连续 2 个 1 了。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>nums[i]</code> 要么是&nbsp;<code>0</code>&nbsp;，要么是&nbsp;<code>1</code>&nbsp;。</li> \n <li><code>1 &lt;= k &lt;= sum(nums)</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1704. 判断字符串的两半是否相似', '<p>给你一个偶数长度的字符串 <code>s</code> 。将其拆分成长度相同的两半，前一半为 <code>a</code> ，后一半为 <code>b</code> 。</p> \n<p>两个字符串 <strong>相似</strong> 的前提是它们都含有相同数目的元音（<code>\'a\'</code>，<code>\'e\'</code>，<code>\'i\'</code>，<code>\'o\'</code>，<code>\'u\'</code>，<code>\'A\'</code>，<code>\'E\'</code>，<code>\'I\'</code>，<code>\'O\'</code>，<code>\'U\'</code>）。注意，<code>s</code> 可能同时含有大写和小写字母。</p> \n<p>如果<em> </em><code>a</code><em> </em>和<em> </em><code>b</code> 相似，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"book\"\n<strong>输出：</strong>true\n<strong>解释：</strong>a = \"b<strong>o</strong>\" 且 b = \"<strong>o</strong>k\" 。a 中有 1 个元音，b 也有 1 个元音。所以，a 和 b 相似。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"textbook\"\n<strong>输出：</strong>false\n<strong>解释：</strong>a = \"t<strong>e</strong>xt\" 且 b = \"b<strong>oo</strong>k\" 。a 中有 1 个元音，b 中有 2 个元音。因此，a 和 b 不相似。\n注意，元音 o 在 b 中出现两次，记为 2 个。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"MerryChristmas\"\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"AbCdEfGh\"\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= s.length &lt;= 1000</code></li> \n <li><code>s.length</code> 是偶数</li> \n <li><code>s</code> 由 <strong>大写和小写</strong> 字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1705. 吃苹果的最大数目', '<p>有一棵特殊的苹果树，一连 <code>n</code> 天，每天都可以长出若干个苹果。在第 <code>i</code> 天，树上会长出 <code>apples[i]</code> 个苹果，这些苹果将会在 <code>days[i]</code> 天后（也就是说，第 <code>i + days[i]</code> 天时）腐烂，变得无法食用。也可能有那么几天，树上不会长出新的苹果，此时用 <code>apples[i] == 0</code> 且 <code>days[i] == 0</code> 表示。</p> \n<p>你打算每天 <strong>最多</strong> 吃一个苹果来保证营养均衡。注意，你可以在这 <code>n</code> 天之后继续吃苹果。</p> \n<p>给你两个长度为 <code>n</code> 的整数数组 <code>days</code> 和 <code>apples</code> ，返回你可以吃掉的苹果的最大数目<em>。</em></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>apples = [1,2,3,5,2], days = [3,2,1,4,2]\n<strong>输出：</strong>7\n<strong>解释：</strong>你可以吃掉 7 个苹果：\n- 第一天，你吃掉第一天长出来的苹果。\n- 第二天，你吃掉一个第二天长出来的苹果。\n- 第三天，你吃掉一个第二天长出来的苹果。过了这一天，第三天长出来的苹果就已经腐烂了。\n- 第四天到第七天，你吃的都是第四天长出来的苹果。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]\n<strong>输出：</strong>5\n<strong>解释：</strong>你可以吃掉 5 个苹果：\n- 第一天到第三天，你吃的都是第一天长出来的苹果。\n- 第四天和第五天不吃苹果。\n- 第六天和第七天，你吃的都是第六天长出来的苹果。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>apples.length == n</code></li> \n <li><code>days.length == n</code></li> \n <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>0 &lt;= apples[i], days[i] &lt;= 2 * 10<sup>4</sup></code></li> \n <li>只有在 <code>apples[i] = 0</code> 时，<code>days[i] = 0</code> 才成立</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1706. 球会落何处', '<p>用一个大小为 <code>m x n</code> 的二维网格 <code>grid</code> 表示一个箱子。你有 <code>n</code> 颗球。箱子的顶部和底部都是开着的。</p> \n<p>箱子中的每个单元格都有一个对角线挡板，跨过单元格的两个角，可以将球导向左侧或者右侧。</p> \n<ul> \n <li>将球导向右侧的挡板跨过左上角和右下角，在网格中用 <code>1</code> 表示。</li> \n <li>将球导向左侧的挡板跨过右上角和左下角，在网格中用 <code>-1</code> 表示。</li> \n</ul> \n<p>在箱子每一列的顶端各放一颗球。每颗球都可能卡在箱子里或从底部掉出来。如果球恰好卡在两块挡板之间的 \"V\" 形图案，或者被一块挡导向到箱子的任意一侧边上，就会卡住。</p> \n<p>返回一个大小为 <code>n</code> 的数组 <code>answer</code> ，其中 <code>answer[i]</code> 是球放在顶部的第 <code>i</code> 列后从底部掉出来的那一列对应的下标，如果球卡在盒子里，则返回 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"width: 500px; height: 385px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/12/26/ball.jpg\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]\n<strong>输出：</strong>[1,-1,-1,-1,-1]\n<strong>解释：</strong>示例如图：\nb0 球开始放在第 0 列上，最终从箱子底部第 1 列掉出。\nb1 球开始放在第 1 列上，会卡在第 2、3 列和第 1 行之间的 \"V\" 形里。\nb2 球开始放在第 2 列上，会卡在第 2、3 列和第 0 行之间的 \"V\" 形里。\nb3 球开始放在第 3 列上，会卡在第 2、3 列和第 0 行之间的 \"V\" 形里。\nb4 球开始放在第 4 列上，会卡在第 2、3 列和第 1 行之间的 \"V\" 形里。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>grid = [[-1]]\n<strong>输出：</strong>[-1]\n<strong>解释：</strong>球被卡在箱子左侧边上。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]\n<strong>输出：</strong>[0,1,2,3,4,-1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 100</code></li> \n <li><code>grid[i][j]</code> 为 <code>1</code> 或 <code>-1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1707. 与数组中元素的最大异或值', '<p>给你一个由非负整数组成的数组 <code>nums</code> 。另有一个查询数组 <code>queries</code> ，其中 <code>queries[i] = [x<sub>i</sub>, m<sub>i</sub>]</code> 。</p> \n<p>第 <code>i</code> 个查询的答案是 <code>x<sub>i</sub></code> 和任何 <code>nums</code> 数组中不超过 <code>m<sub>i</sub></code> 的元素按位异或（<code>XOR</code>）得到的最大值。换句话说，答案是 <code>max(nums[j] XOR x<sub>i</sub>)</code> ，其中所有 <code>j</code> 均满足 <code>nums[j] &lt;= m<sub>i</sub></code> 。如果 <code>nums</code> 中的所有元素都大于 <code>m<sub>i</sub></code>，最终答案就是 <code>-1</code> 。</p> \n<p>返回一个整数数组<em> </em><code>answer</code><em> </em>作为查询的答案，其中<em> </em><code>answer.length == queries.length</code><em> </em>且<em> </em><code>answer[i]</code><em> </em>是第<em> </em><code>i</code><em> </em>个查询的答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]\n<strong>输出：</strong>[3,3,7]\n<strong>解释：</strong>\n1) 0 和 1 是仅有的两个不超过 1 的整数。0 XOR 3 = 3 而 1 XOR 3 = 2 。二者中的更大值是 3 。\n2) 1 XOR 2 = 3.\n3) 5 XOR 2 = 7.\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]\n<strong>输出：</strong>[15,-1,5]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length, queries.length &lt;= 10<sup>5</sup></code></li> \n <li><code>queries[i].length == 2</code></li> \n <li><code>0 &lt;= nums[j], x<sub>i</sub>, m<sub>i</sub> &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('171. Excel 表列序号', '<p>给你一个字符串&nbsp;<code>columnTitle</code> ，表示 Excel 表格中的列名称。返回该列名称对应的列序号。</p> \n<p>&nbsp;</p> \n<p>例如，</p> \n<pre>    A -&gt; 1\n    B -&gt; 2\n    C -&gt; 3\n    ...\n    Z -&gt; 26\n    AA -&gt; 27\n    AB -&gt; 28 \n    ...\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> columnTitle = \"A\"\n<strong>输出:</strong> 1\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入: </strong>columnTitle = \"AB\"\n<strong>输出:</strong> 28\n</pre> \n<p><strong>示例&nbsp;3:</strong></p> \n<pre><strong>输入: </strong>columnTitle = \"ZY\"\n<strong>输出:</strong> 701</pre> \n<p><strong>示例 4:</strong></p> \n<pre><strong>输入: </strong>columnTitle = \"FXSHRXW\"\n<strong>输出: </strong>2147483647\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= columnTitle.length &lt;= 7</code></li> \n <li><code>columnTitle</code> 仅由大写英文组成</li> \n <li><code>columnTitle</code> 在范围 <code>[\"A\", \"FXSHRXW\"]</code> 内</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1710. 卡车上的最大单元数', '<p>请你将一些箱子装在 <strong>一辆卡车</strong> 上。给你一个二维数组 <code>boxTypes</code> ，其中 <code>boxTypes[i] = [numberOfBoxes<sub>i</sub>, numberOfUnitsPerBox<sub>i</sub>]</code> ：</p> \n<ul> \n <li><code>numberOfBoxes<sub>i</sub></code> 是类型 <code>i</code> 的箱子的数量。</li> \n <li><code>numberOfUnitsPerBox<sub>i</sub></code><sub> </sub>是类型 <code>i</code>&nbsp;每个箱子可以装载的单元数量。</li> \n</ul> \n<p>整数 <code>truckSize</code> 表示卡车上可以装载 <strong>箱子</strong> 的 <strong>最大数量</strong> 。只要箱子数量不超过 <code>truckSize</code> ，你就可以选择任意箱子装到卡车上。</p> \n<p>返回卡车可以装载&nbsp;<strong>单元</strong> 的 <strong>最大</strong> 总数<em>。</em></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4\n<strong>输出：</strong>8\n<strong>解释：</strong>箱子的情况如下：\n- 1 个第一类的箱子，里面含 3 个单元。\n- 2 个第二类的箱子，每个里面含 2 个单元。\n- 3 个第三类的箱子，每个里面含 1 个单元。\n可以选择第一类和第二类的所有箱子，以及第三类的一个箱子。\n单元总数 = (1 * 3) + (2 * 2) + (1 * 1) = 8</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10\n<strong>输出：</strong>91\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= boxTypes.length &lt;= 1000</code></li> \n <li><code>1 &lt;= numberOfBoxes<sub>i</sub>, numberOfUnitsPerBox<sub>i</sub> &lt;= 1000</code></li> \n <li><code>1 &lt;= truckSize &lt;= 10<sup>6</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1711. 大餐计数', '<p><strong>大餐</strong> 是指 <strong>恰好包含两道不同餐品</strong> 的一餐，其美味程度之和等于 2 的幂。</p> \n<p>你可以搭配 <strong>任意</strong> 两道餐品做一顿大餐。</p> \n<p>给你一个整数数组 <code>deliciousness</code> ，其中 <code>deliciousness[i]</code> 是第 <code>i<sup>​​​​​​</sup>​​​​</code>​​​​ 道餐品的美味程度，返回你可以用数组中的餐品做出的不同 <strong>大餐</strong> 的数量。结果需要对 <code>10<sup>9</sup> + 7</code> 取余。</p> \n<p>注意，只要餐品下标不同，就可以认为是不同的餐品，即便它们的美味程度相同。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>deliciousness = [1,3,5,7,9]\n<strong>输出：</strong>4\n<strong>解释：</strong>大餐的美味程度组合为 (1,3) 、(1,7) 、(3,5) 和 (7,9) 。\n它们各自的美味程度之和分别为 4 、8 、8 和 16 ，都是 2 的幂。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>deliciousness = [1,1,1,3,3,3,7]\n<strong>输出：</strong>15\n<strong>解释：</strong>大餐的美味程度组合为 3 种 (1,1) ，9 种 (1,3) ，和 3 种 (1,7) 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= deliciousness.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= deliciousness[i] &lt;= 2<sup>20</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1712. 将数组分成三个子数组的方案数', '<p>我们称一个分割整数数组的方案是 <strong>好的</strong>&nbsp;，当它满足：</p> \n<ul> \n <li>数组被分成三个 <strong>非空</strong>&nbsp;连续子数组，从左至右分别命名为&nbsp;<code>left</code>&nbsp;，&nbsp;<code>mid</code>&nbsp;，&nbsp;<code>right</code>&nbsp;。</li> \n <li><code>left</code>&nbsp;中元素和小于等于&nbsp;<code>mid</code>&nbsp;中元素和，<code>mid</code>&nbsp;中元素和小于等于&nbsp;<code>right</code>&nbsp;中元素和。</li> \n</ul> \n<p>给你一个 <strong>非负</strong> 整数数组&nbsp;<code>nums</code>&nbsp;，请你返回&nbsp;<strong>好的</strong> 分割 <code>nums</code>&nbsp;方案数目。由于答案可能会很大，请你将结果对 <code>10<sup>9&nbsp;</sup>+ 7</code>&nbsp;取余后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [1,1,1]\n<b>输出：</b>1\n<b>解释：</b>唯一一种好的分割方案是将 nums 分成 [1] [1] [1] 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [1,2,2,2,5,0]\n<b>输出：</b>3\n<b>解释：</b>nums 总共有 3 种好的分割方案：\n[1] [2] [2,2,5,0]\n[1] [2,2] [2,5,0]\n[1,2] [2,2] [5,0]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [3,2,1]\n<b>输出：</b>0\n<b>解释：</b>没有好的分割方案。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1713. 得到子序列的最少操作次数', '<p>给你一个数组&nbsp;<code>target</code>&nbsp;，包含若干 <strong>互不相同</strong>&nbsp;的整数，以及另一个整数数组&nbsp;<code>arr</code>&nbsp;，<code>arr</code>&nbsp;<strong>可能</strong> 包含重复元素。</p> \n<p>每一次操作中，你可以在 <code>arr</code>&nbsp;的任意位置插入任一整数。比方说，如果&nbsp;<code>arr = [1,4,1,2]</code>&nbsp;，那么你可以在中间添加 <code>3</code>&nbsp;得到&nbsp;<code>[1,4,<strong>3</strong>,1,2]</code>&nbsp;。你可以在数组最开始或最后面添加整数。</p> \n<p>请你返回 <strong>最少</strong>&nbsp;操作次数，使得<em>&nbsp;</em><code>target</code><em>&nbsp;</em>成为&nbsp;<code>arr</code>&nbsp;的一个子序列。</p> \n<p>一个数组的 <strong>子序列</strong>&nbsp;指的是删除原数组的某些元素（可能一个元素都不删除），同时不改变其余元素的相对顺序得到的数组。比方说，<code>[2,7,4]</code>&nbsp;是&nbsp;<code>[4,<strong>2</strong>,3,<strong>7</strong>,2,1,<strong>4</strong>]</code>&nbsp;的子序列（加粗元素），但&nbsp;<code>[2,4,2]</code>&nbsp;不是子序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>target = [5,1,3], <code>arr</code> = [9,4,2,3,4]\n<b>输出：</b>2\n<b>解释：</b>你可以添加 5 和 1 ，使得 arr 变为 [<strong>5</strong>,9,4,<strong>1</strong>,2,3,4] ，target 为 arr 的子序列。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>target = [6,4,8,1,3,2], <code>arr</code> = [4,7,6,2,3,8,6,1]\n<b>输出：</b>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= target.length, arr.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= target[i], arr[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>target</code>&nbsp;不包含任何重复元素。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1716. 计算力扣银行的钱', '<p>Hercy 想要为购买第一辆车存钱。他 <strong>每天</strong> 都往力扣银行里存钱。</p> \n<p>最开始，他在周一的时候存入 <code>1</code>&nbsp;块钱。从周二到周日，他每天都比前一天多存入 <code>1</code>&nbsp;块钱。在接下来每一个周一，他都会比 <strong>前一个周一</strong> 多存入 <code>1</code>&nbsp;块钱。<span style=\"\"> </span></p> \n<p>给你&nbsp;<code>n</code>&nbsp;，请你返回在第 <code>n</code>&nbsp;天结束的时候他在力扣银行总共存了多少块钱。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>n = 4\n<b>输出：</b>10\n<b>解释：</b>第 4 天后，总额为 1 + 2 + 3 + 4 = 10 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>n = 10\n<b>输出：</b>37\n<b>解释：</b>第 10 天后，总额为 (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37 。注意到第二个星期一，Hercy 存入 2 块钱。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>n = 20\n<b>输出：</b>96\n<b>解释：</b>第 20 天后，总额为 (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1717. 删除子字符串的最大得分', '<p>给你一个字符串&nbsp;<code>s</code>&nbsp;和两个整数&nbsp;<code>x</code> 和&nbsp;<code>y</code>&nbsp;。你可以执行下面两种操作任意次。</p> \n<ul> \n <li>删除子字符串&nbsp;<code>\"ab\"</code>&nbsp;并得到&nbsp;<code>x</code>&nbsp;分。 \n  <ul> \n   <li>比方说，从&nbsp;<code>\"c<strong>ab</strong>xbae\"</code>&nbsp;删除 <code>ab</code>&nbsp;，得到&nbsp;<code>\"cxbae\"</code>&nbsp;。</li> \n  </ul> </li> \n <li>删除子字符串<code>\"ba\"</code>&nbsp;并得到&nbsp;<code>y</code>&nbsp;分。 \n  <ul> \n   <li>比方说，从&nbsp;<code>\"cabx<strong>ba</strong>e\"</code>&nbsp;删除 <code>ba</code>&nbsp;，得到&nbsp;<code>\"cabxe\"</code>&nbsp;。</li> \n  </ul> </li> \n</ul> \n<p>请返回对 <code>s</code>&nbsp;字符串执行上面操作若干次能得到的最大得分。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"cdbcbbaaabab\", x = 4, y = 5\n<b>输出：</b>19\n<strong>解释：</strong>\n- 删除 \"cdbcbbaaa<strong>ba</strong>b\" 中加粗的 \"ba\" ，得到 s = \"cdbcbbaaab\" ，加 5 分。\n- 删除 \"cdbcbbaa<strong>ab</strong>\" 中加粗的 \"ab\" ，得到 s = \"cdbcbbaa\" ，加 4 分。\n- 删除 \"cdbcb<strong>ba</strong>a\" 中加粗的 \"ba\" ，得到 s = \"cdbcba\" ，加 5 分。\n- 删除 \"cdbc<strong>ba</strong>\" 中加粗的 \"ba\" ，得到 s = \"cdbc\" ，加 5 分。\n总得分为 5 + 4 + 5 + 5 = 19 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"aabbaaxybbaabb\", x = 5, y = 4\n<b>输出：</b>20\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= x, y &lt;= 10<sup>4</sup></code></li> \n <li><code>s</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1718. 构建字典序最大的可行序列', '<p>给你一个整数&nbsp;<code>n</code>&nbsp;，请你找到满足下面条件的一个序列：</p> \n<ul> \n <li>整数&nbsp;<code>1</code>&nbsp;在序列中只出现一次。</li> \n <li><code>2</code>&nbsp;到&nbsp;<code>n</code>&nbsp;之间每个整数都恰好出现两次。</li> \n <li>对于每个&nbsp;<code>2</code>&nbsp;到&nbsp;<code>n</code>&nbsp;之间的整数&nbsp;<code>i</code>&nbsp;，两个&nbsp;<code>i</code>&nbsp;之间出现的距离恰好为&nbsp;<code>i</code>&nbsp;。</li> \n</ul> \n<p>序列里面两个数 <code>a[i]</code>&nbsp;和 <code>a[j]</code>&nbsp;之间的 <strong>距离</strong>&nbsp;，我们定义为它们下标绝对值之差&nbsp;<code>|j - i|</code>&nbsp;。</p> \n<p>请你返回满足上述条件中&nbsp;<strong>字典序最大</strong>&nbsp;的序列。题目保证在给定限制条件下，一定存在解。</p> \n<p>一个序列&nbsp;<code>a</code>&nbsp;被认为比序列&nbsp;<code>b</code>&nbsp;（两者长度相同）字典序更大的条件是：&nbsp;<code>a</code> 和&nbsp;<code>b</code>&nbsp;中第一个不一样的数字处，<code>a</code>&nbsp;序列的数字比&nbsp;<code>b</code>&nbsp;序列的数字大。比方说，<code>[0,1,9,0]</code>&nbsp;比&nbsp;<code>[0,1,5,6]</code>&nbsp;字典序更大，因为第一个不同的位置是第三个数字，且&nbsp;<code>9</code>&nbsp;比&nbsp;<code>5</code>&nbsp;大。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>n = 3\n<b>输出：</b>[3,1,2,3,2]\n<b>解释：</b>[2,3,2,1,3] 也是一个可行的序列，但是 [3,1,2,3,2] 是字典序最大的序列。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>n = 5\n<b>输出：</b>[5,3,1,4,3,5,2,4,2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 20</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1719. 重构一棵树的方案数', '<p>给你一个数组&nbsp;<code>pairs</code> ，其中&nbsp;<code>pairs[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>&nbsp;，并且满足：</p> \n<ul> \n <li><code>pairs</code>&nbsp;中没有重复元素</li> \n <li><code>x<sub>i</sub> &lt; y<sub>i</sub></code></li> \n</ul> \n<p>令&nbsp;<code>ways</code>&nbsp;为满足下面条件的有根树的方案数：</p> \n<ul> \n <li>树所包含的所有节点值都在 <code>pairs</code>&nbsp;中。</li> \n <li>一个数对&nbsp;<code>[x<sub>i</sub>, y<sub>i</sub>]</code> 出现在&nbsp;<code>pairs</code>&nbsp;中&nbsp;<strong>当且仅当</strong><strong>&nbsp;</strong><code>x<sub>i</sub></code>&nbsp;是&nbsp;<code>y<sub>i</sub></code>&nbsp;的祖先或者&nbsp;<code>y<sub>i</sub></code>&nbsp;是&nbsp;<code>x<sub>i</sub></code><sub>&nbsp;</sub>的祖先。</li> \n <li><strong>注意：</strong>构造出来的树不一定是二叉树。</li> \n</ul> \n<p>两棵树被视为不同的方案当存在至少一个节点在两棵树中有不同的父节点。</p> \n<p>请你返回：</p> \n<ul> \n <li>如果&nbsp;<code>ways == 0</code>&nbsp;，返回&nbsp;<code>0</code>&nbsp;。</li> \n <li>如果&nbsp;<code>ways == 1</code>&nbsp;，返回 <code>1</code>&nbsp;。</li> \n <li>如果&nbsp;<code>ways &gt; 1</code>&nbsp;，返回&nbsp;<code>2</code>&nbsp;。</li> \n</ul> \n<p>一棵 <strong>有根树</strong>&nbsp;指的是只有一个根节点的树，所有边都是从根往外的方向。</p> \n<p>我们称从根到一个节点路径上的任意一个节点（除去节点本身）都是该节点的 <strong>祖先</strong>&nbsp;。根节点没有祖先。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 208px; height: 221px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/09/trees2.png\"> \n<pre><b>输入：</b>pairs = [[1,2],[2,3]]\n<b>输出：</b>1\n<b>解释：</b>如上图所示，有且只有一个符合规定的有根树。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 234px; height: 241px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/09/tree.png\" alt=\"\"> \n<pre><b>输入：</b>pairs = [[1,2],[2,3],[1,3]]\n<b>输出：</b>2\n<b>解释：</b>有多个符合规定的有根树，其中三个如上图所示。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>pairs = [[1,2],[2,3],[2,4],[1,5]]\n<b>输出：</b>0\n<b>解释：</b>没有符合规定的有根树。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= pairs.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= x<sub>i </sub>&lt; y<sub>i</sub> &lt;= 500</code></li> \n <li><code>pairs</code>&nbsp;中的元素互不相同。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('172. 阶乘后的零', '<p>给定一个整数 <em>n</em>，返回 <em>n</em>! 结果尾数中零的数量。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> 3\n<strong>输出:</strong> 0\n<strong>解释:</strong>&nbsp;3! = 6, 尾数中没有零。</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> 5\n<strong>输出:</strong> 1\n<strong>解释:</strong>&nbsp;5! = 120, 尾数中有 1 个零.</pre> \n<p><strong>说明: </strong>你算法的时间复杂度应为&nbsp;<em>O</em>(log&nbsp;<em>n</em>)<em>&nbsp;</em>。</p>');
INSERT INTO `leecode` VALUES ('1720. 解码异或后的数组', '<p><strong>未知</strong> 整数数组 <code>arr</code> 由 <code>n</code> 个非负整数组成。</p> \n<p>经编码后变为长度为 <code>n - 1</code> 的另一个整数数组 <code>encoded</code> ，其中 <code>encoded[i] = arr[i] XOR arr[i + 1]</code> 。例如，<code>arr = [1,0,2,1]</code> 经编码后得到 <code>encoded = [1,2,3]</code> 。</p> \n<p>给你编码后的数组 <code>encoded</code> 和原数组 <code>arr</code> 的第一个元素 <code>first</code>（<code>arr[0]</code>）。</p> \n<p>请解码返回原数组 <code>arr</code> 。可以证明答案存在并且是唯一的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>encoded = [1,2,3], first = 1\n<strong>输出：</strong>[1,0,2,1]\n<strong>解释：</strong>若 arr = [1,0,2,1] ，那么 first = 1 且 encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>encoded = [6,2,7,3], first = 4\n<strong>输出：</strong>[4,2,0,7,4]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li> \n <li><code>encoded.length == n - 1</code></li> \n <li><code>0 &lt;= encoded[i] &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= first &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1721. 交换链表中的节点', '<p>给你链表的头节点 <code>head</code> 和一个整数 <code>k</code> 。</p> \n<p><strong>交换</strong> 链表正数第 <code>k</code> 个节点和倒数第 <code>k</code> 个节点的值后，返回链表的头节点（链表 <strong>从 1 开始索引</strong>）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 722px; height: 202px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/10/linked1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,2,3,4,5], k = 2\n<strong>输出：</strong>[1,4,3,2,5]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>head = [7,9,6,6,7,8,3,0,9,5], k = 5\n<strong>输出：</strong>[7,9,6,6,8,7,3,0,9,5]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>head = [1], k = 1\n<strong>输出：</strong>[1]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>head = [1,2], k = 1\n<strong>输出：</strong>[2,1]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>head = [1,2,3], k = 2\n<strong>输出：</strong>[1,2,3]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表中节点的数目是 <code>n</code></li> \n <li><code>1 &lt;= k &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= Node.val &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1722. 执行交换操作后的最小汉明距离', '<p>给你两个整数数组 <code>source</code> 和 <code>target</code> ，长度都是 <code>n</code> 。还有一个数组 <code>allowedSwaps</code> ，其中每个 <code>allowedSwaps[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> 表示你可以交换数组 <code>source</code> 中下标为 <code>a<sub>i</sub></code> 和 <code>b<sub>i</sub></code>（<strong>下标从 0 开始</strong>）的两个元素。注意，你可以按 <strong>任意</strong> 顺序 <strong>多次</strong> 交换一对特定下标指向的元素。</p> \n<p>相同长度的两个数组&nbsp;<code>source</code> 和 <code>target</code> 间的 <strong>汉明距离</strong> 是元素不同的下标数量。形式上，其值等于满足&nbsp;<code>source[i] != target[i]</code> （<strong>下标从 0 开始</strong>）的下标 <code>i</code>（<code>0 &lt;= i &lt;= n-1</code>）的数量。</p> \n<p>在对数组 <code>source</code> 执行 <strong>任意</strong> 数量的交换操作后，返回 <code>source</code> 和 <code>target</code> 间的 <strong>最小汉明距离</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]\n<strong>输出：</strong>1\n<strong>解释：</strong>source 可以按下述方式转换：\n- 交换下标 0 和 1 指向的元素：source = [<strong>2</strong>,<strong>1</strong>,3,4]\n- 交换下标 2 和 3 指向的元素：source = [2,1,<strong>4</strong>,<strong>3</strong>]\nsource 和 target 间的汉明距离是 1 ，二者有 1 处元素不同，在下标 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []\n<strong>输出：</strong>2\n<strong>解释：</strong>不能对 source 执行交换操作。\nsource 和 target 间的汉明距离是 2 ，二者有 2 处元素不同，在下标 1 和下标 2 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == source.length == target.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= source[i], target[i] &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= allowedSwaps.length &lt;= 10<sup>5</sup></code></li> \n <li><code>allowedSwaps[i].length == 2</code></li> \n <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li> \n <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1723. 完成所有工作的最短时间', '<p>给你一个整数数组 <code>jobs</code> ，其中 <code>jobs[i]</code> 是完成第 <code>i</code> 项工作要花费的时间。</p> \n<p>请你将这些工作分配给 <code>k</code> 位工人。所有工作都应该分配给工人，且每项工作只能分配给一位工人。工人的 <strong>工作时间</strong> 是完成分配给他们的所有工作花费时间的总和。请你设计一套最佳的工作分配方案，使工人的 <strong>最大工作时间</strong> 得以 <strong>最小化</strong> 。</p> \n<p>返回分配方案中尽可能 <strong>最小</strong> 的 <strong>最大工作时间</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>jobs = [3,2,3], k = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>给每位工人分配一项工作，最大工作时间是 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>jobs = [1,2,4,7,8], k = 2\n<strong>输出：</strong>11\n<strong>解释：</strong>按下述方式分配工作：\n1 号工人：1、2、8（工作时间 = 1 + 2 + 8 = 11）\n2 号工人：4、7（工作时间 = 4 + 7 = 11）\n最大工作时间是 11 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= jobs.length &lt;= 12</code></li> \n <li><code>1 &lt;= jobs[i] &lt;= 10<sup>7</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1725. 可以形成最大正方形的矩形数目', '<p>给你一个数组 <code>rectangles</code> ，其中 <code>rectangles[i] = [l<sub>i</sub>, w<sub>i</sub>]</code> 表示第 <code>i</code> 个矩形的长度为 <code>l<sub>i</sub></code> 、宽度为 <code>w<sub>i</sub></code> 。</p> \n<p>如果存在 <code>k</code> 同时满足 <code>k &lt;= l<sub>i</sub></code> 和 <code>k &lt;= w<sub>i</sub></code> ，就可以将第 <code>i</code> 个矩形切成边长为 <code>k</code> 的正方形。例如，矩形 <code>[4,6]</code> 可以切成边长最大为 <code>4</code> 的正方形。</p> \n<p>设 <code>maxLen</code> 为可以从矩形数组&nbsp;<code>rectangles</code> 切分得到的 <strong>最大正方形</strong> 的边长。</p> \n<p>请你统计有多少个矩形能够切出边长为<em> </em><code>maxLen</code> 的正方形，并返回矩形 <strong>数目</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>rectangles = [[5,8],[3,9],[5,12],[16,5]]\n<strong>输出：</strong>3\n<strong>解释：</strong>能从每个矩形中切出的最大正方形边长分别是 [5,3,5,5] 。\n最大正方形的边长为 5 ，可以由 3 个矩形切分得到。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>rectangles = [[2,3],[3,7],[4,3],[3,7]]\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= rectangles.length &lt;= 1000</code></li> \n <li><code>rectangles[i].length == 2</code></li> \n <li><code>1 &lt;= l<sub>i</sub>, w<sub>i</sub> &lt;= 10<sup>9</sup></code></li> \n <li><code>l<sub>i</sub> != w<sub>i</sub></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1726. 同积元组', '<p>给你一个由 <strong>不同</strong> 正整数组成的数组 <code>nums</code> ，请你返回满足&nbsp;<code>a * b = c * d</code> 的元组<em> </em><code>(a, b, c, d)</code><em> </em>的数量。其中 <code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> 都是 <code>nums</code> 中的元素，且 <code>a != b != c != d</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [2,3,4,6]\n<strong>输出：</strong>8\n<strong>解释：</strong>存在 8 个满足题意的元组：\n(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\n(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,4,5,10]\n<strong>输出：</strong>16\n<strong>解释：</strong>存在 16 个满足题意的元组：\n(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\n(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\n(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,4,5)\n(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [2,3,4,6,8,12]\n<strong>输出：</strong>40\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [2,3,5,7]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 1000</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n <li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1727. 重新排列后的最大子矩阵', '<p>给你一个二进制矩阵&nbsp;<code>matrix</code>&nbsp;，它的大小为&nbsp;<code>m x n</code>&nbsp;，你可以将 <code>matrix</code>&nbsp;中的 <strong>列</strong>&nbsp;按任意顺序重新排列。</p> \n<p>请你返回最优方案下将 <code>matrix</code>&nbsp;重新排列后，全是 <code>1</code>&nbsp;的子矩阵面积。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"width: 300px; height: 144px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/17/screenshot-2020-12-30-at-40536-pm.png\" alt=\"\"></strong></p> \n<pre><b>输入：</b>matrix = [[0,0,1],[1,1,1],[1,0,1]]\n<b>输出：</b>4\n<b>解释：</b>你可以按照上图方式重新排列矩阵的每一列。\n最大的全 1 子矩阵是上图中加粗的部分，面积为 4 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 500px; height: 62px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/17/screenshot-2020-12-30-at-40852-pm.png\" alt=\"\"></p> \n<pre><b>输入：</b>matrix = [[1,0,1,0,1]]\n<b>输出：</b>3\n<b>解释：</b>你可以按照上图方式重新排列矩阵的每一列。\n最大的全 1 子矩阵是上图中加粗的部分，面积为 3 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>matrix = [[1,1,0],[1,0,1]]\n<b>输出：</b>2\n<b>解释：</b>由于你只能整列整列重新排布，所以没有比面积为 2 更大的全 1 子矩形。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>matrix = [[0,0],[0,0]]\n<b>输出：</b>0\n<b>解释：</b>由于矩阵中没有 1 ，没有任何全 1 的子矩阵，所以面积为 0 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> \n <li><code>matrix[i][j]</code>&nbsp;要么是&nbsp;<code>0</code>&nbsp;，要么是&nbsp;<code>1</code> 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1728. 猫和老鼠 II', '<p>一只猫和一只老鼠在玩一个叫做猫和老鼠的游戏。</p> \n<p>它们所处的环境设定是一个&nbsp;<code>rows x cols</code>&nbsp;的方格 <code>grid</code>&nbsp;，其中每个格子可能是一堵墙、一块地板、一位玩家（猫或者老鼠）或者食物。</p> \n<ul> \n <li>玩家由字符&nbsp;<code>\'C\'</code>&nbsp;（代表猫）和&nbsp;<code>\'M\'</code>&nbsp;（代表老鼠）表示。</li> \n <li>地板由字符&nbsp;<code>\'.\'</code>&nbsp;表示，玩家可以通过这个格子。</li> \n <li>墙用字符&nbsp;<code>\'#\'</code>&nbsp;表示，玩家不能通过这个格子。</li> \n <li>食物用字符&nbsp;<code>\'F\'</code>&nbsp;表示，玩家可以通过这个格子。</li> \n <li>字符&nbsp;<code>\'C\'</code>&nbsp;，&nbsp;<code>\'M\'</code>&nbsp;和&nbsp;<code>\'F\'</code>&nbsp;在&nbsp;<code>grid</code>&nbsp;中都只会出现一次。</li> \n</ul> \n<p>猫和老鼠按照如下规则移动：</p> \n<ul> \n <li>老鼠 <strong>先移动</strong>&nbsp;，然后两名玩家轮流移动。</li> \n <li>每一次操作时，猫和老鼠可以跳到上下左右四个方向之一的格子，他们不能跳过墙也不能跳出&nbsp;<code>grid</code>&nbsp;。</li> \n <li><code>catJump</code> 和&nbsp;<code>mouseJump</code>&nbsp;是猫和老鼠分别跳一次能到达的最远距离，它们也可以跳小于最大距离的长度。</li> \n <li>它们可以停留在原地。</li> \n <li>老鼠可以跳跃过猫的位置。</li> \n</ul> \n<p>游戏有 4 种方式会结束：</p> \n<ul> \n <li>如果猫跟老鼠处在相同的位置，那么猫获胜。</li> \n <li>如果猫先到达食物，那么猫获胜。</li> \n <li>如果老鼠先到达食物，那么老鼠获胜。</li> \n <li>如果老鼠不能在 1000 次操作以内到达食物，那么猫获胜。</li> \n</ul> \n<p>给你&nbsp;<code>rows x cols</code>&nbsp;的矩阵&nbsp;<code>grid</code>&nbsp;和两个整数&nbsp;<code>catJump</code>&nbsp;和&nbsp;<code>mouseJump</code>&nbsp;，双方都采取最优策略，如果老鼠获胜，那么请你返回&nbsp;<code>true</code>&nbsp;，否则返回 <code>false</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"width: 580px; height: 239px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/17/sample_111_1955.png\" alt=\"\"></strong></p> \n<pre><b>输入：</b>grid = [\"####F\",\"#C...\",\"M....\"], catJump = 1, mouseJump = 2\n<b>输出：</b>true\n<b>解释：</b>猫无法抓到老鼠，也没法比老鼠先到达食物。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 580px; height: 175px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/17/sample_2_1955.png\" alt=\"\"></p> \n<pre><b>输入：</b>grid = [\"M.C...F\"], catJump = 1, mouseJump = 4\n<b>输出：</b>true\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>grid = [\"M.C...F\"], catJump = 1, mouseJump = 3\n<b>输出：</b>false\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>grid = [\"C...#\",\"...#F\",\"....#\",\"M....\"], catJump = 2, mouseJump = 5\n<b>输出：</b>false\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><b>输入：</b>grid = [\".M...\",\"..#..\",\"#..#.\",\"C#.#.\",\"...#F\"], catJump = 3, mouseJump = 1\n<b>输出：</b>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>rows == grid.length</code></li> \n <li><code>cols = grid[i].length</code></li> \n <li><code>1 &lt;= rows, cols &lt;= 8</code></li> \n <li><code>grid[i][j]</code> 只包含字符&nbsp;<code>\'C\'</code>&nbsp;，<code>\'M\'</code>&nbsp;，<code>\'F\'</code>&nbsp;，<code>\'.\'</code>&nbsp;和&nbsp;<code>\'#\'</code>&nbsp;。</li> \n <li><code>grid</code>&nbsp;中只包含一个&nbsp;<code>\'C\'</code>&nbsp;，<code>\'M\'</code>&nbsp;和&nbsp;<code>\'F\'</code>&nbsp;。</li> \n <li><code>1 &lt;= catJump, mouseJump &lt;= 8</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('173. 二叉搜索树迭代器', '实现一个二叉搜索树迭代器类\n<code>BSTIterator</code> ，表示一个按中序遍历二叉搜索树（BST）的迭代器： \n<div class=\"original__bRMd\"> \n <div> \n  <ul> \n   <li><code>BSTIterator(TreeNode root)</code> 初始化 <code>BSTIterator</code> 类的一个对象。BST 的根节点 <code>root</code> 会作为构造函数的一部分给出。指针应初始化为一个不存在于 BST 中的数字，且该数字小于 BST 中的任何元素。</li> \n   <li><code>boolean hasNext()</code> 如果向指针右侧遍历存在数字，则返回 <code>true</code> ；否则返回 <code>false</code> 。</li> \n   <li><code>int next()</code>将指针向右移动，然后返回指针处的数字。</li> \n  </ul> \n  <p>注意，指针初始化为一个不存在于 BST 中的数字，所以对 <code>next()</code> 的首次调用将返回 BST 中的最小元素。</p> \n </div> \n</div> \n<p>你可以假设&nbsp;<code>next()</code>&nbsp;调用总是有效的，也就是说，当调用 <code>next()</code>&nbsp;时，BST 的中序遍历中至少存在一个下一个数字。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<img style=\"width: 189px; height: 178px;\" src=\"https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png\" alt=\"\"> \n<pre><strong>输入</strong>\n[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\n<strong>输出</strong>\n[null, 3, 7, true, 9, true, 15, true, 20, false]\n\n<strong>解释</strong>\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // 返回 3\nbSTIterator.next();    // 返回 7\nbSTIterator.hasNext(); // 返回 True\nbSTIterator.next();    // 返回 9\nbSTIterator.hasNext(); // 返回 True\nbSTIterator.next();    // 返回 15\nbSTIterator.hasNext(); // 返回 True\nbSTIterator.next();    // 返回 20\nbSTIterator.hasNext(); // 返回 False\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点的数目在范围 <code>[1, 10<sup>5</sup>]</code> 内</li> \n <li><code>0 &lt;= Node.val &lt;= 10<sup>6</sup></code></li> \n <li>最多调用 <code>10<sup>5</sup></code> 次 <code>hasNext</code> 和 <code>next</code> 操作</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你可以设计一个满足下述条件的解决方案吗？<code>next()</code> 和 <code>hasNext()</code> 操作均摊时间复杂度为 <code>O(1)</code> ，并使用 <code>O(h)</code> 内存。其中 <code>h</code> 是树的高度。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1732. 找到最高海拔', '<p>有一个自行车手打算进行一场公路骑行，这条路线总共由&nbsp;<code>n + 1</code>&nbsp;个不同海拔的点组成。自行车手从海拔为 <code>0</code>&nbsp;的点&nbsp;<code>0</code>&nbsp;开始骑行。</p> \n<p>给你一个长度为 <code>n</code>&nbsp;的整数数组&nbsp;<code>gain</code>&nbsp;，其中 <code>gain[i]</code>&nbsp;是点 <code>i</code>&nbsp;和点 <code>i + 1</code>&nbsp;的 <strong>净海拔高度差</strong>（<code>0 &lt;= i &lt; n</code>）。请你返回 <strong>最高点的海拔</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>gain = [-5,1,5,0,-7]\n<b>输出：</b>1\n<b>解释：</b>海拔高度依次为 [0,-5,-4,1,1,-6] 。最高海拔为 1 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>gain = [-4,-3,-2,-1,4,3,2]\n<b>输出：</b>0\n<b>解释：</b>海拔高度依次为 [0,-4,-7,-9,-10,-6,-3,-1] 。最高海拔为 0 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == gain.length</code></li> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>-100 &lt;= gain[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1733. 需要教语言的最少人数', '<p>在一个由&nbsp;<code>m</code>&nbsp;个用户组成的社交网络里，我们获取到一些用户之间的好友关系。两个用户之间可以相互沟通的条件是他们都掌握同一门语言。</p> \n<p>给你一个整数&nbsp;<code>n</code>&nbsp;，数组&nbsp;<code>languages</code>&nbsp;和数组&nbsp;<code>friendships</code>&nbsp;，它们的含义如下：</p> \n<ul> \n <li>总共有&nbsp;<code>n</code>&nbsp;种语言，编号从&nbsp;<code>1</code> 到&nbsp;<code>n</code>&nbsp;。</li> \n <li><code>languages[i]</code>&nbsp;是第 <code>i</code>&nbsp;位用户掌握的语言集合。</li> \n <li><code>friendships[i] = [u<sub>​​​​​​i</sub>​​​, v<sub>​​​​​​i</sub>]</code>&nbsp;表示&nbsp;<code>u<sup>​​​​​</sup><sub>​​​​​​i</sub></code>​​​​​ 和&nbsp;<code>v<sub>i</sub></code>&nbsp;为好友关系。</li> \n</ul> \n<p>你可以选择 <strong>一门</strong>&nbsp;语言并教会一些用户，使得所有好友之间都可以相互沟通。请返回你 <strong>最少</strong>&nbsp;需要教会多少名用户。</p> 请注意，好友关系没有传递性，也就是说如果&nbsp;\n<code>x</code> 和&nbsp;\n<code>y</code>&nbsp;是好友，且&nbsp;\n<code>y</code>&nbsp;和&nbsp;\n<code>z</code>&nbsp;是好友，&nbsp;\n<code>x</code> 和&nbsp;\n<code>z</code>&nbsp;不一定是好友。 \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]\n<b>输出：</b>1\n<b>解释：</b>你可以选择教用户 1 第二门语言，也可以选择教用户 2 第一门语言。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]\n<b>输出：</b>2\n<b>解释：</b>教用户 1 和用户 3 第三门语言，需要教 2 名用户。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 500</code></li> \n <li><code>languages.length == m</code></li> \n <li><code>1 &lt;= m &lt;= 500</code></li> \n <li><code>1 &lt;= languages[i].length &lt;= n</code></li> \n <li><code>1 &lt;= languages[i][j] &lt;= n</code></li> \n <li><code>1 &lt;= u<sub>​​​​​​i</sub> &lt; v<sub>​​​​​​i</sub> &lt;= languages.length</code></li> \n <li><code>1 &lt;= friendships.length &lt;= 500</code></li> \n <li>所有的好友关系&nbsp;<code>(u<sub>​​​​​i, </sub>v<sub>​​​​​​i</sub>)</code>&nbsp;都是唯一的。</li> \n <li><code>languages[i]</code>&nbsp;中包含的值互不相同。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1734. 解码异或后的排列', '<p>给你一个整数数组&nbsp;<code>perm</code>&nbsp;，它是前&nbsp;<code>n</code>&nbsp;个正整数的排列，且&nbsp;<code>n</code>&nbsp;是个 <strong>奇数</strong>&nbsp;。</p> \n<p>它被加密成另一个长度为 <code>n - 1</code>&nbsp;的整数数组&nbsp;<code>encoded</code>&nbsp;，满足&nbsp;<code>encoded[i] = perm[i] XOR perm[i + 1]</code>&nbsp;。比方说，如果&nbsp;<code>perm = [1,3,2]</code>&nbsp;，那么&nbsp;<code>encoded = [2,1]</code>&nbsp;。</p> \n<p>给你&nbsp;<code>encoded</code>&nbsp;数组，请你返回原始数组&nbsp;<code>perm</code>&nbsp;。题目保证答案存在且唯一。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>encoded = [3,1]\n<b>输出：</b>[1,2,3]\n<b>解释：</b>如果 perm = [1,2,3] ，那么 encoded = [1 XOR 2,2 XOR 3] = [3,1]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>encoded = [6,5,4,6]\n<b>输出：</b>[2,4,1,5,3]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= n &lt;&nbsp;10<sup>5</sup></code></li> \n <li><code>n</code>&nbsp;是奇数。</li> \n <li><code>encoded.length == n - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1735. 生成乘积数组的方案数', '<p>给你一个二维整数数组&nbsp;<code>queries</code>&nbsp;，其中 <code>queries[i] = [n<sub>i</sub>, k<sub>i</sub>]</code> 。第&nbsp;<code>i</code>&nbsp;个查询&nbsp;<code>queries[i]</code> 要求构造长度为&nbsp;<code>n<sub>i</sub></code> 、每个元素都是正整数的数组，且满足所有元素的乘积为&nbsp;<code>k<sub>i</sub></code><sub>&nbsp;</sub>，请你找出有多少种可行的方案。由于答案可能会很大，方案数需要对 <code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong> 。</p> \n<p>请你返回一个整数数组<em>&nbsp;</em><code>answer</code>，满足<em>&nbsp;</em><code>answer.length == queries.length</code>&nbsp;，其中<em>&nbsp;</em><code>answer[i]</code>是第<em>&nbsp;</em><code>i</code>&nbsp;个查询的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>queries = [[2,6],[5,1],[73,660]]\n<b>输出：</b>[4,1,50734910]\n<b>解释：</b>每个查询之间彼此独立。\n[2,6]：总共有 4 种方案得到长度为 2 且乘积为 6 的数组：[1,6]，[2,3]，[3,2]，[6,1]。\n[5,1]：总共有 1 种方案得到长度为 5 且乘积为 1 的数组：[1,1,1,1,1]。\n[73,660]：总共有 1050734917 种方案得到长度为 73 且乘积为 660 的数组。1050734917 对 10<sup>9</sup> + 7 取余得到 50734910 。\n</pre> \n<p><strong>示例 2&nbsp;：</strong></p> \n<pre><b>输入：</b>queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]\n<b>输出：</b>[1,2,3,10,5]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= queries.length &lt;= 10<sup>4</sup> </code></li> \n <li><code>1 &lt;= n<sub>i</sub>, k<sub>i</sub> &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1736. 替换隐藏数字得到的最晚时间', '<p>给你一个字符串 <code>time</code> ，格式为 <code> hh:mm</code>（小时：分钟），其中某几位数字被隐藏（用 <code>?</code> 表示）。</p> \n<p>有效的时间为 <code>00:00</code> 到 <code>23:59</code> 之间的所有时间，包括 <code>00:00</code> 和 <code>23:59</code> 。</p> \n<p>替换&nbsp;<code>time</code> 中隐藏的数字，返回你可以得到的最晚有效时间。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>time = \"2?:?0\"\n<strong>输出：</strong>\"23:50\"\n<strong>解释：</strong>以数字 \'2\' 开头的最晚一小时是 23 ，以 \'0\' 结尾的最晚一分钟是 50 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>time = \"0?:3?\"\n<strong>输出：</strong>\"09:39\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>time = \"1?:22\"\n<strong>输出：</strong>\"19:22\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>time</code> 的格式为 <code>hh:mm</code></li> \n <li>题目数据保证你可以由输入的字符串生成有效的时间</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1737. 满足三条件之一需改变的最少字符数', '<p>给你两个字符串 <code>a</code> 和 <code>b</code> ，二者均由小写字母组成。一步操作中，你可以将 <code>a</code> 或 <code>b</code> 中的 <strong>任一字符</strong> 改变为 <strong>任一小写字母</strong> 。</p> \n<p>操作的最终目标是满足下列三个条件 <strong>之一</strong> ：</p> \n<ul> \n <li><code>a</code> 中的 <strong>每个字母</strong> 在字母表中 <strong>严格小于</strong> <code>b</code> 中的 <strong>每个字母</strong> 。</li> \n <li><code>b</code> 中的 <strong>每个字母</strong> 在字母表中 <strong>严格小于</strong> <code>a</code> 中的 <strong>每个字母</strong> 。</li> \n <li><code>a</code> 和 <code>b</code> <strong>都</strong> 由 <strong>同一个</strong> 字母组成。</li> \n</ul> \n<p>返回达成目标所需的 <strong>最少</strong> 操作数<em>。</em></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>a = \"aba\", b = \"caa\"\n<strong>输出：</strong>2\n<strong>解释：</strong>满足每个条件的最佳方案分别是：\n1) 将 b 变为 \"ccc\"，2 次操作，满足 a 中的每个字母都小于 b 中的每个字母；\n2) 将 a 变为 \"bbb\" 并将 b 变为 \"aaa\"，3 次操作，满足 b 中的每个字母都小于 a 中的每个字母；\n3) 将 a 变为 \"aaa\" 并将 b 变为 \"aaa\"，2 次操作，满足 a 和 b 由同一个字母组成。\n最佳的方案只需要 2 次操作（满足条件 1 或者条件 3）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>a = \"dabadd\", b = \"cda\"\n<strong>输出：</strong>3\n<strong>解释：</strong>满足条件 1 的最佳方案是将 b 变为 \"eee\" 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= a.length, b.length &lt;= 10<sup>5</sup></code></li> \n <li><code>a</code> 和 <code>b</code> 只由小写字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1738. 找出第 K 大的异或坐标值', '<p>给你一个二维矩阵 <code>matrix</code> 和一个整数 <code>k</code> ，矩阵大小为&nbsp;<code>m x n</code> 由非负整数组成。</p> \n<p>矩阵中坐标 <code>(a, b)</code> 的 <strong>值</strong> 可由对所有满足 <code>0 &lt;= i &lt;= a &lt; m</code> 且 <code>0 &lt;= j &lt;= b &lt; n</code> 的元素 <code>matrix[i][j]</code>（<strong>下标从 0 开始计数</strong>）执行异或运算得到。</p> \n<p>请你找出&nbsp;<code>matrix</code> 的所有坐标中第 <code>k</code> 大的值（<strong><code>k</code> 的值从 1 开始计数</strong>）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>matrix = [[5,2],[1,6]], k = 1\n<strong>输出：</strong>7\n<strong>解释：</strong>坐标 (0,1) 的值是 5 XOR 2 = 7 ，为最大的值。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>matrix = [[5,2],[1,6]], k = 2\n<strong>输出：</strong>5\n<strong>解释：</strong>坐标 (0,0) 的值是 5 = 5 ，为第 2 大的值。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>matrix = [[5,2],[1,6]], k = 3\n<strong>输出：</strong>4\n<strong>解释：</strong>坐标 (1,0) 的值是 5 XOR 1 = 4 ，为第 3 大的值。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>matrix = [[5,2],[1,6]], k = 4\n<strong>输出：</strong>0\n<strong>解释：</strong>坐标 (1,1) 的值是 5 XOR 2 XOR 1 XOR 6 = 0 ，为第 4 大的值。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 1000</code></li> \n <li><code>0 &lt;= matrix[i][j] &lt;= 10<sup>6</sup></code></li> \n <li><code>1 &lt;= k &lt;= m * n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1739. 放置盒子', '<p>有一个立方体房间，其长度、宽度和高度都等于 <code>n</code> 个单位。请你在房间里放置 <code>n</code> 个盒子，每个盒子都是一个单位边长的立方体。放置规则如下：</p> \n<ul> \n <li>你可以把盒子放在地板上的任何地方。</li> \n <li>如果盒子 <code>x</code> 需要放置在盒子 <code>y</code> 的顶部，那么盒子 <code>y</code> 竖直的四个侧面都 <strong>必须</strong> 与另一个盒子或墙相邻。</li> \n</ul> \n<p>给你一个整数 <code>n</code> ，返回接触地面的盒子的 <strong>最少</strong> 可能数量<em>。</em></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 135px; height: 143px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/24/3-boxes.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>上图是 3 个盒子的摆放位置。\n这些盒子放在房间的一角，对应左侧位置。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 135px; height: 179px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/24/4-boxes.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 4\n<strong>输出：</strong>3\n<strong>解释：</strong>上图是 3 个盒子的摆放位置。\n这些盒子放在房间的一角，对应左侧位置。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"width: 271px; height: 257px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/24/10-boxes.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>n = 10\n<strong>输出：</strong>6\n<strong>解释：</strong>上图是 10 个盒子的摆放位置。\n这些盒子放在房间的一角，对应后方位置。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('174. 地下城游戏', '<p>一些恶魔抓住了公主（<strong>P</strong>）并将她关在了地下城的右下角。地下城是由&nbsp;M x N 个房间组成的二维网格。我们英勇的骑士（<strong>K</strong>）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。</p> \n<p>骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。</p> \n<p>有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为<em>负整数</em>，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 <em>0</em>），要么包含增加骑士健康点数的魔法球（若房间里的值为<em>正整数</em>，则表示骑士将增加健康点数）。</p> \n<p>为了尽快到达公主，骑士决定每次只向右或向下移动一步。</p> \n<p>&nbsp;</p> \n<p><strong>编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。</strong></p> \n<p>例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 <code>右 -&gt; 右 -&gt; 下 -&gt; 下</code>，则骑士的初始健康点数至少为 <strong>7</strong>。</p> \n<table class=\"dungeon\"> \n <tbody>\n  <tr> \n   <td>-2 (K)</td> \n   <td>-3</td> \n   <td>3</td> \n  </tr> \n  <tr> \n   <td>-5</td> \n   <td>-10</td> \n   <td>1</td> \n  </tr> \n  <tr> \n   <td>10</td> \n   <td>30</td> \n   <td>-5 (P)</td> \n  </tr> \n </tbody>\n</table> \n<p>&nbsp;</p> \n<p><strong>说明:</strong></p> \n<ul> \n <li> <p>骑士的健康点数没有上限。</p> </li> \n <li>任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1742. 盒子中小球的最大数量', '<p>你在一家生产小球的玩具厂工作，有 <code>n</code> 个小球，编号从 <code>lowLimit</code> 开始，到 <code>highLimit</code> 结束（包括 <code>lowLimit</code> 和&nbsp;<code>highLimit</code> ，即&nbsp;<code>n == highLimit - lowLimit + 1</code>）。另有无限数量的盒子，编号从 <code>1</code> 到 <code>infinity</code> 。</p> \n<p>你的工作是将每个小球放入盒子中，其中盒子的编号应当等于小球编号上每位数字的和。例如，编号 <code>321</code> 的小球应当放入编号 <code>3 + 2 + 1 = 6</code> 的盒子，而编号 <code>10</code> 的小球应当放入编号 <code>1 + 0 = 1</code> 的盒子。</p> \n<p>给你两个整数 <code>lowLimit</code> 和 <code>highLimit</code> ，返回放有最多小球的盒子中的小球数量<em>。</em>如果有多个盒子都满足放有最多小球，只需返回其中任一盒子的小球数量。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>lowLimit = 1, highLimit = 10\n<strong>输出：</strong>2\n<strong>解释：</strong>\n盒子编号：1 2 3 4 5 6 7 8 9 10 11 ...\n小球数量：2 1 1 1 1 1 1 1 1 0  0  ...\n编号 1 的盒子放有最多小球，小球数量为 2 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>lowLimit = 5, highLimit = 15\n<strong>输出：</strong>2\n<strong>解释：</strong>\n盒子编号：1 2 3 4 5 6 7 8 9 10 11 ...\n小球数量：1 1 1 1 2 2 1 1 1 0  0  ...\n编号 5 和 6 的盒子放有最多小球，每个盒子中的小球数量都是 2 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>lowLimit = 19, highLimit = 28\n<strong>输出：</strong>2\n<strong>解释：</strong>\n盒子编号：1 2 3 4 5 6 7 8 9 10 11 12 ...\n小球数量：0 1 1 1 1 1 1 1 1 2  0  0  ...\n编号 10 的盒子放有最多小球，小球数量为 2 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= lowLimit &lt;= highLimit &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1743. 从相邻元素对还原数组', '<p>存在一个由 <code>n</code> 个不同元素组成的整数数组 <code>nums</code> ，但你已经记不清具体内容。好在你还记得 <code>nums</code> 中的每一对相邻元素。</p> \n<p>给你一个二维整数数组 <code>adjacentPairs</code> ，大小为 <code>n - 1</code> ，其中每个 <code>adjacentPairs[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> 表示元素 <code>u<sub>i</sub></code> 和 <code>v<sub>i</sub></code> 在 <code>nums</code> 中相邻。</p> \n<p>题目数据保证所有由元素 <code>nums[i]</code> 和 <code>nums[i+1]</code> 组成的相邻元素对都存在于 <code>adjacentPairs</code> 中，存在形式可能是 <code>[nums[i], nums[i+1]]</code> ，也可能是 <code>[nums[i+1], nums[i]]</code> 。这些相邻元素对可以 <strong>按任意顺序</strong> 出现。</p> \n<p>返回 <strong>原始数组</strong><em> </em><code>nums</code><em> </em>。如果存在多种解答，返回 <strong>其中任意一个</strong> 即可。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>adjacentPairs = [[2,1],[3,4],[3,2]]\n<strong>输出：</strong>[1,2,3,4]\n<strong>解释：</strong>数组的所有相邻元素对都在 adjacentPairs 中。\n特别要注意的是，adjacentPairs[i] 只表示两个元素相邻，并不保证其 左-右 顺序。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>adjacentPairs = [[4,-2],[1,4],[-3,1]]\n<strong>输出：</strong>[-2,4,1,-3]\n<strong>解释：</strong>数组中可能存在负数。\n另一种解答是 [-3,1,4,-2] ，也会被视作正确答案。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>adjacentPairs = [[100000,-100000]]\n<strong>输出：</strong>[100000,-100000]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>nums.length == n</code></li> \n <li><code>adjacentPairs.length == n - 1</code></li> \n <li><code>adjacentPairs[i].length == 2</code></li> \n <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>-10<sup>5</sup> &lt;= nums[i], u<sub>i</sub>, v<sub>i</sub> &lt;= 10<sup>5</sup></code></li> \n <li>题目数据保证存在一些以&nbsp;<code>adjacentPairs</code> 作为元素对的数组 <code>nums</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1744. 你能在你最喜欢的那天吃到你最喜欢的糖果吗？', '<p>给你一个下标从 <strong>0</strong> 开始的正整数数组&nbsp;<code>candiesCount</code>&nbsp;，其中&nbsp;<code>candiesCount[i]</code>&nbsp;表示你拥有的第&nbsp;<code>i</code>&nbsp;类糖果的数目。同时给你一个二维数组&nbsp;<code>queries</code>&nbsp;，其中&nbsp;<code>queries[i] = [favoriteType<sub>i</sub>, favoriteDay<sub>i</sub>, dailyCap<sub>i</sub>]</code>&nbsp;。</p> \n<p>你按照如下规则进行一场游戏：</p> \n<ul> \n <li>你从第&nbsp;<code><strong>0</strong></code><strong>&nbsp;</strong>天开始吃糖果。</li> \n <li>你在吃完 <strong>所有</strong>&nbsp;第 <code>i - 1</code>&nbsp;类糖果之前，<strong>不能</strong>&nbsp;吃任何一颗第 <code>i</code>&nbsp;类糖果。</li> \n <li>在吃完所有糖果之前，你必须每天 <strong>至少</strong>&nbsp;吃 <strong>一颗</strong>&nbsp;糖果。</li> \n</ul> \n<p>请你构建一个布尔型数组&nbsp;<code>answer</code>&nbsp;，用以给出 <code>queries</code> 中每一项的对应答案。此数组满足：</p> \n<ul> \n <li><code>answer.length == queries.length</code> 。<code>answer[i]</code> 是 <code>queries[i]</code> 的答案。</li> \n <li><code>answer[i]</code> 为&nbsp;<code>true</code>&nbsp;的条件是：在每天吃 <strong>不超过</strong> <code>dailyCap<sub>i</sub></code><sub>&nbsp;</sub>颗糖果的前提下，你可以在第&nbsp;<code>favoriteDay<sub>i</sub></code>&nbsp;天吃到第&nbsp;<code>favoriteType<sub>i</sub></code>&nbsp;类糖果；否则 <code>answer[i]</code>&nbsp;为 <code>false</code>&nbsp;。</li> \n</ul> \n<p>注意，只要满足上面 3 条规则中的第二条规则，你就可以在同一天吃不同类型的糖果。</p> \n<p>请你返回得到的数组<em>&nbsp;</em><code>answer</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]\n<b>输出：</b>[true,false,true]\n<strong>提示：</strong>\n1- 在第 0 天吃 2 颗糖果(类型 0），第 1 天吃 2 颗糖果（类型 0），第 2 天你可以吃到类型 0 的糖果。\n2- 每天你最多吃 4 颗糖果。即使第 0 天吃 4 颗糖果（类型 0），第 1 天吃 4 颗糖果（类型 0 和类型 1），你也没办法在第 2 天吃到类型 4 的糖果。换言之，你没法在每天吃 4 颗糖果的限制下在第 2 天吃到第 4 类糖果。\n3- 如果你每天吃 1 颗糖果，你可以在第 13 天吃到类型 2 的糖果。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]\n<b>输出：</b>[false,true,true,false,false]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= candiesCount.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= candiesCount[i] &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li> \n <li><code>queries[i].length == 3</code></li> \n <li><code>0 &lt;= favoriteType<sub>i</sub> &lt; candiesCount.length</code></li> \n <li><code>0 &lt;= favoriteDay<sub>i</sub> &lt;= 10<sup>9</sup></code></li> \n <li><code>1 &lt;= dailyCap<sub>i</sub> &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1745. 回文串分割 IV', '<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，如果可以将它分割成三个&nbsp;<strong>非空</strong>&nbsp;回文子字符串，那么返回&nbsp;<code>true</code>&nbsp;，否则返回&nbsp;<code>false</code>&nbsp;。</p> \n<p>当一个字符串正着读和反着读是一模一样的，就称其为 <strong>回文字符串</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"abcbdd\"\n<b>输出：</b>true\n<strong>解释：</strong>\"abcbdd\" = \"a\" + \"bcb\" + \"dd\"，三个子字符串都是回文的。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"bcbddxy\"\n<b>输出：</b>false\n<strong>解释：</strong>s 没办法被分割成 3 个回文子字符串。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= s.length &lt;= 2000</code></li> \n <li><code>s</code>​​​​​​ 只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1748. 唯一元素的和', '<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;。数组中唯一元素是那些只出现&nbsp;<strong>恰好一次</strong>&nbsp;的元素。</p> \n<p>请你返回 <code>nums</code>&nbsp;中唯一元素的 <strong>和</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [1,2,3,2]\n<b>输出：</b>4\n<b>解释：</b>唯一元素为 [1,3] ，和为 4 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [1,1,1,1,1]\n<b>输出：</b>0\n<b>解释：</b>没有唯一元素，和为 0 。\n</pre> \n<p><strong>示例 3 ：</strong></p> \n<pre><b>输入：</b>nums = [1,2,3,4,5]\n<b>输出：</b>15\n<b>解释：</b>唯一元素为 [1,2,3,4,5] ，和为 15 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 100</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1749. 任意子数组和的绝对值的最大值', '<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;。一个子数组&nbsp;<code>[nums<sub>l</sub>, nums<sub>l+1</sub>, ..., nums<sub>r-1</sub>, nums<sub>r</sub>]</code>&nbsp;的 <strong>和的绝对值</strong>&nbsp;为&nbsp;<code>abs(nums<sub>l</sub> + nums<sub>l+1</sub> + ... + nums<sub>r-1</sub> + nums<sub>r</sub>)</code>&nbsp;。</p> \n<p>请你找出 <code>nums</code>&nbsp;中 <strong>和的绝对值</strong> 最大的任意子数组（<b>可能为空</b>），并返回该 <strong>最大值</strong>&nbsp;。</p> \n<p><code>abs(x)</code>&nbsp;定义如下：</p> \n<ul> \n <li>如果&nbsp;<code>x</code>&nbsp;是负整数，那么&nbsp;<code>abs(x) = -x</code>&nbsp;。</li> \n <li>如果&nbsp;<code>x</code>&nbsp;是非负整数，那么&nbsp;<code>abs(x) = x</code>&nbsp;。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [1,-3,2,3,-4]\n<b>输出：</b>5\n<b>解释：</b>子数组 [2,3] 和的绝对值最大，为 abs(2+3) = abs(5) = 5 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [2,-5,1,-4,3,-2]\n<b>输出：</b>8\n<b>解释：</b>子数组 [-5,1,-4] 和的绝对值最大，为 abs(-5+1-4) = abs(-8) = 8 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('175. 组合两个表', '<p>表1: <code>Person</code></p> \n<pre>+-------------+---------+\n| 列名         | 类型     |\n+-------------+---------+\n| PersonId    | int     |\n| FirstName   | varchar |\n| LastName    | varchar |\n+-------------+---------+\nPersonId 是上表主键\n</pre> \n<p>表2: <code>Address</code></p> \n<pre>+-------------+---------+\n| 列名         | 类型    |\n+-------------+---------+\n| AddressId   | int     |\n| PersonId    | int     |\n| City        | varchar |\n| State       | varchar |\n+-------------+---------+\nAddressId 是上表主键\n</pre> \n<p>&nbsp;</p> \n<p>编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供&nbsp;person 的以下信息：</p> \n<p>&nbsp;</p> \n<pre>FirstName, LastName, City, State\n</pre>');
INSERT INTO `leecode` VALUES ('1750. 删除字符串两端相同字符后的最短长度', '<p>给你一个只包含字符 <code>\'a\'</code>，<code>\'b\'</code>&nbsp;和 <code>\'c\'</code>&nbsp;的字符串&nbsp;<code>s</code>&nbsp;，你可以执行下面这个操作（5 个步骤）任意次：</p> \n<ol> \n <li>选择字符串 <code>s</code>&nbsp;一个 <strong>非空</strong> 的前缀，这个前缀的所有字符都相同。</li> \n <li>选择字符串 <code>s</code>&nbsp;一个 <strong>非空</strong> 的后缀，这个后缀的所有字符都相同。</li> \n <li>前缀和后缀在字符串中任意位置都不能有交集。</li> \n <li>前缀和后缀包含的所有字符都要相同。</li> \n <li>同时删除前缀和后缀。</li> \n</ol> \n<p>请你返回对字符串 <code>s</code>&nbsp;执行上面操作任意次以后（可能 0 次），能得到的 <strong>最短长度</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"ca\"\n<b>输出：</b>2\n<strong>解释：</strong>你没法删除任何一个字符，所以字符串长度仍然保持不变。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"cabaabac\"\n<b>输出：</b>0\n<b>解释：</b>最优操作序列为：\n- 选择前缀 \"c\" 和后缀 \"c\" 并删除它们，得到 s = \"abaaba\" 。\n- 选择前缀 \"a\" 和后缀 \"a\" 并删除它们，得到 s = \"baab\" 。\n- 选择前缀 \"b\" 和后缀 \"b\" 并删除它们，得到 s = \"aa\" 。\n- 选择前缀 \"a\" 和后缀 \"a\" 并删除它们，得到 s = \"\" 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>s = \"aabccabba\"\n<b>输出：</b>3\n<b>解释：</b>最优操作序列为：\n- 选择前缀 \"aa\" 和后缀 \"a\" 并删除它们，得到 s = \"bccabb\" 。\n- 选择前缀 \"b\" 和后缀 \"bb\" 并删除它们，得到 s = \"cca\" 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s</code>&nbsp;只包含字符&nbsp;<code>\'a\'</code>，<code>\'b\'</code>&nbsp;和&nbsp;<code>\'c\'</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1751. 最多可以参加的会议数目 II', '<p>给你一个&nbsp;<code>events</code>&nbsp;数组，其中&nbsp;<code>events[i] = [startDay<sub>i</sub>, endDay<sub>i</sub>, value<sub>i</sub>]</code>&nbsp;，表示第&nbsp;<code>i</code>&nbsp;个会议在&nbsp;<code>startDay<sub>i</sub></code><sub>&nbsp;</sub>天开始，第&nbsp;<code>endDay<sub>i</sub></code>&nbsp;天结束，如果你参加这个会议，你能得到价值&nbsp;<code>value<sub>i</sub></code>&nbsp;。同时给你一个整数&nbsp;<code>k</code>&nbsp;表示你能参加的最多会议数目。</p> \n<p>你同一时间只能参加一个会议。如果你选择参加某个会议，那么你必须 <strong>完整</strong>&nbsp;地参加完这个会议。会议结束日期是包含在会议内的，也就是说你不能同时参加一个开始日期与另一个结束日期相同的两个会议。</p> \n<p>请你返回能得到的会议价值&nbsp;<strong>最大和</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 400px; height: 103px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/02/06/screenshot-2021-01-11-at-60048-pm.png\" alt=\"\"></p> \n<pre><b>输入：</b>events = [[1,2,4],[3,4,3],[2,3,1]], k = 2\n<b>输出：</b>7\n<strong>解释：</strong>选择绿色的活动会议 0 和 1，得到总价值和为 4 + 3 = 7 。</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 400px; height: 103px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/02/06/screenshot-2021-01-11-at-60150-pm.png\" alt=\"\"></p> \n<pre><b>输入：</b>events = [[1,2,4],[3,4,3],[2,3,10]], k = 2\n<b>输出：</b>10\n<b>解释：</b>参加会议 2 ，得到价值和为 10 。\n你没法再参加别的会议了，因为跟会议 2 有重叠。你 <strong>不</strong>&nbsp;需要参加满 k 个会议。</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"width: 400px; height: 126px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/02/06/screenshot-2021-01-11-at-60703-pm.png\" alt=\"\"></strong></p> \n<pre><b>输入：</b>events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3\n<b>输出：</b>9\n<b>解释：</b>尽管会议互不重叠，你只能参加 3 个会议，所以选择价值最大的 3 个会议。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= events.length</code></li> \n <li><code>1 &lt;= k * events.length &lt;= 10<sup>6</sup></code></li> \n <li><code>1 &lt;= startDay<sub>i</sub> &lt;= endDay<sub>i</sub> &lt;= 10<sup>9</sup></code></li> \n <li><code>1 &lt;= value<sub>i</sub> &lt;= 10<sup>6</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1752. 检查数组是否经排序和轮转得到', '<p>给你一个数组 <code>nums</code> 。<code>nums</code> 的源数组中，所有元素与 <code>nums</code> 相同，但按非递减顺序排列。</p> \n<p>如果&nbsp;<code>nums</code> 能够由源数组轮转若干位置（包括 0 个位置）得到，则返回 <code>true</code><em> </em>；否则，返回 <code>false</code> 。</p> \n<p>源数组中可能存在 <strong>重复项</strong> 。</p> \n<p><strong>注意：</strong>我们称数组 <code>A</code> 在轮转 <code>x</code> 个位置后得到长度相同的数组 <code>B</code> ，当它们满足 <code>A[i] == B[(i+x) % A.length]</code> ，其中 <code>%</code> 为取余运算。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [3,4,5,1,2]\n<strong>输出：</strong>true\n<strong>解释：</strong>[1,2,3,4,5] 为有序的源数组。\n可以轮转 x = 3 个位置，使新数组从值为 3 的元素开始：[3,4,5,1,2] 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [2,1,3,4]\n<strong>输出：</strong>false\n<strong>解释：</strong>源数组无法经轮转得到 nums 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3]\n<strong>输出：</strong>true\n<strong>解释：</strong>[1,2,3] 为有序的源数组。\n可以轮转 x = 0 个位置（即不轮转）得到 nums 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,1]\n<strong>输出：</strong>true\n<strong>解释：</strong>[1,1,1] 为有序的源数组。\n轮转任意个位置都可以得到 nums 。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>nums = [2,1]\n<strong>输出：</strong>true\n<strong>解释：</strong>[1,2] 为有序的源数组。\n可以轮转 x = 5 个位置，使新数组从值为 2 的元素开始：[2,1] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 100</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1753. 移除石子的最大得分', '<p>你正在玩一个单人游戏，面前放置着大小分别为 <code>a</code>​​​​​​、<code>b</code> 和 <code>c</code>​​​​​​ 的 <strong>三堆</strong> 石子。</p> \n<p>每回合你都要从两个 <strong>不同的非空堆</strong> 中取出一颗石子，并在得分上加 <code>1</code> 分。当存在 <strong>两个或更多</strong> 的空堆时，游戏停止。</p> \n<p>给你三个整数 <code>a</code> 、<code>b</code> 和 <code>c</code> ，返回可以得到的 <strong>最大分数</strong> 。</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>a = 2, b = 4, c = 6\n<strong>输出：</strong>6\n<strong>解释：</strong>石子起始状态是 (2, 4, 6) ，最优的一组操作是：\n- 从第一和第三堆取，石子状态现在是 (1, 4, 5)\n- 从第一和第三堆取，石子状态现在是 (0, 4, 4)\n- 从第二和第三堆取，石子状态现在是 (0, 3, 3)\n- 从第二和第三堆取，石子状态现在是 (0, 2, 2)\n- 从第二和第三堆取，石子状态现在是 (0, 1, 1)\n- 从第二和第三堆取，石子状态现在是 (0, 0, 0)\n总分：6 分 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>a = 4, b = 4, c = 6\n<strong>输出：</strong>7\n<strong>解释：</strong>石子起始状态是 (4, 4, 6) ，最优的一组操作是：\n- 从第一和第二堆取，石子状态现在是 (3, 3, 6)\n- 从第一和第三堆取，石子状态现在是 (2, 3, 5)\n- 从第一和第三堆取，石子状态现在是 (1, 3, 4)\n- 从第一和第三堆取，石子状态现在是 (0, 3, 3)\n- 从第二和第三堆取，石子状态现在是 (0, 2, 2)\n- 从第二和第三堆取，石子状态现在是 (0, 1, 1)\n- 从第二和第三堆取，石子状态现在是 (0, 0, 0)\n总分：7 分 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>a = 1, b = 8, c = 8\n<strong>输出：</strong>8\n<strong>解释：</strong>最优的一组操作是连续从第二和第三堆取 8 回合，直到将它们取空。\n注意，由于第二和第三堆已经空了，游戏结束，不能继续从第一堆中取石子。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= a, b, c &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1754. 构造字典序最大的合并字符串', '<p>给你两个字符串 <code>word1</code> 和 <code>word2</code> 。你需要按下述方式构造一个新字符串 <code>merge</code> ：如果 <code>word1</code> 或 <code>word2</code> 非空，选择 <strong>下面选项之一</strong> 继续操作：</p> \n<ul> \n <li>如果 <code>word1</code> 非空，将 <code>word1</code> 中的第一个字符附加到 <code>merge</code> 的末尾，并将其从 <code>word1</code> 中移除。 \n  <ul> \n   <li>例如，<code>word1 = \"abc\" </code>且 <code>merge = \"dv\"</code> ，在执行此选项操作之后，<code>word1 = \"bc\"</code> ，同时 <code>merge = \"dva\"</code> 。</li> \n  </ul> </li> \n <li>如果 <code>word2</code> 非空，将 <code>word2</code> 中的第一个字符附加到 <code>merge</code> 的末尾，并将其从 <code>word2</code> 中移除。 \n  <ul> \n   <li>例如，<code>word2 = \"abc\" </code>且 <code>merge = \"\"</code> ，在执行此选项操作之后，<code>word2 = \"bc\"</code> ，同时 <code>merge = \"a\"</code> 。</li> \n  </ul> </li> \n</ul> \n<p>返回你可以构造的字典序 <strong>最大</strong> 的合并字符串<em> </em><code>merge</code><em> 。</em></p> \n<p>长度相同的两个字符串 <code>a</code> 和 <code>b</code> 比较字典序大小，如果在 <code>a</code> 和 <code>b</code> 出现不同的第一个位置，<code>a</code> 中字符在字母表中的出现顺序位于 <code>b</code> 中相应字符之后，就认为字符串 <code>a</code> 按字典序比字符串 <code>b</code> 更大。例如，<code>\"abcd\"</code> 按字典序比 <code>\"abcc\"</code> 更大，因为两个字符串出现不同的第一个位置是第四个字符，而 <code>d</code> 在字母表中的出现顺序位于 <code>c</code> 之后。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>word1 = \"cabaa\", word2 = \"bcaaa\"\n<strong>输出：</strong>\"cbcabaaaaa\"\n<strong>解释：</strong>构造字典序最大的合并字符串，可行的一种方法如下所示：\n- 从 word1 中取第一个字符：merge = \"c\"，word1 = \"abaa\"，word2 = \"bcaaa\"\n- 从 word2 中取第一个字符：merge = \"cb\"，word1 = \"abaa\"，word2 = \"caaa\"\n- 从 word2 中取第一个字符：merge = \"cbc\"，word1 = \"abaa\"，word2 = \"aaa\"\n- 从 word1 中取第一个字符：merge = \"cbca\"，word1 = \"baa\"，word2 = \"aaa\"\n- 从 word1 中取第一个字符：merge = \"cbcab\"，word1 = \"aa\"，word2 = \"aaa\"\n- 将 word1 和 word2 中剩下的 5 个 a 附加到 merge 的末尾。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>word1 = \"abcabc\", word2 = \"abdcaba\"\n<strong>输出：</strong>\"abdcabcabcaba\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= word1.length, word2.length &lt;= 3000</code></li> \n <li><code>word1</code> 和 <code>word2</code> 仅由小写英文组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1755. 最接近目标值的子序列和', '<p>给你一个整数数组 <code>nums</code> 和一个目标值 <code>goal</code> 。</p> \n<p>你需要从 <code>nums</code> 中选出一个子序列，使子序列元素总和最接近 <code>goal</code> 。也就是说，如果子序列元素和为 <code>sum</code> ，你需要 <strong>最小化绝对差</strong> <code>abs(sum - goal)</code> 。</p> \n<p>返回 <code>abs(sum - goal)</code> 可能的 <strong>最小值</strong> 。</p> \n<p>注意，数组的子序列是通过移除原始数组中的某些元素（可能全部或无）而形成的数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [5,-7,3,5], goal = 6\n<strong>输出：</strong>0\n<strong>解释：</strong>选择整个数组作为选出的子序列，元素和为 6 。\n子序列和与目标值相等，所以绝对差为 0 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [7,-9,15,-2], goal = -5\n<strong>输出：</strong>1\n<strong>解释：</strong>选出子序列 [7,-9,-2] ，元素和为 -4 。\n绝对差为 abs(-4 - (-5)) = abs(1) = 1 ，是可能的最小值。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3], goal = -7\n<strong>输出：</strong>7\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 40</code></li> \n <li><code>-10<sup>7</sup> &lt;= nums[i] &lt;= 10<sup>7</sup></code></li> \n <li><code>-10<sup>9</sup> &lt;= goal &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1758. 生成交替二进制字符串的最少操作数', '<p>给你一个仅由字符 <code>\'0\'</code> 和 <code>\'1\'</code> 组成的字符串 <code>s</code> 。一步操作中，你可以将任一 <code>\'0\'</code> 变成 <code>\'1\'</code> ，或者将 <code>\'1\'</code> 变成 <code>\'0\'</code> 。</p> \n<p><strong>交替字符串</strong> 定义为：如果字符串中不存在相邻两个字符相等的情况，那么该字符串就是交替字符串。例如，字符串 <code>\"010\"</code> 是交替字符串，而字符串 <code>\"0100\"</code> 不是。</p> \n<p>返回使 <code>s</code> 变成 <strong>交替字符串</strong> 所需的 <strong>最少</strong> 操作数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"0100\"\n<strong>输出：</strong>1\n<strong>解释：</strong>如果将最后一个字符变为 \'1\' ，s 就变成 \"0101\" ，即符合交替字符串定义。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"10\"\n<strong>输出：</strong>0\n<strong>解释：</strong>s 已经是交替字符串。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"1111\"\n<strong>输出：</strong>2\n<strong>解释：</strong>需要 2 步操作得到 \"0101\" 或 \"1010\" 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> \n <li><code>s[i]</code> 是 <code>\'0\'</code> 或 <code>\'1\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1759. 统计同构子字符串的数目', '<p>给你一个字符串 <code>s</code> ，返回<em> </em><code>s</code><em> </em>中 <strong>同构子字符串</strong> 的数目。由于答案可能很大，只需返回对 <code>10<sup>9</sup> + 7</code> <strong>取余 </strong>后的结果。</p> \n<p><strong>同构字符串</strong> 的定义为：如果一个字符串中的所有字符都相同，那么该字符串就是同构字符串。</p> \n<p><strong>子字符串</strong> 是字符串中的一个连续字符序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"abbcccaa\"\n<strong>输出：</strong>13\n<strong>解释：</strong>同构子字符串如下所列：\n\"a\"   出现 3 次。\n\"aa\"  出现 1 次。\n\"b\"   出现 2 次。\n\"bb\"  出现 1 次。\n\"c\"   出现 3 次。\n\"cc\"  出现 2 次。\n\"ccc\" 出现 1 次。\n3 + 1 + 2 + 1 + 3 + 2 + 1 = 13</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"xy\"\n<strong>输出：</strong>2\n<strong>解释：</strong>同构子字符串是 \"x\" 和 \"y\" 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"zzzzz\"\n<strong>输出：</strong>15\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s</code> 由小写字符串组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('176. 第二高的薪水', '<p>编写一个 SQL 查询，获取 <code>Employee</code>&nbsp;表中第二高的薪水（Salary）&nbsp;。</p> \n<pre>+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\n</pre> \n<p>例如上述&nbsp;<code>Employee</code>&nbsp;表，SQL查询应该返回&nbsp;<code>200</code> 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 <code>null</code>。</p> \n<pre>+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+\n</pre>');
INSERT INTO `leecode` VALUES ('1760. 袋子里最少数目的球', '<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;，其中&nbsp;<code>nums[i]</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;个袋子里球的数目。同时给你一个整数&nbsp;<code>maxOperations</code>&nbsp;。</p> \n<p>你可以进行如下操作至多&nbsp;<code>maxOperations</code>&nbsp;次：</p> \n<ul> \n <li>选择任意一个袋子，并将袋子里的球分到&nbsp;2 个新的袋子中，每个袋子里都有 <strong>正整数</strong>&nbsp;个球。 \n  <ul> \n   <li>比方说，一个袋子里有&nbsp;<code>5</code>&nbsp;个球，你可以把它们分到两个新袋子里，分别有 <code>1</code>&nbsp;个和 <code>4</code>&nbsp;个球，或者分别有 <code>2</code>&nbsp;个和 <code>3</code>&nbsp;个球。</li> \n  </ul> </li> \n</ul> \n<p>你的开销是单个袋子里球数目的 <strong>最大值</strong>&nbsp;，你想要 <strong>最小化</strong>&nbsp;开销。</p> \n<p>请你返回进行上述操作后的最小开销。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [9], maxOperations = 2\n<b>输出：</b>3\n<b>解释：</b>\n- 将装有 9 个球的袋子分成装有 6 个和 3 个球的袋子。[<strong>9</strong>] -&gt; [6,3] 。\n- 将装有 6 个球的袋子分成装有 3 个和 3 个球的袋子。[<strong>6</strong>,3] -&gt; [3,3,3] 。\n装有最多球的袋子里装有 3 个球，所以开销为 3 并返回 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [2,4,8,2], maxOperations = 4\n<b>输出：</b>2\n<strong>解释：</strong>\n- 将装有 8 个球的袋子分成装有 4 个和 4 个球的袋子。[2,4,<strong>8</strong>,2] -&gt; [2,4,4,4,2] 。\n- 将装有 4 个球的袋子分成装有 2 个和 2 个球的袋子。[2,<strong>4</strong>,4,4,2] -&gt; [2,2,2,4,4,2] 。\n- 将装有 4 个球的袋子分成装有 2 个和 2 个球的袋子。[2,2,2,<strong>4</strong>,4,2] -&gt; [2,2,2,2,2,4,2] 。\n- 将装有 4 个球的袋子分成装有 2 个和 2 个球的袋子。[2,2,2,2,2,<strong>4</strong>,2] -&gt; [2,2,2,2,2,2,2,2] 。\n装有最多球的袋子里装有 2 个球，所以开销为 2 并返回 2 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [7,17], maxOperations = 2\n<b>输出：</b>7\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= maxOperations, nums[i] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1761. 一个图中连通三元组的最小度数', '<p>给你一个无向图，整数 <code>n</code>&nbsp;表示图中节点的数目，<code>edges</code>&nbsp;数组表示图中的边，其中&nbsp;<code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code>&nbsp;，表示&nbsp;<code>u<sub>i</sub></code> 和&nbsp;<code>v<sub>i</sub></code><sub>&nbsp;</sub>之间有一条无向边。</p> \n<p>一个 <strong>连通三元组</strong>&nbsp;指的是 <strong>三个</strong>&nbsp;节点组成的集合且这三个点之间 <strong>两两</strong>&nbsp;有边。</p> \n<p><strong>连通三元组的度数</strong>&nbsp;是所有满足此条件的边的数目：一个顶点在这个三元组内，而另一个顶点不在这个三元组内。</p> \n<p>请你返回所有连通三元组中度数的 <strong>最小值</strong>&nbsp;，如果图中没有连通三元组，那么返回 <code>-1</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 388px; height: 164px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/02/14/trios1.png\" alt=\"\"> \n<pre><b>输入：</b>n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]\n<b>输出：</b>3\n<b>解释：</b>只有一个三元组 [1,2,3] 。构成度数的边在上图中已被加粗。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 388px; height: 164px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/02/14/trios2.png\" alt=\"\"> \n<pre><b>输入：</b>n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]\n<b>输出：</b>0\n<b>解释：</b>有 3 个三元组：\n1) [1,4,3]，度数为 0 。\n2) [2,5,6]，度数为 2 。\n3) [5,6,7]，度数为 2 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 400</code></li> \n <li><code>edges[i].length == 2</code></li> \n <li><code>1 &lt;= edges.length &lt;= n * (n-1) / 2</code></li> \n <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> \n <li><code>u<sub>i </sub>!= v<sub>i</sub></code></li> \n <li>图中没有重复的边。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1763. 最长的美好子字符串', '<p>当一个字符串 <code>s</code>&nbsp;包含的每一种字母的大写和小写形式 <strong>同时</strong>&nbsp;出现在 <code>s</code>&nbsp;中，就称这个字符串&nbsp;<code>s</code>&nbsp;是 <strong>美好</strong> 字符串。比方说，<code>\"abABB\"</code>&nbsp;是美好字符串，因为&nbsp;<code>\'A\'</code> 和&nbsp;<code>\'a\'</code>&nbsp;同时出现了，且&nbsp;<code>\'B\'</code> 和&nbsp;<code>\'b\'</code>&nbsp;也同时出现了。然而，<code>\"abA\"</code>&nbsp;不是美好字符串因为&nbsp;<code>\'b\'</code>&nbsp;出现了，而&nbsp;<code>\'B\'</code>&nbsp;没有出现。</p> \n<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，请你返回&nbsp;<code>s</code>&nbsp;最长的&nbsp;<strong>美好子字符串</strong>&nbsp;。如果有多个答案，请你返回&nbsp;<strong>最早</strong>&nbsp;出现的一个。如果不存在美好子字符串，请你返回一个空字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"YazaAay\"\n<b>输出：</b>\"aAa\"\n<strong>解释：</strong>\"aAa\" 是一个美好字符串，因为这个子串中仅含一种字母，其小写形式 \'a\' 和大写形式 \'A\' 也同时出现了。\n\"aAa\" 是最长的美好子字符串。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"Bb\"\n<b>输出：</b>\"Bb\"\n<b>解释：</b>\"Bb\" 是美好字符串，因为 \'B\' 和 \'b\' 都出现了。整个字符串也是原字符串的子字符串。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>s = \"c\"\n<b>输出：</b>\"\"\n<b>解释：</b>没有美好子字符串。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>s = \"dDzeE\"\n<b>输出：</b>\"dD\"\n<strong>解释：</strong>\"dD\" 和 \"eE\" 都是最长美好子字符串。\n由于有多个美好子字符串，返回 \"dD\" ，因为它出现得最早。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 100</code></li> \n <li><code>s</code>&nbsp;只包含大写和小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1764. 通过连接另一个数组的子数组得到一个数组', '<p>给你一个长度为 <code>n</code>&nbsp;的二维整数数组&nbsp;<code>groups</code>&nbsp;，同时给你一个整数数组&nbsp;<code>nums</code>&nbsp;。</p> \n<p>你是否可以从 <code>nums</code>&nbsp;中选出 <code>n</code>&nbsp;个 <strong>不相交</strong> 的子数组，使得第 <code>i</code>&nbsp;个子数组与 <code>groups[i]</code>&nbsp;（下标从 <strong>0</strong>&nbsp;开始）完全相同，且如果&nbsp;<code>i &gt; 0</code>&nbsp;，那么第&nbsp;<code>(i-1)</code>&nbsp;个子数组在 <code>nums</code>&nbsp;中出现的位置在第 <code>i</code>&nbsp;个子数组前面。（也就是说，这些子数组在 <code>nums</code>&nbsp;中出现的顺序需要与 <code>groups</code> 顺序相同）</p> \n<p>如果你可以找出这样的 <code>n</code> 个子数组，请你返回&nbsp;<code>true</code> ，否则返回&nbsp;<code>false</code>&nbsp;。</p> \n<p>如果不存在下标为 <code>k</code>&nbsp;的元素 <code>nums[k]</code>&nbsp;属于不止一个子数组，就称这些子数组是 <strong>不相交</strong> 的。子数组指的是原数组中连续元素组成的一个序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]\n<b>输出：</b>true\n<b>解释：</b>你可以分别在 nums 中选出第 0 个子数组 [1,-1,0,<strong>1,</strong><strong>-1,</strong><strong>-1</strong>,3,-2,0] 和第 1 个子数组 [1,-1,0,1,-1,-1,<strong>3,</strong><strong>-2,0</strong>] 。\n这两个子数组是不相交的，因为它们没有任何共同的元素。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]\n<b>输出：</b>false\n<strong>解释：</strong>选择子数组 [<strong>1,2,3,4</strong>,10,-2] 和 [1,2,3,4,<strong>10,-2</strong>] 是不正确的，因为它们出现的顺序与 groups 中顺序不同。\n[10,-2] 必须出现在 [1,2,3,4] 之前。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]\n<b>输出：</b>false\n<strong>解释：</strong>选择子数组 [7,7,<strong>1,2,3</strong>,4,7,7] 和 [7,7,1,2,<strong>3,4</strong>,7,7] 是不正确的，因为它们不是不相交子数组。\n它们有一个共同的元素 nums[4] （下标从 0 开始）。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>groups.length == n</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>3</sup></code></li> \n <li><code>1 &lt;= groups[i].length, sum(groups[i].length) &lt;= 10<sup><span style=\"\">3</span></sup></code></li> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>3</sup></code></li> \n <li><code>-10<sup>7</sup> &lt;= groups[i][j], nums[k] &lt;= 10<sup>7</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1765. 地图中的最高点', '<p>给你一个大小为&nbsp;<code>m x n</code>&nbsp;的整数矩阵&nbsp;<code>isWater</code>&nbsp;，它代表了一个由 <strong>陆地</strong>&nbsp;和 <strong>水域</strong>&nbsp;单元格组成的地图。</p> \n<ul> \n <li>如果&nbsp;<code>isWater[i][j] == 0</code>&nbsp;，格子&nbsp;<code>(i, j)</code>&nbsp;是一个 <strong>陆地</strong>&nbsp;格子。</li> \n <li>如果&nbsp;<code>isWater[i][j] == 1</code>&nbsp;，格子&nbsp;<code>(i, j)</code>&nbsp;是一个 <strong>水域</strong>&nbsp;格子。</li> \n</ul> \n<p>你需要按照如下规则给每个单元格安排高度：</p> \n<ul> \n <li>每个格子的高度都必须是非负的。</li> \n <li>如果一个格子是是 <strong>水域</strong>&nbsp;，那么它的高度必须为 <code>0</code>&nbsp;。</li> \n <li>任意相邻的格子高度差 <strong>至多</strong>&nbsp;为 <code>1</code>&nbsp;。当两个格子在正东、南、西、北方向上相互紧挨着，就称它们为相邻的格子。（也就是说它们有一条公共边）</li> \n</ul> \n<p>找到一种安排高度的方案，使得矩阵中的最高高度值&nbsp;<strong>最大</strong>&nbsp;。</p> \n<p>请你返回一个大小为&nbsp;<code>m x n</code>&nbsp;的整数矩阵 <code>height</code>&nbsp;，其中 <code>height[i][j]</code>&nbsp;是格子 <code>(i, j)</code>&nbsp;的高度。如果有多种解法，请返回&nbsp;<strong>任意一个</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"width: 220px; height: 219px;\" src=\"https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-82045-am.png\" alt=\"\"></strong></p> \n<pre><b>输入：</b>isWater = [[0,1],[0,0]]\n<b>输出：</b>[[1,0],[2,1]]\n<b>解释：</b>上图展示了给各个格子安排的高度。\n蓝色格子是水域格，绿色格子是陆地格。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"width: 300px; height: 296px;\" src=\"https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-82050-am.png\" alt=\"\"></strong></p> \n<pre><b>输入：</b>isWater = [[0,0,1],[1,0,0],[0,0,0]]\n<b>输出：</b>[[1,1,0],[0,1,1],[1,2,2]]\n<b>解释：</b>所有安排方案中，最高可行高度为 2 。\n任意安排方案中，只要最高高度为 2 且符合上述规则的，都为可行方案。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == isWater.length</code></li> \n <li><code>n == isWater[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 1000</code></li> \n <li><code>isWater[i][j]</code>&nbsp;要么是&nbsp;<code>0</code>&nbsp;，要么是&nbsp;<code>1</code>&nbsp;。</li> \n <li>至少有 <strong>1</strong>&nbsp;个水域格子。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1766. 互质树', '<p>给你一个 <code>n</code>&nbsp;个节点的树（也就是一个无环连通无向图），节点编号从 <code>0</code>&nbsp;到 <code>n - 1</code>&nbsp;，且恰好有 <code>n - 1</code>&nbsp;条边，每个节点有一个值。树的 <strong>根节点</strong>&nbsp;为 0 号点。</p> \n<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;和一个二维数组&nbsp;<code>edges</code>&nbsp;来表示这棵树。<code>nums[i]</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;个点的值，<code>edges[j] = [u<sub>j</sub>, v<sub>j</sub>]</code>&nbsp;表示节点&nbsp;<code>u<sub>j</sub></code>&nbsp;和节点&nbsp;<code>v<sub>j</sub></code>&nbsp;在树中有一条边。</p> \n<p>当&nbsp;<code>gcd(x, y) == 1</code>&nbsp;，我们称两个数&nbsp;<code>x</code> 和&nbsp;<code>y</code>&nbsp;是 <strong>互质的</strong>&nbsp;，其中&nbsp;<code>gcd(x, y)</code>&nbsp;是 <code>x</code>&nbsp;和 <code>y</code>&nbsp;的 <strong>最大公约数</strong>&nbsp;。</p> \n<p>从节点&nbsp;<code>i</code>&nbsp;到 <strong>根</strong>&nbsp;最短路径上的点都是节点 <code>i</code>&nbsp;的祖先节点。一个节点 <strong>不是</strong> 它自己的祖先节点。</p> \n<p>请你返回一个大小为 <code>n</code>&nbsp;的数组 <code>ans</code>&nbsp;，其中<em>&nbsp;</em><code>ans[i]</code>是离节点&nbsp;<code>i</code>&nbsp;最近的祖先节点且满足<em>&nbsp;</em><code>nums[i]</code> 和<em>&nbsp;</em><code>nums[ans[i]]</code>&nbsp;是 <strong>互质的</strong>&nbsp;，如果不存在这样的祖先节点，<code>ans[i]</code>&nbsp;为 <code>-1</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"width: 191px; height: 281px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/02/20/untitled-diagram.png\" alt=\"\"></strong></p> \n<pre><b>输入：</b>nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]\n<b>输出：</b>[-1,0,0,1]\n<b>解释：</b>上图中，每个节点的值在括号中表示。\n- 节点 0 没有互质祖先。\n- 节点 1 只有一个祖先节点 0 。它们的值是互质的（gcd(2,3) == 1）。\n- 节点 2 有两个祖先节点，分别是节点 1 和节点 0 。节点 1 的值与它的值不是互质的（gcd(3,3) == 3）但节点 0 的值是互质的(gcd(2,3) == 1)，所以节点 0 是最近的符合要求的祖先节点。\n- 节点 3 有两个祖先节点，分别是节点 1 和节点 0 。它与节点 1 互质（gcd(3,2) == 1），所以节点 1 是离它最近的符合要求的祖先节点。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 441px; height: 291px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/02/20/untitled-diagram1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]\n<b>输出：</b>[-1,0,-1,0,0,0,-1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>nums.length == n</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 50</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>edges.length == n - 1</code></li> \n <li><code>edges[j].length == 2</code></li> \n <li><code>0 &lt;= u<sub>j</sub>, v<sub>j</sub> &lt; n</code></li> \n <li><code>u<sub>j</sub> != v<sub>j</sub></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1768. 交替合并字符串', '<p>给你两个字符串 <code>word1</code> 和 <code>word2</code> 。请你从 <code>word1</code> 开始，通过交替添加字母来合并字符串。如果一个字符串比另一个字符串长，就将多出来的字母追加到合并后字符串的末尾。</p> \n<p>返回 <strong>合并后的字符串</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>word1 = \"abc\", word2 = \"pqr\"\n<strong>输出：</strong>\"apbqcr\"\n<strong>解释：</strong>字符串合并情况如下所示：\nword1：  a   b   c\nword2：    p   q   r\n合并后：  a p b q c r\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>word1 = \"ab\", word2 = \"pqrs\"\n<strong>输出：</strong>\"apbqrs\"\n<strong>解释：</strong>注意，word2 比 word1 长，\"rs\" 需要追加到合并后字符串的末尾。\nword1：  a   b \nword2：    p   q   r   s\n合并后：  a p b q   r   s\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>word1 = \"abcd\", word2 = \"pq\"\n<strong>输出：</strong>\"apbqcd\"\n<strong>解释：</strong>注意，word1 比 word2 长，\"cd\" 需要追加到合并后字符串的末尾。\nword1：  a   b   c   d\nword2：    p   q \n合并后：  a p b q c   d\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= word1.length, word2.length &lt;= 100</code></li> \n <li><code>word1</code> 和 <code>word2</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1769. 移动所有球到每个盒子所需的最小操作数', '<p>有 <code>n</code> 个盒子。给你一个长度为 <code>n</code> 的二进制字符串 <code>boxes</code> ，其中 <code>boxes[i]</code> 的值为 <code>\'0\'</code> 表示第 <code>i</code> 个盒子是 <strong>空</strong> 的，而 <code>boxes[i]</code> 的值为 <code>\'1\'</code> 表示盒子里有 <strong>一个</strong> 小球。</p> \n<p>在一步操作中，你可以将 <strong>一个</strong> 小球从某个盒子移动到一个与之相邻的盒子中。第 <code>i</code> 个盒子和第 <code>j</code> 个盒子相邻需满足 <code>abs(i - j) == 1</code> 。注意，操作执行后，某些盒子中可能会存在不止一个小球。</p> \n<p>返回一个长度为 <code>n</code> 的数组 <code>answer</code> ，其中 <code>answer[i]</code> 是将所有小球移动到第 <code>i</code> 个盒子所需的 <strong>最小</strong> 操作数。</p> \n<p>每个 <code>answer[i]</code> 都需要根据盒子的 <strong>初始状态</strong> 进行计算。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>boxes = \"110\"\n<strong>输出：</strong>[1,1,3]\n<strong>解释：</strong>每个盒子对应的最小操作数如下：\n1) 第 1 个盒子：将一个小球从第 2 个盒子移动到第 1 个盒子，需要 1 步操作。\n2) 第 2 个盒子：将一个小球从第 1 个盒子移动到第 2 个盒子，需要 1 步操作。\n3) 第 3 个盒子：将一个小球从第 1 个盒子移动到第 3 个盒子，需要 2 步操作。将一个小球从第 2 个盒子移动到第 3 个盒子，需要 1 步操作。共计 3 步操作。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>boxes = \"001011\"\n<strong>输出：</strong>[11,8,5,4,3,4]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == boxes.length</code></li> \n <li><code>1 &lt;= n &lt;= 2000</code></li> \n <li><code>boxes[i]</code> 为 <code>\'0\'</code> 或 <code>\'1\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('177. 第N高的薪水', '<p>编写一个 SQL 查询，获取 <code>Employee</code> 表中第&nbsp;<em>n&nbsp;</em>高的薪水（Salary）。</p> \n<pre>+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\n</pre> \n<p>例如上述&nbsp;<code>Employee</code>&nbsp;表，<em>n = 2&nbsp;</em>时，应返回第二高的薪水&nbsp;<code>200</code>。如果不存在第&nbsp;<em>n&nbsp;</em>高的薪水，那么查询应返回&nbsp;<code>null</code>。</p> \n<pre>+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200                    |\n+------------------------+\n</pre>');
INSERT INTO `leecode` VALUES ('1770. 执行乘法运算的最大分数', '<p>给你两个长度分别 <code>n</code> 和 <code>m</code> 的整数数组 <code>nums</code> 和 <code>multipliers</code><strong> </strong>，其中 <code>n &gt;= m</code> ，数组下标 <strong>从 1 开始</strong> 计数。</p> \n<p>初始时，你的分数为 <code>0</code> 。你需要执行恰好 <code>m</code> 步操作。在第 <code>i</code> 步操作（<strong>从 1 开始</strong> 计数）中，需要：</p> \n<ul> \n <li>选择数组 <code>nums</code> <strong>开头处或者末尾处</strong> 的整数 <code>x</code> 。</li> \n <li>你获得 <code>multipliers[i] * x</code> 分，并累加到你的分数中。</li> \n <li>将 <code>x</code> 从数组 <code>nums</code> 中移除。</li> \n</ul> \n<p>在执行<em> </em><code>m</code> 步操作后，返回 <strong>最大</strong> 分数<em>。</em></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3], multipliers = [3,2,1]\n<strong>输出：</strong>14\n<strong>解释：</strong>一种最优解决方案如下：\n- 选择末尾处的整数 3 ，[1,2,<strong>3</strong>] ，得 3 * 3 = 9 分，累加到分数中。\n- 选择末尾处的整数 2 ，[1,<strong>2</strong>] ，得 2 * 2 = 4 分，累加到分数中。\n- 选择末尾处的整数 1 ，[<strong>1</strong>] ，得 1 * 1 = 1 分，累加到分数中。\n总分数为 9 + 4 + 1 = 14 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]\n<strong>输出：</strong>102\n<strong>解释：</strong>一种最优解决方案如下：\n- 选择开头处的整数 -5 ，[<strong>-5</strong>,-3,-3,-2,7,1] ，得 -5 * -10 = 50 分，累加到分数中。\n- 选择开头处的整数 -3 ，[<strong>-3</strong>,-3,-2,7,1] ，得 -3 * -5 = 15 分，累加到分数中。\n- 选择开头处的整数 -3 ，[<strong>-3</strong>,-2,7,1] ，得 -3 * 3 = -9 分，累加到分数中。\n- 选择末尾处的整数 1 ，[-2,7,<strong>1</strong>] ，得 1 * 4 = 4 分，累加到分数中。\n- 选择末尾处的整数 7 ，[-2,<strong>7</strong>] ，得 7 * 6 = 42 分，累加到分数中。\n总分数为 50 + 15 - 9 + 4 + 42 = 102 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>m == multipliers.length</code></li> \n <li><code>1 &lt;= m &lt;= 10<sup>3</sup></code></li> \n <li><code>m &lt;= n &lt;= 10<sup>5</sup></code><code> </code></li> \n <li><code>-1000 &lt;= nums[i], multipliers[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1771. 由子序列构造的最长回文串的长度', '<p>给你两个字符串 <code>word1</code> 和 <code>word2</code> ，请你按下述方法构造一个字符串：</p> \n<ul> \n <li>从 <code>word1</code> 中选出某个 <strong>非空</strong> 子序列 <code>subsequence1</code> 。</li> \n <li>从 <code>word2</code> 中选出某个 <strong>非空</strong> 子序列 <code>subsequence2</code> 。</li> \n <li>连接两个子序列 <code>subsequence1 + subsequence2</code> ，得到字符串。</li> \n</ul> \n<p>返回可按上述方法构造的最长 <strong>回文串</strong> 的 <strong>长度</strong> 。如果无法构造回文串，返回 <code>0</code> 。</p> \n<p>字符串 <code>s</code> 的一个 <strong>子序列</strong> 是通过从 <code>s</code> 中删除一些（也可能不删除）字符而不更改其余字符的顺序生成的字符串。</p> \n<p><strong>回文串</strong> 是正着读和反着读结果一致的字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>word1 = \"cacb\", word2 = \"cbba\"\n<strong>输出：</strong>5\n<strong>解释：</strong>从 word1 中选出 \"ab\" ，从 word2 中选出 \"cba\" ，得到回文串 \"abcba\" 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>word1 = \"ab\", word2 = \"ab\"\n<strong>输出：</strong>3\n<strong>解释：</strong>从 word1 中选出 \"ab\" ，从 word2 中选出 \"a\" ，得到回文串 \"aba\" 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>word1 = \"aa\", word2 = \"bb\"\n<strong>输出：</strong>0\n<strong>解释：</strong>无法按题面所述方法构造回文串，所以返回 0 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= word1.length, word2.length &lt;= 1000</code></li> \n <li><code>word1</code> 和 <code>word2</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1773. 统计匹配检索规则的物品数量', '<p>给你一个数组 <code>items</code> ，其中&nbsp;<code>items[i] = [type<sub>i</sub>, color<sub>i</sub>, name<sub>i</sub>]</code> ，描述第 <code>i</code> 件物品的类型、颜色以及名称。</p> \n<p>另给你一条由两个字符串&nbsp;<code>ruleKey</code> 和 <code>ruleValue</code> 表示的检索规则。</p> \n<p>如果第 <code>i</code> 件物品能满足下述条件之一，则认为该物品与给定的检索规则 <strong>匹配</strong> ：</p> \n<ul> \n <li><code>ruleKey == \"type\"</code> 且 <code>ruleValue == type<sub>i</sub></code> 。</li> \n <li><code>ruleKey == \"color\"</code> 且 <code>ruleValue == color<sub>i</sub></code> 。</li> \n <li><code>ruleKey == \"name\"</code> 且 <code>ruleValue == name<sub>i</sub></code> 。</li> \n</ul> \n<p>统计并返回 <strong>匹配检索规则的物品数量</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"color\", ruleValue = \"silver\"\n<strong>输出：</strong>1\n<strong>解释：</strong>只有一件物品匹配检索规则，这件物品是 [\"computer\",\"silver\",\"lenovo\"] 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"phone\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"type\", ruleValue = \"phone\"\n<strong>输出：</strong>2\n<strong>解释：</strong>只有两件物品匹配检索规则，这两件物品分别是 [\"phone\",\"blue\",\"pixel\"] 和 [\"phone\",\"gold\",\"iphone\"] 。注意，[\"computer\",\"silver\",\"phone\"] 未匹配检索规则。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= items.length &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= type<sub>i</sub>.length, color<sub>i</sub>.length, name<sub>i</sub>.length, ruleValue.length &lt;= 10</code></li> \n <li><code>ruleKey</code> 等于 <code>\"type\"</code>、<code>\"color\"</code> 或 <code>\"name\"</code></li> \n <li>所有字符串仅由小写字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1774. 最接近目标价格的甜点成本', '<p>你打算做甜点，现在需要购买配料。目前共有 <code>n</code> 种冰激凌基料和 <code>m</code> 种配料可供选购。而制作甜点需要遵循以下几条规则：</p> \n<ul> \n <li>必须选择 <strong>一种</strong> 冰激凌基料。</li> \n <li>可以添加 <strong>一种或多种</strong> 配料，也可以不添加任何配料。</li> \n <li>每种类型的配料 <strong>最多两份</strong> 。</li> \n</ul> \n<p>给你以下三个输入：</p> \n<ul> \n <li><code>baseCosts</code> ，一个长度为 <code>n</code> 的整数数组，其中每个 <code>baseCosts[i]</code> 表示第 <code>i</code> 种冰激凌基料的价格。</li> \n <li><code>toppingCosts</code>，一个长度为 <code>m</code> 的整数数组，其中每个 <code>toppingCosts[i]</code> 表示 <strong>一份</strong> 第 <code>i</code> 种冰激凌配料的价格。</li> \n <li><code>target</code> ，一个整数，表示你制作甜点的目标价格。</li> \n</ul> \n<p>你希望自己做的甜点总成本尽可能接近目标价格 <code>target</code> 。</p> \n<p>返回最接近<em> </em><code>target</code> 的甜点成本。如果有多种方案，返回&nbsp;<strong>成本相对较低</strong> 的一种。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>baseCosts = [1,7], toppingCosts = [3,4], target = 10\n<strong>输出：</strong>10\n<strong>解释：</strong>考虑下面的方案组合（所有下标均从 0 开始）：\n- 选择 1 号基料：成本 7\n- 选择 1 份 0 号配料：成本 1 x 3 = 3\n- 选择 0 份 1 号配料：成本 0 x 4 = 0\n总成本：7 + 3 + 0 = 10 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>baseCosts = [2,3], toppingCosts = [4,5,100], target = 18\n<strong>输出：</strong>17\n<strong>解释：</strong>考虑下面的方案组合（所有下标均从 0 开始）：\n- 选择 1 号基料：成本 3\n- 选择 1 份 0 号配料：成本 1 x 4 = 4\n- 选择 2 份 1 号配料：成本 2 x 5 = 10\n- 选择 0 份 2 号配料：成本 0 x 100 = 0\n总成本：3 + 4 + 10 + 0 = 17 。不存在总成本为 18 的甜点制作方案。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>baseCosts = [3,10], toppingCosts = [2,5], target = 9\n<strong>输出：</strong>8\n<strong>解释：</strong>可以制作总成本为 8 和 10 的甜点。返回 8 ，因为这是成本更低的方案。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>baseCosts = [10], toppingCosts = [1], target = 1\n<strong>输出：</strong>10\n<strong>解释：</strong>注意，你可以选择不添加任何配料，但你必须选择一种基料。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == baseCosts.length</code></li> \n <li><code>m == toppingCosts.length</code></li> \n <li><code>1 &lt;= n, m &lt;= 10</code></li> \n <li><code>1 &lt;= baseCosts[i], toppingCosts[i] &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= target &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1775. 通过最少操作次数使数组的和相等', '<p>给你两个长度可能不等的整数数组&nbsp;<code>nums1</code> 和&nbsp;<code>nums2</code>&nbsp;。两个数组中的所有值都在&nbsp;<code>1</code>&nbsp;到&nbsp;<code>6</code>&nbsp;之间（包含&nbsp;<code>1</code>&nbsp;和&nbsp;<code>6</code>）。</p> \n<p>每次操作中，你可以选择 <strong>任意</strong>&nbsp;数组中的任意一个整数，将它变成 <code>1</code>&nbsp;到 <code>6</code>&nbsp;之间 <strong>任意</strong>&nbsp;的值（包含 <code>1</code>&nbsp;和 <code><span style=\"\">6</span></code>）。</p> \n<p>请你返回使 <code>nums1</code>&nbsp;中所有数的和与&nbsp;<code>nums2</code>&nbsp;中所有数的和相等的最少操作次数。如果无法使两个数组的和相等，请返回 <code>-1</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]\n<b>输出：</b>3\n<b>解释：</b>你可以通过 3 次操作使 nums1 中所有数的和与 nums2 中所有数的和相等。以下数组下标都从 0 开始。\n- 将 nums2[0] 变为 6 。 nums1 = [1,2,3,4,5,6], nums2 = [<strong>6</strong>,1,2,2,2,2] 。\n- 将 nums1[5] 变为 1 。 nums1 = [1,2,3,4,5,<strong>1</strong>], nums2 = [6,1,2,2,2,2] 。\n- 将 nums1[2] 变为 2 。 nums1 = [1,2,<strong>2</strong>,4,5,1], nums2 = [6,1,2,2,2,2] 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums1 = [1,1,1,1,1,1,1], nums2 = [6]\n<b>输出：</b>-1\n<b>解释：</b>没有办法减少 nums1 的和或者增加 nums2 的和使二者相等。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums1 = [6,6], nums2 = [1]\n<b>输出：</b>3\n<b>解释：</b>你可以通过 3 次操作使 nums1 中所有数的和与 nums2 中所有数的和相等。以下数组下标都从 0 开始。\n- 将 nums1[0] 变为 2 。 nums1 = [<strong>2</strong>,6], nums2 = [1] 。\n- 将 nums1[1] 变为 2 。 nums1 = [2,<strong>2</strong>], nums2 = [1] 。\n- 将 nums2[0] 变为 4 。 nums1 = [2,2], nums2 = [<strong>4</strong>] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums1[i], nums2[i] &lt;= 6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1776. 车队 II', '<p>在一条单车道上有 <code>n</code>&nbsp;辆车，它们朝着同样的方向行驶。给你一个长度为 <code>n</code>&nbsp;的数组 <code>cars</code>&nbsp;，其中&nbsp;<code>cars[i] = [position<sub>i</sub>, speed<sub>i</sub>]</code>&nbsp;，它表示：</p> \n<ul> \n <li><code>position<sub>i</sub></code>&nbsp;是第 <code>i</code>&nbsp;辆车和道路起点之间的距离（单位：米）。题目保证&nbsp;<code>position<sub>i</sub> &lt; position<sub>i+1</sub></code><sub>&nbsp;</sub>。</li> \n <li><code>speed<sub>i</sub></code>&nbsp;是第 <code>i</code>&nbsp;辆车的初始速度（单位：米/秒）。</li> \n</ul> \n<p>简单起见，所有车子可以视为在数轴上移动的点。当两辆车占据同一个位置时，我们称它们相遇了。一旦两辆车相遇，它们会合并成一个车队，这个车队里的车有着同样的位置和相同的速度，速度为这个车队里&nbsp;<strong>最慢</strong>&nbsp;一辆车的速度。</p> \n<p>请你返回一个数组&nbsp;<code>answer</code>&nbsp;，其中&nbsp;<code>answer[i]</code>&nbsp;是第 <code>i</code>&nbsp;辆车与下一辆车相遇的时间（单位：秒），如果这辆车不会与下一辆车相遇，则 <code>answer[i]</code>&nbsp;为 <code>-1</code>&nbsp;。答案精度误差需在 <code>10<sup>-5</sup></code>&nbsp;以内。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>cars = [[1,2],[2,1],[4,3],[7,2]]\n<b>输出：</b>[1.00000,-1.00000,3.00000,-1.00000]\n<b>解释：</b>经过恰好 1 秒以后，第一辆车会与第二辆车相遇，并形成一个 1 m/s 的车队。经过恰好 3 秒以后，第三辆车会与第四辆车相遇，并形成一个 2 m/s 的车队。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>cars = [[3,4],[5,4],[6,3],[9,1]]\n<b>输出：</b>[2.00000,1.00000,1.50000,-1.00000]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= cars.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= position<sub>i</sub>, speed<sub>i</sub> &lt;= 10<sup>6</sup></code></li> \n <li><code>position<sub>i</sub> &lt; position<sub>i+1</sub></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1779. 找到最近的有相同 X 或 Y 坐标的点', '<p>给你两个整数&nbsp;<code>x</code> 和&nbsp;<code>y</code>&nbsp;，表示你在一个笛卡尔坐标系下的&nbsp;<code>(x, y)</code>&nbsp;处。同时，在同一个坐标系下给你一个数组&nbsp;<code>points</code>&nbsp;，其中&nbsp;<code>points[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>&nbsp;表示在&nbsp;<code>(a<sub>i</sub>, b<sub>i</sub>)</code>&nbsp;处有一个点。当一个点与你所在的位置有相同的 x 坐标或者相同的 y 坐标时，我们称这个点是 <b>有效的</b>&nbsp;。</p> \n<p>请返回距离你当前位置&nbsp;<strong>曼哈顿距离</strong>&nbsp;最近的&nbsp;<strong>有效</strong>&nbsp;点的下标（下标从 <strong>0</strong> 开始）。如果有多个最近的有效点，请返回下标&nbsp;<strong>最小</strong>&nbsp;的一个。如果没有有效点，请返回&nbsp;<code>-1</code>&nbsp;。</p> \n<p>两个点 <code>(x<sub>1</sub>, y<sub>1</sub>)</code>&nbsp;和 <code>(x<sub>2</sub>, y<sub>2</sub>)</code>&nbsp;之间的 <strong>曼哈顿距离</strong>&nbsp;为&nbsp;<code>abs(x<sub>1</sub> - x<sub>2</sub>) + abs(y<sub>1</sub> - y<sub>2</sub>)</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]\n<b>输出：</b>2\n<b>解释：</b>所有点中，[3,1]，[2,4] 和 [4,4] 是有效点。有效点中，[2,4] 和 [4,4] 距离你当前位置的曼哈顿距离最小，都为 1 。[2,4] 的下标最小，所以返回 2 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>x = 3, y = 4, points = [[3,4]]\n<b>输出：</b>0\n<b>提示：</b>答案可以与你当前所在位置坐标相同。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>x = 3, y = 4, points = [[2,3]]\n<b>输出：</b>-1\n<b>解释：</b>没有有效点。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= points.length &lt;= 10<sup>4</sup></code></li> \n <li><code>points[i].length == 2</code></li> \n <li><code>1 &lt;= x, y, a<sub>i</sub>, b<sub>i</sub> &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('178. 分数排名', '<p>编写一个 SQL 查询来实现分数排名。</p> \n<p>如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。</p> \n<pre>+----+-------+\n| Id | Score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+\n</pre> \n<p>例如，根据上述给定的&nbsp;<code>Scores</code> 表，你的查询应该返回（按分数从高到低排列）：</p> \n<pre>+-------+------+\n| Score | Rank |\n+-------+------+\n| 4.00  | 1    |\n| 4.00  | 1    |\n| 3.85  | 2    |\n|&nbsp;3.65  | 3    |\n| 3.65  | 3    |\n| 3.50  | 4    |\n+-------+------+\n</pre> \n<p><strong>重要提示：</strong>对于 MySQL 解决方案，如果要转义用作列名的保留字，可以在关键字之前和之后使用撇号。例如 <strong>`Rank`</strong></p>');
INSERT INTO `leecode` VALUES ('1780. 判断一个数字是否可以表示成三的幂的和', '<p>给你一个整数&nbsp;<code>n</code>&nbsp;，如果你可以将&nbsp;<code>n</code>&nbsp;表示成若干个不同的三的幂之和，请你返回&nbsp;<code>true</code>&nbsp;，否则请返回 <code>false</code>&nbsp;。</p> \n<p>对于一个整数 <code>y</code>&nbsp;，如果存在整数 <code>x</code>&nbsp;满足 <code>y == 3<sup>x</sup></code>&nbsp;，我们称这个整数 <code>y</code>&nbsp;是三的幂。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>n = 12\n<b>输出：</b>true\n<b>解释：</b>12 = 3<sup>1</sup> + 3<sup>2</sup>\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>n = 91\n<b>输出：</b>true\n<b>解释：</b>91 = 3<sup>0</sup> + 3<sup>2</sup> + 3<sup>4</sup>\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>n = 21\n<b>输出：</b>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10<sup>7</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1781. 所有子字符串美丽值之和', '<p>一个字符串的 <strong>美丽值</strong>&nbsp;定义为：出现频率最高字符与出现频率最低字符的出现次数之差。</p> \n<ul> \n <li>比方说，<code>\"abaacc\"</code>&nbsp;的美丽值为&nbsp;<code>3 - 1 = 2</code>&nbsp;。</li> \n</ul> \n<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，请你返回它所有子字符串的&nbsp;<strong>美丽值</strong>&nbsp;之和。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"aabcb\"\n<b>输出：</b>5\n<strong>解释：</strong>美丽值不为零的字符串包括 [\"aab\",\"aabc\",\"aabcb\",\"abcb\",\"bcb\"] ，每一个字符串的美丽值都为 1 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"aabcbaa\"\n<b>输出：</b>17\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;=<sup> </sup>500</code></li> \n <li><code>s</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1782. 统计点对的数目', '<p>给你一个无向图，无向图由整数&nbsp;<code>n</code>&nbsp;&nbsp;，表示图中节点的数目，和&nbsp;<code>edges</code>&nbsp;组成，其中&nbsp;<code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code>&nbsp;表示&nbsp;<code>u<sub>i</sub></code> 和&nbsp;<code>v<sub>i</sub></code><sub>&nbsp;</sub>之间有一条无向边。同时给你一个代表查询的整数数组&nbsp;<code>queries</code>&nbsp;。</p> \n<p>第 <code>j</code> 个查询的答案是满足如下条件的点对 <code>(a, b)</code> 的数目：</p> \n<ul> \n <li><code>a &lt; b</code></li> \n <li><code>cnt</code>&nbsp;是与 <code>a</code>&nbsp;<strong>或者&nbsp;</strong><code>b</code>&nbsp;相连的边的数目，且 <code>cnt</code>&nbsp;<strong>严格大于&nbsp;</strong><code>queries[j]</code>&nbsp;。</li> \n</ul> \n<p>请你返回一个数组&nbsp;<code>answers</code>&nbsp;，其中&nbsp;<code>answers.length == queries.length</code> 且&nbsp;<code>answers[j]</code>&nbsp;是第 <code>j</code>&nbsp;个查询的答案。</p> \n<p>请注意，图中可能会有 <strong>重复边</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 310px; height: 278px;\" src=\"https://pic.leetcode-cn.com/1614828447-GMnLVg-image.png\" alt=\"\"> \n<pre><b>输入：</b>n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]\n<b>输出：</b>[6,5]\n<b>解释：</b>每个点对中，与至少一个点相连的边的数目如上图所示。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]\n<b>输出：</b>[10,10,9,8,6]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= edges.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> \n <li><code>u<sub>i </sub>!= v<sub>i</sub></code></li> \n <li><code>1 &lt;= queries.length &lt;= 20</code></li> \n <li><code>0 &lt;= queries[j] &lt; edges.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1784. 检查二进制字符串字段', '<p>给你一个二进制字符串 <code>s</code> ，该字符串 <strong>不含前导零</strong> 。</p> \n<p>如果 <code>s</code> 最多包含 <strong>一个由连续的 <code>\'1\'</code> 组成的字段</strong> ，返回 <code>true</code>​​​ 。否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"1001\"\n<strong>输出：</strong>false\n<strong>解释：</strong>字符串中的 1 没有形成一个连续字段。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"110\"\n<strong>输出：</strong>true</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 100</code></li> \n <li><code>s[i]</code>​​​​ 为 <code>\'0\'</code> 或 <code>\'1\'</code></li> \n <li><code>s[0]</code> 为 <code>\'1\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1785. 构成特定和需要添加的最少元素', '<p>给你一个整数数组 <code>nums</code> ，和两个整数 <code>limit</code> 与 <code>goal</code> 。数组 <code>nums</code> 有一条重要属性：<code>abs(nums[i]) &lt;= limit</code> 。</p> \n<p>返回使数组元素总和等于 <code>goal</code> 所需要向数组中添加的 <strong>最少元素数量</strong> ，添加元素 <strong>不应改变</strong> 数组中 <code>abs(nums[i]) &lt;= limit</code> 这一属性。</p> \n<p>注意，如果 <code>x &gt;= 0</code> ，那么 <code>abs(x)</code> 等于 <code>x</code> ；否则，等于 <code>-x</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,-1,1], limit = 3, goal = -4\n<strong>输出：</strong>2\n<strong>解释：</strong>可以将 -2 和 -3 添加到数组中，数组的元素总和变为 1 - 1 + 1 - 2 - 3 = -4 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,-10,9,1], limit = 100, goal = 0\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= limit &lt;= 10<sup>6</sup></code></li> \n <li><code>-limit &lt;= nums[i] &lt;= limit</code></li> \n <li><code>-10<sup>9</sup> &lt;= goal &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1786. 从第一个节点出发到最后一个节点的受限路径数', '<p>现有一个加权无向连通图。给你一个正整数 <code>n</code> ，表示图中有 <code>n</code> 个节点，并按从 <code>1</code> 到 <code>n</code> 给节点编号；另给你一个数组 <code>edges</code> ，其中每个 <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, weight<sub>i</sub>]</code> 表示存在一条位于节点 <code>u<sub>i</sub></code> 和 <code>v<sub>i</sub></code> 之间的边，这条边的权重为 <code>weight<sub>i</sub></code> 。</p> \n<p>从节点 <code>start</code> 出发到节点 <code>end</code> 的路径是一个形如 <code>[z<sub>0</sub>, z<sub>1</sub>,<sub> </sub>z<sub>2</sub>, ..., z<sub>k</sub>]</code> 的节点序列，满足 <code>z<sub>0 </sub>= start</code> 、<code>z<sub>k</sub> = end</code> 且在所有符合 <code>0 &lt;= i &lt;= k-1</code> 的节点 <code>z<sub>i</sub></code> 和 <code>z<sub>i+1</sub></code> 之间存在一条边。</p> \n<p>路径的距离定义为这条路径上所有边的权重总和。用 <code>distanceToLastNode(x)</code> 表示节点 <code>n</code> 和 <code>x</code> 之间路径的最短距离。<strong>受限路径</strong> 为满足 <code>distanceToLastNode(z<sub>i</sub>) &gt; distanceToLastNode(z<sub>i+1</sub>)</code> 的一条路径，其中 <code>0 &lt;= i &lt;= k-1</code> 。</p> \n<p>返回从节点 <code>1</code> 出发到节点 <code>n</code> 的 <strong>受限路径数</strong> 。由于数字可能很大，请返回对 <code>10<sup>9</sup> + 7</code> <strong>取余</strong> 的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 351px; height: 341px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/03/07/restricted_paths_ex1.png\" alt=\"\"> \n<pre><strong>输入：</strong>n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]\n<strong>输出：</strong>3\n<strong>解释：</strong>每个圆包含黑色的节点编号和蓝色的 distanceToLastNode 值。三条受限路径分别是：\n1) 1 --&gt; 2 --&gt; 5\n2) 1 --&gt; 2 --&gt; 3 --&gt; 5\n3) 1 --&gt; 3 --&gt; 5\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 356px; height: 401px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/03/07/restricted_paths_ex22.png\" alt=\"\"> \n<pre><strong>输入：</strong>n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]\n<strong>输出：</strong>1\n<strong>解释：</strong>每个圆包含黑色的节点编号和蓝色的 distanceToLastNode 值。唯一一条受限路径是：1 --&gt; 3 --&gt; 7 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>n - 1 &lt;= edges.length &lt;= 4 * 10<sup>4</sup></code></li> \n <li><code>edges[i].length == 3</code></li> \n <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> \n <li><code>u<sub>i </sub>!= v<sub>i</sub></code></li> \n <li><code>1 &lt;= weight<sub>i</sub> &lt;= 10<sup>5</sup></code></li> \n <li>任意两个节点之间至多存在一条边</li> \n <li>任意两个节点之间至少存在一条路径</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1787. 使所有区间的异或结果为零', '<p>给你一个整数数组 <code>nums</code>​​​ 和一个整数 <code>k</code>​​​​​ 。区间 <code>[left, right]</code>（<code>left &lt;= right</code>）的 <strong>异或结果</strong> 是对下标位于&nbsp;<code>left</code> 和 <code>right</code>（包括 <code>left</code> 和 <code>right</code> ）之间所有元素进行 <code>XOR</code> 运算的结果：<code>nums[left] XOR nums[left+1] XOR ... XOR nums[right]</code> 。</p> \n<p>返回数组中 <strong>要更改的最小元素数</strong> ，以使所有长度为 <code>k</code> 的区间异或结果等于零。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,0,3,0], k = 1\n<strong>输出：</strong>3\n<strong>解释：</strong>将数组 [<strong>1</strong>,<strong>2</strong>,0,<strong>3</strong>,0] 修改为 [<strong>0</strong>,<strong>0</strong>,0,<strong>0</strong>,0]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [3,4,5,2,1,7,3,4,7], k = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>将数组 [3,4,<strong>5</strong>,<strong>2</strong>,<strong>1</strong>,7,3,4,7] 修改为 [3,4,<strong>7</strong>,<strong>3</strong>,<strong>4</strong>,7,3,4,7]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,4,1,2,5,1,2,6], k = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>将数组[1,2,<strong>4,</strong>1,2,<strong>5</strong>,1,2,<strong>6</strong>] 修改为 [1,2,<strong>3</strong>,1,2,<strong>3</strong>,1,2,<strong>3</strong>]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= nums.length &lt;= 2000</code></li> \n <li><code>​​​​​​0 &lt;= nums[i] &lt; 2<sup>10</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('179. 最大数', '<p>给定一组非负整数 <code>nums</code>，重新排列每个数的顺序（每个数不可拆分）使之组成一个最大的整数。</p> \n<p><strong>注意：</strong>输出结果可能非常大，所以你需要返回一个字符串而不是整数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入<code>：</code></strong><code>nums = [10,2]</code>\n<strong>输出：</strong><code>\"210\"</code></pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入<code>：</code></strong><code>nums = [3,30,34,5,9]</code>\n<strong>输出：</strong><code>\"9534330\"</code>\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入<code>：</code></strong>nums = [1]\n<strong>输出：</strong>\"1\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入<code>：</code></strong>nums = [10]\n<strong>输出：</strong>\"10\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 100</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1790. 仅执行一次字符串交换能否使两个字符串相等', '<p>给你长度相等的两个字符串 <code>s1</code> 和 <code>s2</code> 。一次<strong> 字符串交换 </strong>操作的步骤如下：选出某个字符串中的两个下标（不必不同），并交换这两个下标所对应的字符。</p> \n<p>如果对 <strong>其中一个字符串</strong> 执行 <strong>最多一次字符串交换</strong> 就可以使两个字符串相等，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s1 = \"bank\", s2 = \"kanb\"\n<strong>输出：</strong>true\n<strong>解释：</strong>例如，交换 s2 中的第一个和最后一个字符可以得到 \"bank\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s1 = \"attack\", s2 = \"defend\"\n<strong>输出：</strong>false\n<strong>解释：</strong>一次字符串交换无法使两个字符串相等\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s1 = \"kelb\", s2 = \"kelb\"\n<strong>输出：</strong>true\n<strong>解释：</strong>两个字符串已经相等，所以不需要进行字符串交换\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s1 = \"abcd\", s2 = \"dcba\"\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s1.length, s2.length &lt;= 100</code></li> \n <li><code>s1.length == s2.length</code></li> \n <li><code>s1</code> 和 <code>s2</code> 仅由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1791. 找出星型图的中心节点', '<p>有一个无向的 <strong>星型</strong> 图，由 <code>n</code> 个编号从 <code>1</code> 到 <code>n</code> 的节点组成。星型图有一个 <strong>中心</strong> 节点，并且恰有 <code>n - 1</code> 条边将中心节点与其他每个节点连接起来。</p> \n<p>给你一个二维整数数组 <code>edges</code> ，其中&nbsp;<code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> 表示在节点 <code>u<sub>i</sub></code> 和 <code>v<sub>i</sub></code> 之间存在一条边。请你找出并返回&nbsp;<code>edges</code> 所表示星型图的中心节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 331px; height: 321px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/03/14/star_graph.png\" alt=\"\"> \n<pre><strong>输入：</strong>edges = [[1,2],[2,3],[4,2]]\n<strong>输出：</strong>2\n<strong>解释：</strong>如上图所示，节点 2 与其他每个节点都相连，所以节点 2 是中心节点。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>edges = [[1,2],[5,1],[1,3],[1,4]]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>edges.length == n - 1</code></li> \n <li><code>edges[i].length == 2</code></li> \n <li><code>1 &lt;= u<sub>i,</sub> v<sub>i</sub> &lt;= n</code></li> \n <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> \n <li>题目数据给出的 <code>edges</code> 表示一个有效的星型图</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1792. 最大平均通过率', '<p>一所学校里有一些班级，每个班级里有一些学生，现在每个班都会进行一场期末考试。给你一个二维数组 <code>classes</code>&nbsp;，其中&nbsp;<code>classes[i] = [pass<sub>i</sub>, total<sub>i</sub>]</code>&nbsp;，表示你提前知道了第&nbsp;<code>i</code>&nbsp;个班级总共有&nbsp;<code>total<sub>i</sub></code>&nbsp;个学生，其中只有&nbsp;<code>pass<sub>i</sub></code>&nbsp;个学生可以通过考试。</p> \n<p>给你一个整数&nbsp;<code>extraStudents</code>&nbsp;，表示额外有&nbsp;<code>extraStudents</code>&nbsp;个聪明的学生，他们 <strong>一定</strong>&nbsp;能通过任何班级的期末考。你需要给这&nbsp;<code>extraStudents</code>&nbsp;个学生每人都安排一个班级，使得 <strong>所有</strong>&nbsp;班级的 <strong>平均</strong>&nbsp;通过率 <strong>最大</strong>&nbsp;。</p> \n<p>一个班级的&nbsp;<strong>通过率</strong>&nbsp;等于这个班级通过考试的学生人数除以这个班级的总人数。<strong>平均通过率</strong>&nbsp;是所有班级的通过率之和除以班级数目。</p> \n<p>请你返回在安排这 <code><span style=\"\">extraStudents</span></code> 个学生去对应班级后的 <strong>最大</strong>&nbsp;平均通过率。与标准答案误差范围在&nbsp;<code>10<sup>-5</sup></code>&nbsp;以内的结果都会视为正确结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>classes = [[1,2],[3,5],[2,2]], <code>extraStudents</code> = 2\n<b>输出：</b>0.78333\n<b>解释：</b>你可以将额外的两个学生都安排到第一个班级，平均通过率为 (3/4 + 3/5 + 2/2) / 3 = 0.78333 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>classes = [[2,4],[3,9],[4,5],[2,10]], <code>extraStudents</code> = 4\n<strong>输出：</strong>0.53485\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= classes.length &lt;= 10<sup>5</sup></code></li> \n <li><code>classes[i].length == 2</code></li> \n <li><code>1 &lt;= pass<sub>i</sub> &lt;= total<sub>i</sub> &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= extraStudents &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1793. 好子数组的最大分数', '<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;<strong>（下标从 0 开始）</strong>和一个整数&nbsp;<code>k</code>&nbsp;。</p> \n<p>一个子数组 <code>(i, j)</code>&nbsp;的 <strong>分数</strong>&nbsp;定义为&nbsp;<code>min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)</code>&nbsp;。一个&nbsp;<strong>好</strong>&nbsp;子数组的两个端点下标需要满足&nbsp;<code>i &lt;= k &lt;= j</code>&nbsp;。</p> \n<p>请你返回 <strong>好</strong>&nbsp;子数组的最大可能 <strong>分数</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [1,4,3,7,4,5], k = 3\n<b>输出：</b>15\n<b>解释：</b>最优子数组的左右端点下标是 (1, 5) ，分数为 min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [5,5,4,5,4,1,1,1], k = 0\n<b>输出：</b>20\n<b>解释：</b>最优子数组的左右端点下标是 (0, 4) ，分数为 min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>0 &lt;= k &lt; nums.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1796. 字符串中第二大的数字', '<p>给你一个混合字符串&nbsp;<code>s</code>&nbsp;，请你返回 <code>s</code>&nbsp;中 <strong>第二大 </strong>的数字，如果不存在第二大的数字，请你返回 <code>-1</code>&nbsp;。</p> \n<p><strong>混合字符串 </strong>由小写英文字母和数字组成。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"dfa12321afd\"\n<b>输出：</b>2\n<b>解释：</b>出现在 s 中的数字包括 [1, 2, 3] 。第二大的数字是 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"abc1111\"\n<b>输出：</b>-1\n<b>解释：</b>出现在 s 中的数字只包含 [1] 。没有第二大的数字。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 500</code></li> \n <li><code>s</code>&nbsp;只包含小写英文字母和（或）数字。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1797. 设计一个验证系统', '<p>你需要设计一个包含验证码的验证系统。每一次验证中，用户会收到一个新的验证码，这个验证码在 <code>currentTime</code>&nbsp;时刻之后 <code>timeToLive</code>&nbsp;秒过期。如果验证码被更新了，那么它会在 <code>currentTime</code>&nbsp;（可能与之前的 <code>currentTime</code>&nbsp;不同）时刻延长&nbsp;<code>timeToLive</code>&nbsp;秒。</p> \n<p>请你实现&nbsp;<code>AuthenticationManager</code>&nbsp;类：</p> \n<ul> \n <li><code>AuthenticationManager(int timeToLive)</code>&nbsp;构造&nbsp;<code>AuthenticationManager</code>&nbsp;并设置&nbsp;<code>timeToLive</code>&nbsp;参数。</li> \n <li><code>generate(string tokenId, int currentTime)</code>&nbsp;给定 <code>tokenId</code>&nbsp;，在当前时间&nbsp;<code>currentTime</code> 生成一个新的验证码。</li> \n <li><code>renew(string tokenId, int currentTime)</code>&nbsp;将给定 <code>tokenId</code>&nbsp;且 <strong>未过期</strong>&nbsp;的验证码在 <code>currentTime</code>&nbsp;时刻更新。如果给定&nbsp;<code>tokenId</code>&nbsp;对应的验证码不存在或已过期，请你忽略该操作，不会有任何更新操作发生。</li> \n <li><code>countUnexpiredTokens(int currentTime)</code>&nbsp;请返回在给定&nbsp;<code>currentTime</code>&nbsp;时刻，<strong>未过期</strong>&nbsp;的验证码数目。</li> \n</ul> \n<p>如果一个验证码在时刻&nbsp;<code>t</code>&nbsp;过期，且另一个操作恰好在时刻&nbsp;<code>t</code>&nbsp;发生（<code>renew</code>&nbsp;或者&nbsp;<code>countUnexpiredTokens</code>&nbsp;操作），过期事件&nbsp;<strong>优先于</strong>&nbsp;其他操作。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 500px; height: 287px;\" src=\"https://assets.leetcode.com/uploads/2021/02/25/copy-of-pc68_q2.png\" alt=\"\"> \n<pre><strong>输入：</strong>\n[\"AuthenticationManager\", \"<code>renew</code>\", \"generate\", \"<code>countUnexpiredTokens</code>\", \"generate\", \"<code>renew</code>\", \"<code>renew</code>\", \"<code>countUnexpiredTokens</code>\"]\n[[5], [\"aaa\", 1], [\"aaa\", 2], [6], [\"bbb\", 7], [\"aaa\", 8], [\"bbb\", 10], [15]]\n<strong>输出：</strong>\n[null, null, null, 1, null, null, null, 0]\n\n<strong>解释：</strong>\nAuthenticationManager authenticationManager = new AuthenticationManager(5); // 构造 AuthenticationManager ，设置 <code>timeToLive</code> = 5 秒。\nauthenticationManager.<code>renew</code>(\"aaa\", 1); // 时刻 1 时，没有验证码的 tokenId 为 \"aaa\" ，没有验证码被更新。\nauthenticationManager.generate(\"aaa\", 2); // 时刻 2 时，生成一个 tokenId 为 \"aaa\" 的新验证码。\nauthenticationManager.<code>countUnexpiredTokens</code>(6); // 时刻 6 时，只有 tokenId 为 \"aaa\" 的验证码未过期，所以返回 1 。\nauthenticationManager.generate(\"bbb\", 7); // 时刻 7 时，生成一个 tokenId 为 \"bbb\" 的新验证码。\nauthenticationManager.<code>renew</code>(\"aaa\", 8); // tokenId 为 \"aaa\" 的验证码在时刻 7 过期，且 8 &gt;= 7 ，所以时刻 8 的renew 操作被忽略，没有验证码被更新。\nauthenticationManager.<code>renew</code>(\"bbb\", 10); // tokenId 为 \"bbb\" 的验证码在时刻 10 没有过期，所以 renew 操作会执行，该 token 将在时刻 15 过期。\nauthenticationManager.<code>countUnexpiredTokens</code>(15); // tokenId 为 \"bbb\" 的验证码在时刻 15 过期，tokenId 为 \"aaa\" 的验证码在时刻 7 过期，所有验证码均已过期，所以返回 0 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= timeToLive &lt;= 10<sup>8</sup></code></li> \n <li><code>1 &lt;= currentTime &lt;= 10<sup>8</sup></code></li> \n <li><code>1 &lt;= tokenId.length &lt;= 5</code></li> \n <li><code>tokenId</code>&nbsp;只包含小写英文字母。</li> \n <li>所有&nbsp;<code>generate</code>&nbsp;函数的调用都会包含独一无二的&nbsp;<code>tokenId</code>&nbsp;值。</li> \n <li>所有函数调用中，<code>currentTime</code>&nbsp;的值 <strong>严格递增</strong>&nbsp;。</li> \n <li>所有函数的调用次数总共不超过&nbsp;<code>2000</code>&nbsp;次。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1798. 你能构造出连续值的最大数目', '<p>给你一个长度为 <code>n</code>&nbsp;的整数数组&nbsp;<code>coins</code>&nbsp;，它代表你拥有的&nbsp;<code>n</code>&nbsp;个硬币。第&nbsp;<code>i</code>&nbsp;个硬币的值为&nbsp;<code>coins[i]</code>&nbsp;。如果你从这些硬币中选出一部分硬币，它们的和为&nbsp;<code>x</code>&nbsp;，那么称，你可以&nbsp;<strong>构造</strong>&nbsp;出&nbsp;<code>x</code>&nbsp;。</p> \n<p>请返回从 <code>0</code>&nbsp;开始（<strong>包括</strong>&nbsp;<code>0</code>&nbsp;），你最多能&nbsp;<strong>构造</strong>&nbsp;出多少个连续整数。</p> \n<p>你可能有多个相同值的硬币。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>coins = [1,3]\n<b>输出：</b>2\n<strong>解释：</strong>你可以得到以下这些值：\n- 0：什么都不取 []\n- 1：取 [1]\n从 0 开始，你可以构造出 2 个连续整数。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>coins = [1,1,1,4]\n<b>输出：</b>8\n<strong>解释：</strong>你可以得到以下这些值：\n- 0：什么都不取 []\n- 1：取 [1]\n- 2：取 [1,1]\n- 3：取 [1,1,1]\n- 4：取 [4]\n- 5：取 [4,1]\n- 6：取 [4,1,1]\n- 7：取 [4,1,1,1]\n从 0 开始，你可以构造出 8 个连续整数。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [1,4,10,3,1]\n<b>输出：</b>20</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>coins.length == n</code></li> \n <li><code>1 &lt;= n &lt;= 4 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= coins[i] &lt;= 4 * 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1799. N 次操作后的最大分数和', '<p>给你&nbsp;<code>nums</code>&nbsp;，它是一个大小为&nbsp;<code>2 * n</code>&nbsp;的正整数数组。你必须对这个数组执行 <code>n</code>&nbsp;次操作。</p> \n<p>在第&nbsp;<code>i</code>&nbsp;次操作时（操作编号从 <strong>1</strong>&nbsp;开始），你需要：</p> \n<ul> \n <li>选择两个元素&nbsp;<code>x</code> 和&nbsp;<code>y</code>&nbsp;。</li> \n <li>获得分数&nbsp;<code>i * gcd(x, y)</code>&nbsp;。</li> \n <li>将&nbsp;<code>x</code>&nbsp;和&nbsp;<code>y</code> 从&nbsp;<code>nums</code>&nbsp;中删除。</li> \n</ul> \n<p>请你返回 <code>n</code>&nbsp;次操作后你能获得的分数和最大为多少。</p> \n<p>函数&nbsp;<code>gcd(x, y)</code>&nbsp;是&nbsp;<code>x</code> 和&nbsp;<code>y</code>&nbsp;的最大公约数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [1,2]\n<b>输出：</b>1\n<b>解释：</b>最优操作是：\n(1 * gcd(1, 2)) = 1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [3,4,6,8]\n<b>输出：</b>11\n<b>解释：</b>最优操作是：\n(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [1,2,3,4,5,6]\n<b>输出：</b>14\n<b>解释：</b>最优操作是：\n(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 7</code></li> \n <li><code>nums.length == 2 * n</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('18. 四数之和', '<p>给你一个由 <code>n</code> 个整数组成的数组&nbsp;<code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且不重复的四元组&nbsp;<code>[nums[a], nums[b], nums[c], nums[d]]</code> ：</p> \n<ul> \n <li><code>0 &lt;= a, b, c, d&nbsp;&lt; n</code></li> \n <li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li> \n <li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li> \n</ul> \n<p>你可以按 <strong>任意顺序</strong> 返回答案 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,0,-1,0,-2,2], target = 0\n<strong>输出：</strong>[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [2,2,2,2,2], target = 8\n<strong>输出：</strong>[[2,2,2,2]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 200</code></li> \n <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('180. 连续出现的数字', '<p>表：<code>Logs</code></p> \n<pre>+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| num         | varchar |\n+-------------+---------+\nid 是这个表的主键。</pre> \n<p>&nbsp;</p> \n<p>编写一个 SQL 查询，查找所有至少连续出现三次的数字。</p> \n<p>返回的结果表中的数据可以按 <strong>任意顺序</strong> 排列。</p> \n<p>&nbsp;</p> \n<p>查询结果格式如下面的例子所示：</p> \n<p>&nbsp;</p> \n<pre>Logs 表：\n+----+-----+\n| Id | Num |\n+----+-----+\n| 1  | 1   |\n| 2  | 1   |\n| 3  | 1   |\n| 4  | 2   |\n| 5  | 1   |\n| 6  | 2   |\n| 7  | 2   |\n+----+-----+\n\nResult 表：\n+-----------------+\n| ConsecutiveNums |\n+-----------------+\n| 1               |\n+-----------------+\n1 是唯一连续出现至少三次的数字。\n</pre>');
INSERT INTO `leecode` VALUES ('1800. 最大升序子数组和', '<p>给你一个正整数组成的数组 <code>nums</code> ，返回 <code>nums</code> 中一个 <strong>升序 </strong>子数组的最大可能元素和。</p> \n<p>子数组是数组中的一个连续数字序列。</p> \n<p>已知子数组 <code>[nums<sub>l</sub>, nums<sub>l+1</sub>, ..., nums<sub>r-1</sub>, nums<sub>r</sub>]</code> ，若对所有 <code>i</code>（<code>l &lt;= i &lt; r</code>），<code>nums<sub>i </sub> &lt; nums<sub>i+1</sub></code> 都成立，则称这一子数组为 <strong>升序</strong> 子数组。注意，大小为 <code>1</code> 的子数组也视作 <strong>升序</strong> 子数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [10,20,30,5,10,50]\n<strong>输出：</strong>65\n<strong>解释：</strong>[5,10,50] 是元素和最大的升序子数组，最大元素和为 65 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [10,20,30,40,50]\n<strong>输出：</strong>150\n<strong>解释：</strong>[10,20,30,40,50] 是元素和最大的升序子数组，最大元素和为 150 。 \n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [12,17,15,13,10,11,12]\n<strong>输出：</strong>33\n<strong>解释：</strong>[10,11,12] 是元素和最大的升序子数组，最大元素和为 33 。 \n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [100,10,1]\n<strong>输出：</strong>100\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 100</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1801. 积压订单中的订单总数', '<p>给你一个二维整数数组 <code>orders</code> ，其中每个 <code>orders[i] = [price<sub>i</sub>, amount<sub>i</sub>, orderType<sub>i</sub>]</code> 表示有 <code>amount<sub>i</sub></code><sub> </sub>笔类型为&nbsp;<code>orderType<sub>i</sub></code> 、价格为&nbsp;<code>price<sub>i</sub></code> 的订单。</p> \n<p>订单类型 <code>orderType<sub>i</sub></code> 可以分为两种：</p> \n<ul> \n <li><code>0</code> 表示这是一批采购订单 <code>buy</code></li> \n <li><code>1</code> 表示这是一批销售订单 <code>sell</code></li> \n</ul> \n<p>注意，<code>orders[i]</code> 表示一批共计 <code>amount<sub>i</sub></code> 笔的独立订单，这些订单的价格和类型相同。对于所有有效的 <code>i</code> ，由 <code>orders[i]</code> 表示的所有订单提交时间均早于 <code>orders[i+1]</code> 表示的所有订单。</p> \n<p>存在由未执行订单组成的 <strong>积压订单</strong> 。积压订单最初是空的。提交订单时，会发生以下情况：</p> \n<ul> \n <li>如果该订单是一笔采购订单 <code>buy</code> ，则可以查看积压订单中价格 <strong>最低</strong> 的销售订单 <code>sell</code> 。如果该销售订单 <code>sell</code> 的价格 <strong>低于或等于</strong> 当前采购订单 <code>buy</code> 的价格，则匹配并执行这两笔订单，并将销售订单 <code>sell</code> 从积压订单中删除。否则，采购订单 <code>buy</code> 将会添加到积压订单中。</li> \n <li>反之亦然，如果该订单是一笔销售订单 <code>sell</code> ，则可以查看积压订单中价格 <strong>最高</strong> 的采购订单 <code>buy</code> 。如果该采购订单 <code>buy</code> 的价格 <strong>高于或等于</strong> 当前销售订单 <code>sell</code> 的价格，则匹配并执行这两笔订单，并将采购订单 <code>buy</code> 从积压订单中删除。否则，销售订单 <code>sell</code> 将会添加到积压订单中。</li> \n</ul> \n<p>输入所有订单后，返回积压订单中的 <strong>订单总数</strong> 。由于数字可能很大，所以需要返回对 <code>10<sup>9</sup> + 7</code> 取余的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 450px; height: 479px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/03/21/ex1.png\" alt=\"\"> \n<pre><strong>输入：</strong>orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]\n<strong>输出：</strong>6\n<strong>解释：</strong>输入订单后会发生下述情况：\n- 提交 5 笔采购订单，价格为 10 。没有销售订单，所以这 5 笔订单添加到积压订单中。\n- 提交 2 笔销售订单，价格为 15 。没有采购订单的价格大于或等于 15 ，所以这 2 笔订单添加到积压订单中。\n- 提交 1 笔销售订单，价格为 25 。没有采购订单的价格大于或等于 25 ，所以这 1 笔订单添加到积压订单中。\n- 提交 4 笔采购订单，价格为 30 。前 2 笔采购订单与价格最低（价格为 15）的 2 笔销售订单匹配，从积压订单中删除这 2 笔销售订单。第 3 笔采购订单与价格最低的 1 笔销售订单匹配，销售订单价格为 25 ，从积压订单中删除这 1 笔销售订单。积压订单中不存在更多销售订单，所以第 4 笔采购订单需要添加到积压订单中。\n最终，积压订单中有 5 笔价格为 10 的采购订单，和 1 笔价格为 30 的采购订单。所以积压订单中的订单总数为 6 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 450px; height: 584px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/03/21/ex2.png\" alt=\"\"> \n<pre><strong>输入：</strong>orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]\n<strong>输出：</strong>999999984\n<strong>解释：</strong>输入订单后会发生下述情况：\n- 提交 10<sup>9</sup> 笔销售订单，价格为 7 。没有采购订单，所以这 10<sup>9</sup> 笔订单添加到积压订单中。\n- 提交 3 笔采购订单，价格为 15 。这些采购订单与价格最低（价格为 7 ）的 3 笔销售订单匹配，从积压订单中删除这 3 笔销售订单。\n- 提交 999999995 笔采购订单，价格为 5 。销售订单的最低价为 7 ，所以这 999999995 笔订单添加到积压订单中。\n- 提交 1 笔销售订单，价格为 5 。这笔销售订单与价格最高（价格为 5 ）的 1 笔采购订单匹配，从积压订单中删除这 1 笔采购订单。\n最终，积压订单中有 (1000000000-3) 笔价格为 7 的销售订单，和 (999999995-1) 笔价格为 5 的采购订单。所以积压订单中的订单总数为 1999999991 ，等于 999999984 % (10<sup>9</sup> + 7) 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= orders.length &lt;= 10<sup>5</sup></code></li> \n <li><code>orders[i].length == 3</code></li> \n <li><code>1 &lt;= price<sub>i</sub>, amount<sub>i</sub> &lt;= 10<sup>9</sup></code></li> \n <li><code>orderType<sub>i</sub></code> 为 <code>0</code> 或 <code>1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1802. 有界数组中指定下标处的最大值', '<p>给你三个正整数 <code>n</code>、<code>index</code> 和 <code>maxSum</code> 。你需要构造一个同时满足下述所有条件的数组 <code>nums</code>（下标 <strong>从 0 开始</strong> 计数）：</p> \n<ul> \n <li><code>nums.length == n</code></li> \n <li><code>nums[i]</code> 是 <strong>正整数</strong> ，其中 <code>0 &lt;= i &lt; n</code></li> \n <li><code>abs(nums[i] - nums[i+1]) &lt;= 1</code> ，其中 <code>0 &lt;= i &lt; n-1</code></li> \n <li><code>nums</code> 中所有元素之和不超过 <code>maxSum</code></li> \n <li><code>nums[index]</code> 的值被 <strong>最大化</strong></li> \n</ul> \n<p>返回你所构造的数组中的 <code>nums[index]</code> 。</p> \n<p>注意：<code>abs(x)</code> 等于 <code>x</code> 的前提是 <code>x &gt;= 0</code> ；否则，<code>abs(x)</code> 等于 <code>-x</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 4, index = 2,  maxSum = 6\n<strong>输出：</strong>2\n<strong>解释：</strong>数组 [1,1,<strong>2</strong>,1] 和 [1,2,<strong>2</strong>,1] 满足所有条件。不存在其他在指定下标处具有更大值的有效数组。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 6, index = 1,  maxSum = 10\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= maxSum &lt;= 10<sup>9</sup></code></li> \n <li><code>0 &lt;= index &lt; n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1803. 统计异或值在范围内的数对有多少', '<p>给你一个整数数组 <code>nums</code> （下标 <strong>从 0 开始</strong> 计数）以及两个整数：<code>low</code> 和 <code>high</code> ，请返回 <strong>漂亮数对</strong> 的数目。</p> \n<p><strong>漂亮数对</strong> 是一个形如 <code>(i, j)</code> 的数对，其中 <code>0 &lt;= i &lt; j &lt; nums.length</code> 且 <code>low &lt;= (nums[i] XOR nums[j]) &lt;= high</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,4,2,7], low = 2, high = 6\n<strong>输出：</strong>6\n<strong>解释：</strong>所有漂亮数对 (i, j) 列出如下：\n    - (0, 1): nums[0] XOR nums[1] = 5 \n    - (0, 2): nums[0] XOR nums[2] = 3\n    - (0, 3): nums[0] XOR nums[3] = 6\n    - (1, 2): nums[1] XOR nums[2] = 6\n    - (1, 3): nums[1] XOR nums[3] = 3\n    - (2, 3): nums[2] XOR nums[3] = 5\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [9,8,4,2,1], low = 5, high = 14\n<strong>输出：</strong>8\n<strong>解释：</strong>所有漂亮数对 (i, j) 列出如下：\n​​​​​    - (0, 2): nums[0] XOR nums[2] = 13\n&nbsp;   - (0, 3): nums[0] XOR nums[3] = 11\n&nbsp;   - (0, 4): nums[0] XOR nums[4] = 8\n&nbsp;   - (1, 2): nums[1] XOR nums[2] = 12\n&nbsp;   - (1, 3): nums[1] XOR nums[3] = 10\n&nbsp;   - (1, 4): nums[1] XOR nums[4] = 9\n&nbsp;   - (2, 3): nums[2] XOR nums[3] = 6\n&nbsp;   - (2, 4): nums[2] XOR nums[4] = 5</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= low &lt;= high &lt;= 2 * 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1805. 字符串中不同整数的数目', '<p>给你一个字符串 <code>word</code> ，该字符串由数字和小写英文字母组成。</p> \n<p>请你用空格替换每个不是数字的字符。例如，<code>\"a123bc34d8ef34\"</code> 将会变成 <code>\" 123&nbsp; 34 8&nbsp; 34\"</code> 。注意，剩下的这些整数为（相邻彼此至少有一个空格隔开）：<code>\"123\"</code>、<code>\"34\"</code>、<code>\"8\"</code> 和 <code>\"34\"</code> 。</p> \n<p>返回对 <code>word</code> 完成替换后形成的 <strong>不同</strong> 整数的数目。</p> \n<p>只有当两个整数的 <strong>不含前导零</strong> 的十进制表示不同， 才认为这两个整数也不同。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>word = \"a<strong>123</strong>bc<strong>34</strong>d<strong>8</strong>ef<strong>34</strong>\"\n<strong>输出：</strong>3\n<strong>解释：</strong>不同的整数有 \"123\"、\"34\" 和 \"8\" 。注意，\"34\" 只计数一次。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>word = \"leet<strong>1234</strong>code<strong>234</strong>\"\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>word = \"a<strong>1</strong>b<strong>01</strong>c<strong>001</strong>\"\n<strong>输出：</strong>1\n<strong>解释：</strong>\"1\"、\"01\" 和 \"001\" 视为同一个整数的十进制表示，因为在比较十进制值时会忽略前导零的存在。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= word.length &lt;= 1000</code></li> \n <li><code>word</code> 由数字和小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1806. 还原排列的最少操作步数', '<p>给你一个偶数 <code>n</code>​​​​​​ ，已知存在一个长度为 <code>n</code> 的排列 <code>perm</code> ，其中 <code>perm[i] == i</code>​（下标 <strong>从 0 开始</strong> 计数）。</p> \n<p>一步操作中，你将创建一个新数组 <code>arr</code> ，对于每个 <code>i</code> ：</p> \n<ul> \n <li>如果 <code>i % 2 == 0</code> ，那么 <code>arr[i] = perm[i / 2]</code></li> \n <li>如果 <code>i % 2 == 1</code> ，那么 <code>arr[i] = perm[n / 2 + (i - 1) / 2]</code></li> \n</ul> \n<p>然后将 <code>arr</code>​​ 赋值​​给 <code>perm</code> 。</p> \n<p>要想使 <code>perm</code> 回到排列初始值，至少需要执行多少步操作？返回最小的 <strong>非零</strong> 操作步数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>1\n<strong>解释：</strong>最初，perm = [0,1]\n第 1&nbsp;步操作后，perm = [0,1]\n所以，仅需执行 1 步操作</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 4\n<strong>输出：</strong>2\n<strong>解释：</strong>最初，perm = [0,1,2,3]\n第 1&nbsp;步操作后，perm = [0,2,1,3]\n第 2&nbsp;步操作后，perm = [0,1,2,3]\n所以，仅需执行 2 步操作</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 6\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 1000</code></li> \n <li><code>n</code>​​​​​​ 是一个偶数</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1807. 替换字符串中的括号内容', '<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，它包含一些括号对，每个括号中包含一个 <strong>非空</strong>&nbsp;的键。</p> \n<ul> \n <li>比方说，字符串&nbsp;<code>\"(name)is(age)yearsold\"</code>&nbsp;中，有&nbsp;<strong>两个</strong>&nbsp;括号对，分别包含键&nbsp;<code>\"name\"</code> 和&nbsp;<code>\"age\"</code>&nbsp;。</li> \n</ul> \n<p>你知道许多键对应的值，这些关系由二维字符串数组&nbsp;<code>knowledge</code>&nbsp;表示，其中&nbsp;<code>knowledge[i] = [key<sub>i</sub>, value<sub>i</sub>]</code>&nbsp;，表示键&nbsp;<code>key<sub>i</sub></code>&nbsp;对应的值为&nbsp;<code>value<sub>i</sub></code><sub>&nbsp;</sub>。</p> \n<p>你需要替换 <strong>所有</strong>&nbsp;的括号对。当你替换一个括号对，且它包含的键为&nbsp;<code>key<sub>i</sub></code>&nbsp;时，你需要：</p> \n<ul> \n <li>将&nbsp;<code>key<sub>i</sub></code>&nbsp;和括号用对应的值&nbsp;<code>value<sub>i</sub></code>&nbsp;替换。</li> \n <li>如果从 <code>knowledge</code>&nbsp;中无法得知某个键对应的值，你需要将&nbsp;<code>key<sub>i</sub></code>&nbsp;和括号用问号&nbsp;<code>\"?\"</code>&nbsp;替换（不需要引号）。</li> \n</ul> \n<p><code>knowledge</code>&nbsp;中每个键最多只会出现一次。<code>s</code>&nbsp;中不会有嵌套的括号。</p> \n<p>请你返回替换 <strong>所有</strong>&nbsp;括号对后的结果字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"(name)is(age)yearsold\", knowledge = [[\"name\",\"bob\"],[\"age\",\"two\"]]\n<b>输出：</b>\"bobistwoyearsold\"\n<strong>解释：</strong>\n键 \"name\" 对应的值为 \"bob\" ，所以将 \"(name)\" 替换为 \"bob\" 。\n键 \"age\" 对应的值为 \"two\" ，所以将 \"(age)\" 替换为 \"two\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"hi(name)\", knowledge = [[\"a\",\"b\"]]\n<b>输出：</b>\"hi?\"\n<b>解释：</b>由于不知道键 \"name\" 对应的值，所以用 \"?\" 替换 \"(name)\" 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>s = \"(a)(a)(a)aaa\", knowledge = [[\"a\",\"yes\"]]\n<b>输出：</b>\"yesyesyesaaa\"\n<b>解释：</b>相同的键在 s 中可能会出现多次。\n键 \"a\" 对应的值为 \"yes\" ，所以将所有的 \"(a)\" 替换为 \"yes\" 。\n注意，不在括号里的 \"a\" 不需要被替换。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>s = \"(a)(b)\", knowledge = [[\"a\",\"b\"],[\"b\",\"a\"]]\n<b>输出：</b>\"ba\"</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= knowledge.length &lt;= 10<sup>5</sup></code></li> \n <li><code>knowledge[i].length == 2</code></li> \n <li><code>1 &lt;= key<sub>i</sub>.length, value<sub>i</sub>.length &lt;= 10</code></li> \n <li><code>s</code>&nbsp;只包含小写英文字母和圆括号&nbsp;<code>\'(\'</code>&nbsp;和&nbsp;<code>\')\'</code>&nbsp;。</li> \n <li><code>s</code>&nbsp;中每一个左圆括号&nbsp;<code>\'(\'</code>&nbsp;都有对应的右圆括号&nbsp;<code>\')\'</code>&nbsp;。</li> \n <li><code>s</code>&nbsp;中每对括号内的键都不会为空。</li> \n <li><code>s</code>&nbsp;中不会有嵌套括号对。</li> \n <li><code>key<sub>i</sub></code>&nbsp;和&nbsp;<code>value<sub>i</sub></code>&nbsp;只包含小写英文字母。</li> \n <li><code>knowledge</code>&nbsp;中的&nbsp;<code>key<sub>i</sub></code>&nbsp;不会重复。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1808. 好因子的最大数目', '<p>给你一个正整数&nbsp;<code>primeFactors</code>&nbsp;。你需要构造一个正整数&nbsp;<code>n</code>&nbsp;，它满足以下条件：</p> \n<ul> \n <li><code>n</code>&nbsp;质因数（质因数需要考虑重复的情况）的数目 <strong>不超过&nbsp;</strong><code>primeFactors</code>&nbsp;个。</li> \n <li><code>n</code>&nbsp;好因子的数目最大化。如果 <code>n</code>&nbsp;的一个因子可以被 <code>n</code>&nbsp;的每一个质因数整除，我们称这个因子是 <strong>好因子</strong> 。比方说，如果&nbsp;<code>n = 12</code>&nbsp;，那么它的质因数为&nbsp;<code>[2,2,3]</code>&nbsp;，那么&nbsp;<code>6</code>&nbsp;和&nbsp;<code>12</code>&nbsp;是好因子，但&nbsp;<code>3</code> 和&nbsp;<code>4</code>&nbsp;不是。</li> \n</ul> \n<p>请你返回&nbsp;<code>n</code>&nbsp;的好因子的数目。由于答案可能会很大，请返回答案对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<b>取余</b>&nbsp;的结果。</p> \n<p>请注意，一个质数的定义是大于 <code>1</code>&nbsp;，且不能被分解为两个小于该数的自然数相乘。一个数 <code>n</code>&nbsp;的质因子是将 <code>n</code>&nbsp;分解为若干个质因子，且它们的乘积为 <code>n</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>primeFactors = 5\n<strong>输出：</strong>6\n<b>解释：</b>200 是一个可行的 n 。\n它有 5 个质因子：[2,2,2,5,5] ，且有 6 个好因子：[10,20,40,50,100,200] 。\n不存在别的 n 有至多 5 个质因子，且同时有更多的好因子。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>primeFactors = 8\n<b>输出：</b>18\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= primeFactors &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('181. 超过经理收入的员工', '<p><code>Employee</code>&nbsp;表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。</p> \n<pre>+----+-------+--------+-----------+\n| Id | Name  | Salary | ManagerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | NULL      |\n| 4  | Max   | 90000  | NULL      |\n+----+-------+--------+-----------+\n</pre> \n<p>给定&nbsp;<code>Employee</code>&nbsp;表，编写一个 SQL 查询，该查询可以获取收入超过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入超过他的经理的员工。</p> \n<pre>+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\n</pre>');
INSERT INTO `leecode` VALUES ('1812. 判断国际象棋棋盘中一个格子的颜色', '<p>给你一个坐标&nbsp;<code>coordinates</code>&nbsp;，它是一个字符串，表示国际象棋棋盘中一个格子的坐标。下图是国际象棋棋盘示意图。</p> \n<p><img style=\"width: 400px; height: 396px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/03/chessboard.png\" alt=\"\"></p> \n<p>如果所给格子的颜色是白色，请你返回&nbsp;<code>true</code>，如果是黑色，请返回&nbsp;<code>false</code>&nbsp;。</p> \n<p>给定坐标一定代表国际象棋棋盘上一个存在的格子。坐标第一个字符是字母，第二个字符是数字。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>coordinates = \"a1\"\n<b>输出：</b>false\n<b>解释：</b>如上图棋盘所示，\"a1\" 坐标的格子是黑色的，所以返回 false 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>coordinates = \"h3\"\n<b>输出：</b>true\n<b>解释：</b>如上图棋盘所示，\"h3\" 坐标的格子是白色的，所以返回 true 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>coordinates = \"c7\"\n<b>输出：</b>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>coordinates.length == 2</code></li> \n <li><code>\'a\' &lt;= coordinates[0] &lt;= \'h\'</code></li> \n <li><code>\'1\' &lt;= coordinates[1] &lt;= \'8\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1813. 句子相似性 III', '<p>一个句子是由一些单词与它们之间的单个空格组成，且句子的开头和结尾没有多余空格。比方说，<code>\"Hello World\"</code>&nbsp;，<code>\"HELLO\"</code>&nbsp;，<code>\"hello world hello world\"</code>&nbsp;都是句子。每个单词都 <strong>只</strong>&nbsp;包含大写和小写英文字母。</p> \n<p>如果两个句子&nbsp;<code>sentence1</code> 和&nbsp;<code>sentence2</code>&nbsp;，可以通过往其中一个句子插入一个任意的句子（<strong>可以是空句子</strong>）而得到另一个句子，那么我们称这两个句子是 <strong>相似的</strong>&nbsp;。比方说，<code>sentence1 = \"Hello my name is Jane\"</code> 且&nbsp;<code>sentence2 = \"Hello Jane\"</code>&nbsp;，我们可以往 <code>sentence2</code>&nbsp;中&nbsp;<code>\"Hello\"</code> 和&nbsp;<code>\"Jane\"</code>&nbsp;之间插入&nbsp;<code>\"my name is\"</code>&nbsp;得到 <code>sentence1</code>&nbsp;。</p> \n<p>给你两个句子&nbsp;<code>sentence1</code> 和&nbsp;<code>sentence2</code>&nbsp;，如果<em>&nbsp;</em><code>sentence1</code> 和<em>&nbsp;</em><code>sentence2</code> 是相似的，请你返回&nbsp;<code>true</code>&nbsp;，否则返回&nbsp;<code>false</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>sentence1 = \"My name is Haley\", sentence2 = \"My Haley\"\n<b>输出：</b>true\n<b>解释：</b>可以往 sentence2 中 \"My\" 和 \"Haley\" 之间插入 \"name is\" ，得到 sentence1 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>sentence1 = \"of\", sentence2 = \"A lot of words\"\n<b>输出：</b>false\n<strong>解释：</strong>没法往这两个句子中的一个句子只插入一个句子就得到另一个句子。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>sentence1 = \"Eating right now\", sentence2 = \"Eating\"\n<b>输出：</b>true\n<b>解释：</b>可以往 sentence2 的结尾插入 \"right now\" 得到 sentence1 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>sentence1 = \"Luky\", sentence2 = \"Lucccky\"\n<b>输出：</b>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= sentence1.length, sentence2.length &lt;= 100</code></li> \n <li><code>sentence1</code>&nbsp;和&nbsp;<code>sentence2</code>&nbsp;都只包含大小写英文字母和空格。</li> \n <li><code>sentence1</code>&nbsp;和&nbsp;<code>sentence2</code>&nbsp;中的单词都只由单个空格隔开。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1814. 统计一个数组中好对子的数目', '<p>给你一个数组&nbsp;<code>nums</code>&nbsp;，数组中只包含非负整数。定义&nbsp;<code>rev(x)</code>&nbsp;的值为将整数&nbsp;<code>x</code>&nbsp;各个数字位反转得到的结果。比方说&nbsp;<code>rev(123) = 321</code>&nbsp;，&nbsp;<code>rev(120) = 21</code>&nbsp;。我们称满足下面条件的下标对&nbsp;<code>(i, j)</code> 是&nbsp;<strong>好的</strong>&nbsp;：</p> \n<ul> \n <li><code>0 &lt;= i &lt; j &lt; nums.length</code></li> \n <li><code>nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])</code></li> \n</ul> \n<p>请你返回好下标对的数目。由于结果可能会很大，请将结果对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<b>取余</b>&nbsp;后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [42,11,1,97]\n<b>输出：</b>2\n<b>解释：</b>两个坐标对为：\n - (0,3)：42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121 。\n - (1,2)：11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [13,10,35,24,76]\n<b>输出：</b>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1815. 得到新鲜甜甜圈的最多组数', '<p>有一个甜甜圈商店，每批次都烤&nbsp;<code>batchSize</code>&nbsp;个甜甜圈。这个店铺有个规则，就是在烤一批新的甜甜圈时，之前 <strong>所有</strong>&nbsp;甜甜圈都必须已经全部销售完毕。给你一个整数 <code>batchSize</code>&nbsp;和一个整数数组 <code>groups</code>&nbsp;，数组中的每个整数都代表一批前来购买甜甜圈的顾客，其中 <code>groups[i]</code>&nbsp;表示这一批顾客的人数。每一位顾客都恰好只要一个甜甜圈。</p> \n<p>当有一批顾客来到商店时，他们所有人都必须在下一批顾客来之前购买完甜甜圈。如果一批顾客中第一位顾客得到的甜甜圈不是上一组剩下的，那么这一组人都会很开心。</p> \n<p>你可以随意安排每批顾客到来的顺序。请你返回在此前提下，<strong>最多</strong>&nbsp;有多少组人会感到开心。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>batchSize = 3, groups = [1,2,3,4,5,6]\n<b>输出：</b>4\n<b>解释：</b>你可以将这些批次的顾客顺序安排为 [6,2,4,5,1,3] 。那么第 1，2，4，6 组都会感到开心。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>batchSize = 4, groups = [1,3,2,5,2,2,1,6]\n<b>输出：</b>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= batchSize &lt;= 9</code></li> \n <li><code>1 &lt;= groups.length &lt;= 30</code></li> \n <li><code>1 &lt;= groups[i] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1816. 截断句子', '<p><strong>句子</strong> 是一个单词列表，列表中的单词之间用单个空格隔开，且不存在前导或尾随空格。每个单词仅由大小写英文字母组成（不含标点符号）。</p> \n<ul> \n <li>例如，<code>\"Hello World\"</code>、<code>\"HELLO\"</code> 和 <code>\"hello world hello world\"</code> 都是句子。</li> \n</ul> \n<p>给你一个句子 <code>s</code>​​​​​​ 和一个整数 <code>k</code>​​​​​​ ，请你将 <code>s</code>​​ <strong>截断</strong> ​，​​​使截断后的句子仅含 <strong>前</strong> <code>k</code>​​​​​​ 个单词。返回 <strong>截断</strong> <code>s</code>​​​​<em>​​ </em>后得到的句子<em>。</em></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"Hello how are you Contestant\", k = 4\n<strong>输出：</strong>\"Hello how are you\"\n<strong>解释：</strong>\ns 中的单词为 [\"Hello\", \"how\" \"are\", \"you\", \"Contestant\"]\n前 4 个单词为 [\"Hello\", \"how\", \"are\", \"you\"]\n因此，应当返回 \"Hello how are you\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"What is the solution to this problem\", k = 4\n<strong>输出：</strong>\"What is the solution\"\n<strong>解释：</strong>\ns 中的单词为 [\"What\", \"is\" \"the\", \"solution\", \"to\", \"this\", \"problem\"]\n前 4 个单词为 [\"What\", \"is\", \"the\", \"solution\"]\n因此，应当返回 \"What is the solution\"</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"chopper is not a tanuki\", k = 5\n<strong>输出：</strong>\"chopper is not a tanuki\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 500</code></li> \n <li><code>k</code> 的取值范围是 <code>[1,&nbsp; s 中单词的数目]</code></li> \n <li><code>s</code> 仅由大小写英文字母和空格组成</li> \n <li><code>s</code> 中的单词之间由单个空格隔开</li> \n <li>不存在前导或尾随空格</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1817. 查找用户活跃分钟数', '<p>给你用户在 LeetCode 的操作日志，和一个整数 <code>k</code> 。日志用一个二维整数数组 <code>logs</code> 表示，其中每个 <code>logs[i] = [ID<sub>i</sub>, time<sub>i</sub>]</code> 表示 ID 为 <code>ID<sub>i</sub></code> 的用户在 <code>time<sub>i</sub></code> 分钟时执行了某个操作。</p> \n<p><strong>多个用户 </strong>可以同时执行操作，单个用户可以在同一分钟内执行 <strong>多个操作</strong> 。</p> \n<p>指定用户的<strong> 用户活跃分钟数（user active minutes，UAM）</strong> 定义为用户对 LeetCode 执行操作的 <strong>唯一分钟数</strong> 。 即使一分钟内执行多个操作，也只能按一分钟计数。</p> \n<p>请你统计用户活跃分钟数的分布情况，统计结果是一个长度为 <code>k</code> 且 <strong>下标从 1 开始计数</strong> 的数组 <code>answer</code> ，对于每个 <code>j</code>（<code>1 &lt;= j &lt;= k</code>），<code>answer[j]</code> 表示 <strong>用户活跃分钟数</strong> 等于 <code>j</code> 的用户数。</p> \n<p>返回上面描述的答案数组<i> </i><code>answer</code><i> </i>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5\n<strong>输出：</strong>[0,2,0,0,0]\n<strong>解释：</strong>\nID=0 的用户执行操作的分钟分别是：5 、2 和 5 。因此，该用户的用户活跃分钟数为 2（分钟 5 只计数一次）\nID=1 的用户执行操作的分钟分别是：2 和 3 。因此，该用户的用户活跃分钟数为 2\n2 个用户的用户活跃分钟数都是 2 ，answer[2] 为 2 ，其余 answer[j] 的值都是 0\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>logs = [[1,1],[2,2],[2,3]], k = 4\n<strong>输出：</strong>[1,1,0,0]\n<strong>解释：</strong>\nID=1 的用户仅在分钟 1 执行单个操作。因此，该用户的用户活跃分钟数为 1\nID=2 的用户执行操作的分钟分别是：2 和 3 。因此，该用户的用户活跃分钟数为 2\n1 个用户的用户活跃分钟数是 1 ，1 个用户的用户活跃分钟数是 2 \n因此，answer[1] = 1 ，answer[2] = 1 ，其余的值都是 0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= logs.length &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= ID<sub>i</sub> &lt;= 10<sup>9</sup></code></li> \n <li><code>1 &lt;= time<sub>i</sub> &lt;= 10<sup>5</sup></code></li> \n <li><code>k</code> 的取值范围是 <code>[用户的最大用户活跃分钟数, 10<sup>5</sup>]</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1818. 绝对差值和', '<p>给你两个正整数数组 <code>nums1</code> 和 <code>nums2</code> ，数组的长度都是 <code>n</code> 。</p> \n<p>数组 <code>nums1</code> 和 <code>nums2</code> 的 <strong>绝对差值和</strong> 定义为所有 <code>|nums1[i] - nums2[i]|</code>（<code>0 &lt;= i &lt; n</code>）的 <strong>总和</strong>（<strong>下标从 0 开始</strong>）。</p> \n<p>你可以选用 <code>nums1</code> 中的 <strong>任意一个</strong> 元素来替换 <code>nums1</code> 中的 <strong>至多</strong> 一个元素，以 <strong>最小化</strong> 绝对差值和。</p> \n<p>在替换数组 <code>nums1</code> 中最多一个元素 <strong>之后</strong> ，返回最小绝对差值和。因为答案可能很大，所以需要对 <code>10<sup>9</sup> + 7</code> <strong>取余 </strong>后返回。</p> \n<p><code>|x|</code> 定义为：</p> \n<ul> \n <li>如果 <code>x &gt;= 0</code> ，值为 <code>x</code> ，或者</li> \n <li>如果 <code>x &lt;= 0</code> ，值为 <code>-x</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums1 = [1,7,5], nums2 = [2,3,5]\n<strong>输出：</strong>3\n<strong>解释：</strong>有两种可能的最优方案：\n- 将第二个元素替换为第一个元素：[1,<strong>7</strong>,5] =&gt; [1,<strong>1</strong>,5] ，或者\n- 将第二个元素替换为第三个元素：[1,<strong>7</strong>,5] =&gt; [1,<strong>5</strong>,5]\n两种方案的绝对差值和都是 <code>|1-2| + (|1-3| 或者 |5-3|) + |5-5| = </code>3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]\n<strong>输出：</strong>0\n<strong>解释：</strong>nums1 和 nums2 相等，所以不用替换元素。绝对差值和为 0\n</pre> \n<p><strong>示例 3</strong><strong>：</strong></p> \n<pre><strong>输入：</strong>nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]\n<strong>输出：</strong>20\n<strong>解释：</strong>将第一个元素替换为第二个元素：[<strong>1</strong>,10,4,4,2,7] =&gt; [<strong>10</strong>,10,4,4,2,7]\n绝对差值和为 <code>|10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20</code>\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums1.length</code></li> \n <li><code>n == nums2.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1819. 序列中不同最大公约数的数目', '<p>给你一个由正整数组成的数组 <code>nums</code> 。</p> \n<p>数字序列的 <strong>最大公约数</strong> 定义为序列中所有整数的共有约数中的最大整数。</p> \n<ul> \n <li>例如，序列 <code>[4,6,16]</code> 的最大公约数是 <code>2</code> 。</li> \n</ul> \n<p>数组的一个 <strong>子序列</strong> 本质是一个序列，可以通过删除数组中的某些元素（或者不删除）得到。</p> \n<ul> \n <li>例如，<code>[2,5,10]</code> 是 <code>[1,2,1,<strong>2</strong>,4,1,<strong>5</strong>,<strong>10</strong>]</code> 的一个子序列。</li> \n</ul> \n<p>计算并返回 <code>nums</code> 的所有 <strong>非空</strong> 子序列中 <strong>不同</strong> 最大公约数的 <strong>数目</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/03/image-1.png\" alt=\"\"> \n<pre><strong>输入：</strong>nums = [6,10,3]\n<strong>输出：</strong>5\n<strong>解释：</strong>上图显示了所有的非空子序列与各自的最大公约数。\n不同的最大公约数为 6 、10 、3 、2 和 1 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [5,15,40,5,6]\n<strong>输出：</strong>7\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 2 * 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('182. 查找重复的电子邮箱', '<p>编写一个 SQL 查询，查找&nbsp;<code>Person</code> 表中所有重复的电子邮箱。</p> \n<p><strong>示例：</strong></p> \n<pre>+----+---------+\n| Id | Email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+\n</pre> \n<p>根据以上输入，你的查询应返回以下结果：</p> \n<pre>+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+\n</pre> \n<p><strong>说明：</strong>所有电子邮箱都是小写字母。</p>');
INSERT INTO `leecode` VALUES ('1822. 数组元素积的符号', '<p>已知函数&nbsp;<code>signFunc(x)</code> 将会根据 <code>x</code> 的正负返回特定值：</p> \n<ul> \n <li>如果 <code>x</code> 是正数，返回 <code>1</code> 。</li> \n <li>如果 <code>x</code> 是负数，返回 <code>-1</code> 。</li> \n <li>如果 <code>x</code> 是等于 <code>0</code> ，返回 <code>0</code> 。</li> \n</ul> \n<p>给你一个整数数组 <code>nums</code> 。令 <code>product</code> 为数组 <code>nums</code> 中所有元素值的乘积。</p> \n<p>返回 <code>signFunc(product)</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [-1,-2,-3,-4,3,2,1]\n<strong>输出：</strong>1\n<strong>解释：</strong>数组中所有值的乘积是 144 ，且 signFunc(144) = 1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,5,0,2,-3]\n<strong>输出：</strong>0\n<strong>解释：</strong>数组中所有值的乘积是 0 ，且 signFunc(0) = 0\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [-1,1,-1,1,-1]\n<strong>输出：</strong>-1\n<strong>解释：</strong>数组中所有值的乘积是 -1 ，且 signFunc(-1) = -1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 1000</code></li> \n <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1823. 找出游戏的获胜者', '<p>共有 <code>n</code> 名小伙伴一起做游戏。小伙伴们围成一圈，按 <strong>顺时针顺序</strong> 从 <code>1</code> 到 <code>n</code> 编号。确切地说，从第 <code>i</code> 名小伙伴顺时针移动一位会到达第 <code>(i+1)</code> 名小伙伴的位置，其中 <code>1 &lt;= i &lt; n</code> ，从第 <code>n</code> 名小伙伴顺时针移动一位会回到第 <code>1</code> 名小伙伴的位置。</p> \n<p>游戏遵循如下规则：</p> \n<ol> \n <li>从第 <code>1</code> 名小伙伴所在位置 <strong>开始</strong> 。</li> \n <li>沿着顺时针方向数 <code>k</code> 名小伙伴，计数时需要 <strong>包含</strong> 起始时的那位小伙伴。逐个绕圈进行计数，一些小伙伴可能会被数过不止一次。</li> \n <li>你数到的最后一名小伙伴需要离开圈子，并视作输掉游戏。</li> \n <li>如果圈子中仍然有不止一名小伙伴，从刚刚输掉的小伙伴的 <strong>顺时针下一位</strong> 小伙伴 <strong>开始</strong>，回到步骤 <code>2</code> 继续执行。</li> \n <li>否则，圈子中最后一名小伙伴赢得游戏。</li> \n</ol> \n<p>给你参与游戏的小伙伴总数 <code>n</code> ，和一个整数 <code>k</code> ，返回游戏的获胜者。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 500px; height: 345px;\" src=\"https://assets.leetcode.com/uploads/2021/03/25/ic234-q2-ex11.png\" alt=\"\"> \n<pre><strong>输入：</strong>n = 5, k = 2\n<strong>输出：</strong>3\n<strong>解释：</strong>游戏运行步骤如下：\n1) 从小伙伴 1 开始。\n2) 顺时针数 2 名小伙伴，也就是小伙伴 1 和 2 。\n3) 小伙伴 2 离开圈子。下一次从小伙伴 3 开始。\n4) 顺时针数 2 名小伙伴，也就是小伙伴 3 和 4 。\n5) 小伙伴 4 离开圈子。下一次从小伙伴 5 开始。\n6) 顺时针数 2 名小伙伴，也就是小伙伴 5 和 1 。\n7) 小伙伴 1 离开圈子。下一次从小伙伴 3 开始。\n8) 顺时针数 2 名小伙伴，也就是小伙伴 3 和 5 。\n9) 小伙伴 5 离开圈子。只剩下小伙伴 3 。所以小伙伴 3 是游戏的获胜者。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 6, k = 5\n<strong>输出：</strong>1\n<strong>解释：</strong>小伙伴离开圈子的顺序：5、4、6、2、3 。小伙伴 1 是游戏的获胜者。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= n &lt;= 500</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1824. 最少侧跳次数', '<p>给你一个长度为&nbsp;<code>n</code>&nbsp;的&nbsp;<strong>3 跑道道路</strong>&nbsp;，它总共包含&nbsp;<code>n + 1</code>&nbsp;个&nbsp;<strong>点</strong>&nbsp;，编号为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n</code>&nbsp;。一只青蛙从&nbsp;<code>0</code>&nbsp;号点第二条跑道&nbsp;<strong>出发</strong>&nbsp;，它想要跳到点&nbsp;<code>n</code>&nbsp;处。然而道路上可能有一些障碍。</p> \n<p>给你一个长度为 <code>n + 1</code>&nbsp;的数组&nbsp;<code>obstacles</code>&nbsp;，其中&nbsp;<code>obstacles[i]</code>&nbsp;（<b>取值范围从 0 到 3</b>）表示在点 <code>i</code>&nbsp;处的&nbsp;<code>obstacles[i]</code>&nbsp;跑道上有一个障碍。如果&nbsp;<code>obstacles[i] == 0</code>&nbsp;，那么点&nbsp;<code>i</code>&nbsp;处没有障碍。任何一个点的三条跑道中&nbsp;<strong>最多有一个</strong>&nbsp;障碍。</p> \n<ul> \n <li>比方说，如果&nbsp;<code>obstacles[2] == 1</code>&nbsp;，那么说明在点 2 处跑道 1 有障碍。</li> \n</ul> \n<p>这只青蛙从点 <code>i</code>&nbsp;跳到点 <code>i + 1</code>&nbsp;且跑道不变的前提是点 <code>i + 1</code>&nbsp;的同一跑道上没有障碍。为了躲避障碍，这只青蛙也可以在&nbsp;<strong>同一个</strong>&nbsp;点处&nbsp;<strong>侧跳</strong>&nbsp;到 <strong>另外一条</strong>&nbsp;跑道（这两条跑道可以不相邻），但前提是跳过去的跑道该点处没有障碍。</p> \n<ul> \n <li>比方说，这只青蛙可以从点 3 处的跑道 3 跳到点 3 处的跑道 1 。</li> \n</ul> \n<p>这只青蛙从点 0 处跑道 <code>2</code>&nbsp;出发，并想到达点 <code>n</code>&nbsp;处的 <strong>任一跑道</strong> ，请你返回 <strong>最少侧跳次数</strong>&nbsp;。</p> \n<p><strong>注意</strong>：点 <code>0</code>&nbsp;处和点 <code>n</code>&nbsp;处的任一跑道都不会有障碍。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 500px; height: 244px;\" src=\"https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex1.png\" alt=\"\"> \n<pre><b>输入：</b>obstacles = [0,1,2,3,0]\n<b>输出：</b>2 \n<b>解释：</b>最优方案如上图箭头所示。总共有 2 次侧跳（红色箭头）。\n注意，这只青蛙只有当侧跳时才可以跳过障碍（如上图点 2 处所示）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 500px; height: 196px;\" src=\"https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex2.png\" alt=\"\"> \n<pre><b>输入：</b>obstacles = [0,1,1,3,3,0]\n<b>输出：</b>0\n<b>解释：</b>跑道 2 没有任何障碍，所以不需要任何侧跳。\n</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 500px; height: 196px;\" src=\"https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex3.png\" alt=\"\"> \n<pre><b>输入：</b>obstacles = [0,2,1,0,3,0]\n<b>输出：</b>2\n<b>解释：</b>最优方案如上图所示。总共有 2 次侧跳。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>obstacles.length == n + 1</code></li> \n <li><code>1 &lt;= n &lt;= 5 * 10<sup>5</sup></code></li> \n <li><code>0 &lt;= obstacles[i] &lt;= 3</code></li> \n <li><code>obstacles[0] == obstacles[n] == 0</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1825. 求出 MK 平均值', '<p>给你两个整数&nbsp;<code>m</code>&nbsp;和&nbsp;<code>k</code>&nbsp;，以及数据流形式的若干整数。你需要实现一个数据结构，计算这个数据流的 <b>MK 平均值</b>&nbsp;。</p> \n<p><strong>MK 平均值</strong>&nbsp;按照如下步骤计算：</p> \n<ol> \n <li>如果数据流中的整数少于 <code>m</code>&nbsp;个，<strong>MK 平均值</strong>&nbsp;为 <code>-1</code>&nbsp;，否则将数据流中最后 <code>m</code>&nbsp;个元素拷贝到一个独立的容器中。</li> \n <li>从这个容器中删除最小的 <code>k</code>&nbsp;个数和最大的 <code>k</code>&nbsp;个数。</li> \n <li>计算剩余元素的平均值，并 <strong>向下取整到最近的整数</strong>&nbsp;。</li> \n</ol> \n<p>请你实现&nbsp;<code>MKAverage</code>&nbsp;类：</p> \n<ul> \n <li><code>MKAverage(int m, int k)</code>&nbsp;用一个空的数据流和两个整数 <code>m</code>&nbsp;和 <code>k</code>&nbsp;初始化&nbsp;<strong>MKAverage</strong>&nbsp;对象。</li> \n <li><code>void addElement(int num)</code>&nbsp;往数据流中插入一个新的元素&nbsp;<code>num</code>&nbsp;。</li> \n <li><code>int calculateMKAverage()</code>&nbsp;对当前的数据流计算并返回 <strong>MK 平均数</strong>&nbsp;，结果需 <strong>向下取整到最近的整数</strong> 。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\n[\"MKAverage\", \"addElement\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"addElement\", \"addElement\", \"calculateMKAverage\"]\n[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]\n<strong>输出：</strong>\n[null, null, null, -1, null, 3, null, null, null, 5]\n\n<strong>解释：</strong>\nMKAverage obj = new MKAverage(3, 1); \nobj.addElement(3);        // 当前元素为 [3]\nobj.addElement(1);        // 当前元素为 [3,1]\nobj.calculateMKAverage(); // 返回 -1 ，因为 m = 3 ，但数据流中只有 2 个元素\nobj.addElement(10);       // 当前元素为 [3,1,10]\nobj.calculateMKAverage(); // 最后 3 个元素为 [3,1,10]\n                          // 删除最小以及最大的 1 个元素后，容器为 <code>[3]\n                          // [3] 的平均值等于 3/1 = 3 ，故返回 3\nobj.addElement(5);        // 当前元素为 [3,1,10,5]\nobj.addElement(5);        // 当前元素为 [3,1,10,5,5]\nobj.addElement(5);        // 当前元素为 [3,1,10,5,5,5]\nobj.calculateMKAverage(); // 最后 3 个元素为 [5,5,5]\n                          // </code>删除最小以及最大的 1 个元素后，容器为 <code>[5]<code> // </code>[5] 的平均值等于 5/1 = 5 ，故返回 5<code> </code></code></pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= m &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= k*2 &lt; m</code></li> \n <li><code>1 &lt;= num &lt;= 10<sup>5</sup></code></li> \n <li><code>addElement</code> 与&nbsp;<code>calculateMKAverage</code>&nbsp;总操作次数不超过 <code>10<sup>5</sup></code> 次。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1827. 最少操作使数组递增', '<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;（<strong>下标从 0 开始</strong>）。每一次操作中，你可以选择数组中一个元素，并将它增加&nbsp;<code>1</code>&nbsp;。</p> \n<ul> \n <li>比方说，如果&nbsp;<code>nums = [1,2,3]</code>&nbsp;，你可以选择增加&nbsp;<code>nums[1]</code>&nbsp;得到&nbsp;<code>nums = [1,<b>3</b>,3]</code>&nbsp;。</li> \n</ul> \n<p>请你返回使 <code>nums</code>&nbsp;<strong>严格递增</strong>&nbsp;的 <strong>最少</strong>&nbsp;操作次数。</p> \n<p>我们称数组&nbsp;<code>nums</code>&nbsp;是 <strong>严格递增的</strong>&nbsp;，当它满足对于所有的&nbsp;<code>0 &lt;= i &lt; nums.length - 1</code>&nbsp;都有&nbsp;<code>nums[i] &lt; nums[i+1]</code>&nbsp;。一个长度为 <code>1</code>&nbsp;的数组是严格递增的一种特殊情况。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [1,1,1]\n<b>输出：</b>3\n<b>解释：</b>你可以进行如下操作：\n1) 增加 nums[2] ，数组变为 [1,1,<strong>2</strong>] 。\n2) 增加 nums[1] ，数组变为 [1,<strong>2</strong>,2] 。\n3) 增加 nums[2] ，数组变为 [1,2,<strong>3</strong>] 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [1,5,2,4,1]\n<b>输出：</b>14\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [8]\n<b>输出：</b>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 5000</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1828. 统计一个圆中点的数目', '<p>给你一个数组&nbsp;<code>points</code>&nbsp;，其中&nbsp;<code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>&nbsp;，表示第&nbsp;<code>i</code>&nbsp;个点在二维平面上的坐标。多个点可能会有 <strong>相同</strong>&nbsp;的坐标。</p> \n<p>同时给你一个数组&nbsp;<code>queries</code>&nbsp;，其中&nbsp;<code>queries[j] = [x<sub>j</sub>, y<sub>j</sub>, r<sub>j</sub>]</code>&nbsp;，表示一个圆心在&nbsp;<code>(x<sub>j</sub>, y<sub>j</sub>)</code>&nbsp;且半径为&nbsp;<code>r<sub>j</sub></code><sub>&nbsp;</sub>的圆。</p> \n<p>对于每一个查询&nbsp;<code>queries[j]</code>&nbsp;，计算在第 <code>j</code>&nbsp;个圆 <strong>内</strong>&nbsp;点的数目。如果一个点在圆的 <strong>边界上</strong>&nbsp;，我们同样认为它在圆&nbsp;<strong>内</strong>&nbsp;。</p> \n<p>请你返回一个数组<em>&nbsp;</em><code>answer</code>&nbsp;，其中<em>&nbsp;</em><code>answer[j]</code>是第&nbsp;<code>j</code>&nbsp;个查询的答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 500px; height: 418px;\" src=\"https://assets.leetcode.com/uploads/2021/03/25/chrome_2021-03-25_22-34-16.png\" alt=\"\"> \n<pre><b>输入：</b>points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]\n<b>输出：</b>[3,2,2]\n<b>解释：</b>所有的点和圆如上图所示。\nqueries[0] 是绿色的圆，queries[1] 是红色的圆，queries[2] 是蓝色的圆。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 500px; height: 390px;\" src=\"https://assets.leetcode.com/uploads/2021/03/25/chrome_2021-03-25_22-42-07.png\" alt=\"\"> \n<pre><b>输入：</b>points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]\n<b>输出：</b>[2,3,2,4]\n<b>解释：</b>所有的点和圆如上图所示。\nqueries[0] 是绿色的圆，queries[1] 是红色的圆，queries[2] 是蓝色的圆，queries[3] 是紫色的圆。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= points.length &lt;= 500</code></li> \n <li><code>points[i].length == 2</code></li> \n <li><code>0 &lt;= x<sub>​​​​​​i</sub>, y<sub>​​​​​​i</sub> &lt;= 500</code></li> \n <li><code>1 &lt;= queries.length &lt;= 500</code></li> \n <li><code>queries[j].length == 3</code></li> \n <li><code>0 &lt;= x<sub>j</sub>, y<sub>j</sub> &lt;= 500</code></li> \n <li><code>1 &lt;= r<sub>j</sub> &lt;= 500</code></li> \n <li>所有的坐标都是整数。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1829. 每个查询的最大异或值', '<p>给你一个 <strong>有序</strong>&nbsp;数组&nbsp;<code>nums</code>&nbsp;，它由&nbsp;<code>n</code>&nbsp;个非负整数组成，同时给你一个整数&nbsp;<code>maximumBit</code>&nbsp;。你需要执行以下查询 <code>n</code>&nbsp;次：</p> \n<ol> \n <li>找到一个非负整数&nbsp;<code>k &lt; 2<sup>maximumBit</sup></code>&nbsp;，使得&nbsp;<code>nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k</code>&nbsp;的结果 <strong>最大化</strong>&nbsp;。<code>k</code>&nbsp;是第 <code>i</code>&nbsp;个查询的答案。</li> \n <li>从当前数组&nbsp;<code>nums</code>&nbsp;删除&nbsp;<strong>最后</strong>&nbsp;一个元素。</li> \n</ol> \n<p>请你返回一个数组&nbsp;<code>answer</code>&nbsp;，其中<em>&nbsp;</em><code>answer[i]</code>是第&nbsp;<code>i</code>&nbsp;个查询的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [0,1,1,3], maximumBit = 2\n<b>输出：</b>[0,3,2,3]\n<b>解释：</b>查询的答案如下：\n第一个查询：nums = [0,1,1,3]，k = 0，因为 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3 。\n第二个查询：nums = [0,1,1]，k = 3，因为 0 XOR 1 XOR 1 XOR 3 = 3 。\n第三个查询：nums = [0,1]，k = 2，因为 0 XOR 1 XOR 2 = 3 。\n第四个查询：nums = [0]，k = 3，因为 0 XOR 3 = 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [2,3,4,7], maximumBit = 3\n<b>输出：</b>[5,2,6,5]\n<b>解释：</b>查询的答案如下：\n第一个查询：nums = [2,3,4,7]，k = 5，因为 2 XOR 3 XOR 4 XOR 7 XOR 5 = 7。\n第二个查询：nums = [2,3,4]，k = 2，因为 2 XOR 3 XOR 4 XOR 2 = 7 。\n第三个查询：nums = [2,3]，k = 6，因为 2 XOR 3 XOR 6 = 7 。\n第四个查询：nums = [2]，k = 5，因为 2 XOR 5 = 7 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [0,1,2,2,5,7], maximumBit = 3\n<b>输出：</b>[4,3,6,4,6,7]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>nums.length == n</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= maximumBit &lt;= 20</code></li> \n <li><code>0 &lt;= nums[i] &lt; 2<sup>maximumBit</sup></code></li> \n <li><code>nums</code>​​​ 中的数字已经按&nbsp;<strong>升序</strong>&nbsp;排好序。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('183. 从不订购的客户', '<p>某网站包含两个表，<code>Customers</code> 表和 <code>Orders</code> 表。编写一个 SQL 查询，找出所有从不订购任何东西的客户。</p> \n<p><code>Customers</code> 表：</p> \n<pre>+----+-------+\n| Id | Name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\n</pre> \n<p><code>Orders</code> 表：</p> \n<pre>+----+------------+\n| Id | CustomerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+\n</pre> \n<p>例如给定上述表格，你的查询应返回：</p> \n<pre>+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+\n</pre>');
INSERT INTO `leecode` VALUES ('1830. 使字符串有序的最少操作次数', '<p>给你一个字符串&nbsp;<code>s</code>&nbsp;（<strong>下标从 0 开始</strong>）。你需要对 <code>s</code>&nbsp;执行以下操作直到它变为一个有序字符串：</p> \n<ol> \n <li>找到 <strong>最大下标</strong>&nbsp;<code>i</code>&nbsp;，使得&nbsp;<code>1 &lt;= i &lt; s.length</code> 且&nbsp;<code>s[i] &lt; s[i - 1]</code>&nbsp;。</li> \n <li>找到 <strong>最大下标</strong>&nbsp;<code>j</code>&nbsp;，使得&nbsp;<code>i &lt;= j &lt; s.length</code> 且对于所有在闭区间&nbsp;<code>[i, j]</code>&nbsp;之间的&nbsp;<code>k</code>&nbsp;都有&nbsp;<code>s[k] &lt; s[i - 1]</code>&nbsp;。</li> \n <li>交换下标为&nbsp;<code>i - 1</code>​​​​ 和&nbsp;<code>j</code>​​​​ 处的两个字符。</li> \n <li>将下标 <code>i</code>&nbsp;开始的字符串后缀反转。</li> \n</ol> \n<p>请你返回将字符串变成有序的最少操作次数。由于答案可能会很大，请返回它对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"cba\"\n<b>输出：</b>5\n<b>解释：</b>模拟过程如下所示：\n操作 1：i=2，j=2。交换 s[1] 和 s[2] 得到 s=\"cab\" ，然后反转下标从 2 开始的后缀字符串，得到 s=\"cab\" 。\n操作 2：i=1，j=2。交换 s[0] 和 s[2] 得到 s=\"bac\" ，然后反转下标从 1 开始的后缀字符串，得到 s=\"bca\" 。\n操作 3：i=2，j=2。交换 s[1] 和 s[2] 得到 s=\"bac\" ，然后反转下标从 2 开始的后缀字符串，得到 s=\"bac\" 。\n操作 4：i=1，j=1。交换 s[0] 和 s[1] 得到 s=\"abc\" ，然后反转下标从 1 开始的后缀字符串，得到 s=\"acb\" 。\n操作 5：i=2，j=2。交换 s[1] 和 s[2] 得到 s=\"abc\" ，然后反转下标从 2 开始的后缀字符串，得到 s=\"abc\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"aabaa\"\n<b>输出：</b>2\n<b>解释：</b>模拟过程如下所示：\n操作 1：i=3，j=4。交换 s[2] 和 s[4] 得到 s=\"aaaab\" ，然后反转下标从 3 开始的后缀字符串，得到 s=\"aaaba\" 。\n操作 2：i=4，j=4。交换 s[3] 和 s[4] 得到 s=\"aaaab\" ，然后反转下标从 4 开始的后缀字符串，得到 s=\"aaaab\" 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>s = \"cdbea\"\n<b>输出：</b>63</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>s = \"leetcodeleetcodeleetcode\"\n<b>输出：</b>982157772\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 3000</code></li> \n <li><code>s</code>​ 只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1832. 判断句子是否为全字母句', '<p><strong>全字母句</strong> 指包含英语字母表中每个字母至少一次的句子。</p> \n<p>给你一个仅由小写英文字母组成的字符串 <code>sentence</code> ，请你判断&nbsp;<code>sentence</code> 是否为 <strong>全字母句</strong> 。</p> \n<p>如果是，返回<em> </em><code>true</code> ；否则，返回<em> </em><code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>sentence = \"thequickbrownfoxjumpsoverthelazydog\"\n<strong>输出：</strong>true\n<strong>解释：</strong><code>sentence</code> 包含英语字母表中每个字母至少一次。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>sentence = \"leetcode\"\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= sentence.length &lt;= 1000</code></li> \n <li><code>sentence</code> 由小写英语字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1833. 雪糕的最大数量', '<p>夏日炎炎，小男孩 Tony 想买一些雪糕消消暑。</p> \n<p>商店中新到 <code>n</code> 支雪糕，用长度为 <code>n</code> 的数组 <code>costs</code> 表示雪糕的定价，其中 <code>costs[i]</code> 表示第 <code>i</code> 支雪糕的现金价格。Tony 一共有 <code>coins</code> 现金可以用于消费，他想要买尽可能多的雪糕。</p> \n<p>给你价格数组 <code>costs</code> 和现金量 <code>coins</code> ，请你计算并返回 Tony 用 <code>coins</code> 现金能够买到的雪糕的 <strong>最大数量</strong> 。</p> \n<p><strong>注意：</strong>Tony 可以按任意顺序购买雪糕。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>costs = [1,3,2,4,1], coins = 7\n<strong>输出：</strong>4\n<strong>解释：</strong>Tony 可以买下标为 0、1、2、4 的雪糕，总价为 1 + 3 + 2 + 1 = 7\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>costs = [10,6,8,7,7,8], coins = 5\n<strong>输出：</strong>0\n<strong>解释：</strong>Tony 没有足够的钱买任何一支雪糕。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>costs = [1,6,3,1,2,5], coins = 20\n<strong>输出：</strong>6\n<strong>解释：</strong>Tony 可以买下所有的雪糕，总价为 1 + 6 + 3 + 1 + 2 + 5 = 18 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>costs.length == n</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= costs[i] &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= coins &lt;= 10<sup>8</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1834. 单线程 CPU', '<p>给你一个二维数组 <code>tasks</code> ，用于表示 <code>n</code>​​​​​​ 项从 <code>0</code> 到 <code>n - 1</code> 编号的任务。其中 <code>tasks[i] = [enqueueTime<sub>i</sub>, processingTime<sub>i</sub>]</code> 意味着第 <code>i<sup>​​​​​​</sup></code>​​​​ 项任务将会于 <code>enqueueTime<sub>i</sub></code> 时进入任务队列，需要 <code>processingTime<sub>i</sub></code><sub> </sub>的时长完成执行。</p> \n<p>现有一个单线程 CPU ，同一时间只能执行 <strong>最多一项</strong> 任务，该 CPU 将会按照下述方式运行：</p> \n<ul> \n <li>如果 CPU 空闲，且任务队列中没有需要执行的任务，则 CPU 保持空闲状态。</li> \n <li>如果 CPU 空闲，但任务队列中有需要执行的任务，则 CPU 将会选择 <strong>执行时间最短</strong> 的任务开始执行。如果多个任务具有同样的最短执行时间，则选择下标最小的任务开始执行。</li> \n <li>一旦某项任务开始执行，CPU 在 <strong>执行完整个任务</strong> 前都不会停止。</li> \n <li>CPU 可以在完成一项任务后，立即开始执行一项新任务。</li> \n</ul> \n<p>返回<em> </em>CPU<em> </em>处理任务的顺序。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>tasks = [[1,2],[2,4],[3,2],[4,1]]\n<strong>输出：</strong>[0,2,3,1]\n<strong>解释：</strong>事件按下述流程运行： \n- time = 1 ，任务 0 进入任务队列，可执行任务项 = {0}\n- 同样在 time = 1 ，空闲状态的 CPU 开始执行任务 0 ，可执行任务项 = {}\n- time = 2 ，任务 1 进入任务队列，可执行任务项 = {1}\n- time = 3 ，任务 2 进入任务队列，可执行任务项 = {1, 2}\n- 同样在 time = 3 ，CPU 完成任务 0 并开始执行队列中用时最短的任务 2 ，可执行任务项 = {1}\n- time = 4 ，任务 3 进入任务队列，可执行任务项 = {1, 3}\n- time = 5 ，CPU 完成任务 2 并开始执行队列中用时最短的任务 3 ，可执行任务项 = {1}\n- time = 6 ，CPU 完成任务 3 并开始执行任务 1 ，可执行任务项 = {}\n- time = 10 ，CPU 完成任务 1 并进入空闲状态\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]\n<strong>输出：</strong>[4,3,2,0,1]\n<strong>解释：</strong>事件按下述流程运行： \n- time = 7 ，所有任务同时进入任务队列，可执行任务项  = {0,1,2,3,4}\n- 同样在 time = 7 ，空闲状态的 CPU 开始执行任务 4 ，可执行任务项 = {0,1,2,3}\n- time = 9 ，CPU 完成任务 4 并开始执行任务 3 ，可执行任务项 = {0,1,2}\n- time = 13 ，CPU 完成任务 3 并开始执行任务 2 ，可执行任务项 = {0,1}\n- time = 18 ，CPU 完成任务 2 并开始执行任务 0 ，可执行任务项 = {1}\n- time = 28 ，CPU 完成任务 0 并开始执行任务 1 ，可执行任务项 = {}\n- time = 40 ，CPU 完成任务 1 并进入空闲状态</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>tasks.length == n</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= enqueueTime<sub>i</sub>, processingTime<sub>i</sub> &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1835. 所有数对按位与结果的异或和', '<p>列表的 <strong>异或和</strong>（<strong>XOR sum</strong>）指对所有元素进行按位 <code>XOR</code> 运算的结果。如果列表中仅有一个元素，那么其 <strong>异或和</strong> 就等于该元素。</p> \n<ul> \n <li>例如，<code>[1,2,3,4]</code> 的 <strong>异或和</strong> 等于 <code>1 XOR 2 XOR 3 XOR 4 = 4</code> ，而 <code>[3]</code> 的 <strong>异或和</strong> 等于 <code>3</code> 。</li> \n</ul> \n<p>给你两个下标 <strong>从 0 开始</strong> 计数的数组 <code>arr1</code> 和 <code>arr2</code> ，两数组均由非负整数组成。</p> \n<p>根据每个&nbsp;<code>(i, j)</code> 数对，构造一个由 <code>arr1[i] AND arr2[j]</code>（按位 <code>AND</code> 运算）结果组成的列表。其中 <code>0 &lt;= i &lt; arr1.length</code> 且 <code>0 &lt;= j &lt; arr2.length</code> 。</p> \n<p>返回上述列表的 <strong>异或和</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr1 = [1,2,3], arr2 = [6,5]\n<strong>输出：</strong>0\n<strong>解释：</strong>列表 = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1] ，\n异或和 = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr1 = [12], arr2 = [4]\n<strong>输出：</strong>4\n<strong>解释：</strong>列表 = [12 AND 4] = [4] ，异或和 = 4 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr1.length, arr2.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= arr1[i], arr2[j] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1837. K 进制表示下的各位数字总和', '<p>给你一个整数 <code>n</code>（<code>10</code> 进制）和一个基数 <code>k</code> ，请你将 <code>n</code> 从 <code>10</code> 进制表示转换为 <code>k</code> 进制表示，计算并返回转换后各位数字的 <strong>总和</strong> 。</p> \n<p>转换后，各位数字应当视作是 <code>10</code> 进制数字，且它们的总和也应当按 <code>10</code> 进制表示返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 34, k = 6\n<strong>输出：</strong>9\n<strong>解释：</strong>34 (10 进制) 在 6 进制下表示为 54 。5 + 4 = 9 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 10, k = 10\n<strong>输出：</strong>1\n<strong>解释：</strong>n 本身就是 10 进制。 1 + 0 = 1 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>2 &lt;= k &lt;= 10</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1838. 最高频元素的频数', '<p>元素的 <strong>频数</strong> 是该元素在一个数组中出现的次数。</p> \n<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> 。在一步操作中，你可以选择 <code>nums</code> 的一个下标，并将该下标对应元素的值增加 <code>1</code> 。</p> \n<p>执行最多 <code>k</code> 次操作后，返回数组中最高频元素的 <strong>最大可能频数</strong> <em>。</em></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,4], k = 5\n<strong>输出：</strong>3<strong>\n解释：</strong>对第一个元素执行 3 次递增操作，对第二个元素执 2 次递增操作，此时 nums = [4,4,4] 。\n4 是数组中最高频元素，频数是 3 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,4,8,13], k = 5\n<strong>输出：</strong>2\n<strong>解释：</strong>存在多种最优解决方案：\n- 对第一个元素执行 3 次递增操作，此时 nums = [4,4,8,13] 。4 是数组中最高频元素，频数是 2 。\n- 对第二个元素执行 4 次递增操作，此时 nums = [1,8,8,13] 。8 是数组中最高频元素，频数是 2 。\n- 对第三个元素执行 5 次递增操作，此时 nums = [1,4,13,13] 。13 是数组中最高频元素，频数是 2 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [3,9,6], k = 2\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1839. 所有元音按顺序排布的最长子字符串', '<p>当一个字符串满足如下条件时，我们称它是 <b>美丽的</b>&nbsp;：</p> \n<ul> \n <li>所有 5 个英文元音字母（<code>\'a\'</code>&nbsp;，<code>\'e\'</code>&nbsp;，<code>\'i\'</code>&nbsp;，<code>\'o\'</code>&nbsp;，<code>\'u\'</code>）都必须&nbsp;<strong>至少</strong>&nbsp;出现一次。</li> \n <li>这些元音字母的顺序都必须按照 <strong>字典序</strong>&nbsp;升序排布（也就是说所有的 <code>\'a\'</code>&nbsp;都在 <code>\'e\'</code>&nbsp;前面，所有的 <code>\'e\'</code>&nbsp;都在 <code>\'i\'</code>&nbsp;前面，以此类推）</li> \n</ul> \n<p>比方说，字符串&nbsp;<code>\"aeiou\"</code> 和&nbsp;<code>\"aaaaaaeiiiioou\"</code>&nbsp;都是 <strong>美丽的</strong>&nbsp;，但是&nbsp;<code>\"uaeio\"</code>&nbsp;，<code>\"aeoiu\"</code>&nbsp;和&nbsp;<code>\"aaaeeeooo\"</code>&nbsp;<strong>不是美丽的</strong>&nbsp;。</p> \n<p>给你一个只包含英文元音字母的字符串&nbsp;<code>word</code>&nbsp;，请你返回&nbsp;<code>word</code> 中 <strong>最长美丽子字符串的长度</strong>&nbsp;。如果不存在这样的子字符串，请返回 <code>0</code>&nbsp;。</p> \n<p><strong>子字符串</strong> 是字符串中一个连续的字符序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>word = \"aeiaaio<strong>aaaaeiiiiouuu</strong>ooaauuaeiu\"\n<b>输出：</b>13\n<b>解释：</b>最长子字符串是 \"aaaaeiiiiouuu\" ，长度为 13 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>word = \"aeeeiiiioooauuu<strong>aeiou</strong>\"\n<b>输出：</b>5\n<b>解释：</b>最长子字符串是 \"aeiou\" ，长度为 5 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>word = \"a\"\n<b>输出：</b>0\n<b>解释：</b>没有美丽子字符串，所以返回 0 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= word.length &lt;= 5 * 10<sup>5</sup></code></li> \n <li><code>word</code>&nbsp;只包含字符&nbsp;<code>\'a\'</code>，<code>\'e\'</code>，<code>\'i\'</code>，<code>\'o\'</code>&nbsp;和&nbsp;<code>\'u\'</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('184. 部门工资最高的员工', '<p><code>Employee</code> 表包含所有员工信息，每个员工有其对应的&nbsp;Id, salary 和 department Id。</p> \n<pre>+----+-------+--------+--------------+\n| Id | Name  | Salary | DepartmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 70000  | 1            |\n| 2 &nbsp;| Jim &nbsp; | 90000 &nbsp;| 1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|\n| 3  | Henry | 80000  | 2            |\n| 4  | Sam   | 60000  | 2            |\n| 5  | Max   | 90000  | 1            |\n+----+-------+--------+--------------+</pre> \n<p><code>Department</code>&nbsp;表包含公司所有部门的信息。</p> \n<pre>+----+----------+\n| Id | Name     |\n+----+----------+\n| 1  | IT       |\n| 2  | Sales    |\n+----+----------+</pre> \n<p>编写一个 SQL 查询，找出每个部门工资最高的员工。对于上述表，您的 SQL 查询应返回以下行（行的顺序无关紧要）。</p> \n<pre>+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| IT &nbsp; &nbsp; &nbsp; &nbsp; | Jim &nbsp; &nbsp; &nbsp;| 90000 &nbsp;|\n| Sales      | Henry    | 80000  |\n+------------+----------+--------+</pre> \n<p><strong>解释：</strong></p> \n<p>Max 和 Jim 在 IT 部门的工资都是最高的，Henry 在销售部的工资最高。</p>');
INSERT INTO `leecode` VALUES ('1840. 最高建筑高度', '<p>在一座城市里，你需要建&nbsp;<code>n</code>&nbsp;栋新的建筑。这些新的建筑会从 <code>1</code>&nbsp;到 <code>n</code>&nbsp;编号排成一列。</p> \n<p>这座城市对这些新建筑有一些规定：</p> \n<ul> \n <li>每栋建筑的高度必须是一个非负整数。</li> \n <li>第一栋建筑的高度 <strong>必须</strong>&nbsp;是&nbsp;<code>0</code>&nbsp;。</li> \n <li>任意两栋相邻建筑的高度差 <strong>不能超过</strong>&nbsp;&nbsp;<code>1</code>&nbsp;。</li> \n</ul> \n<p>除此以外，某些建筑还有额外的最高高度限制。这些限制会以二维整数数组&nbsp;<code>restrictions</code>&nbsp;的形式给出，其中&nbsp;<code>restrictions[i] = [id<sub>i</sub>, maxHeight<sub>i</sub>]</code>&nbsp;，表示建筑&nbsp;<code>id<sub>i</sub></code>&nbsp;的高度 <strong>不能超过</strong>&nbsp;<code>maxHeight<sub>i</sub></code>&nbsp;。</p> \n<p>题目保证每栋建筑在 <code>restrictions</code>&nbsp;中<strong>&nbsp;至多出现一次</strong>&nbsp;，同时建筑 <code>1</code>&nbsp;<strong>不会</strong>&nbsp;出现在&nbsp;<code>restrictions</code>&nbsp;中。</p> \n<p>请你返回 <strong>最高</strong>&nbsp;建筑能达到的 <strong>最高高度</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 400px; height: 253px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/25/ic236-q4-ex1-1.png\" alt=\"\"> \n<pre><b>输入：</b>n = 5, restrictions = [[2,1],[4,1]]\n<b>输出：</b>2\n<b>解释：</b>上图中的绿色区域为每栋建筑被允许的最高高度。\n我们可以使建筑高度分别为 [0,1,2,1,2] ，最高建筑的高度为 2 。</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 500px; height: 269px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/25/ic236-q4-ex2.png\" alt=\"\"> \n<pre><b>输入：</b>n = 6, restrictions = []\n<b>输出：</b>5\n<b>解释：</b>上图中的绿色区域为每栋建筑被允许的最高高度。\n我们可以使建筑高度分别为 [0,1,2,3,4,5] ，最高建筑的高度为 5 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 500px; height: 187px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/25/ic236-q4-ex3.png\" alt=\"\"> \n<pre><b>输入：</b>n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]\n<b>输出：</b>5\n<b>解释：</b>上图中的绿色区域为每栋建筑被允许的最高高度。\n我们可以使建筑高度分别为 [0,1,2,3,3,4,4,5,4,3] ，最高建筑的高度为 5 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 10<sup>9</sup></code></li> \n <li><code>0 &lt;= restrictions.length &lt;= min(n - 1, 10<sup>5</sup>)</code></li> \n <li><code>2 &lt;= id<sub>i</sub> &lt;= n</code></li> \n <li><code>id<sub>i</sub></code>&nbsp;是 <strong>唯一的</strong>&nbsp;。</li> \n <li><code>0 &lt;= maxHeight<sub>i</sub> &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1844. 将所有数字用字符替换', '<p>给你一个下标从 <strong>0</strong>&nbsp;开始的字符串 <code>s</code>&nbsp;，它的 <strong>偶数</strong> 下标处为小写英文字母，<strong>奇数</strong>&nbsp;下标处为数字。</p> \n<p>定义一个函数&nbsp;<code>shift(c, x)</code>&nbsp;，其中&nbsp;<code>c</code>&nbsp;是一个字符且&nbsp;<code>x</code>&nbsp;是一个数字，函数返回字母表中&nbsp;<code>c</code>&nbsp;后面第 <code>x</code>&nbsp;个字符。</p> \n<ul> \n <li>比方说，<code>shift(\'a\', 5) = \'f\'</code>&nbsp;和&nbsp;<code>shift(\'x\', 0) = \'x\'</code>&nbsp;。</li> \n</ul> \n<p>对于每个 <strong>奇数</strong>&nbsp;下标&nbsp;<code>i</code>&nbsp;，你需要将数字&nbsp;<code>s[i]</code> 用&nbsp;<code>shift(s[i-1], s[i])</code>&nbsp;替换。</p> \n<p>请你替换所有数字以后，将字符串 <code>s</code>&nbsp;返回。题目 <strong>保证</strong><em>&nbsp;</em><code>shift(s[i-1], s[i])</code>&nbsp;不会超过 <code>\'z\'</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"a1c1e1\"\n<b>输出：</b>\"abcdef\"\n<strong>解释：</strong>数字被替换结果如下：\n- s[1] -&gt; shift(\'a\',1) = \'b\'\n- s[3] -&gt; shift(\'c\',1) = \'d\'\n- s[5] -&gt; shift(\'e\',1) = \'f\'</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"a1b2c3d4e\"\n<b>输出：</b>\"abbdcfdhe\"\n<strong>解释：</strong>数字被替换结果如下：\n- s[1] -&gt; shift(\'a\',1) = \'b\'\n- s[3] -&gt; shift(\'b\',2) = \'d\'\n- s[5] -&gt; shift(\'c\',3) = \'f\'\n- s[7] -&gt; shift(\'d\',4) = \'h\'</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 100</code></li> \n <li><code>s</code>&nbsp;只包含小写英文字母和数字。</li> \n <li>对所有 <strong>奇数</strong> 下标处的&nbsp;<code>i</code>&nbsp;，满足&nbsp;<code>shift(s[i-1], s[i]) &lt;= \'z\'</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1845. 座位预约管理系统', '<p>请你设计一个管理 <code>n</code>&nbsp;个座位预约的系统，座位编号从&nbsp;<code>1</code>&nbsp;到&nbsp;<code>n</code>&nbsp;。</p> \n<p>请你实现&nbsp;<code>SeatManager</code>&nbsp;类：</p> \n<ul> \n <li><code>SeatManager(int n)</code>&nbsp;初始化一个&nbsp;<code>SeatManager</code>&nbsp;对象，它管理从 <code>1</code>&nbsp;到 <code>n</code>&nbsp;编号的&nbsp;<code>n</code>&nbsp;个座位。所有座位初始都是可预约的。</li> \n <li><code>int reserve()</code>&nbsp;返回可以预约座位的&nbsp;<strong>最小编号</strong>&nbsp;，此座位变为不可预约。</li> \n <li><code>void unreserve(int seatNumber)</code>&nbsp;将给定编号&nbsp;<code>seatNumber</code>&nbsp;对应的座位变成可以预约。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\n[\"SeatManager\", \"reserve\", \"reserve\", \"unreserve\", \"reserve\", \"reserve\", \"reserve\", \"reserve\", \"unreserve\"]\n[[5], [], [], [2], [], [], [], [], [5]]\n<strong>输出：</strong>\n[null, 1, 2, null, 2, 3, 4, 5, null]\n\n<strong>解释：</strong>\nSeatManager seatManager = new SeatManager(5); // 初始化 SeatManager ，有 5 个座位。\nseatManager.reserve();    // 所有座位都可以预约，所以返回最小编号的座位，也就是 1 。\nseatManager.reserve();    // 可以预约的座位为 [2,3,4,5] ，返回最小编号的座位，也就是 2 。\nseatManager.unreserve(2); // 将座位 2 变为可以预约，现在可预约的座位为 [2,3,4,5] 。\nseatManager.reserve();    // 可以预约的座位为 [2,3,4,5] ，返回最小编号的座位，也就是 2 。\nseatManager.reserve();    // 可以预约的座位为 [3,4,5] ，返回最小编号的座位，也就是 3 。\nseatManager.reserve();    // 可以预约的座位为 [4,5] ，返回最小编号的座位，也就是 4 。\nseatManager.reserve();    // 唯一可以预约的是座位 5 ，所以返回 5 。\nseatManager.unreserve(5); // 将座位 5 变为可以预约，现在可预约的座位为 [5] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= seatNumber &lt;= n</code></li> \n <li>每一次对&nbsp;<code>reserve</code>&nbsp;的调用，题目保证至少存在一个可以预约的座位。</li> \n <li>每一次对&nbsp;<code>unreserve</code>&nbsp;的调用，题目保证&nbsp;<code>seatNumber</code>&nbsp;在调用函数前都是被预约状态。</li> \n <li>对&nbsp;<code>reserve</code> 和&nbsp;<code>unreserve</code>&nbsp;的调用&nbsp;<strong>总共</strong>&nbsp;不超过&nbsp;<code>10<sup>5</sup></code>&nbsp;次。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1846. 减小和重新排列数组后的最大元素', '<p>给你一个正整数数组&nbsp;<code>arr</code>&nbsp;。请你对 <code>arr</code>&nbsp;执行一些操作（也可以不进行任何操作），使得数组满足以下条件：</p> \n<ul> \n <li><code>arr</code>&nbsp;中 <strong>第一个</strong>&nbsp;元素必须为&nbsp;<code>1</code>&nbsp;。</li> \n <li>任意相邻两个元素的差的绝对值 <strong>小于等于</strong>&nbsp;<code>1</code>&nbsp;，也就是说，对于任意的 <code>1 &lt;= i &lt; arr.length</code>&nbsp;（<strong>数组下标从 0 开始</strong>），都满足&nbsp;<code>abs(arr[i] - arr[i - 1]) &lt;= 1</code>&nbsp;。<code>abs(x)</code>&nbsp;为&nbsp;<code>x</code>&nbsp;的绝对值。</li> \n</ul> \n<p>你可以执行以下 2 种操作任意次：</p> \n<ul> \n <li><strong>减小</strong> <code>arr</code>&nbsp;中任意元素的值，使其变为一个 <strong>更小的正整数</strong>&nbsp;。</li> \n <li><strong>重新排列</strong>&nbsp;<code>arr</code>&nbsp;中的元素，你可以以任意顺序重新排列。</li> \n</ul> \n<p>请你返回执行以上操作后，在满足前文所述的条件下，<code>arr</code>&nbsp;中可能的 <strong>最大值</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>arr = [2,2,1,2,1]\n<b>输出：</b>2\n<b>解释：</b>\n我们可以重新排列 arr 得到 <code>[1,2,2,2,1] ，该数组满足所有条件。</code>\narr 中最大元素为 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>arr = [100,1,1000]\n<b>输出：</b>3\n<b>解释：</b>\n一个可行的方案如下：\n1. 重新排列 <code>arr</code> 得到 <code>[1,100,1000] 。</code>\n2. 将第二个元素减小为 2 。\n3. 将第三个元素减小为 3 。\n现在 <code>arr = [1,2,3] ，满足所有条件。</code>\narr 中最大元素为 3 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>arr = [1,2,3,4,5]\n<b>输出：</b>5\n<b>解释：</b>数组已经满足所有条件，最大元素为 5 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1847. 最近的房间', '<p>一个酒店里有&nbsp;<code>n</code>&nbsp;个房间，这些房间用二维整数数组&nbsp;<code>rooms</code>&nbsp;表示，其中&nbsp;<code>rooms[i] = [roomId<sub>i</sub>, size<sub>i</sub>]</code>&nbsp;表示有一个房间号为&nbsp;<code>roomId<sub>i</sub></code>&nbsp;的房间且它的面积为&nbsp;<code>size<sub>i</sub></code>&nbsp;。每一个房间号&nbsp;<code>roomId<sub>i</sub></code>&nbsp;保证是 <strong>独一无二</strong>&nbsp;的。</p> \n<p>同时给你 <code>k</code>&nbsp;个查询，用二维数组&nbsp;<code>queries</code>&nbsp;表示，其中&nbsp;<code>queries[j] = [preferred<sub>j</sub>, minSize<sub>j</sub>]</code>&nbsp;。第&nbsp;<code>j</code>&nbsp;个查询的答案是满足如下条件的房间&nbsp;<code>id</code>&nbsp;：</p> \n<ul> \n <li>房间的面积&nbsp;<b>至少</b>&nbsp;为&nbsp;<code>minSize<sub>j</sub></code>&nbsp;，且</li> \n <li><code>abs(id - preferred<sub>j</sub>)</code>&nbsp;的值 <strong>最小</strong>&nbsp;，其中&nbsp;<code>abs(x)</code>&nbsp;是&nbsp;<code>x</code>&nbsp;的绝对值。</li> \n</ul> \n<p>如果差的绝对值有 <strong>相等</strong>&nbsp;的，选择 <strong>最小</strong>&nbsp;的&nbsp;<code>id</code>&nbsp;。如果 <strong>没有满足条件的房间</strong>&nbsp;，答案为 <code>-1</code>&nbsp;。</p> \n<p>请你返回长度为 <code>k</code>&nbsp;的数组&nbsp;<code>answer</code>&nbsp;，其中<em>&nbsp;</em><code>answer[j]</code>&nbsp;为第 <code>j</code>&nbsp;个查询的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]\n<b>输出：</b>[3,-1,3]\n<strong>解释：</strong>查询的答案如下：\n查询 [3,1] ：房间 3 的面积为 2 ，大于等于 1 ，且号码是最接近 3 的，为 abs(3 - 3) = 0 ，所以答案为 3 。\n查询 [3,3] ：没有房间的面积至少为 3 ，所以答案为 -1 。\n查询 [5,2] ：房间 3 的面积为 2 ，大于等于 2 ，且号码是最接近 5 的，为 abs(3 - 5) = 2 ，所以答案为 3 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]\n<b>输出：</b>[2,1,3]\n<strong>解释：</strong>查询的答案如下：\n查询 [2,3] ：房间 2 的面积为 3 ，大于等于 3 ，且号码是最接近的，为 abs(2 - 2) = 0 ，所以答案为 2 。\n查询 [2,4] ：房间 1 和 3 的面积都至少为 4 ，答案为 1 因为它房间编号更小。\n查询 [2,5] ：房间 3 是唯一面积大于等于 5 的，所以答案为 3 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == rooms.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>k == queries.length</code></li> \n <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= roomId<sub>i</sub>, preferred<sub>j</sub> &lt;= 10<sup>7</sup></code></li> \n <li><code>1 &lt;= size<sub>i</sub>, minSize<sub>j</sub> &lt;= 10<sup>7</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1848. 到目标元素的最小距离', '<p>给你一个整数数组 <code>nums</code> （下标 <strong>从 0 开始</strong> 计数）以及两个整数 <code>target</code> 和 <code>start</code> ，请你找出一个下标 <code>i</code> ，满足 <code>nums[i] == target</code> 且 <code>abs(i - start)</code> <strong>最小化</strong> 。注意：<code>abs(x)</code> 表示 <code>x</code> 的绝对值。</p> \n<p>返回 <code>abs(i - start)</code> 。</p> \n<p>题目数据保证 <code>target</code> 存在于 <code>nums</code> 中。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4,5], target = 5, start = 3\n<strong>输出：</strong>1\n<strong>解释：</strong>nums[4] = 5 是唯一一个等于 target 的值，所以答案是 abs(4 - 3) = 1 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1], target = 1, start = 0\n<strong>输出：</strong>0\n<strong>解释：</strong>nums[0] = 1 是唯一一个等于 target 的值，所以答案是 abs(0 - 0) = 0 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0\n<strong>输出：</strong>0\n<strong>解释：</strong>nums 中的每个值都是 1 ，但 nums[0] 使 abs(i - start) 的结果得以最小化，所以答案是 abs(0 - 0) = 0 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 1000</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= start &lt; nums.length</code></li> \n <li><code>target</code> 存在于 <code>nums</code> 中</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1849. 将字符串拆分为递减的连续值', '<p>给你一个仅由数字组成的字符串 <code>s</code> 。</p> \n<p>请你判断能否将 <code>s</code> 拆分成两个或者多个 <strong>非空子字符串</strong> ，使子字符串的 <strong>数值</strong> 按 <strong>降序</strong> 排列，且每两个 <strong>相邻子字符串</strong> 的数值之 <strong>差 </strong>等于 <code>1</code> 。</p> \n<ul> \n <li>例如，字符串 <code>s = \"0090089\"</code> 可以拆分成 <code>[\"0090\", \"089\"]</code> ，数值为 <code>[90,89]</code> 。这些数值满足按降序排列，且相邻值相差 <code>1</code> ，这种拆分方法可行。</li> \n <li>另一个例子中，字符串 <code>s = \"001\"</code> 可以拆分成 <code>[\"0\", \"01\"]</code>、<code>[\"00\", \"1\"]</code> 或 <code>[\"0\", \"0\", \"1\"]</code> 。然而，所有这些拆分方法都不可行，因为对应数值分别是 <code>[0,1]</code>、<code>[0,1]</code> 和 <code>[0,0,1]</code> ，都不满足按降序排列的要求。</li> \n</ul> \n<p>如果可以按要求拆分 <code>s</code> ，返回 <code>true</code> ；否则，返回 <code>false</code><em> </em>。</p> \n<p><strong>子字符串</strong> 是字符串中的一个连续字符序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"1234\"\n<strong>输出：</strong>false\n<strong>解释：</strong>不存在拆分 s 的可行方法。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"050043\"\n<strong>输出：</strong>true\n<strong>解释：</strong>s 可以拆分为 [\"05\", \"004\", \"3\"] ，对应数值为 [5,4,3] 。\n满足按降序排列，且相邻值相差 <code>1</code> 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"9080701\"\n<strong>输出：</strong>false\n<strong>解释：</strong>不存在拆分 s 的可行方法。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"10009998\"\n<strong>输出：</strong>true\n<strong>解释：</strong>s 可以拆分为 [\"100\", \"099\", \"98\"] ，对应数值为 [100,99,98] 。\n满足按降序排列，且相邻值相差 <code>1</code> 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 20</code></li> \n <li><code>s</code> 仅由数字组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('185. 部门工资前三高的所有员工', '<p><code>Employee</code> 表包含所有员工信息，每个员工有其对应的工号&nbsp;<code>Id</code>，姓名 <code>Name</code>，工资 <code>Salary</code> 和部门编号 <code>DepartmentId</code> 。</p> \n<pre>+----+-------+--------+--------------+\n| Id | Name  | Salary | DepartmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 85000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n| 5  | Janet | 69000  | 1            |\n| 6  | Randy | 85000  | 1            |\n| 7  | Will  | 70000  | 1            |\n+----+-------+--------+--------------+</pre> \n<p><code>Department</code> 表包含公司所有部门的信息。</p> \n<pre>+----+----------+\n| Id | Name     |\n+----+----------+\n| 1  | IT       |\n| 2  | Sales    |\n+----+----------+</pre> \n<p>编写一个&nbsp;SQL 查询，找出每个部门获得前三高工资的所有员工。例如，根据上述给定的表，查询结果应返回：</p> \n<pre>+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| IT         | Randy    | 85000  |\n| IT         | Joe      | 85000  |\n| IT         | Will     | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n+------------+----------+--------+</pre> \n<p><strong>解释：</strong></p> \n<p>IT 部门中，Max 获得了最高的工资，Randy 和 Joe 都拿到了第二高的工资，Will 的工资排第三。销售部门（Sales）只有两名员工，Henry 的工资最高，Sam 的工资排第二。</p>');
INSERT INTO `leecode` VALUES ('1850. 邻位交换的最小次数', '<p>给你一个表示大整数的字符串 <code>num</code> ，和一个整数 <code>k</code> 。</p> \n<p>如果某个整数是 <code>num</code> 中各位数字的一个 <strong>排列</strong> 且它的 <strong>值大于</strong> <code>num</code> ，则称这个整数为 <strong>妙数</strong> 。可能存在很多妙数，但是只需要关注 <strong>值最小</strong> 的那些。</p> \n<ul> \n <li>例如，<code>num = \"5489355142\"</code> ： \n  <ul> \n   <li>第 1 个最小妙数是 <code>\"5489355214\"</code></li> \n   <li>第 2 个最小妙数是 <code>\"5489355241\"</code></li> \n   <li>第 3 个最小妙数是 <code>\"5489355412\"</code></li> \n   <li>第 4 个最小妙数是 <code>\"5489355421\"</code></li> \n  </ul> </li> \n</ul> \n<p>返回要得到第 <code>k</code> 个 <strong>最小妙数</strong> 需要对 <code>num</code> 执行的 <strong>相邻位数字交换的最小次数</strong> 。</p> \n<p>测试用例是按存在第 <code>k</code> 个最小妙数而生成的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>num = \"5489355142\", k = 4\n<strong>输出：</strong>2\n<strong>解释：</strong>第 4 个最小妙数是 \"5489355421\" ，要想得到这个数字：\n- 交换下标 7 和下标 8 对应的位：\"5489355<strong>14</strong>2\" -&gt; \"5489355<strong>41</strong>2\"\n- 交换下标 8 和下标 9 对应的位：\"54893554<strong>12</strong>\" -&gt; \"54893554<strong>21</strong>\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>num = \"11112\", k = 4\n<strong>输出：</strong>4\n<strong>解释：</strong>第 4 个最小妙数是 \"21111\" ，要想得到这个数字：\n- 交换下标 3 和下标 4 对应的位：\"111<strong>12</strong>\" -&gt; \"111<strong>21</strong>\"\n- 交换下标 2 和下标 3 对应的位：\"11<strong>12</strong>1\" -&gt; \"11<strong>21</strong>1\"\n- 交换下标 1 和下标 2 对应的位：\"1<strong>12</strong>11\" -&gt; \"1<strong>21</strong>11\"\n- 交换下标 0 和下标 1 对应的位：\"<strong>12</strong>111\" -&gt; \"<strong>21</strong>111\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>num = \"00123\", k = 1\n<strong>输出：</strong>1\n<strong>解释：</strong>第 1 个最小妙数是 \"00132\" ，要想得到这个数字：\n- 交换下标 3 和下标 4 对应的位：\"001<strong>23</strong>\" -&gt; \"001<strong>32</strong>\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= num.length &lt;= 1000</code></li> \n <li><code>1 &lt;= k &lt;= 1000</code></li> \n <li><code>num</code> 仅由数字组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1851. 包含每个查询的最小区间', '<p>给你一个二维整数数组 <code>intervals</code> ，其中 <code>intervals[i] = [left<sub>i</sub>, right<sub>i</sub>]</code> 表示第 <code>i</code> 个区间开始于 <code>left<sub>i</sub></code> 、结束于 <code>right<sub>i</sub></code>（包含两侧取值，<strong>闭区间</strong>）。区间的 <strong>长度</strong> 定义为区间中包含的整数数目，更正式地表达是 <code>right<sub>i</sub> - left<sub>i</sub> + 1</code> 。</p> \n<p>再给你一个整数数组 <code>queries</code> 。第 <code>j</code> 个查询的答案是满足&nbsp;<code>left<sub>i</sub> &lt;= queries[j] &lt;= right<sub>i</sub></code> 的 <strong>长度最小区间 <code>i</code> 的长度</strong> 。如果不存在这样的区间，那么答案是 <code>-1</code> 。</p> \n<p>以数组形式返回对应查询的所有答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]\n<strong>输出：</strong>[3,3,1,4]\n<strong>解释：</strong>查询处理如下：\n- Query = 2 ：区间 [2,4] 是包含 2 的最小区间，答案为 4 - 2 + 1 = 3 。\n- Query = 3 ：区间 [2,4] 是包含 3 的最小区间，答案为 4 - 2 + 1 = 3 。\n- Query = 4 ：区间 [4,4] 是包含 4 的最小区间，答案为 4 - 4 + 1 = 1 。\n- Query = 5 ：区间 [3,6] 是包含 5 的最小区间，答案为 6 - 3 + 1 = 4 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]\n<strong>输出：</strong>[2,-1,4,6]\n<strong>解释：</strong>查询处理如下：\n- Query = 2 ：区间 [2,3] 是包含 2 的最小区间，答案为 3 - 2 + 1 = 2 。\n- Query = 19：不存在包含 19 的区间，答案为 -1 。\n- Query = 5 ：区间 [2,5] 是包含 5 的最小区间，答案为 5 - 2 + 1 = 4 。\n- Query = 22：区间 [20,25] 是包含 22 的最小区间，答案为 25 - 20 + 1 = 6 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li> \n <li><code>queries[i].length == 2</code></li> \n <li><code>1 &lt;= left<sub>i</sub> &lt;= right<sub>i</sub> &lt;= 10<sup>7</sup></code></li> \n <li><code>1 &lt;= queries[j] &lt;= 10<sup>7</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1854. 人口最多的年份', '<p>给你一个二维整数数组 <code>logs</code> ，其中每个 <code>logs[i] = [birth<sub>i</sub>, death<sub>i</sub>]</code> 表示第 <code>i</code> 个人的出生和死亡年份。</p> \n<p>年份 <code>x</code> 的 <strong>人口</strong> 定义为这一年期间活着的人的数目。第 <code>i</code> 个人被计入年份 <code>x</code> 的人口需要满足：<code>x</code> 在闭区间 <code>[birth<sub>i</sub>, death<sub>i</sub> - 1]</code> 内。注意，人不应当计入他们死亡当年的人口中。</p> \n<p>返回 <strong>人口最多</strong> 且 <strong>最早</strong> 的年份。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>logs = [[1993,1999],[2000,2010]]\n<strong>输出：</strong>1993\n<strong>解释：</strong>人口最多为 1 ，而 1993 是人口为 1 的最早年份。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>logs = [[1950,1961],[1960,1971],[1970,1981]]\n<strong>输出：</strong>1960\n<strong>解释：</strong> \n人口最多为 2 ，分别出现在 1960 和 1970 。\n其中最早年份是 1960 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= logs.length &lt;= 100</code></li> \n <li><code>1950 &lt;= birth<sub>i</sub> &lt; death<sub>i</sub> &lt;= 2050</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1855. 下标对中的最大距离', '<p>给你两个 <strong>非递增</strong> 的整数数组 <code>nums1</code>​​​​​​ 和 <code>nums2</code>​​​​​​ ，数组下标均 <strong>从 0 开始</strong> 计数。</p> \n<p>下标对 <code>(i, j)</code> 中 <code>0 &lt;= i &lt; nums1.length</code> 且 <code>0 &lt;= j &lt; nums2.length</code> 。如果该下标对同时满足 <code>i &lt;= j</code> 且 <code>nums1[i] &lt;= nums2[j]</code> ，则称之为 <strong>有效</strong> 下标对，该下标对的 <strong>距离</strong> 为 <code>j - i</code>​​ 。​​</p> \n<p>返回所有 <strong>有效</strong> 下标对<em> </em><code>(i, j)</code><em> </em>中的 <strong>最大距离</strong> 。如果不存在有效下标对，返回 <code>0</code> 。</p> \n<p>一个数组 <code>arr</code> ，如果每个 <code>1 &lt;= i &lt; arr.length</code> 均有 <code>arr[i-1] &gt;= arr[i]</code> 成立，那么该数组是一个 <strong>非递增</strong> 数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]\n<strong>输出：</strong>2\n<strong>解释：</strong>有效下标对是 (0,0), (2,2), (2,3), (2,4), (3,3), (3,4) 和 (4,4) 。\n最大距离是 2 ，对应下标对 (2,4) 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums1 = [2,2,2], nums2 = [10,10,1]\n<strong>输出：</strong>1\n<strong>解释：</strong>有效下标对是 (0,0), (0,1) 和 (1,1) 。\n最大距离是 1 ，对应下标对 (0,1) 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]\n<strong>输出：</strong>2\n<strong>解释：</strong>有效下标对是 (2,2), (2,3), (2,4), (3,3) 和 (3,4) 。\n最大距离是 2 ，对应下标对 (2,4) 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums1 = [5,4], nums2 = [3,2]\n<strong>输出：</strong>0\n<strong>解释：</strong>不存在有效下标对，所以返回 0 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums1.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums2.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums1[i], nums2[j] &lt;= 10<sup>5</sup></code></li> \n <li><code>nums1</code> 和 <code>nums2</code> 都是 <strong>非递增</strong> 数组</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1856. 子数组最小乘积的最大值', '<p>一个数组的 <strong>最小乘积</strong>&nbsp;定义为这个数组中 <strong>最小值</strong>&nbsp;<strong>乘以&nbsp;</strong>数组的 <strong>和</strong>&nbsp;。</p> \n<ul> \n <li>比方说，数组&nbsp;<code>[3,2,5]</code>&nbsp;（最小值是&nbsp;<code>2</code>）的最小乘积为&nbsp;<code>2 * (3+2+5) = 2 * 10 = 20</code>&nbsp;。</li> \n</ul> \n<p>给你一个正整数数组&nbsp;<code>nums</code>&nbsp;，请你返回&nbsp;<code>nums</code>&nbsp;任意&nbsp;<strong>非空子数组</strong>&nbsp;的<strong>最小乘积</strong>&nbsp;的&nbsp;<strong>最大值</strong>&nbsp;。由于答案可能很大，请你返回答案对&nbsp;&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余&nbsp;</strong>的结果。</p> \n<p>请注意，最小乘积的最大值考虑的是取余操作 <strong>之前</strong>&nbsp;的结果。题目保证最小乘积的最大值在 <strong>不取余</strong> 的情况下可以用 <strong>64 位有符号整数</strong>&nbsp;保存。</p> \n<p><strong>子数组</strong>&nbsp;定义为一个数组的 <strong>连续</strong>&nbsp;部分。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [1,<strong>2,3,2</strong>]\n<b>输出：</b>14\n<b>解释：</b>最小乘积的最大值由子数组 [2,3,2] （最小值是 2）得到。\n2 * (2+3+2) = 2 * 7 = 14 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [2,<strong>3,3</strong>,1,2]\n<b>输出：</b>18\n<b>解释：</b>最小乘积的最大值由子数组 [3,3] （最小值是 3）得到。\n3 * (3+3) = 3 * 6 = 18 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [3,1,<strong>5,6,4</strong>,2]\n<b>输出：</b>60\n<b>解释：</b>最小乘积的最大值由子数组 [5,6,4] （最小值是 4）得到。\n4 * (5+6+4) = 4 * 15 = 60 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>7</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1857. 有向图中最大颜色值', '<p>给你一个&nbsp;<strong>有向图</strong>&nbsp;，它含有&nbsp;<code>n</code>&nbsp;个节点和 <code>m</code>&nbsp;条边。节点编号从&nbsp;<code>0</code> 到&nbsp;<code>n - 1</code>&nbsp;。</p> \n<p>给你一个字符串&nbsp;<code>colors</code> ，其中&nbsp;<code>colors[i]</code>&nbsp;是小写英文字母，表示图中第 <code>i</code>&nbsp;个节点的 <b>颜色</b>&nbsp;（下标从 <strong>0</strong>&nbsp;开始）。同时给你一个二维数组&nbsp;<code>edges</code>&nbsp;，其中&nbsp;<code>edges[j] = [a<sub>j</sub>, b<sub>j</sub>]</code>&nbsp;表示从节点&nbsp;<code>a<sub>j</sub></code>&nbsp;到节点&nbsp;<code>b<sub>j</sub></code><sub>&nbsp;</sub>有一条&nbsp;<strong>有向边</strong>&nbsp;。</p> \n<p>图中一条有效 <strong>路径</strong>&nbsp;是一个点序列&nbsp;<code>x<sub>1</sub> -&gt; x<sub>2</sub> -&gt; x<sub>3</sub> -&gt; ... -&gt; x<sub>k</sub></code>&nbsp;，对于所有&nbsp;<code>1 &lt;= i &lt; k</code>&nbsp;，从&nbsp;<code>x<sub>i</sub></code> 到&nbsp;<code>x<sub>i+1</sub></code>&nbsp;在图中有一条有向边。路径的 <strong>颜色值</strong>&nbsp;是路径中 <strong>出现次数最多</strong> 颜色的节点数目。</p> \n<p>请你返回给定图中有效路径里面的&nbsp;<strong>最大颜色值</strong><strong>&nbsp;。</strong>如果图中含有环，请返回 <code>-1</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 400px; height: 182px;\" src=\"https://assets.leetcode.com/uploads/2021/04/21/leet1.png\" alt=\"\"></p> \n<pre><b>输入：</b>colors = \"abaca\", edges = [[0,1],[0,2],[2,3],[3,4]]\n<b>输出：</b>3\n<b>解释：</b>路径 0 -&gt; 2 -&gt; 3 -&gt; 4 含有 3 个颜色为 <code>\"a\" 的节点（上图中的红色节点）。</code>\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 85px; height: 85px;\" src=\"https://assets.leetcode.com/uploads/2021/04/21/leet2.png\" alt=\"\"></p> \n<pre><b>输入：</b>colors = \"a\", edges = [[0,0]]\n<b>输出：</b>-1\n<b>解释：</b>从 0 到 0 有一个环。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == colors.length</code></li> \n <li><code>m == edges.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= m &lt;= 10<sup>5</sup></code></li> \n <li><code>colors</code>&nbsp;只含有小写英文字母。</li> \n <li><code>0 &lt;= a<sub>j</sub>, b<sub>j</sub>&nbsp;&lt; n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1859. 将句子排序', '<p>一个 <strong>句子</strong>&nbsp;指的是一个序列的单词用单个空格连接起来，且开头和结尾没有任何空格。每个单词都只包含小写或大写英文字母。</p> \n<p>我们可以给一个句子添加 <strong>从 1 开始的单词位置索引 </strong>，并且将句子中所有单词&nbsp;<strong>打乱顺序</strong>&nbsp;。</p> \n<ul> \n <li>比方说，句子&nbsp;<code>\"This is a sentence\"</code>&nbsp;可以被打乱顺序得到&nbsp;<code>\"sentence4 a3 is2 This1\"</code>&nbsp;或者&nbsp;<code>\"is2 sentence4 This1 a3\"</code>&nbsp;。</li> \n</ul> \n<p>给你一个 <strong>打乱顺序</strong>&nbsp;的句子&nbsp;<code>s</code>&nbsp;，它包含的单词不超过&nbsp;<code>9</code>&nbsp;个，请你重新构造并得到原本顺序的句子。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"is2 sentence4 This1 a3\"\n<b>输出：</b>\"This is a sentence\"\n<b>解释：</b>将 s 中的单词按照初始位置排序，得到 \"This1 is2 a3 sentence4\" ，然后删除数字。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"Myself2 Me1 I4 and3\"\n<b>输出：</b>\"Me Myself and I\"\n<b>解释：</b>将 s 中的单词按照初始位置排序，得到 \"Me1 Myself2 and3 I4\" ，然后删除数字。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= s.length &lt;= 200</code></li> \n <li><code>s</code>&nbsp;只包含小写和大写英文字母、空格以及从&nbsp;<code>1</code>&nbsp;到&nbsp;<code>9</code>&nbsp;的数字。</li> \n <li><code>s</code>&nbsp;中单词数目为&nbsp;<code>1</code>&nbsp;到&nbsp;<code>9</code>&nbsp;个。</li> \n <li><code>s</code>&nbsp;中的单词由单个空格分隔。</li> \n <li><code>s</code>&nbsp;不包含任何前导或者后缀空格。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1860. 增长的内存泄露', '<p>给你两个整数&nbsp;<code>memory1</code> 和&nbsp;<code>memory2</code>&nbsp;分别表示两个内存条剩余可用内存的位数。现在有一个程序每秒递增的速度消耗着内存。</p> \n<p>在第&nbsp;<code>i</code>&nbsp;秒（秒数从 1 开始），有 <code>i</code>&nbsp;位内存被分配到&nbsp;<strong>剩余内存较多</strong>&nbsp;的内存条（如果两者一样多，则分配到第一个内存条）。如果两者剩余内存都不足 <code>i</code>&nbsp;位，那么程序将 <b>意外退出</b>&nbsp;。</p> \n<p>请你返回一个数组，包含<em> </em><code>[crashTime, memory1<sub>crash</sub>, memory2<sub>crash</sub>]</code>&nbsp;，其中&nbsp;<code>crashTime</code>是程序意外退出的时间（单位为秒），<em>&nbsp;</em><code>memory1<sub>crash</sub></code><em> </em>和<em>&nbsp;</em><code>memory2<sub>crash</sub></code><em>&nbsp;</em>分别是两个内存条最后剩余内存的位数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>memory1 = 2, memory2 = 2\n<b>输出：</b>[3,1,0]\n<b>解释：</b>内存分配如下：\n- 第 1 秒，内存条 1 被占用 1 位内存。内存条 1 现在有 1 位剩余可用内存。\n- 第 2 秒，内存条 2 被占用 2 位内存。内存条 2 现在有 0 位剩余可用内存。\n- 第 3 秒，程序意外退出，两个内存条分别有 1 位和 0 位剩余可用内存。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>memory1 = 8, memory2 = 11\n<b>输出：</b>[6,0,4]\n<b>解释：</b>内存分配如下：\n- 第 1 秒，内存条 2 被占用 1 位内存，内存条 2 现在有 10 位剩余可用内存。\n- 第 2 秒，内存条 2 被占用 2 位内存，内存条 2 现在有 8 位剩余可用内存。\n- 第 3 秒，内存条 1 被占用 3 位内存，内存条 1 现在有 5 位剩余可用内存。\n- 第 4 秒，内存条 2 被占用 4 位内存，内存条 2 现在有 4 位剩余可用内存。\n- 第 5 秒，内存条 1 被占用 5 位内存，内存条 1 现在有 0 位剩余可用内存。\n- 第 6 秒，程序意外退出，两个内存条分别有 0 位和 4 位剩余可用内存。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= memory1, memory2 &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1861. 旋转盒子', '<p>给你一个&nbsp;<code>m x n</code>&nbsp;的字符矩阵&nbsp;<code>box</code>&nbsp;，它表示一个箱子的侧视图。箱子的每一个格子可能为：</p> \n<ul> \n <li><code>\'#\'</code>&nbsp;表示石头</li> \n <li><code>\'*\'</code>&nbsp;表示固定的障碍物</li> \n <li><code>\'.\'</code>&nbsp;表示空位置</li> \n</ul> \n<p>这个箱子被 <strong>顺时针旋转 90 度</strong>&nbsp;，由于重力原因，部分石头的位置会发生改变。每个石头会垂直掉落，直到它遇到障碍物，另一个石头或者箱子的底部。重力 <strong>不会</strong>&nbsp;影响障碍物的位置，同时箱子旋转不会产生<strong>惯性</strong>&nbsp;，也就是说石头的水平位置不会发生改变。</p> \n<p>题目保证初始时&nbsp;<code>box</code>&nbsp;中的石头要么在一个障碍物上，要么在另一个石头上，要么在箱子的底部。</p> \n<p>请你返回一个<em>&nbsp;</em><code>n x m</code>的矩阵，表示按照上述旋转后，箱子内的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 300px; height: 150px;\" src=\"https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcodewithstones.png\" alt=\"\"></p> \n<pre><b>输入：</b>box = [[\"#\",\".\",\"#\"]]\n<b>输出：</b>[[\".\"],\n&nbsp;     [\"#\"],\n&nbsp;     [\"#\"]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 375px; height: 195px;\" src=\"https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcode2withstones.png\" alt=\"\"></p> \n<pre><b>输入：</b>box = [[\"#\",\".\",\"*\",\".\"],\n&nbsp;           [\"#\",\"#\",\"*\",\".\"]]\n<b>输出：</b>[[\"#\",\".\"],\n&nbsp;     [\"#\",\"#\"],\n&nbsp;     [\"*\",\"*\"],\n&nbsp;     [\".\",\".\"]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"width: 400px; height: 218px;\" src=\"https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcode3withstone.png\" alt=\"\"></p> \n<pre><b>输入：</b>box = [[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],\n&nbsp;           [\"#\",\"#\",\"#\",\"*\",\".\",\".\"],\n&nbsp;           [\"#\",\"#\",\"#\",\".\",\"#\",\".\"]]\n<b>输出：</b>[[\".\",\"#\",\"#\"],\n&nbsp;     [\".\",\"#\",\"#\"],\n&nbsp;     [\"#\",\"#\",\"*\"],\n&nbsp;     [\"#\",\"*\",\".\"],\n&nbsp;     [\"#\",\".\",\"*\"],\n&nbsp;     [\"#\",\".\",\".\"]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == box.length</code></li> \n <li><code>n == box[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 500</code></li> \n <li><code>box[i][j]</code>&nbsp;只可能是&nbsp;<code>\'#\'</code>&nbsp;，<code>\'*\'</code>&nbsp;或者&nbsp;<code>\'.\'</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1862. 向下取整数对和', '<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;，请你返回所有下标对&nbsp;<code>0 &lt;= i, j &lt; nums.length</code>&nbsp;的&nbsp;<code>floor(nums[i] / nums[j])</code>&nbsp;结果之和。由于答案可能会很大，请你返回答案对<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;的结果。</p> \n<p>函数&nbsp;<code>floor()</code>&nbsp;返回输入数字的整数部分。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [2,5,9]\n<b>输出：</b>10\n<strong>解释：</strong>\nfloor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0\nfloor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1\nfloor(5 / 2) = 2\nfloor(9 / 2) = 4\nfloor(9 / 5) = 1\n我们计算每一个数对商向下取整的结果并求和得到 10 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [7,7,7,7,7,7,7]\n<b>输出：</b>49\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1863. 找出所有子集的异或总和再求和', '<p>一个数组的<strong> 异或总和</strong> 定义为数组中所有元素按位 <code>XOR</code> 的结果；如果数组为 <strong>空</strong> ，则异或总和为 <code>0</code> 。</p> \n<ul> \n <li>例如，数组&nbsp;<code>[2,5,6]</code> 的 <strong>异或总和</strong> 为 <code>2 XOR 5 XOR 6 = 1</code> 。</li> \n</ul> \n<p>给你一个数组 <code>nums</code> ，请你求出 <code>nums</code> 中每个 <strong>子集</strong> 的 <strong>异或总和</strong> ，计算并返回这些值相加之 <strong>和</strong> 。</p> \n<p><strong>注意：</strong>在本题中，元素 <strong>相同</strong> 的不同子集应 <strong>多次</strong> 计数。</p> \n<p>数组 <code>a</code> 是数组 <code>b</code> 的一个 <strong>子集</strong> 的前提条件是：从 <code>b</code> 删除几个（也可能不删除）元素能够得到 <code>a</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,3]\n<strong>输出：</strong>6\n<strong>解释：</strong>[1,3] 共有 4 个子集：\n- 空子集的异或总和是 0 。\n- [1] 的异或总和为 1 。\n- [3] 的异或总和为 3 。\n- [1,3] 的异或总和为 1 XOR 3 = 2 。\n0 + 1 + 3 + 2 = 6\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [5,1,6]\n<strong>输出：</strong>28\n<strong>解释：</strong>[5,1,6] 共有 8 个子集：\n- 空子集的异或总和是 0 。\n- [5] 的异或总和为 5 。\n- [1] 的异或总和为 1 。\n- [6] 的异或总和为 6 。\n- [5,1] 的异或总和为 5 XOR 1 = 4 。\n- [5,6] 的异或总和为 5 XOR 6 = 3 。\n- [1,6] 的异或总和为 1 XOR 6 = 7 。\n- [5,1,6] 的异或总和为 5 XOR 1 XOR 6 = 2 。\n0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [3,4,5,6,7,8]\n<strong>输出：</strong>480\n<strong>解释：</strong>每个子集的全部异或总和值之和为 480 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 12</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 20</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1864. 构成交替字符串需要的最小交换次数', '<p>给你一个二进制字符串 <code>s</code> ，现需要将其转化为一个 <strong>交替字符串</strong> 。请你计算并返回转化所需的 <strong>最小</strong> 字符交换次数，如果无法完成转化，返回<em> </em><code>-1</code><em> </em>。</p> \n<p><strong>交替字符串</strong> 是指：相邻字符之间不存在相等情况的字符串。例如，字符串 <code>\"010\"</code> 和 <code>\"1010\"</code> 属于交替字符串，但 <code>\"0100\"</code> 不是。</p> \n<p>任意两个字符都可以进行交换，<strong>不必相邻</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"111000\"\n<strong>输出：</strong>1\n<strong>解释：</strong>交换位置 1 和 4：\"1<em><strong>1</strong></em>10<em><strong>0</strong></em>0\" -&gt; \"1<em><strong>0</strong></em>10<em><strong>1</strong></em>0\" ，字符串变为交替字符串。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"010\"\n<strong>输出：</strong>0\n<strong>解释：</strong>字符串已经是交替字符串了，不需要交换。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"1110\"\n<strong>输出：</strong>-1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 1000</code></li> \n <li><code>s[i]</code> 的值为 <code>\'0\'</code> 或 <code>\'1\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1865. 找出和为指定值的下标对', '<p>给你两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，请你实现一个支持下述两类查询的数据结构：</p> \n<ol> \n <li><strong>累加</strong> ，将一个正整数加到 <code>nums2</code> 中指定下标对应元素上。</li> \n <li><strong>计数 </strong>，统计满足 <code>nums1[i] + nums2[j]</code> 等于指定值的下标对 <code>(i, j)</code> 数目（<code>0 &lt;= i &lt; nums1.length</code> 且 <code>0 &lt;= j &lt; nums2.length</code>）。</li> \n</ol> \n<p>实现 <code>FindSumPairs</code> 类：</p> \n<ul> \n <li><code>FindSumPairs(int[] nums1, int[] nums2)</code> 使用整数数组&nbsp;<code>nums1</code> 和 <code>nums2</code> 初始化 <code>FindSumPairs</code> 对象。</li> \n <li><code>void add(int index, int val)</code> 将 <code>val</code> 加到 <code>nums2[index]</code> 上，即，执行 <code>nums2[index] += val</code> 。</li> \n <li><code>int count(int tot)</code> 返回满足&nbsp;<code>nums1[i] + nums2[j] == tot</code> 的下标对 <code>(i, j)</code> 数目。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"FindSumPairs\", \"count\", \"add\", \"count\", \"count\", \"add\", \"add\", \"count\"]\n[[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]\n<strong>输出：</strong>\n[null, 8, null, 2, 1, null, null, 11]\n\n<strong>解释：</strong>\nFindSumPairs findSumPairs = new FindSumPairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]);\nfindSumPairs.count(7);  // 返回 8 ; 下标对 (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) 满足 2 + 5 = 7 ，下标对 (5,1), (5,5) 满足 3 + 4 = 7\nfindSumPairs.add(3, 2); // 此时 nums2 = [1,4,5,<em><strong>4</strong></em><code>,5,4</code>]\nfindSumPairs.count(8);  // 返回 2 ；下标对 (5,2), (5,4) 满足 3 + 5 = 8\nfindSumPairs.count(4);  // 返回 1 ；下标对 (5,0) 满足 3 + 1 = 4\nfindSumPairs.add(0, 1); // 此时 nums2 = [<em><strong><code>2</code></strong></em>,4,5,4<code>,5,4</code>]\nfindSumPairs.add(1, 1); // 此时 nums2 = [<code>2</code>,<em><strong>5</strong></em>,5,4<code>,5,4</code>]\nfindSumPairs.count(7);  // 返回 11 ；下标对 (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) 满足 2 + 5 = 7 ，下标对 (5,3), (5,5) 满足 3 + 4 = 7\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums1.length &lt;= 1000</code></li> \n <li><code>1 &lt;= nums2.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums1[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>1 &lt;= nums2[i] &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= index &lt; nums2.length</code></li> \n <li><code>1 &lt;= val &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= tot &lt;= 10<sup>9</sup></code></li> \n <li>最多调用&nbsp;<code>add</code> 和 <code>count</code> 函数各 <code>1000</code> 次</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1866. 恰有 K 根木棍可以看到的排列数目', '<p>有 <code>n</code> 根长度互不相同的木棍，长度为从 <code>1</code> 到 <code>n</code> 的整数。请你将这些木棍排成一排，并满足从左侧 <strong>可以看到</strong>&nbsp;<strong>恰好</strong> <code>k</code> 根木棍。从左侧 <strong>可以看到</strong> 木棍的前提是这个木棍的 <strong>左侧</strong> 不存在比它 <strong>更长的</strong> 木棍。</p> \n<ul> \n <li>例如，如果木棍排列为 <code>[<em><strong>1</strong></em>,<em><strong>3</strong></em>,2,<em><strong>5</strong></em>,4]</code> ，那么从左侧可以看到的就是长度分别为 <code>1</code>、<code>3</code> 、<code>5</code> 的木棍。</li> \n</ul> \n<p>给你 <code>n</code> 和 <code>k</code> ，返回符合题目要求的排列 <strong>数目</strong> 。由于答案可能很大，请返回对 <code>10<sup>9</sup> + 7</code> <strong>取余 </strong>的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 3, k = 2\n<strong>输出：</strong>3\n<strong>解释：</strong>[<strong><em>1</em></strong>,<strong><em>3</em></strong>,2], [<em><strong>2</strong></em>,<em><strong>3</strong></em>,1] 和 [<em><strong>2</strong></em>,1,<em><strong>3</strong></em>] 是仅有的能满足恰好 2 根木棍可以看到的排列。\n可以看到的木棍已经用粗体+斜体标识。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 5, k = 5\n<strong>输出：</strong>1\n<strong>解释：</strong>[<em><strong>1</strong></em>,<em><strong>2</strong></em>,<em><strong>3</strong></em>,<em><strong>4</strong></em>,<em><strong>5</strong></em>] 是唯一一种能满足全部 5 根木棍可以看到的排列。\n可以看到的木棍已经用粗体+斜体标识。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 20, k = 11\n<strong>输出：</strong>647427950\n<strong>解释：</strong>总共有 647427950 (mod 10<sup>9 </sup>+ 7) 种能满足恰好有 11 根木棍可以看到的排列。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 1000</code></li> \n <li><code>1 &lt;= k &lt;= n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1869. 哪种连续子字符串更长', '<p>给你一个二进制字符串 <code>s</code> 。如果字符串中由 <code>1</code> 组成的 <strong>最长</strong> 连续子字符串 <strong>严格长于</strong> 由 <code>0</code> 组成的 <strong>最长</strong> 连续子字符串，返回 <code>true</code> ；否则，返回 <code>false</code><em> </em>。</p> \n<ul> \n <li>例如，<code>s = \"<strong>11</strong>01<strong>000</strong>10\"</code> 中，由 <code>1</code> 组成的最长连续子字符串的长度是 <code>2</code> ，由 <code>0</code> 组成的最长连续子字符串的长度是 <code>3</code> 。</li> \n</ul> \n<p>注意，如果字符串中不存在 <code>0</code> ，此时认为由 <code>0</code> 组成的最长连续子字符串的长度是 <code>0</code> 。字符串中不存在 <code>1</code> 的情况也适用此规则。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"1101\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\n由 <code>1</code> 组成的最长连续子字符串的长度是 2：\"<strong>11</strong>01\"\n由 <code>0</code> 组成的最长连续子字符串的长度是 1：\"11<strong>0</strong>1\"\n由 1 组成的子字符串更长，故返回 true 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"111000\"\n<strong>输出：</strong>false\n<strong>解释：</strong>\n由 <code>1</code> 组成的最长连续子字符串的长度是 3：\"<strong>111</strong>000\"\n由<code> 0</code> 组成的最长连续子字符串的长度是 3：\"111<strong>000</strong>\"\n由 1 组成的子字符串不比由 0 组成的子字符串长，故返回 false 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"110100010\"\n<strong>输出：</strong>false\n<strong>解释：</strong>\n由 <code>1</code> 组成的最长连续子字符串的长度是 2：\"<strong>11</strong>0100010\"\n由 <code>0</code> 组成的最长连续子字符串的长度是 3：\"1101<strong>000</strong>10\"\n由 1 组成的子字符串不比由 0 组成的子字符串长，故返回 false 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 100</code></li> \n <li><code>s[i]</code> 不是 <code>\'0\'</code> 就是 <code>\'1\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('187. 重复的DNA序列', '<p>所有 DNA 都由一系列缩写为 <code>\'A\'</code>，<code>\'C\'</code>，<code>\'G\'</code> 和 <code>\'T\'</code> 的核苷酸组成，例如：<code>\"ACGAATTCCG\"</code>。在研究 DNA 时，识别 DNA 中的重复序列有时会对研究非常有帮助。</p> \n<p>编写一个函数来找出所有目标子串，目标子串的长度为 10，且在 DNA 字符串 <code>s</code> 中出现次数超过一次。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n<strong>输出：</strong>[\"AAAAACCCCC\",\"CCCCCAAAAA\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"AAAAAAAAAAAAA\"\n<strong>输出：</strong>[\"AAAAAAAAAA\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s[i]</code> 为 <code>\'A\'</code>、<code>\'C\'</code>、<code>\'G\'</code> 或 <code>\'T\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1870. 准时到达的列车最小时速', '<p>给你一个浮点数 <code>hour</code> ，表示你到达办公室可用的总通勤时间。要到达办公室，你必须按给定次序乘坐 <code>n</code> 趟列车。另给你一个长度为 <code>n</code> 的整数数组 <code>dist</code> ，其中 <code>dist[i]</code> 表示第 <code>i</code> 趟列车的行驶距离（单位是千米）。</p> \n<p>每趟列车均只能在整点发车，所以你可能需要在两趟列车之间等待一段时间。</p> \n<ul> \n <li>例如，第 <code>1</code> 趟列车需要 <code>1.5</code> 小时，那你必须再等待 <code>0.5</code> 小时，搭乘在第 2 小时发车的第 <code>2</code> 趟列车。</li> \n</ul> \n<p>返回能满足你准时到达办公室所要求全部列车的<strong> 最小正整数 </strong>时速（单位：千米每小时），如果无法准时到达，则返回 <code>-1</code> 。</p> \n<p>生成的测试用例保证答案不超过 <code>10<sup>7</sup></code> ，且 <code>hour</code> 的 <strong>小数点后最多存在两位数字</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>dist = [1,3,2], hour = 6\n<strong>输出：</strong>1\n<strong>解释：</strong>速度为 1 时：\n- 第 1 趟列车运行需要 1/1 = 1 小时。\n- 由于是在整数时间到达，可以立即换乘在第 1 小时发车的列车。第 2 趟列车运行需要 3/1 = 3 小时。\n- 由于是在整数时间到达，可以立即换乘在第 4 小时发车的列车。第 3 趟列车运行需要 2/1 = 2 小时。\n- 你将会恰好在第 6 小时到达。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>dist = [1,3,2], hour = 2.7\n<strong>输出：</strong>3\n<strong>解释：</strong>速度为 3 时：\n- 第 1 趟列车运行需要 1/3 = 0.33333 小时。\n- 由于不是在整数时间到达，故需要等待至第 1 小时才能搭乘列车。第 2 趟列车运行需要 3/3 = 1 小时。\n- 由于是在整数时间到达，可以立即换乘在第 2 小时发车的列车。第 3 趟列车运行需要 2/3 = 0.66667 小时。\n- 你将会在第 2.66667 小时到达。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>dist = [1,3,2], hour = 1.9\n<strong>输出：</strong>-1\n<strong>解释：</strong>不可能准时到达，因为第 3 趟列车最早是在第 2 小时发车。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == dist.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= dist[i] &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= hour &lt;= 10<sup>9</sup></code></li> \n <li><code>hours</code> 中，小数点后最多存在两位数字</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1871. 跳跃游戏 VII', '<p>给你一个下标从 <strong>0 </strong>开始的二进制字符串&nbsp;<code>s</code>&nbsp;和两个整数&nbsp;<code>minJump</code> 和&nbsp;<code>maxJump</code>&nbsp;。一开始，你在下标&nbsp;<code>0</code>&nbsp;处，且该位置的值一定为&nbsp;<code>\'0\'</code>&nbsp;。当同时满足如下条件时，你可以从下标&nbsp;<code>i</code>&nbsp;移动到下标&nbsp;<code>j</code>&nbsp;处：</p> \n<ul> \n <li><code>i + minJump &lt;= j &lt;= min(i + maxJump, s.length - 1)</code>&nbsp;且</li> \n <li><code>s[j] == \'0\'</code>.</li> \n</ul> \n<p>如果你可以到达 <code>s</code>&nbsp;的下标<i>&nbsp;</i><code>s.length - 1</code>&nbsp;处，请你返回&nbsp;<code>true</code>&nbsp;，否则返回&nbsp;<code>false</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"<strong>0</strong>11<strong>0</strong>1<strong>0</strong>\", minJump = 2, maxJump = 3\n<b>输出：</b>true\n<strong>解释：</strong>\n第一步，从下标 0 移动到下标 3 。\n第二步，从下标 3 移动到下标 5 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"01101110\", minJump = 2, maxJump = 3\n<b>输出：</b>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s[i]</code>&nbsp;要么是&nbsp;<code>\'0\'</code>&nbsp;，要么是&nbsp;<code>\'1\'</code></li> \n <li><code>s[0] == \'0\'</code></li> \n <li><code>1 &lt;= minJump &lt;= maxJump &lt; s.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1872. 石子游戏 VIII', '<p>Alice 和 Bob 玩一个游戏，两人轮流操作， <strong>Alice 先手</strong>&nbsp;。</p> \n<p>总共有&nbsp;<code>n</code>&nbsp;个石子排成一行。轮到某个玩家的回合时，如果石子的数目 <strong>大于 1</strong>&nbsp;，他将执行以下操作：</p> \n<ol> \n <li>选择一个整数&nbsp;<code>x &gt; 1</code>&nbsp;，并且 <strong>移除</strong>&nbsp;最左边的&nbsp;<code>x</code>&nbsp;个石子。</li> \n <li>将<strong>&nbsp;移除</strong>&nbsp;的石子价值之 <strong>和</strong>&nbsp;累加到该玩家的分数中。</li> \n <li>将一个 <strong>新的石子</strong>&nbsp;放在最左边，且新石子的值为被移除石子值之和。</li> \n</ol> \n<p>当只剩下 <strong>一个</strong>&nbsp;石子时，游戏结束。</p> \n<p>Alice 和 Bob 的 <strong>分数之差</strong>&nbsp;为&nbsp;<code>(Alice 的分数&nbsp;- Bob 的分数)</code>&nbsp;。&nbsp;Alice 的目标是<strong>&nbsp;最大化</strong>&nbsp;分数差，Bob 的目标是 <strong>最小化</strong>&nbsp;分数差。</p> \n<p>给你一个长度为 <code>n</code>&nbsp;的整数数组&nbsp;<code>stones</code>&nbsp;，其中&nbsp;<code>stones[i]</code>&nbsp;是 <strong>从左边起</strong>&nbsp;第&nbsp;<code>i</code>&nbsp;个石子的价值。请你返回在双方都采用 <strong>最优</strong> 策略的情况下，Alice 和 Bob 的 <strong>分数之差</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>stones = [-1,2,-3,4,-5]\n<b>输出：</b>5\n<strong>解释：</strong>\n- Alice 移除最左边的 4 个石子，得分增加 (-1) + 2 + (-3) + 4 = 2 ，并且将一个价值为 2 的石子放在最左边。stones = [2,-5] 。\n- Bob 移除最左边的 2 个石子，得分增加 2 + (-5) = -3 ，并且将一个价值为 -3 的石子放在最左边。stones = [-3] 。\n两者分数之差为 2 - (-3) = 5 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>stones = [7,-6,5,10,5,-2,-6]\n<b>输出：</b>13\n<b>解释：</b>\n- Alice 移除所有石子，得分增加 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) = 13 ，并且将一个价值为 13 的石子放在最左边。stones = [13] 。\n两者分数之差为 13 - 0 = 13 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>stones = [-10,-12]\n<b>输出：</b>-22\n<strong>解释：</strong>\n- Alice 只有一种操作，就是移除所有石子。得分增加 (-10) + (-12) = -22 ，并且将一个价值为 -22 的石子放在最左边。stones = [-22] 。\n两者分数之差为 (-22) - 0 = -22 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == stones.length</code></li> \n <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>-10<sup>4</sup> &lt;= stones[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1876. 长度为三且各字符不同的子字符串', '<p>如果一个字符串不含有任何重复字符，我们称这个字符串为 <strong>好</strong>&nbsp;字符串。</p> \n<p>给你一个字符串 <code>s</code>&nbsp;，请你返回 <code>s</code>&nbsp;中长度为 <strong>3</strong>&nbsp;的 <strong>好子字符串</strong> 的数量。</p> \n<p>注意，如果相同的好子字符串出现多次，每一次都应该被记入答案之中。</p> \n<p><strong>子字符串</strong> 是一个字符串中连续的字符序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"xyzzaz\"\n<b>输出：</b>1\n<b>解释：</b>总共有 4 个长度为 3 的子字符串：\"xyz\"，\"yzz\"，\"zza\" 和 \"zaz\" 。\n唯一的长度为 3 的好子字符串是 \"xyz\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"aababcabc\"\n<b>输出：</b>4\n<b>解释：</b>总共有 7 个长度为 3 的子字符串：\"aab\"，\"aba\"，\"bab\"，\"abc\"，\"bca\"，\"cab\" 和 \"abc\" 。\n好子字符串包括 \"abc\"，\"bca\"，\"cab\" 和 \"abc\" 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 100</code></li> \n <li><code>s</code>​​​​​​ 只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1877. 数组中最大数对和的最小值', '<p>一个数对&nbsp;<code>(a,b)</code>&nbsp;的 <strong>数对和</strong>&nbsp;等于&nbsp;<code>a + b</code>&nbsp;。<strong>最大数对和</strong>&nbsp;是一个数对数组中最大的&nbsp;<strong>数对和</strong>&nbsp;。</p> \n<ul> \n <li>比方说，如果我们有数对&nbsp;<code>(1,5)</code>&nbsp;，<code>(2,3)</code>&nbsp;和&nbsp;<code>(4,4)</code>，<strong>最大数对和</strong>&nbsp;为&nbsp;<code>max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8</code>&nbsp;。</li> \n</ul> \n<p>给你一个长度为 <strong>偶数</strong>&nbsp;<code>n</code>&nbsp;的数组&nbsp;<code>nums</code>&nbsp;，请你将 <code>nums</code>&nbsp;中的元素分成 <code>n / 2</code>&nbsp;个数对，使得：</p> \n<ul> \n <li><code>nums</code>&nbsp;中每个元素&nbsp;<strong>恰好</strong>&nbsp;在 <strong>一个</strong>&nbsp;数对中，且</li> \n <li><strong>最大数对和</strong>&nbsp;的值 <strong>最小</strong>&nbsp;。</li> \n</ul> \n<p>请你在最优数对划分的方案下，返回最小的 <strong>最大数对和</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [3,5,2,3]\n<b>输出：</b>7\n<b>解释：</b>数组中的元素可以分为数对 (3,3) 和 (5,2) 。\n最大数对和为 max(3+3, 5+2) = max(6, 7) = 7 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [3,5,4,2,4,6]\n<b>输出：</b>8\n<b>解释：</b>数组中的元素可以分为数对 (3,5)，(4,4) 和 (6,2) 。\n最大数对和为 max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>n</code>&nbsp;是 <strong>偶数</strong>&nbsp;。</li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1878. 矩阵中最大的三个菱形和', '<p>给你一个&nbsp;<code>m x n</code>&nbsp;的整数矩阵&nbsp;<code>grid</code>&nbsp;。</p> \n<p><strong>菱形和</strong> 指的是 <code>grid</code>&nbsp;中一个正菱形 <strong>边界</strong>&nbsp;上的元素之和。本题中的菱形必须为正方形旋转45度，且四个角都在一个格子当中。下图是四个可行的菱形，每个菱形和应该包含的格子都用了相应颜色标注在图中。</p> \n<img style=\"width: 385px; height: 385px;\" src=\"https://assets.leetcode.com/uploads/2021/04/23/pc73-q4-desc-2.png\" alt=\"\"> \n<p>&nbsp;</p> \n<p>注意，菱形可以是一个面积为 0 的区域，如上图中右下角的紫色菱形所示。</p> \n<p>请你按照 <strong>降序</strong>&nbsp;返回 <code>grid</code>&nbsp;中三个最大的&nbsp;<strong>互不相同的菱形和</strong>&nbsp;。如果不同的和少于三个，则将它们全部返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 360px; height: 361px;\" src=\"https://assets.leetcode.com/uploads/2021/04/23/pc73-q4-ex1.png\" alt=\"\"> \n<pre><b>输入：</b>grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]\n<b>输出：</b>[228,216,211]\n<b>解释：</b>最大的三个菱形和如上图所示。\n- 蓝色：20 + 3 + 200 + 5 = 228\n- 红色：200 + 2 + 10 + 4 = 216\n- 绿色：5 + 200 + 4 + 2 = 211\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 217px; height: 217px;\" src=\"https://assets.leetcode.com/uploads/2021/04/23/pc73-q4-ex2.png\" alt=\"\"> \n<pre><b>输入：</b>grid = [[1,2,3],[4,5,6],[7,8,9]]\n<b>输出：</b>[20,9,8]\n<b>解释：</b>最大的三个菱形和如上图所示。\n- 蓝色：4 + 2 + 6 + 8 = 20\n- 红色：9 （右下角红色的面积为 0 的菱形）\n- 绿色：8 （下方中央面积为 0 的菱形）\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>grid = [[7,7,7]]\n<b>输出：</b>[7]\n<b>解释：</b>所有三个可能的菱形和都相同，所以返回 [7] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 100</code></li> \n <li><code>1 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1879. 两个数组最小的异或值之和', '<p>给你两个整数数组&nbsp;<code>nums1</code> 和&nbsp;<code>nums2</code>&nbsp;，它们长度都为&nbsp;<code>n</code>&nbsp;。</p> \n<p>两个数组的 <strong>异或值之和</strong>&nbsp;为&nbsp;<code>(nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1])</code>&nbsp;（<strong>下标从 0 开始</strong>）。</p> \n<ul> \n <li>比方说，<code>[1,2,3]</code> 和&nbsp;<code>[3,2,1]</code>&nbsp;的 <strong>异或值之和</strong>&nbsp;等于&nbsp;<code>(1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4</code>&nbsp;。</li> \n</ul> \n<p>请你将&nbsp;<code>nums2</code>&nbsp;中的元素重新排列，使得 <strong>异或值之和</strong>&nbsp;<strong>最小</strong>&nbsp;。</p> \n<p>请你返回重新排列之后的 <strong>异或值之和</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums1 = [1,2], nums2 = [2,3]\n<b>输出：</b>2\n<b>解释：</b>将 <code>nums2</code> 重新排列得到 <code>[3,2] 。</code>\n异或值之和为 (1 XOR 3) + (2 XOR 2) = 2 + 0 = 2 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums1 = [1,0,3], nums2 = [5,3,4]\n<b>输出：</b>8\n<b>解释：</b>将 <code>nums2 重新排列得到</code> <code>[5,4,3] 。</code>\n异或值之和为 (1 XOR 5) + (0 XOR 4) + (3 XOR 3) = 4 + 4 + 0 = 8 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums1.length</code></li> \n <li><code>n == nums2.length</code></li> \n <li><code>1 &lt;= n &lt;= 14</code></li> \n <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10<sup>7</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('188. 买卖股票的最佳时机 IV', '<p>给定一个整数数组&nbsp;<code>prices</code> ，它的第<em> </em><code>i</code> 个元素&nbsp;<code>prices[i]</code> 是一支给定的股票在第 <code>i</code><em> </em>天的价格。</p> \n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>k</strong> 笔交易。</p> \n<p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>k = 2, prices = [2,4,1]\n<strong>输出：</strong>2\n<strong>解释：</strong>在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>k = 2, prices = [3,2,6,5,0,3]\n<strong>输出：</strong>7\n<strong>解释：</strong>在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。\n     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= k &lt;= 100</code></li> \n <li><code>0 &lt;= prices.length &lt;= 1000</code></li> \n <li><code>0 &lt;= prices[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1880. 检查某单词是否等于两单词之和', '<p>字母的 <strong>字母值</strong> 取决于字母在字母表中的位置，<strong>从 0 开始</strong> 计数。即，<code>\'a\' -&gt; 0</code>、<code>\'b\' -&gt; 1</code>、<code>\'c\' -&gt; 2</code>，以此类推。</p> \n<p>对某个由小写字母组成的字符串&nbsp;<code>s</code> 而言，其 <strong>数值</strong> 就等于将 <code>s</code> 中每个字母的 <strong>字母值</strong> 按顺序 <strong>连接</strong> 并 <strong>转换</strong> 成对应整数。</p> \n<ul> \n <li>例如，<code>s = \"acb\"</code> ，依次连接每个字母的字母值可以得到 <code>\"021\"</code> ，转换为整数得到 <code>21</code> 。</li> \n</ul> \n<p>给你三个字符串 <code>firstWord</code>、<code>secondWord</code> 和 <code>targetWord</code> ，每个字符串都由从 <code>\'a\'</code> 到 <code>\'j\'</code> （<strong>含&nbsp;</strong><code>\'a\'</code> 和 <code>\'j\'</code><strong> </strong>）的小写英文字母组成。</p> \n<p>如果&nbsp;<code>firstWord</code><em> </em>和<em> </em><code>secondWord</code> 的 <strong>数值之和</strong> 等于<em> </em><code>targetWord</code><em> </em>的数值，返回 <code>true</code> ；否则，返回<em> </em><code>false</code><em> </em>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>firstWord = \"acb\", secondWord = \"cba\", targetWord = \"cdb\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\nfirstWord 的数值为 \"acb\" -&gt; \"021\" -&gt; 21\nsecondWord 的数值为 \"cba\" -&gt; \"210\" -&gt; 210\ntargetWord 的数值为 \"cdb\" -&gt; \"231\" -&gt; 231\n由于 21 + 210 == 231 ，返回 true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aab\"\n<strong>输出：</strong>false\n<strong>解释：</strong>\nfirstWord 的数值为 \"aaa\" -&gt; \"000\" -&gt; 0\nsecondWord 的数值为 \"a\" -&gt; \"0\" -&gt; 0\ntargetWord 的数值为 \"aab\" -&gt; \"001\" -&gt; 1\n由于 0 + 0 != 1 ，返回 false</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aaaa\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\nfirstWord 的数值为 \"aaa\" -&gt; \"000\" -&gt; 0\nsecondWord 的数值为 \"a\" -&gt; \"0\" -&gt; 0\ntargetWord 的数值为 \"aaaa\" -&gt; \"0000\" -&gt; 0\n由于 0 + 0 == 0 ，返回 true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= firstWord.length, </code><code>secondWord.length, </code><code>targetWord.length &lt;= 8</code></li> \n <li><code>firstWord</code>、<code>secondWord</code> 和 <code>targetWord</code> 仅由从 <code>\'a\'</code> 到 <code>\'j\'</code> （<strong>含&nbsp;</strong><code>\'a\'</code> 和 <code>\'j\'</code><strong> </strong>）的小写英文字母组成<strong>。</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1881. 插入后的最大值', '<p>给你一个非常大的整数 <code>n</code> 和一个整数数字 <code>x</code> ，大整数 <code>n</code>&nbsp;用一个字符串表示。<code>n</code> 中每一位数字和数字 <code>x</code> 都处于闭区间 <code>[1, 9]</code> 中，且 <code>n</code> 可能表示一个 <strong>负数</strong> 。</p> \n<p>你打算通过在 <code>n</code> 的十进制表示的任意位置插入 <code>x</code> 来 <strong>最大化</strong> <code>n</code> 的 <strong>数值</strong> ​​​​​​。但 <strong>不能</strong> 在负号的左边插入 <code>x</code> 。</p> \n<ul> \n <li>例如，如果 <code>n = 73</code> 且 <code>x = 6</code> ，那么最佳方案是将 <code>6</code> 插入 <code>7</code> 和 <code>3</code> 之间，使 <code>n = 763</code> 。</li> \n <li>如果 <code>n = -55</code> 且 <code>x = 2</code> ，那么最佳方案是将 <code>2</code> 插在第一个 <code>5</code> 之前，使 <code>n = -255</code> 。</li> \n</ul> \n<p>返回插入操作后，用字符串表示的&nbsp;<code>n</code> 的最大值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = \"99\", x = 9\n<strong>输出：</strong>\"999\"\n<strong>解释：</strong>不管在哪里插入 9 ，结果都是相同的。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = \"-13\", x = 2\n<strong>输出：</strong>\"-123\"\n<strong>解释：</strong>向 n 中插入 x 可以得到 -213、-123 或者 -132 ，三者中最大的是 -123 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= x &lt;= 9</code></li> \n <li><code>n</code>​​​ 中每一位的数字都在闭区间 <code>[1, 9]</code> 中。</li> \n <li><code>n</code>&nbsp;代表一个有效的整数。</li> \n <li>当 <code>n</code> 表示负数时，将会以字符 <code>\'-\'</code> 开始。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1882. 使用服务器处理任务', '<p>给你两个 <strong>下标从 0 开始</strong> 的整数数组 <code>servers</code> 和 <code>tasks</code> ，长度分别为 <code>n</code>​​​​​​ 和 <code>m</code>​​​​​​ 。<code>servers[i]</code> 是第 <code>i<sup>​​​​​​</sup></code>​​​​ 台服务器的 <strong>权重</strong> ，而 <code>tasks[j]</code> 是处理第 <code>j<sup>​​​​​​</sup></code> 项任务 <strong>所需要的时间</strong>（单位：秒）。</p> \n<p>你正在运行一个仿真系统，在处理完所有任务后，该系统将会关闭。每台服务器只能同时处理一项任务。第 <code>0</code> 项任务在第 <code>0</code> 秒可以开始处理，相应地，第 <code>j</code> 项任务在第 <code>j</code>&nbsp;秒可以开始处理。处理第 <code>j</code> 项任务时，你需要为它分配一台 <strong>权重最小</strong> 的空闲服务器。如果存在多台相同权重的空闲服务器，请选择 <strong>下标最小</strong> 的服务器。如果一台空闲服务器在第 <code>t</code> 秒分配到第 <code>j</code> 项任务，那么在 <code>t + tasks[j]</code> 时它将恢复空闲状态。</p> \n<p>如果没有空闲服务器，则必须等待，直到出现一台空闲服务器，并 <strong>尽可能早</strong>&nbsp;地处理剩余任务。 如果有多项任务等待分配，则按照 <strong>下标递增</strong> 的顺序完成分配。</p> \n<p>如果同一时刻存在多台空闲服务器，可以同时将多项任务分别分配给它们。</p> \n<p>构建长度为&nbsp;<code>m</code> 的答案数组 <code>ans</code> ，其中 <code>ans[j]</code> 是第 <code>j</code> 项任务分配的服务器的下标。</p> \n<p>返回答案数组<em> </em><code>ans</code>​​​​ 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>servers = [3,3,2], tasks = [1,2,3,2,1,2]\n<strong>输出：</strong>[2,2,0,2,1,2]\n<strong>解释：</strong>事件按时间顺序如下：\n- 0 秒时，第 0 项任务加入到任务队列，使用第 2 台服务器处理到 1 秒。\n- 1 秒时，第 2 台服务器空闲，第 1 项任务加入到任务队列，使用第 2 台服务器处理到 3 秒。\n- 2 秒时，第 2 项任务加入到任务队列，使用第 0 台服务器处理到 5 秒。\n- 3 秒时，第 2 台服务器空闲，第 3 项任务加入到任务队列，使用第 2 台服务器处理到 5 秒。\n- 4 秒时，第 4 项任务加入到任务队列，使用第 1 台服务器处理到 5 秒。\n- 5 秒时，所有服务器都空闲，第 5 项任务加入到任务队列，使用第 2 台服务器处理到 7 秒。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]\n<strong>输出：</strong>[1,4,1,4,1,3,2]\n<strong>解释：</strong>事件按时间顺序如下：\n- 0 秒时，第 0 项任务加入到任务队列，使用第 1 台服务器处理到 2 秒。\n- 1 秒时，第 1 项任务加入到任务队列，使用第 4 台服务器处理到 2 秒。\n- 2 秒时，第 1 台和第 4 台服务器空闲，第 2 项任务加入到任务队列，使用第 1 台服务器处理到 4 秒。\n- 3 秒时，第 3 项任务加入到任务队列，使用第 4 台服务器处理到 7 秒。\n- 4 秒时，第 1 台服务器空闲，第 4 项任务加入到任务队列，使用第 1 台服务器处理到 9 秒。\n- 5 秒时，第 5 项任务加入到任务队列，使用第 3 台服务器处理到 7 秒。\n- 6 秒时，第 6 项任务加入到任务队列，使用第 2 台服务器处理到 7 秒。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>servers.length == n</code></li> \n <li><code>tasks.length == m</code></li> \n <li><code>1 &lt;= n, m &lt;= 2 * 10<sup>5</sup></code></li> \n <li><code>1 &lt;= servers[i], tasks[j] &lt;= 2 * 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1883. 准时抵达会议现场的最小跳过休息次数', '<p>给你一个整数 <code>hoursBefore</code> ，表示你要前往会议所剩下的可用小时数。要想成功抵达会议现场，你必须途经 <code>n</code> 条道路。道路的长度用一个长度为 <code>n</code> 的整数数组 <code>dist</code> 表示，其中 <code>dist[i]</code> 表示第 <code>i</code> 条道路的长度（单位：<strong>千米</strong>）。另给你一个整数 <code>speed</code> ，表示你在道路上前进的速度（单位：<strong>千米每小时</strong>）。</p> \n<p>当你通过第 <code>i</code> 条路之后，就必须休息并等待，直到 <strong>下一个整数小时</strong> 才能开始继续通过下一条道路。注意：你不需要在通过最后一条道路后休息，因为那时你已经抵达会议现场。</p> \n<ul> \n <li>例如，如果你通过一条道路用去 <code>1.4</code> 小时，那你必须停下来等待，到&nbsp;<code>2</code> 小时才可以继续通过下一条道路。如果通过一条道路恰好用去 <code>2</code> 小时，就无需等待，可以直接继续。</li> \n</ul> \n<p>然而，为了能准时到达，你可以选择 <strong>跳过</strong> 一些路的休息时间，这意味着你不必等待下一个整数小时。注意，这意味着与不跳过任何休息时间相比，你可能在不同时刻到达接下来的道路。</p> \n<ul> \n <li>例如，假设通过第 <code>1</code> 条道路用去 <code>1.4</code> 小时，且通过第 <code>2</code> 条道路用去 <code>0.6</code> 小时。跳过第 <code>1</code> 条道路的休息时间意味着你将会在恰好&nbsp;<code>2</code> 小时完成通过第 <code>2</code> 条道路，且你能够立即开始通过第 <code>3</code> 条道路。</li> \n</ul> \n<p>返回准时抵达会议现场所需要的 <strong>最小跳过次数</strong> ，如果 <strong>无法准时参会</strong> ，返回 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>dist = [1,3,2], speed = 4, hoursBefore = 2\n<strong>输出：</strong>1\n<strong>解释：</strong>\n不跳过任何休息时间，你将用 (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 小时才能抵达会议现场。\n可以跳过第 1 次休息时间，共用 ((1/4 + <strong>0</strong>) + (3/4 + 0)) + (2/4) = 1.5 小时抵达会议现场。\n注意，第 2 次休息时间缩短为 0 ，由于跳过第 1 次休息时间，你是在整数小时处完成通过第 2 条道路。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>dist = [7,3,5,5], speed = 2, hoursBefore = 10\n<strong>输出：</strong>2\n<strong>解释：</strong>\n不跳过任何休息时间，你将用 (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 小时才能抵达会议现场。\n可以跳过第 1 次和第 3 次休息时间，共用 ((7/2 + <strong>0</strong>) + (3/2 + 0)) + ((5/2 + <strong>0</strong>) + (5/2)) = 10 小时抵达会议现场。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>dist = [7,3,5,5], speed = 1, hoursBefore = 10\n<strong>输出：</strong>-1\n<strong>解释：</strong>即使跳过所有的休息时间，也无法准时参加会议。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == dist.length</code></li> \n <li><code>1 &lt;= n &lt;= 1000</code></li> \n <li><code>1 &lt;= dist[i] &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= speed &lt;= 10<sup>6</sup></code></li> \n <li><code>1 &lt;= hoursBefore &lt;= 10<sup>7</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1884. 鸡蛋掉落-两枚鸡蛋', '<p>给你 <strong>2&nbsp;枚相同 </strong>的鸡蛋，和一栋从第 <code>1</code>&nbsp;层到第 <code>n</code> 层共有 <code>n</code> 层楼的建筑。</p> \n<p>已知存在楼层 <code>f</code> ，满足&nbsp;<code>0 &lt;= f &lt;= n</code> ，任何从 <strong>高于 </strong><code>f</code> 的楼层落下的鸡蛋都<strong> 会碎 </strong>，从 <strong><code>f</code> 楼层或比它低 </strong>的楼层落下的鸡蛋都 <strong>不会碎 </strong>。</p> \n<p>每次操作，你可以取一枚<strong> 没有碎</strong> 的鸡蛋并把它从任一楼层 <code>x</code> 扔下（满足&nbsp;<code>1 &lt;= x &lt;= n</code>）。如果鸡蛋碎了，你就不能再次使用它。如果某枚鸡蛋扔下后没有摔碎，则可以在之后的操作中<strong> 重复使用 </strong>这枚鸡蛋。</p> \n<p>请你计算并返回要确定 <code>f</code> <strong>确切的值 </strong>的 <strong>最小操作次数</strong> 是多少？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>我们可以将第一枚鸡蛋从 1 楼扔下，然后将第二枚从 2 楼扔下。\n如果第一枚鸡蛋碎了，可知 f = 0；\n如果第二枚鸡蛋碎了，但第一枚没碎，可知 f = 1；\n否则，当两个鸡蛋都没碎时，可知 f = 2。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 100\n<strong>输出：</strong>14\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1886. 判断矩阵经轮转后是否一致', '<p>给你两个大小为 <code>n x n</code> 的二进制矩阵 <code>mat</code> 和 <code>target</code> 。现<strong> 以 90 度顺时针轮转 </strong>矩阵 <code>mat</code> 中的元素 <strong>若干次</strong> ，如果能够使 <code>mat</code> 与&nbsp;<code>target</code> 一致，返回 <code>true</code> ；否则，返回<em> </em><code>false</code><em> 。</em></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 301px; height: 121px;\" src=\"https://assets.leetcode.com/uploads/2021/05/20/grid3.png\" alt=\"\"> \n<pre><strong>输入：</strong>mat = [[0,1],[1,0]], target = [[1,0],[0,1]]\n<strong>输出：</strong>true\n<strong>解释：</strong>顺时针轮转 90 度一次可以使 mat 和 target 一致。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 301px; height: 121px;\" src=\"https://assets.leetcode.com/uploads/2021/05/20/grid4.png\" alt=\"\"> \n<pre><strong>输入：</strong>mat = [[0,1],[1,1]], target = [[1,0],[0,1]]\n<strong>输出：</strong>false\n<strong>解释：</strong>无法通过轮转矩阵中的元素使 equal 与 target 一致。\n</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 661px; height: 184px;\" src=\"https://assets.leetcode.com/uploads/2021/05/26/grid4.png\" alt=\"\"> \n<pre><strong>输入：</strong>mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]\n<strong>输出：</strong>true\n<strong>解释：</strong>顺时针轮转 90 度两次可以使 mat 和 target 一致。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == mat.length == target.length</code></li> \n <li><code>n == mat[i].length == target[i].length</code></li> \n <li><code>1 &lt;= n &lt;= 10</code></li> \n <li><code>mat[i][j]</code> 和 <code>target[i][j]</code> 不是 <code>0</code> 就是 <code>1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1887. 使数组元素相等的减少操作次数', '<p>给你一个整数数组 <code>nums</code> ，你的目标是令 <code>nums</code> 中的所有元素相等。完成一次减少操作需要遵照下面的几个步骤：</p> \n<ol> \n <li>找出 <code>nums</code> 中的 <strong>最大</strong> 值。记这个值为 <code>largest</code> 并取其下标 <code>i</code> （<strong>下标从 0 开始计数</strong>）。如果有多个元素都是最大值，则取最小的 <code>i</code> 。</li> \n <li>找出 <code>nums</code> 中的 <strong>下一个最大</strong> 值，这个值 <strong>严格小于</strong> <code>largest</code> ，记为 <code>nextLargest</code> 。</li> \n <li>将 <code>nums[i]</code> 减少到 <code>nextLargest</code> 。</li> \n</ol> \n<p>返回使<em> </em><code>nums</code><em> </em>中的所有元素相等的操作次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [5,1,3]\n<strong>输出：</strong>3\n<strong>解释：</strong>需要 3 次操作使 nums 中的所有元素相等：\n1. largest = 5 下标为 0 。nextLargest = 3 。将 nums[0] 减少到 3 。nums = [<strong>3</strong>,1,3] 。\n2. largest = 3 下标为 0 。nextLargest = 1 。将 nums[0] 减少到 1 。nums = [<strong>1</strong>,1,3] 。\n3. largest = 3 下标为 2 。nextLargest = 1 。将 nums[2] 减少到 1 。nums = [<strong>1</strong>,1,<strong>1</strong>] 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,1]\n<strong>输出：</strong>0\n<strong>解释：</strong>nums 中的所有元素已经是相等的。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,2,2,3]\n<strong>输出：</strong>4\n<strong>解释：</strong>需要 4 次操作使 nums 中的所有元素相等：\n1. largest = 3 下标为 4 。nextLargest = 2 。将 nums[4] 减少到 2 。nums = [1,1,2,2,<strong>2</strong>] 。\n2. largest = 2 下标为 2 。nextLargest = 1 。将 nums[2] 减少到 1 。nums = [1,1,<strong>1</strong>,2,2] 。 \n3. largest = 2 下标为 3 。nextLargest = 1 。将 nums[3] 减少到 1 。nums = [1,1,1,<strong>1</strong>,2] 。 \n4. largest = 2 下标为 4 。nextLargest = 1 。将 nums[4] 减少到 1 。nums = [1,1,1,1,<strong>1</strong>] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 5 * 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1888. 使二进制字符串字符交替的最少反转次数', '<p>给你一个二进制字符串&nbsp;<code>s</code>&nbsp;。你可以按任意顺序执行以下两种操作任意次：</p> \n<ul> \n <li><strong>类型 1 ：删除</strong> 字符串&nbsp;<code>s</code>&nbsp;的第一个字符并将它 <strong>添加</strong>&nbsp;到字符串结尾。</li> \n <li><strong>类型 2 ：选择 </strong>字符串&nbsp;<code>s</code>&nbsp;中任意一个字符并将该字符&nbsp;<strong>反转&nbsp;</strong>，也就是如果值为&nbsp;<code>\'0\'</code>&nbsp;，则反转得到&nbsp;<code>\'1\'</code>&nbsp;，反之亦然。</li> \n</ul> \n<p>请你返回使 <code>s</code>&nbsp;变成 <strong>交替</strong> 字符串的前提下，&nbsp;<strong>类型 2&nbsp;</strong>的 <strong>最少</strong>&nbsp;操作次数&nbsp;。</p> \n<p>我们称一个字符串是 <strong>交替</strong>&nbsp;的，需要满足任意相邻字符都不同。</p> \n<ul> \n <li>比方说，字符串&nbsp;<code>\"010\"</code> 和&nbsp;<code>\"1010\"</code>&nbsp;都是交替的，但是字符串&nbsp;<code>\"0100\"</code>&nbsp;不是。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"111000\"\n<b>输出：</b>2\n<b>解释：</b>执行第一种操作两次，得到 s = \"100011\" 。\n然后对第三个和第六个字符执行第二种操作，得到 s = \"10<strong>1</strong>01<strong>0</strong>\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"010\"\n<b>输出：</b>0\n<strong>解释：</strong>字符串已经是交替的。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>s = \"1110\"\n<b>输出：</b>1\n<b>解释：</b>对第二个字符执行第二种操作，得到 s = \"1<strong>0</strong>10\" 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s[i]</code>&nbsp;要么是&nbsp;<code>\'0\'</code>&nbsp;，要么是&nbsp;<code>\'1\'</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1889. 装包裹的最小浪费空间', '<p>给你&nbsp;<code>n</code>&nbsp;个包裹，你需要把它们装在箱子里，<strong>每个箱子装一个包裹</strong>。总共有&nbsp;<code>m</code>&nbsp;个供应商提供 <strong>不同尺寸</strong>&nbsp;的箱子（每个规格都有无数个箱子）。如果一个包裹的尺寸 <strong>小于等于</strong>&nbsp;一个箱子的尺寸，那么这个包裹就可以放入这个箱子之中。</p> \n<p>包裹的尺寸用一个整数数组&nbsp;<code>packages</code>&nbsp;表示，其中&nbsp;<code>packages[i]</code>&nbsp;是第&nbsp;<code>i</code>&nbsp;个包裹的尺寸。供应商用二维数组&nbsp;<code>boxes</code>&nbsp;表示，其中&nbsp;<code>boxes[j]</code>&nbsp;是第 <code>j</code>&nbsp;个供应商提供的所有箱子尺寸的数组。</p> \n<p>你想要选择 <strong>一个供应商</strong>&nbsp;并只使用该供应商提供的箱子，使得 <strong>总浪费空间最小</strong>&nbsp;。对于每个装了包裹的箱子，我们定义 <strong>浪费的</strong>&nbsp;空间等于 <code>箱子的尺寸 - 包裹的尺寸</code>&nbsp;。<strong>总浪费空间</strong>&nbsp;为&nbsp;<strong>所有</strong>&nbsp;箱子中浪费空间的总和。</p> \n<ul> \n <li>比方说，如果你想要用尺寸数组为&nbsp;<code>[4,8]</code>&nbsp;的箱子装下尺寸为&nbsp;<code>[2,3,5]</code>&nbsp;的包裹，你可以将尺寸为 <code>2</code>&nbsp;和 <code>3</code>&nbsp;的两个包裹装入两个尺寸为 <code>4</code>&nbsp;的箱子中，同时把尺寸为 <code>5</code>&nbsp;的包裹装入尺寸为 <code>8</code>&nbsp;的箱子中。总浪费空间为&nbsp;<code>(4-2) + (4-3) + (8-5) = 6</code>&nbsp;。</li> \n</ul> \n<p>请你选择 <strong>最优</strong>&nbsp;箱子供应商，使得 <strong>总浪费空间最小</strong>&nbsp;。如果 <strong>无法</strong> 将所有包裹放入箱子中，请你返回 <code>-1</code>&nbsp;。由于答案可能会 <strong>很大</strong>&nbsp;，请返回它对<strong>&nbsp;</strong><code>10<sup>9</sup> + 7</code>&nbsp;<b>取余</b>&nbsp;的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>packages = [2,3,5], boxes = [[4,8],[2,8]]\n<b>输出：</b>6\n<b>解释：</b>选择第一个供应商最优，用两个尺寸为 4 的箱子和一个尺寸为 8 的箱子。\n总浪费空间为 (4-2) + (4-3) + (8-5) = 6 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]\n<b>输出：</b>-1\n<b>解释：</b>没有箱子能装下尺寸为 5 的包裹。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]\n<b>输出：</b>9\n<b>解释：</b>选择第三个供应商最优，用两个尺寸为 5 的箱子，两个尺寸为 10 的箱子和两个尺寸为 14 的箱子。\n总浪费空间为 (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == packages.length</code></li> \n <li><code>m == boxes.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= m &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= packages[i] &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= boxes[j].length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= boxes[j][k] &lt;= 10<sup>5</sup></code></li> \n <li><code>sum(boxes[j].length) &lt;= 10<sup>5</sup></code></li> \n <li><code>boxes[j]</code>&nbsp;中的元素 <strong>互不相同</strong>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('189. 旋转数组', '<p>给定一个数组，将数组中的元素向右移动&nbsp;<code>k</code><em>&nbsp;</em>个位置，其中&nbsp;<code>k</code><em>&nbsp;</em>是非负数。</p> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。</li> \n <li>你可以使用空间复杂度为&nbsp;O(1) 的&nbsp;<strong>原地&nbsp;</strong>算法解决这个问题吗？</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums = [1,2,3,4,5,6,7], k = 3\n<strong>输出:</strong> <code>[5,6,7,1,2,3,4]</code>\n<strong>解释:</strong>\n向右旋转 1 步: <code>[7,1,2,3,4,5,6]</code>\n向右旋转 2 步: <code>[6,7,1,2,3,4,5]\n</code>向右旋转 3 步: <code>[5,6,7,1,2,3,4]</code>\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入：</strong>nums = [-1,-100,3,99], k = 2\n<strong>输出：</strong>[3,99,-1,-100]\n<strong>解释:</strong> \n向右旋转 1 步: [99,-1,-100,3]\n向右旋转 2 步: [3,99,-1,-100]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li> \n</ul> \n<ul> \n</ul>');
INSERT INTO `leecode` VALUES ('1893. 检查是否区域内所有整数都被覆盖', '<p>给你一个二维整数数组&nbsp;<code>ranges</code>&nbsp;和两个整数&nbsp;<code>left</code>&nbsp;和&nbsp;<code>right</code>&nbsp;。每个&nbsp;<code>ranges[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>&nbsp;表示一个从&nbsp;<code>start<sub>i</sub></code>&nbsp;到&nbsp;<code>end<sub>i</sub></code>&nbsp;的&nbsp;<strong>闭区间</strong>&nbsp;。</p> \n<p>如果闭区间&nbsp;<code>[left, right]</code>&nbsp;内每个整数都被&nbsp;<code>ranges</code>&nbsp;中&nbsp;<strong>至少一个</strong>&nbsp;区间覆盖，那么请你返回&nbsp;<code>true</code>&nbsp;，否则返回&nbsp;<code>false</code>&nbsp;。</p> \n<p>已知区间 <code>ranges[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> ，如果整数 <code>x</code> 满足 <code>start<sub>i</sub> &lt;= x &lt;= end<sub>i</sub></code>&nbsp;，那么我们称整数<code>x</code>&nbsp;被覆盖了。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5\n<b>输出：</b>true\n<b>解释：</b>2 到 5 的每个整数都被覆盖了：\n- 2 被第一个区间覆盖。\n- 3 和 4 被第二个区间覆盖。\n- 5 被第三个区间覆盖。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>ranges = [[1,10],[10,20]], left = 21, right = 21\n<b>输出：</b>false\n<b>解释：</b>21 没有被任何一个区间覆盖。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= ranges.length &lt;= 50</code></li> \n <li><code>1 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 50</code></li> \n <li><code>1 &lt;= left &lt;= right &lt;= 50</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1894. 找到需要补充粉笔的学生编号', '<p>一个班级里有&nbsp;<code>n</code>&nbsp;个学生，编号为 <code>0</code>&nbsp;到 <code>n - 1</code>&nbsp;。每个学生会依次回答问题，编号为 <code>0</code>&nbsp;的学生先回答，然后是编号为 <code>1</code>&nbsp;的学生，以此类推，直到编号为 <code>n - 1</code>&nbsp;的学生，然后老师会重复这个过程，重新从编号为 <code>0</code>&nbsp;的学生开始回答问题。</p> \n<p>给你一个长度为 <code>n</code>&nbsp;且下标从 <code>0</code>&nbsp;开始的整数数组&nbsp;<code>chalk</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;。一开始粉笔盒里总共有&nbsp;<code>k</code>&nbsp;支粉笔。当编号为&nbsp;<code>i</code>&nbsp;的学生回答问题时，他会消耗 <code>chalk[i]</code>&nbsp;支粉笔。如果剩余粉笔数量 <strong>严格小于</strong>&nbsp;<code>chalk[i]</code>&nbsp;，那么学生 <code>i</code>&nbsp;需要 <strong>补充</strong>&nbsp;粉笔。</p> \n<p>请你返回需要 <strong>补充</strong>&nbsp;粉笔的学生 <strong>编号</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>chalk = [5,1,5], k = 22\n<b>输出：</b>0\n<strong>解释：</strong>学生消耗粉笔情况如下：\n- 编号为 0 的学生使用 5 支粉笔，然后 k = 17 。\n- 编号为 1 的学生使用 1 支粉笔，然后 k = 16 。\n- 编号为 2 的学生使用 5 支粉笔，然后 k = 11 。\n- 编号为 0 的学生使用 5 支粉笔，然后 k = 6 。\n- 编号为 1 的学生使用 1 支粉笔，然后 k = 5 。\n- 编号为 2 的学生使用 5 支粉笔，然后 k = 0 。\n编号为 0 的学生没有足够的粉笔，所以他需要补充粉笔。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>chalk = [3,4,1,2], k = 25\n<b>输出：</b>1\n<b>解释：</b>学生消耗粉笔情况如下：\n- 编号为 0 的学生使用 3 支粉笔，然后 k = 22 。\n- 编号为 1 的学生使用 4 支粉笔，然后 k = 18 。\n- 编号为 2 的学生使用 1 支粉笔，然后 k = 17 。\n- 编号为 3 的学生使用 2 支粉笔，然后 k = 15 。\n- 编号为 0 的学生使用 3 支粉笔，然后 k = 12 。\n- 编号为 1 的学生使用 4 支粉笔，然后 k = 8 。\n- 编号为 2 的学生使用 1 支粉笔，然后 k = 7 。\n- 编号为 3 的学生使用 2 支粉笔，然后 k = 5 。\n- 编号为 0 的学生使用 3 支粉笔，然后 k = 2 。\n编号为 1 的学生没有足够的粉笔，所以他需要补充粉笔。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>chalk.length == n</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= chalk[i] &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1895. 最大的幻方', '<p>一个&nbsp;<code>k x k</code>&nbsp;的<strong>&nbsp;幻方</strong>&nbsp;指的是一个&nbsp;<code>k x k</code>&nbsp;填满整数的方格阵，且每一行、每一列以及两条对角线的和 <strong>全部</strong><strong>相等</strong>&nbsp;。幻方中的整数 <strong>不需要互不相同</strong>&nbsp;。显然，每个&nbsp;<code>1 x 1</code>&nbsp;的方格都是一个幻方。</p> \n<p>给你一个&nbsp;<code>m x n</code>&nbsp;的整数矩阵&nbsp;<code>grid</code>&nbsp;，请你返回矩阵中&nbsp;<strong>最大幻方</strong>&nbsp;的&nbsp;<strong>尺寸</strong>&nbsp;（即边长 <code>k</code>）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 413px; height: 335px;\" src=\"https://assets.leetcode.com/uploads/2021/05/29/magicsquare-grid.jpg\" alt=\"\"> \n<pre><b>输入：</b>grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]\n<b>输出：</b>3\n<b>解释：</b>最大幻方尺寸为 3 。\n每一行，每一列以及两条对角线的和都等于 12 。\n- 每一行的和：5+1+6 = 5+4+3 = 2+7+3 = 12\n- 每一列的和：5+5+2 = 1+4+7 = 6+3+3 = 12\n- 对角线的和：5+4+3 = 6+4+2 = 12\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 333px; height: 255px;\" src=\"https://assets.leetcode.com/uploads/2021/05/29/magicsquare2-grid.jpg\" alt=\"\"> \n<pre><b>输入：</b>grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]]\n<b>输出：</b>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 50</code></li> \n <li><code>1 &lt;= grid[i][j] &lt;= 10<sup>6</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1896. 反转表达式值的最少操作次数', '<p>给你一个 <strong>有效的</strong>&nbsp;布尔表达式，用字符串&nbsp;<code>expression</code>&nbsp;表示。这个字符串包含字符&nbsp;<code>\'1\'</code>，<code>\'0\'</code>，<code>\'&amp;\'</code>（按位 <strong>与</strong>&nbsp;运算），<code>\'|\'</code>（按位 <strong>或</strong>&nbsp;运算），<code>\'(\'</code>&nbsp;和&nbsp;<code>\')\'</code>&nbsp;。</p> \n<ul> \n <li>比方说，<code>\"()1|1\"</code> 和&nbsp;<code>\"(1)&amp;()\"</code>&nbsp;<strong>不是有效</strong>&nbsp;布尔表达式。而&nbsp;<code>\"1\"</code>，&nbsp;<code>\"(((1))|(0))\"</code>&nbsp;和&nbsp;<code>\"1|(0&amp;(1))\"</code>&nbsp;是 <strong>有效</strong>&nbsp;布尔表达式。</li> \n</ul> \n<p>你的目标是将布尔表达式的 <strong>值</strong>&nbsp;<strong>反转 </strong>（也就是将 <code>0</code>&nbsp;变为 <code>1</code>&nbsp;，或者将 <code>1</code>&nbsp;变为 <code>0</code>），请你返回达成目标需要的 <strong>最少操作</strong>&nbsp;次数。</p> \n<ul> \n <li>比方说，如果表达式&nbsp;<code>expression = \"1|1|(0&amp;0)&amp;1\"</code>&nbsp;，它的&nbsp;<strong>值</strong>&nbsp;为&nbsp;<code>1|1|(0&amp;0)&amp;1 = 1|1|0&amp;1 = 1|0&amp;1 = 1&amp;1 = 1</code>&nbsp;。我们想要执行操作将&nbsp;<strong>新的</strong>&nbsp;表达式的值变成&nbsp;<code>0</code>&nbsp;。</li> \n</ul> \n<p>可执行的 <strong>操作</strong>&nbsp;如下：</p> \n<ul> \n <li>将一个&nbsp;<code>\'1\'</code>&nbsp;变成一个&nbsp;<code>\'0\'</code>&nbsp;。</li> \n <li>将一个&nbsp;<code>\'0\'</code>&nbsp;变成一个&nbsp;<code>\'1\'</code>&nbsp;。</li> \n <li>将一个&nbsp;<code>\'&amp;\'</code> 变成一个&nbsp;<code>\'|\'</code>&nbsp;。</li> \n <li>将一个&nbsp;<code>\'|\'</code>&nbsp;变成一个&nbsp;<code>\'&amp;\'</code>&nbsp;。</li> \n</ul> \n<p><strong>注意：</strong><code>\'&amp;\'</code>&nbsp;的 <strong>运算优先级</strong>&nbsp;与&nbsp;<code>\'|\'</code> <strong>相同</strong>&nbsp;。计算表达式时，括号优先级 <strong>最高</strong>&nbsp;，然后按照 <strong>从左到右</strong> 的顺序运算。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>expression = \"1&amp;(0|1)\"\n<b>输出：</b>1\n<b>解释：</b>我们可以将 \"1&amp;(0<strong>|</strong>1)\" 变成 \"1&amp;(0<strong>&amp;</strong>1)\" ，执行的操作为将一个 \'|\' 变成一个 \'&amp;\' ，执行了 1 次操作。\n新表达式的值为 0 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>expression = \"(0&amp;0)&amp;(0&amp;0&amp;0)\"\n<b>输出：</b>3\n<b>解释：</b>我们可以将 \"(0<strong>&amp;0</strong>)<strong>&amp;</strong>(0&amp;0&amp;0)\" 变成 \"(0<strong>|1</strong>)<strong>|</strong>(0&amp;0&amp;0)\" ，执行了 3 次操作。\n新表达式的值为 1 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>expression = \"(0|(1|0&amp;1))\"\n<b>输出：</b>1\n<b>解释：</b>我们可以将 \"(0|(<strong>1</strong>|0&amp;1))\" 变成 \"(0|(<strong>0</strong>|0&amp;1))\" ，执行了 1 次操作。\n新表达式的值为 0 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= expression.length &lt;= 10<sup>5</sup></code></li> \n <li><code>expression</code>&nbsp;只包含&nbsp;<code>\'1\'</code>，<code>\'0\'</code>，<code>\'&amp;\'</code>，<code>\'|\'</code>，<code>\'(\'</code>&nbsp;和&nbsp;<code>\')\'</code></li> \n <li>所有括号都有与之匹配的对应括号。</li> \n <li>不会有空的括号（也就是说&nbsp;<code>\"()\"</code>&nbsp;不是&nbsp;<code>expression</code> 的子字符串）。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1897. 重新分配字符使所有字符串都相等', '<p>给你一个字符串数组 <code>words</code>（下标 <strong>从 0 开始</strong> 计数）。</p> \n<p>在一步操作中，需先选出两个 <strong>不同</strong> 下标 <code>i</code> 和 <code>j</code>，其中 <code>words[i]</code> 是一个非空字符串，接着将 <code>words[i]</code> 中的 <strong>任一</strong> 字符移动到 <code>words[j]</code> 中的 <strong>任一</strong> 位置上。</p> \n<p>如果执行任意步操作可以使 <code>words</code> 中的每个字符串都相等，返回 <code>true</code><em> </em>；否则，返回<em> </em><code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>words = [\"abc\",\"aabc\",\"bc\"]\n<strong>输出：</strong>true\n<strong>解释：</strong>将 <code>words[1] 中的第一个</code> \'a\' 移动到<code> words[2] 的最前面。\n使 </code><code>words[1]</code> = \"abc\" 且 words[2] = \"abc\" 。\n所有字符串都等于 \"abc\" ，所以返回 <code>true</code> 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>words = [\"ab\",\"a\"]\n<strong>输出：</strong>false\n<strong>解释：</strong>执行操作无法使所有字符串都相等。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 100</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 100</code></li> \n <li><code>words[i]</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1898. 可移除字符的最大数目', '<p>给你两个字符串 <code>s</code> 和 <code>p</code> ，其中 <code>p</code> 是 <code>s</code> 的一个 <strong>子序列</strong> 。同时，给你一个元素 <strong>互不相同</strong> 且下标 <strong>从 0 开始</strong> 计数的整数数组&nbsp;<code>removable</code> ，该数组是 <code>s</code> 中下标的一个子集（<code>s</code> 的下标也 <strong>从 0 开始</strong> 计数）。</p> \n<p>请你找出一个整数 <code>k</code>（<code>0 &lt;= k &lt;= removable.length</code>），选出&nbsp;<code>removable</code> 中的 <strong>前</strong> <code>k</code> 个下标，然后从 <code>s</code> 中移除这些下标对应的 <code>k</code> 个字符。整数 <code>k</code> 需满足：在执行完上述步骤后， <code>p</code> 仍然是 <code>s</code> 的一个 <strong>子序列</strong> 。更正式的解释是，对于每个 <code>0 &lt;= i &lt; k</code> ，先标记出位于 <code>s[removable[i]]</code> 的字符，接着移除所有标记过的字符，然后检查 <code>p</code> 是否仍然是 <code>s</code> 的一个子序列。</p> \n<p>返回你可以找出的 <strong>最大</strong><em> </em><code>k</code><em> </em>，满足在移除字符后<em> </em><code>p</code><em> </em>仍然是 <code>s</code> 的一个子序列。</p> \n<p>字符串的一个 <strong>子序列</strong> 是一个由原字符串生成的新字符串，生成过程中可能会移除原字符串中的一些字符（也可能不移除）但不改变剩余字符之间的相对顺序。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"abcacb\", p = \"ab\", removable = [3,1,0]\n<strong>输出：</strong>2\n<strong>解释：</strong>在移除下标 3 和 1 对应的字符后，\"a<strong>b</strong>c<strong>a</strong>cb\" 变成 \"accb\" 。\n\"ab\" 是 \"<strong>a</strong>cc<strong>b</strong>\" 的一个子序列。\n如果移除下标 3、1 和 0 对应的字符后，\"<strong>ab</strong>c<strong>a</strong>cb\" 变成 \"ccb\" ，那么 \"ab\" 就不再是 s 的一个子序列。\n因此，最大的 k 是 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abcbddddd\", p = \"abcd\", removable = [3,2,1,4,5,6]\n<strong>输出：</strong>1\n<strong>解释：</strong>在移除下标 3 对应的字符后，\"abc<strong>b</strong>ddddd\" 变成 \"abcddddd\" 。\n\"abcd\" 是 \"<strong>abcd</strong>dddd\" 的一个子序列。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"abcab\", p = \"abc\", removable = [0,1,2,3,4]\n<strong>输出：</strong>0\n<strong>解释：</strong>如果移除数组 removable 的第一个下标，\"abc\" 就不再是 s 的一个子序列。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= p.length &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= removable.length &lt; s.length</code></li> \n <li><code>0 &lt;= removable[i] &lt; s.length</code></li> \n <li><code>p</code> 是 <code>s</code> 的一个 <strong>子字符串</strong></li> \n <li><code>s</code> 和 <code>p</code> 都由小写英文字母组成</li> \n <li><code>removable</code> 中的元素 <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1899. 合并若干三元组以形成目标三元组', '<p><strong>三元组</strong> 是一个由三个整数组成的数组。给你一个二维整数数组 <code>triplets</code> ，其中 <code>triplets[i] = [a<sub>i</sub>, b<sub>i</sub>, c<sub>i</sub>]</code> 表示第 <code>i</code> 个 <strong>三元组</strong> 。同时，给你一个整数数组 <code>target = [x, y, z]</code> ，表示你想要得到的 <strong>三元组</strong> 。</p> \n<p>为了得到 <code>target</code> ，你需要对 <code>triplets</code> 执行下面的操作 <strong>任意次</strong>（可能 <strong>零</strong> 次）：</p> \n<ul> \n <li>选出两个下标（下标 <strong>从 0 开始</strong> 计数）<code>i</code> 和 <code>j</code>（<code>i != j</code>），并 <strong>更新</strong> <code>triplets[j]</code> 为 <code>[max(a<sub>i</sub>, a<sub>j</sub>), max(b<sub>i</sub>, b<sub>j</sub>), max(c<sub>i</sub>, c<sub>j</sub>)]</code> 。 \n  <ul> \n   <li>例如，<code>triplets[i] = [2, 5, 3]</code> 且 <code>triplets[j] = [1, 7, 5]</code>，<code>triplets[j]</code> 将会更新为 <code>[max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5]</code> 。</li> \n  </ul> </li> \n</ul> \n<p>如果通过以上操作我们可以使得目标 <strong>三元组</strong>&nbsp;<code>target</code>&nbsp;成为&nbsp;<code>triplets</code> 的一个 <strong>元素</strong>&nbsp;，则返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5]\n<strong>输出：</strong>true\n<strong>解释：</strong>执行下述操作：\n- 选择第一个和最后一个三元组 [<strong>[2,5,3]</strong>,[1,8,4],<strong>[1,7,5]</strong>] 。更新最后一个三元组为 [max(2,1), max(5,7), max(3,5)] = [2,7,5] 。triplets = [[2,5,3],[1,8,4],<strong>[2,7,5]</strong>]\n目标三元组 [2,7,5] 现在是 triplets 的一个元素。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>triplets = [[1,3,4],[2,5,8]], target = [2,5,8]\n<strong>输出：</strong>true\n<strong>解释：</strong>目标三元组 [2,5,8] 已经是 triplets 的一个元素。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5]\n<strong>输出：</strong>true\n<strong>解释：</strong>执行下述操作：\n- 选择第一个和第三个三元组 [<strong>[2,5,3]</strong>,[2,3,4],<strong>[1,2,5]</strong>,[5,2,3]] 。更新第三个三元组为 [max(2,1), max(5,2), max(3,5)] = [2,5,5] 。triplets = [[2,5,3],[2,3,4],<strong>[2,5,5]</strong>,[5,2,3]] 。\n- 选择第三个和第四个三元组 [[2,5,3],[2,3,4],<strong>[2,5,5]</strong>,<strong>[5,2,3]</strong>] 。更新第四个三元组为 [max(2,5), max(5,2), max(5,3)] = [5,5,5] 。triplets = [[2,5,3],[2,3,4],[2,5,5],<strong>[5,5,5]</strong>] 。\n目标三元组 [5,5,5] 现在是 triplets 的一个元素。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>triplets = [[3,4,5],[4,5,6]], target = [3,2,5]\n<strong>输出：</strong>false\n<strong>解释：</strong>无法得到 [3,2,5] ，因为 triplets 不含 2 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= triplets.length &lt;= 10<sup>5</sup></code></li> \n <li><code>triplets[i].length == target.length == 3</code></li> \n <li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub>, c<sub>i</sub>, x, y, z &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('19. 删除链表的倒数第 N 个结点', '<p>给你一个链表，删除链表的倒数第&nbsp;<code>n</code><em>&nbsp;</em>个结点，并且返回链表的头结点。</p> \n<p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 542px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,2,3,4,5], n = 2\n<strong>输出：</strong>[1,2,3,5]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>head = [1], n = 1\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>head = [1,2], n = 1\n<strong>输出：</strong>[1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表中结点的数目为 <code>sz</code></li> \n <li><code>1 &lt;= sz &lt;= 30</code></li> \n <li><code>0 &lt;= Node.val &lt;= 100</code></li> \n <li><code>1 &lt;= n &lt;= sz</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('190. 颠倒二进制位', '<p>颠倒给定的 32 位无符号整数的二进制位。</p> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li> \n <li>在 Java 中，编译器使用<a href=\"https://baike.baidu.com/item/二进制补码/5295284\">二进制补码</a>记法来表示有符号整数。因此，在上面的&nbsp;<strong>示例 2</strong>&nbsp;中，输入表示有符号整数 <code>-3</code>，输出表示有符号整数 <code>-1073741825</code>。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶</strong>:<br> 如果多次调用这个函数，你将如何优化你的算法？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> 00000010100101000001111010011100\n<strong>输出:</strong> 00111001011110000010100101000000\n<strong>解释: </strong>输入的二进制串 <strong>00000010100101000001111010011100 </strong>表示无符号整数<strong> 43261596</strong><strong>，\n</strong>     因此返回 964176192，其二进制表示形式为 <strong>00111001011110000010100101000000</strong>。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>11111111111111111111111111111101\n<strong>输出：</strong>10111111111111111111111111111111\n<strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 表示无符号整数 4294967293，\n&nbsp;    因此返回 3221225471 其二进制表示形式为 <strong>10111111111111111111111111111111 。</strong></pre> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 00000010100101000001111010011100\n<strong>输出：</strong>964176192 (00111001011110000010100101000000)\n<strong>解释：</strong>输入的二进制串 <strong>00000010100101000001111010011100 </strong>表示无符号整数<strong> 43261596</strong><strong>，\n    </strong> 因此返回 964176192，其二进制表示形式为 <strong>00111001011110000010100101000000</strong>。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 11111111111111111111111111111101\n<strong>输出：</strong>3221225471 (10111111111111111111111111111111)\n<strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 表示无符号整数 4294967293，\n   &nbsp; 因此返回 3221225471 其二进制表示形式为 <strong>10111111111111111111111111111111 。</strong></pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>输入是一个长度为 <code>32</code> 的二进制字符串</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1900. 最佳运动员的比拼回合', '<p><code>n</code> 名运动员参与一场锦标赛，所有运动员站成一排，并根据 <strong>最开始的</strong> 站位从 <code>1</code> 到 <code>n</code> 编号（运动员 <code>1</code> 是这一排中的第一个运动员，运动员 <code>2</code> 是第二个运动员，依此类推）。</p> \n<p>锦标赛由多个回合组成（从回合 <code>1</code> 开始）。每一回合中，这一排从前往后数的第 <code>i</code> 名运动员需要与从后往前数的第 <code>i</code> 名运动员比拼，获胜者将会进入下一回合。如果当前回合中运动员数目为奇数，那么中间那位运动员将轮空晋级下一回合。</p> \n<ul> \n <li>例如，当前回合中，运动员 <code>1, 2, 4, 6, 7</code> 站成一排 \n  <ul> \n   <li>运动员 <code>1</code> 需要和运动员 <code>7</code> 比拼</li> \n   <li>运动员 <code>2</code> 需要和运动员 <code>6</code> 比拼</li> \n   <li>运动员 <code>4</code> 轮空晋级下一回合</li> \n  </ul> </li> \n</ul> \n<p>每回合结束后，获胜者将会基于最开始分配给他们的原始顺序（升序）重新排成一排。</p> \n<p>编号为 <code>firstPlayer</code> 和 <code>secondPlayer</code> 的运动员是本场锦标赛中的最佳运动员。在他们开始比拼之前，完全可以战胜任何其他运动员。而任意两个其他运动员进行比拼时，其中任意一个都有获胜的可能，因此你可以 <strong>裁定</strong> 谁是这一回合的获胜者。</p> \n<p>给你三个整数 <code>n</code>、<code>firstPlayer</code> 和 <code>secondPlayer</code> 。返回一个由两个值组成的整数数组，分别表示两位最佳运动员在本场锦标赛中比拼的 <strong>最早</strong> 回合数和 <strong>最晚</strong> 回合数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 11, firstPlayer = 2, secondPlayer = 4\n<strong>输出：</strong>[3,4]\n<strong>解释：</strong>\n一种能够产生最早回合数的情景是：\n回合 1：1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\n回合 2：2, 3, 4, 5, 6, 11\n回合 3：2, 3, 4\n一种能够产生最晚回合数的情景是：\n回合 1：1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\n回合 2：1, 2, 3, 4, 5, 6\n回合 3：1, 2, 4\n回合 4：2, 4\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 5, firstPlayer = 1, secondPlayer = 5\n<strong>输出：</strong>[1,1]\n<strong>解释：</strong>两名最佳运动员 1 和 5 将会在回合 1 进行比拼。\n不存在使他们在其他回合进行比拼的可能。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 28</code></li> \n <li><code>1 &lt;= firstPlayer &lt; secondPlayer &lt;= n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1901. 找出顶峰元素 II', '<p>一个 2D 网格中的 <strong>顶峰元素 </strong>是指那些 <strong>严格大于 </strong>其相邻格子(上、下、左、右)的元素。</p> \n<p>给你一个<strong> 从 0 开始编号 </strong>的 <code>m x n</code> 矩阵 <code>mat</code> ，其中任意两个相邻格子的值都<strong> 不相同</strong> 。找出 <strong>任意一个 </strong>顶峰元素 <code>mat[i][j]</code> 并 <strong>返回其位置 </strong><code>[i,j]</code> 。</p> \n<p>你可以假设整个矩阵周边环绕着一圈值为 <code>-1</code> 的格子。</p> \n<p>要求必须写出时间复杂度为 <code>O(m log(n))</code> 或 <code>O(n log(m))</code> 的算法</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<p><img style=\"width: 206px; height: 209px;\" src=\"https://assets.leetcode.com/uploads/2021/06/08/1.png\" alt=\"\"></p> \n<pre><strong>输入:</strong> mat = [[1,4],[3,2]]\n<strong>输出:</strong> [0,1]\n<strong>解释:</strong>&nbsp;3和4都是顶峰元素，所以[1,0]和[0,1]都是可接受的答案。\n</pre> \n<p><strong>示例 2:</strong></p> \n<p><strong><img style=\"width: 254px; height: 257px;\" src=\"https://assets.leetcode.com/uploads/2021/06/07/3.png\" alt=\"\"></strong></p> \n<pre><strong>输入:</strong> mat = [[10,20,15],[21,30,14],[7,16,32]]\n<strong>输出:</strong> [1,1]\n<strong>解释:</strong>&nbsp;30和32都是顶峰元素，所以[1,1]和[2,2]都是可接受的答案。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == mat.length</code></li> \n <li><code>n == mat[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 500</code></li> \n <li><code>1 &lt;= mat[i][j] &lt;= 10<sup>5</sup></code></li> \n <li>任意两个相邻元素均不相等.</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1903. 字符串中的最大奇数', '<p>给你一个字符串 <code>num</code> ，表示一个大整数。请你在字符串 <code>num</code> 的所有&nbsp;<strong>非空子字符串</strong> 中找出 <strong>值最大的奇数</strong> ，并以字符串形式返回。如果不存在奇数，则返回一个空字符串<em> </em><code>\"\"</code><em> </em>。</p> \n<p><strong>子字符串</strong> 是字符串中的一个连续的字符序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>num = \"52\"\n<strong>输出：</strong>\"5\"\n<strong>解释：</strong>非空子字符串仅有 \"5\"、\"2\" 和 \"52\" 。\"5\" 是其中唯一的奇数。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>num = \"4206\"\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>在 \"4206\" 中不存在奇数。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>num = \"35427\"\n<strong>输出：</strong>\"35427\"\n<strong>解释：</strong>\"35427\" 本身就是一个奇数。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= num.length &lt;= 10<sup>5</sup></code></li> \n <li><code>num</code> 仅由数字组成且不含前导零</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1904. 你完成的完整对局数', '<p>一款新的在线电子游戏在近期发布，在该电子游戏中，以 <strong>刻钟</strong> 为周期规划若干时长为 <strong>15 分钟</strong> 的游戏对局。这意味着，在 <code>HH:00</code>、<code>HH:15</code>、<code>HH:30</code> 和 <code>HH:45</code> ，将会开始一个新的对局，其中 <code>HH</code> 用一个从 <code>00</code> 到 <code>23</code> 的整数表示。游戏中使用 <strong>24 小时制的时钟</strong> ，所以一天中最早的时间是 <code>00:00</code>&nbsp;，最晚的时间是 <code>23:59</code> 。</p> \n<p>给你两个字符串 <code>startTime</code> 和 <code>finishTime</code> ，均符合 <code>\"HH:MM\"</code> 格式，分别表示你 <strong>进入</strong> 和 <strong>退出</strong> 游戏的确切时间，请计算在整个游戏会话期间，你完成的 <strong>完整对局的对局数</strong> 。</p> \n<ul> \n <li>例如，如果 <code>startTime = \"05:20\"</code> 且 <code>finishTime = \"05:59\"</code> ，这意味着你仅仅完成从 <code>05:30</code> 到 <code>05:45</code> 这一个完整对局。而你没有完成从 <code>05:15</code> 到 <code>05:30</code> 的完整对局，因为你是在对局开始后进入的游戏；同时，你也没有完成从 <code>05:45</code> 到 <code>06:00</code> 的完整对局，因为你是在对局结束前退出的游戏。</li> \n</ul> \n<p>如果 <code>finishTime</code> <strong>早于</strong> <code>startTime</code> ，这表示你玩了个通宵（也就是从 <code>startTime</code> 到午夜，再从午夜到 <code>finishTime</code>）。</p> \n<p>假设你是从&nbsp;<code>startTime</code> 进入游戏，并在&nbsp;<code>finishTime</code> 退出游戏，请计算并返回你完成的 <strong>完整对局的对局数</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>startTime = \"12:01\", finishTime = \"12:44\"\n<strong>输出：</strong>1\n<strong>解释：</strong>你完成了从 12:15 到 12:30 的一个完整对局。\n你没有完成从 12:00 到 12:15 的完整对局，因为你是在对局开始后的 12:01 进入的游戏。\n你没有完成从 12:30 到 12:45 的完整对局，因为你是在对局结束前的 12:44 退出的游戏。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>startTime = \"20:00\", finishTime = \"06:00\"\n<strong>输出：</strong>40\n<strong>解释：</strong>你完成了从 20:00 到 00:00 的 16 个完整的对局，以及从 00:00 到 06:00 的 24 个完整的对局。\n16 + 24 = 40\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>startTime = \"00:00\", finishTime = \"23:59\"\n<strong>输出：</strong>95\n<strong>解释：</strong>除最后一个小时你只完成了 3 个完整对局外，其余每个小时均完成了 4 场完整对局。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>startTime</code> 和 <code>finishTime</code> 的格式为 <code>HH:MM</code></li> \n <li><code>00 &lt;= HH &lt;= 23</code></li> \n <li><code>00 &lt;= MM &lt;= 59</code></li> \n <li><code>startTime</code> 和 <code>finishTime</code> 不相等</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1905. 统计子岛屿', '<p>给你两个&nbsp;<code>m x n</code>&nbsp;的二进制矩阵&nbsp;<code>grid1</code> 和&nbsp;<code>grid2</code>&nbsp;，它们只包含&nbsp;<code>0</code>&nbsp;（表示水域）和 <code>1</code>&nbsp;（表示陆地）。一个 <strong>岛屿</strong>&nbsp;是由 <strong>四个方向</strong>&nbsp;（水平或者竖直）上相邻的&nbsp;<code>1</code>&nbsp;组成的区域。任何矩阵以外的区域都视为水域。</p> \n<p>如果 <code>grid2</code>&nbsp;的一个岛屿，被 <code>grid1</code>&nbsp;的一个岛屿&nbsp;<strong>完全</strong> 包含，也就是说 <code>grid2</code>&nbsp;中该岛屿的每一个格子都被 <code>grid1</code>&nbsp;中同一个岛屿完全包含，那么我们称 <code>grid2</code>&nbsp;中的这个岛屿为 <strong>子岛屿</strong>&nbsp;。</p> \n<p>请你返回 <code>grid2</code>&nbsp;中 <strong>子岛屿</strong>&nbsp;的 <strong>数目</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 493px; height: 205px;\" src=\"https://assets.leetcode.com/uploads/2021/06/10/test1.png\" alt=\"\"> \n<pre><b>输入：</b>grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]\n<b>输出：</b>3\n<strong>解释：</strong>如上图所示，左边为 grid1 ，右边为 grid2 。\ngrid2 中标红的 1 区域是子岛屿，总共有 3 个子岛屿。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 491px; height: 201px;\" src=\"https://assets.leetcode.com/uploads/2021/06/03/testcasex2.png\" alt=\"\"> \n<pre><b>输入：</b>grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]\n<b>输出：</b>2 \n<strong>解释：</strong>如上图所示，左边为 grid1 ，右边为 grid2 。\ngrid2 中标红的 1 区域是子岛屿，总共有 2 个子岛屿。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == grid1.length == grid2.length</code></li> \n <li><code>n == grid1[i].length == grid2[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 500</code></li> \n <li><code>grid1[i][j]</code> 和&nbsp;<code>grid2[i][j]</code>&nbsp;都要么是&nbsp;<code>0</code>&nbsp;要么是&nbsp;<code>1</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1906. 查询差绝对值的最小值', '<p>一个数组 <code>a</code>&nbsp;的 <strong>差绝对值的最小值</strong>&nbsp;定义为：<code>0 &lt;= i &lt; j &lt; a.length</code>&nbsp;且 <code>a[i] != a[j]</code>&nbsp;的<strong> </strong><code><span style=\"\">|a[i] - a[j]|</span></code> 的 <strong>最小值</strong>。如果 <code>a</code>&nbsp;中所有元素都 <strong>相同</strong>&nbsp;，那么差绝对值的最小值为 <code>-1</code>&nbsp;。</p> \n<ul> \n <li>比方说，数组&nbsp;<code>[5,<strong>2</strong>,<strong>3</strong>,7,2]</code>&nbsp;差绝对值的最小值是&nbsp;<code>|2 - 3| = 1</code>&nbsp;。注意答案不为 <code>0</code>&nbsp;，因为&nbsp;<code>a[i]</code> 和&nbsp;<code>a[j]</code>&nbsp;必须不相等。</li> \n</ul> \n<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;和查询数组&nbsp;<code>queries</code>&nbsp;，其中&nbsp;<code>queries[i] = [l<sub>i</sub>, r<sub>i</sub>]</code>&nbsp;。对于每个查询&nbsp;<code>i</code>&nbsp;，计算&nbsp;<strong>子数组</strong>&nbsp;<code>nums[l<sub>i</sub>...r<sub>i</sub>]</code>&nbsp;中 <strong>差绝对值的最小值</strong> ，子数组&nbsp;<code>nums[l<sub>i</sub>...r<sub>i</sub>]</code> 包含 <code>nums</code>&nbsp;数组（下标从 <strong>0</strong>&nbsp;开始）中下标在 <code>l<sub>i</sub></code> 和&nbsp;<code>r<sub>i</sub></code> 之间的所有元素（包含&nbsp;<code>l<sub>i</sub></code> 和&nbsp;<code>r<sub>i</sub></code> 在内）。</p> \n<p>请你返回&nbsp;<code>ans</code>&nbsp;<strong>数组</strong>，其中 <code>ans[i]</code>&nbsp;是第 <code>i</code>&nbsp;个查询的答案。</p> \n<p><strong>子数组</strong>&nbsp;是一个数组中连续的一段元素。</p> \n<p><code>|x|</code>&nbsp;的值定义为：</p> \n<ul> \n <li>如果&nbsp;<code>x &gt;= 0</code>&nbsp;，那么值为&nbsp;<code>x</code>&nbsp;。</li> \n <li>如果&nbsp;<code>x &lt; 0</code>&nbsp;，那么值为&nbsp;<code>-x</code>&nbsp;。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [1,3,4,8], queries = [[0,1],[1,2],[2,3],[0,3]]\n<b>输出：</b>[2,1,4,1]\n<b>解释：</b>查询结果如下：\n- queries[0] = [0,1]：子数组是 [<strong>1</strong>,<strong>3</strong>] ，差绝对值的最小值为 |1-3| = 2 。\n- queries[1] = [1,2]：子数组是 [<strong>3</strong>,<strong>4</strong>] ，差绝对值的最小值为 |3-4| = 1 。\n- queries[2] = [2,3]：子数组是 [<strong>4</strong>,<strong>8</strong>] ，差绝对值的最小值为 |4-8| = 4 。\n- queries[3] = [0,3]：子数组是 [1,<strong>3</strong>,<strong>4</strong>,8] ，差的绝对值的最小值为 |3-4| = 1 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [4,5,2,2,7,10], queries = [[2,3],[0,2],[0,5],[3,5]]\n<b>输出：</b>[-1,1,1,3]\n<strong>解释：</strong>查询结果如下：\n- queries[0] = [2,3]：子数组是 [2,2] ，差绝对值的最小值为 -1 ，因为所有元素相等。\n- queries[1] = [0,2]：子数组是 [<strong>4</strong>,<strong>5</strong>,2] ，差绝对值的最小值为 |4-5| = 1 。\n- queries[2] = [0,5]：子数组是 [<strong>4</strong>,<strong>5</strong>,2,2,7,10] ，差绝对值的最小值为 |4-5| = 1 。\n- queries[3] = [3,5]：子数组是 [2,<strong>7</strong>,<strong>10</strong>] ，差绝对值的最小值为 |7-10| = 3 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 100</code></li> \n <li><code>1 &lt;= queries.length &lt;= 2&nbsp;* 10<sup>4</sup></code></li> \n <li><code>0 &lt;= l<sub>i</sub> &lt; r<sub>i</sub> &lt; nums.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1909. 删除一个元素使数组严格递增', '<p>给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>nums</code>&nbsp;，如果&nbsp;<strong>恰好</strong>&nbsp;删除&nbsp;<strong>一个</strong>&nbsp;元素后，数组&nbsp;<strong>严格递增</strong>&nbsp;，那么请你返回&nbsp;<code>true</code>&nbsp;，否则返回&nbsp;<code>false</code>&nbsp;。如果数组本身已经是严格递增的，请你也返回&nbsp;<code>true</code>&nbsp;。</p> \n<p>数组&nbsp;<code>nums</code>&nbsp;是 <strong>严格递增</strong>&nbsp;的定义为：对于任意下标的&nbsp;<code>1 &lt;= i &lt; nums.length</code>&nbsp;都满足&nbsp;<code>nums[i - 1] &lt; nums[i]</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [1,2,<strong>10</strong>,5,7]\n<b>输出：</b>true\n<b>解释：</b>从 nums 中删除下标 2 处的 10 ，得到 [1,2,5,7] 。\n[1,2,5,7] 是严格递增的，所以返回 true 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [2,3,1,2]\n<b>输出：</b>false\n<b>解释：</b>\n[3,1,2] 是删除下标 0 处元素后得到的结果。\n[2,1,2] 是删除下标 1 处元素后得到的结果。\n[2,3,2] 是删除下标 2 处元素后得到的结果。\n[2,3,1] 是删除下标 3 处元素后得到的结果。\n没有任何结果数组是严格递增的，所以返回 false 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [1,1,1]\n<b>输出：</b>false\n<b>解释：</b>删除任意元素后的结果都是 [1,1] 。\n[1,1] 不是严格递增的，所以返回 false 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>nums = [1,2,3]\n<b>输出：</b>true\n<b>解释：</b>[1,2,3] 已经是严格递增的，所以返回 true 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= nums.length &lt;= 1000</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('191. 位1的个数', '<p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 \'1\' 的个数（也被称为<a href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F\">汉明重量</a>）。</p> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li> \n <li>在 Java 中，编译器使用<a href=\"https://baike.baidu.com/item/二进制补码/5295284\">二进制补码</a>记法来表示有符号整数。因此，在上面的&nbsp;<strong>示例 3</strong>&nbsp;中，输入表示有符号整数 <code>-3</code>。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>00000000000000000000000000001011\n<strong>输出：</strong>3\n<strong>解释：</strong>输入的二进制串 <code><strong>00000000000000000000000000001011</strong>&nbsp;中，共有三位为 \'1\'。</code>\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>00000000000000000000000010000000\n<strong>输出：</strong>1\n<strong>解释：</strong>输入的二进制串 <strong>00000000000000000000000010000000</strong>&nbsp;中，共有一位为 \'1\'。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>11111111111111111111111111111101\n<strong>输出：</strong>31\n<strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 中，共有 31 位为 \'1\'。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>输入必须是长度为 <code>32</code> 的 <strong>二进制串</strong> 。</li> \n</ul> \n<ul> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶</strong>：</p> \n<ul> \n <li>如果多次调用这个函数，你将如何优化你的算法？</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1910. 删除一个字符串中所有出现的给定子字符串', '<p>给你两个字符串&nbsp;<code>s</code>&nbsp;和&nbsp;<code>part</code>&nbsp;，请你对&nbsp;<code>s</code>&nbsp;反复执行以下操作直到 <b>所有</b>&nbsp;子字符串&nbsp;<code>part</code>&nbsp;都被删除：</p> \n<ul> \n <li>找到 <code>s</code>&nbsp;中 <strong>最左边</strong>&nbsp;的子字符串 <code>part</code>&nbsp;，并将它从 <code>s</code>&nbsp;中删除。</li> \n</ul> \n<p>请你返回从 <code>s</code>&nbsp;中删除所有 <code>part</code>&nbsp;子字符串以后得到的剩余字符串。</p> \n<p>一个 <strong>子字符串</strong>&nbsp;是一个字符串中连续的字符序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"daabcbaabcbc\", part = \"abc\"\n<b>输出：</b>\"dab\"\n<b>解释：</b>以下操作按顺序执行：\n- s = \"da<strong>abc</strong>baabcbc\" ，删除下标从 2 开始的 \"abc\" ，得到 s = \"dabaabcbc\" 。\n- s = \"daba<strong>abc</strong>bc\" ，删除下标从 4 开始的 \"abc\" ，得到 s = \"dababc\" 。\n- s = \"dab<strong>abc</strong>\" ，删除下标从 3 开始的 \"abc\" ，得到 s = \"dab\" 。\n此时 s 中不再含有子字符串 \"abc\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"axxxxyyyyb\", part = \"xy\"\n<b>输出：</b>\"ab\"\n<b>解释：</b>以下操作按顺序执行：\n- s = \"axxx<strong>xy</strong>yyyb\" ，删除下标从 4 开始的 \"xy\" ，得到 s = \"axxxyyyb\" 。\n- s = \"axx<strong>xy</strong>yyb\" ，删除下标从 3 开始的 \"xy\" ，得到 s = \"axxyyb\" 。\n- s = \"ax<strong>xy</strong>yb\" ，删除下标从 2 开始的 \"xy\" ，得到 s = \"axyb\" 。\n- s = \"a<strong>xy</strong>b\" ，删除下标从 1 开始的 \"xy\" ，得到 s = \"ab\" 。\n此时 s 中不再含有子字符串 \"xy\" 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 1000</code></li> \n <li><code>1 &lt;= part.length &lt;= 1000</code></li> \n <li><code>s</code>​​​​​​ 和&nbsp;<code>part</code>&nbsp;只包小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1911. 最大子序列交替和', '<p>一个下标从 <strong>0</strong>&nbsp;开始的数组的 <strong>交替和</strong>&nbsp;定义为 <strong>偶数</strong>&nbsp;下标处元素之 <strong>和</strong>&nbsp;减去 <strong>奇数</strong>&nbsp;下标处元素之 <strong>和</strong>&nbsp;。</p> \n<ul> \n <li>比方说，数组&nbsp;<code>[4,2,5,3]</code>&nbsp;的交替和为&nbsp;<code>(4 + 5) - (2 + 3) = 4</code>&nbsp;。</li> \n</ul> \n<p>给你一个数组&nbsp;<code>nums</code>&nbsp;，请你返回&nbsp;<code>nums</code>&nbsp;中任意子序列的&nbsp;<strong>最大交替和</strong>&nbsp;（子序列的下标 <strong>重新</strong>&nbsp;从 0 开始编号）。</p> \n<ul> \n</ul> \n<p>一个数组的 <strong>子序列</strong>&nbsp;是从原数组中删除一些元素后（也可能一个也不删除）剩余元素不改变顺序组成的数组。比方说，<code>[2,7,4]</code>&nbsp;是&nbsp;<code>[4,<strong>2</strong>,3,<strong>7</strong>,2,1,<strong>4</strong>]</code>&nbsp;的一个子序列（加粗元素），但是&nbsp;<code>[2,4,2]</code> 不是。</p> \n<p>&nbsp;</p> \n<p><b>示例 1：</b></p> \n<pre><b>输入：</b>nums = [<strong>4</strong>,<strong>2</strong>,<strong>5</strong>,3]\n<b>输出：</b>7\n<b>解释：</b>最优子序列为 [4,2,5] ，交替和为 (4 + 5) - 2 = 7 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [5,6,7,<strong>8</strong>]\n<b>输出：</b>8\n<b>解释：</b>最优子序列为 [8] ，交替和为 8 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [<strong>6</strong>,2,<strong>1</strong>,2,4,<strong>5</strong>]\n<b>输出：</b>10\n<b>解释：</b>最优子序列为 [6,1,5] ，交替和为 (6 + 5) - 1 = 10 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1912. 设计电影租借系统', '<p>你有一个电影租借公司和 <code>n</code>&nbsp;个电影商店。你想要实现一个电影租借系统，它支持查询、预订和返还电影的操作。同时系统还能生成一份当前被借出电影的报告。</p> \n<p>所有电影用二维整数数组&nbsp;<code>entries</code>&nbsp;表示，其中&nbsp;<code>entries[i] = [shop<sub>i</sub>, movie<sub>i</sub>, price<sub>i</sub>]</code>&nbsp;表示商店 <code>shop<sub>i</sub></code>&nbsp;有一份电影&nbsp;<code>movie<sub>i</sub></code>&nbsp;的拷贝，租借价格为&nbsp;<code>price<sub>i</sub></code>&nbsp;。每个商店有&nbsp;<strong>至多一份</strong>&nbsp;编号为&nbsp;<code>movie<sub>i</sub></code>&nbsp;的电影拷贝。</p> \n<p>系统需要支持以下操作：</p> \n<ul> \n <li><strong>Search：</strong>找到拥有指定电影且 <strong>未借出</strong>&nbsp;的商店中&nbsp;<strong>最便宜的 5 个</strong>&nbsp;。商店需要按照&nbsp;<strong>价格</strong>&nbsp;升序排序，如果价格相同，则&nbsp;<code>shop<sub>i</sub></code>&nbsp;<strong>较小</strong>&nbsp;的商店排在前面。如果查询结果少于 5 个商店，则将它们全部返回。如果查询结果没有任何商店，则返回空列表。</li> \n <li><strong>Rent：</strong>从指定商店借出指定电影，题目保证指定电影在指定商店 <strong>未借出</strong>&nbsp;。</li> \n <li><strong>Drop：</strong>在指定商店返还 <strong>之前已借出</strong>&nbsp;的指定电影。</li> \n <li><strong>Report：</strong>返回 <strong>最便宜的 5 部已借出电影</strong>&nbsp;（可能有重复的电影 ID），将结果用二维列表&nbsp;<code>res</code>&nbsp;返回，其中 <code>res[j] = [shop<sub>j</sub>, movie<sub>j</sub>]</code>&nbsp;表示第&nbsp;<code>j</code>&nbsp;便宜的已借出电影是从商店&nbsp;<code>shop<sub>j</sub></code>&nbsp;借出的电影&nbsp;<code>movie<sub>j</sub></code>&nbsp;。<code>res</code>&nbsp;中的电影需要按 <strong>价格</strong>&nbsp;升序排序；如果价格相同，则<strong>&nbsp;</strong><code>shop<sub>j</sub></code> <strong>较小</strong>&nbsp;的排在前面；如果仍然相同，则 <code>movie<sub>j</sub></code> <strong>较小 </strong>的排在前面。如果当前借出的电影小于 5 部，则将它们全部返回。如果当前没有借出电影，则返回一个空的列表。</li> \n</ul> \n<p>请你实现&nbsp;<code>MovieRentingSystem</code>&nbsp;类：</p> \n<ul> \n <li><code>MovieRentingSystem(int n, int[][] entries)</code>&nbsp;将&nbsp;<code>MovieRentingSystem</code>&nbsp;对象用&nbsp;<code>n</code>&nbsp;个商店和&nbsp;<code>entries</code>&nbsp;表示的电影列表初始化。</li> \n <li><code>List&lt;Integer&gt; search(int movie)</code> 如上所述，返回 <strong>未借出</strong>&nbsp;指定 <code>movie</code>&nbsp;的商店列表。</li> \n <li><code>void rent(int shop, int movie)</code>&nbsp;从指定商店 <code>shop</code>&nbsp;借出指定电影&nbsp;<code>movie</code>&nbsp;。</li> \n <li><code>void drop(int shop, int movie)</code>&nbsp;在指定商店 <code>shop</code>&nbsp;返还之前借出的电影&nbsp;<code>movie</code>&nbsp;。</li> \n <li><code>List&lt;List&lt;Integer&gt;&gt; report()</code> 如上所述，返回最便宜的 <strong>已借出</strong>&nbsp;电影列表。</li> \n</ul> \n<p><strong>注意：</strong>测试数据保证&nbsp;<code>rent</code>&nbsp;操作中指定商店拥有 <strong>未借出 </strong>的指定电影，且&nbsp;<code>drop</code>&nbsp;操作指定的商店 <strong>之前已借出</strong>&nbsp;指定电影。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\n[\"MovieRentingSystem\", \"search\", \"rent\", \"rent\", \"report\", \"drop\", \"search\"]\n[[3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]], [1], [0, 1], [1, 2], [], [1, 2], [2]]\n<strong>输出：</strong>\n[null, [1, 0, 2], null, null, [[0, 1], [1, 2]], null, [0, 1]]\n\n<strong>解释：</strong>\nMovieRentingSystem movieRentingSystem = new MovieRentingSystem(3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]);\nmovieRentingSystem.search(1);  // 返回 [1, 0, 2] ，商店 1，0 和 2 有未借出的 ID 为 1 的电影。商店 1 最便宜，商店 0 和 2 价格相同，所以按商店编号排序。\nmovieRentingSystem.rent(0, 1); // 从商店 0 借出电影 1 。现在商店 0 未借出电影编号为 [2,3] 。\nmovieRentingSystem.rent(1, 2); // 从商店 1 借出电影 2 。现在商店 1 未借出的电影编号为 [1] 。\nmovieRentingSystem.report();   // 返回 [[0, 1], [1, 2]] 。商店 0 借出的电影 1 最便宜，然后是商店 1 借出的电影 2 。\nmovieRentingSystem.drop(1, 2); // 在商店 1 返还电影 2 。现在商店 1 未借出的电影编号为 [1,2] 。\nmovieRentingSystem.search(2);  // 返回 [0, 1] 。商店 0 和 1 有未借出的 ID 为 2 的电影。商店 0 最便宜，然后是商店 1 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 3 * 10<sup>5</sup></code></li> \n <li><code>1 &lt;= entries.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= shop<sub>i</sub> &lt; n</code></li> \n <li><code>1 &lt;= movie<sub>i</sub>, price<sub>i</sub> &lt;= 10<sup>4</sup></code></li> \n <li>每个商店 <strong>至多</strong>&nbsp;有一份电影&nbsp;<code>movie<sub>i</sub></code>&nbsp;的拷贝。</li> \n <li><code>search</code>，<code>rent</code>，<code>drop</code> 和&nbsp;<code>report</code>&nbsp;的调用&nbsp;<strong>总共</strong>&nbsp;不超过&nbsp;<code>10<sup>5</sup></code>&nbsp;次。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1913. 两个数对之间的最大乘积差', '<p>两个数对&nbsp;<code>(a, b)</code> 和 <code>(c, d)</code> 之间的 <strong>乘积差</strong> 定义为 <code>(a * b) - (c * d)</code> 。</p> \n<ul> \n <li>例如，<code>(5, 6)</code> 和 <code>(2, 7)</code> 之间的乘积差是 <code>(5 * 6) - (2 * 7) = 16</code> 。</li> \n</ul> \n<p>给你一个整数数组 <code>nums</code> ，选出四个 <strong>不同的</strong> 下标 <code>w</code>、<code>x</code>、<code>y</code> 和 <code>z</code> ，使数对 <code>(nums[w], nums[x])</code> 和 <code>(nums[y], nums[z])</code> 之间的 <strong>乘积差</strong> 取到 <strong>最大值</strong> 。</p> \n<p>返回以这种方式取得的乘积差中的 <strong>最大值</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [5,6,2,7,4]\n<strong>输出：</strong>34\n<strong>解释：</strong>可以选出下标为 1 和 3 的元素构成第一个数对 (6, 7) 以及下标 2 和 4 构成第二个数对 (2, 4)\n乘积差是 (6 * 7) - (2 * 4) = 34\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [4,2,5,9,7,4,8]\n<strong>输出：</strong>64\n<strong>解释：</strong>可以选出下标为 3 和 6 的元素构成第一个数对 (9, 8) 以及下标 1 和 5 构成第二个数对 (2, 4)\n乘积差是 (9 * 8) - (2 * 4) = 64\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>4 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1914. 循环轮转矩阵', '<p>给你一个大小为 <code>m x n</code> 的整数矩阵 <code>grid</code>​​​ ，其中 <code>m</code> 和 <code>n</code> 都是 <strong>偶数</strong> ；另给你一个整数 <code>k</code> 。</p> \n<p>矩阵由若干层组成，如下图所示，每种颜色代表一层：</p> \n<p><img style=\"width: 231px; height: 258px;\" src=\"https://assets.leetcode.com/uploads/2021/06/10/ringofgrid.png\" alt=\"\"></p> \n<p>矩阵的循环轮转是通过分别循环轮转矩阵中的每一层完成的。在对某一层进行一次循环旋转操作时，层中的每一个元素将会取代其&nbsp;<strong>逆时针 </strong>方向的相邻元素。轮转示例如下：</p> \n<img style=\"width: 500px; height: 268px;\" src=\"https://assets.leetcode.com/uploads/2021/06/22/explanation_grid.jpg\" alt=\"\"> \n<p>返回执行 <code>k</code> 次循环轮转操作后的矩阵。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 421px; height: 191px;\" src=\"https://assets.leetcode.com/uploads/2021/06/19/rod2.png\" alt=\"\"> \n<pre><strong>输入：</strong>grid = [[40,10],[30,20]], k = 1\n<strong>输出：</strong>[[10,20],[40,30]]\n<strong>解释：</strong>上图展示了矩阵在执行循环轮转操作时每一步的状态。</pre> \n<p><strong>示例 2：</strong></p> \n<strong><img style=\"width: 231px; height: 262px;\" src=\"https://assets.leetcode.com/uploads/2021/06/10/ringofgrid5.png\" alt=\"\"></strong> \n<strong><img style=\"width: 231px; height: 262px;\" src=\"https://assets.leetcode.com/uploads/2021/06/10/ringofgrid6.png\" alt=\"\"></strong> \n<strong><img style=\"width: 231px; height: 262px;\" src=\"https://assets.leetcode.com/uploads/2021/06/10/ringofgrid7.png\" alt=\"\"></strong> \n<pre><strong>输入：</strong>grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2\n<strong>输出：</strong>[[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]\n<strong>解释：</strong>上图展示了矩阵在执行循环轮转操作时每一步的状态。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>2 &lt;= m, n &lt;= 50</code></li> \n <li><code>m</code> 和 <code>n</code> 都是 <strong>偶数</strong></li> \n <li><code>1 &lt;= grid[i][j] &lt;=<sup> </sup>5000</code></li> \n <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1915. 最美子字符串的数目', '<p>如果某个字符串中 <strong>至多一个</strong> 字母出现 <strong>奇数</strong> 次，则称其为 <strong>最美</strong> 字符串。</p> \n<ul> \n <li>例如，<code>\"ccjjc\"</code> 和 <code>\"abab\"</code> 都是最美字符串，但 <code>\"ab\"</code> 不是。</li> \n</ul> \n<p>给你一个字符串 <code>word</code> ，该字符串由前十个小写英文字母组成（<code>\'a\'</code> 到 <code>\'j\'</code>）。请你返回 <code>word</code> 中 <strong>最美非空子字符串</strong> 的数目<em>。</em>如果同样的子字符串在<em> </em><code>word</code> 中出现多次，那么应当对 <strong>每次出现</strong> 分别计数<em>。</em></p> \n<p><strong>子字符串</strong> 是字符串中的一个连续字符序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>word = \"aba\"\n<strong>输出：</strong>4\n<strong>解释：</strong>4 个最美子字符串如下所示：\n- \"<strong>a</strong>ba\" -&gt; \"a\"\n- \"a<strong>b</strong>a\" -&gt; \"b\"\n- \"ab<strong>a</strong>\" -&gt; \"a\"\n- \"<strong>aba</strong>\" -&gt; \"aba\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>word = \"aabb\"\n<strong>输出：</strong>9\n<strong>解释：</strong>9 个最美子字符串如下所示：\n- \"<strong>a</strong>abb\" -&gt; \"a\"\n- \"<strong>aa</strong>bb\" -&gt; \"aa\"\n- \"<strong>aab</strong>b\" -&gt; \"aab\"\n- \"<strong>aabb</strong>\" -&gt; \"aabb\"\n- \"a<strong>a</strong>bb\" -&gt; \"a\"\n- \"a<strong>abb</strong>\" -&gt; \"abb\"\n- \"aa<strong>b</strong>b\" -&gt; \"b\"\n- \"aa<strong>bb</strong>\" -&gt; \"bb\"\n- \"aab<strong>b</strong>\" -&gt; \"b\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>word = \"he\"\n<strong>输出：</strong>2\n<strong>解释：</strong>2 个最美子字符串如下所示：\n- \"<b>h</b>e\" -&gt; \"h\"\n- \"h<strong>e</strong>\" -&gt; \"e\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li> \n <li><code>word</code> 由从 <code>\'a\'</code> 到 <code>\'j\'</code> 的小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1916. 统计为蚁群构筑房间的不同顺序', '<p>你是一只蚂蚁，负责为蚁群构筑 <code>n</code> 间编号从 <code>0</code> 到 <code>n-1</code> 的新房间。给你一个 <strong>下标从 0 开始</strong> 且长度为 <code>n</code> 的整数数组&nbsp;<code>prevRoom</code> 作为扩建计划。其中，<code>prevRoom[i]</code> 表示在构筑房间 <code>i</code> 之前，你必须先构筑房间 <code>prevRoom[i]</code> ，并且这两个房间必须 <strong>直接</strong> 相连。房间 <code>0</code> 已经构筑完成，所以 <code>prevRoom[0] = -1</code> 。扩建计划中还有一条硬性要求，在完成所有房间的构筑之后，从房间 <code>0</code> 可以访问到每个房间。</p> \n<p>你一次只能构筑 <strong>一个</strong> 房间。你可以在 <strong>已经构筑好的</strong> 房间之间自由穿行，只要这些房间是 <strong>相连的</strong> 。如果房间&nbsp;<code>prevRoom[i]</code> 已经构筑完成，那么你就可以构筑房间 <code>i</code>。</p> \n<p>返回你构筑所有房间的 <strong>不同顺序的数目</strong> 。由于答案可能很大，请返回对 <code>10<sup>9</sup> + 7</code> <strong>取余</strong> 的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 200px; height: 212px;\" src=\"https://assets.leetcode.com/uploads/2021/06/19/d1.JPG\" alt=\"\"> \n<pre><strong>输入：</strong><code>prevRoom</code> = [-1,0,1]\n<strong>输出：</strong>1\n<strong>解释：</strong>仅有一种方案可以完成所有房间的构筑：0 → 1 → 2\n</pre> \n<p><strong>示例 2：</strong></p> \n<strong><img style=\"width: 200px; height: 239px;\" src=\"https://assets.leetcode.com/uploads/2021/06/19/d2.JPG\" alt=\"\"></strong> \n<pre><strong>输入：</strong><code>prevRoom</code> = [-1,0,0,1,2]\n<strong>输出：</strong>6\n<strong>解释：\n</strong>有 6 种不同顺序：\n0 → 1 → 3 → 2 → 4\n0 → 2 → 4 → 1 → 3\n0 → 1 → 2 → 3 → 4\n0 → 1 → 2 → 4 → 3\n0 → 2 → 1 → 3 → 4\n0 → 2 → 1 → 4 → 3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == prevRoom.length</code></li> \n <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>prevRoom[0] == -1</code></li> \n <li>对于所有的&nbsp;<code>1 &lt;= i &lt; n</code>&nbsp;，都有&nbsp;<code>0 &lt;= prevRoom[i] &lt; n</code></li> \n <li>题目保证所有房间都构筑完成后，从房间 <code>0</code> 可以访问到每个房间</li> \n</ul>');
INSERT INTO `leecode` VALUES ('192. 统计词频', '<p>写一个 bash 脚本以统计一个文本文件&nbsp;<code>words.txt</code>&nbsp;中每个单词出现的频率。</p> \n<p>为了简单起见，你可以假设：</p> \n<ul> \n <li><code>words.txt</code>只包括小写字母和&nbsp;<code>\' \'</code>&nbsp;。</li> \n <li>每个单词只由小写字母组成。</li> \n <li>单词间由一个或多个空格字符分隔。</li> \n</ul> \n<p><strong>示例:</strong></p> \n<p>假设 <code>words.txt</code> 内容如下：</p> \n<pre>the day is sunny the the\nthe sunny is is\n</pre> \n<p>你的脚本应当输出（以词频降序排列）：</p> \n<pre>the 4\nis 3\nsunny 2\nday 1\n</pre> \n<p><strong>说明:</strong></p> \n<ul> \n <li>不要担心词频相同的单词的排序问题，每个单词出现的频率都是唯一的。</li> \n <li>你可以使用一行&nbsp;<a href=\"http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-4.html\">Unix pipes</a>&nbsp;实现吗？</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1920. 基于排列构建数组', '<p>给你一个 <strong>从 0 开始的排列</strong> <code>nums</code>（<strong>下标也从 0 开始</strong>）。请你构建一个 <strong>同样长度</strong> 的数组 <code>ans</code> ，其中，对于每个 <code>i</code>（<code>0 &lt;= i &lt; nums.length</code>），都满足 <code>ans[i] = nums[nums[i]]</code> 。返回构建好的数组 <code>ans</code> 。</p> \n<p><strong>从 0 开始的排列</strong> <code>nums</code> 是一个由 <code>0</code> 到&nbsp;<code>nums.length - 1</code>（<code>0</code> 和 <code>nums.length - 1</code> 也包含在内）的不同整数组成的数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [0,2,1,5,3,4]\n<strong>输出：</strong>[0,1,2,4,5,3]<strong>\n解释：</strong>数组 ans 构建如下：\nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]\n    = [0,1,2,4,5,3]</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [5,0,1,2,3,4]\n<strong>输出：</strong>[4,5,0,1,2,3]\n<strong>解释：</strong>数组 ans 构建如下：\nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]\n    = [4,5,0,1,2,3]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 1000</code></li> \n <li><code>0 &lt;= nums[i] &lt; nums.length</code></li> \n <li><code>nums</code> 中的元素 <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1921. 消灭怪物的最大数量', '<p>你正在玩一款电子游戏，在游戏中你需要保护城市免受怪物侵袭。给你一个 <strong>下标从 0 开始</strong> 且长度为 <code>n</code> 的整数数组 <code>dist</code> ，其中 <code>dist[i]</code> 是第 <code>i</code> 个怪物与城市的 <strong>初始距离</strong>（单位：米）。</p> \n<p>怪物以 <strong>恒定</strong> 的速度走向城市。给你一个长度为 <code>n</code> 的整数数组 <code>speed</code> 表示每个怪物的速度，其中 <code>speed[i]</code> 是第 <code>i</code> 个怪物的速度（单位：米/分）。</p> \n<p>怪物从 <strong>第 0 分钟</strong> 时开始移动。你有一把武器，并可以 <strong>选择</strong> 在每一分钟的开始时使用，包括第 0 分钟。但是你无法在一分钟的中间使用武器。这种武器威力惊人，一次可以消灭任一还活着的怪物。</p> \n<p>一旦任一怪物到达城市，你就输掉了这场游戏。如果某个怪物 <strong>恰</strong> 在某一分钟开始时到达城市，这会被视为<strong> 输掉</strong>&nbsp;游戏，在你可以使用武器之前，游戏就会结束。</p> \n<p>返回在你输掉游戏前可以消灭的怪物的 <strong>最大</strong> 数量。如果你可以在所有怪物到达城市前将它们全部消灭，返回&nbsp; <code>n</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>dist = [1,3,4], speed = [1,1,1]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n第 0 分钟开始时，怪物的距离是 [1,3,4]，你消灭了第一个怪物。\n第 1 分钟开始时，怪物的距离是 [X,2,3]，你没有消灭任何怪物。\n第 2 分钟开始时，怪物的距离是 [X,1,2]，你消灭了第二个怪物。\n第 3 分钟开始时，怪物的距离是 [X,X,1]，你消灭了第三个怪物。\n所有 3 个怪物都可以被消灭。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>dist = [1,1,2,3], speed = [1,1,1,1]\n<strong>输出：</strong>1\n<strong>解释：</strong>\n第 0 分钟开始时，怪物的距离是 [1,1,2,3]，你消灭了第一个怪物。\n第 1 分钟开始时，怪物的距离是 [X,0,1,2]，你输掉了游戏。\n你只能消灭 1 个怪物。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>dist = [3,2,4], speed = [5,3,2]\n<strong>输出：</strong>1\n<strong>解释：</strong>\n第 0 分钟开始时，怪物的距离是 [3,2,4]，你消灭了第一个怪物。\n第 1 分钟开始时，怪物的距离是 [X,0,2]，你输掉了游戏。 \n你只能消灭 1 个怪物。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == dist.length == speed.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= dist[i], speed[i] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1922. 统计好数字的数目', '<p>我们称一个数字字符串是 <strong>好数字</strong> 当它满足（下标从 <strong>0</strong>&nbsp;开始）<strong>偶数</strong> 下标处的数字为 <strong>偶数</strong>&nbsp;且 <strong>奇数</strong>&nbsp;下标处的数字为 <strong>质数</strong>&nbsp;（<code>2</code>，<code>3</code>，<code>5</code>&nbsp;或&nbsp;<code>7</code>）。</p> \n<ul> \n <li>比方说，<code>\"2582\"</code>&nbsp;是好数字，因为偶数下标处的数字（<code>2</code>&nbsp;和&nbsp;<code>8</code>）是偶数且奇数下标处的数字（<code>5</code> 和&nbsp;<code>2</code>）为质数。但&nbsp;<code>\"3245\"</code>&nbsp;<strong>不是</strong> 好数字，因为&nbsp;<code>3</code>&nbsp;在偶数下标处但不是偶数。</li> \n</ul> \n<p>给你一个整数&nbsp;<code>n</code>&nbsp;，请你返回长度为&nbsp;<code>n</code>&nbsp;且为好数字的数字字符串&nbsp;<strong>总数</strong>&nbsp;。由于答案可能会很大，请你将它对<strong>&nbsp;</strong><code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余后返回</strong>&nbsp;。</p> \n<p>一个 <strong>数字字符串</strong>&nbsp;是每一位都由&nbsp;<code>0</code>&nbsp;到 <code>9</code>&nbsp;组成的字符串，且可能包含前导 0 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>n = 1\n<b>输出：</b>5\n<b>解释：</b>长度为 1 的好数字包括 \"0\"，\"2\"，\"4\"，\"6\"，\"8\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>n = 4\n<b>输出：</b>400\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>n = 50\n<b>输出：</b>564908303\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10<sup>15</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1923. 最长公共子路径', '<p>一个国家由 <code>n</code>&nbsp;个编号为 <code>0</code>&nbsp;到 <code>n - 1</code>&nbsp;的城市组成。在这个国家里，<strong>每两个</strong>&nbsp;城市之间都有一条道路连接。</p> \n<p>总共有 <code>m</code>&nbsp;个编号为 <code>0</code>&nbsp;到 <code>m - 1</code>&nbsp;的朋友想在这个国家旅游。他们每一个人的路径都会包含一些城市。每条路径都由一个整数数组表示，每个整数数组表示一个朋友按顺序访问过的城市序列。同一个城市在一条路径中可能 <strong>重复</strong> 出现，但同一个城市在一条路径中不会连续出现。</p> \n<p>给你一个整数&nbsp;<code>n</code>&nbsp;和二维数组&nbsp;<code>paths</code>&nbsp;，其中&nbsp;<code>paths[i]</code>&nbsp;是一个整数数组，表示第 <code>i</code>&nbsp;个朋友走过的路径，请你返回 <strong>每一个</strong>&nbsp;朋友都走过的 <strong>最长公共子路径</strong>&nbsp;的长度，如果不存在公共子路径，请你返回 <code>0</code>&nbsp;。</p> \n<p>一个 <strong>子路径</strong> 指的是一条路径中连续的城市序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>n = 5, paths = [[0,1,<strong>2,3</strong>,4],\n                     [<strong>2,3</strong>,4],\n                     [4,0,1,<strong>2,3</strong>]]\n<b>输出：</b>2\n<b>解释：</b>最长公共子路径为 [2,3] 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>n = 3, paths = [[0],[1],[2]]\n<b>输出：</b>0\n<b>解释：</b>三条路径没有公共子路径。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>n = 5, paths = [[<strong>0</strong>,1,2,3,4],\n                     [4,3,2,1,<strong>0</strong>]]\n<b>输出：</b>1\n<b>解释：</b>最长公共子路径为 [0]，[1]，[2]，[3] 和 [4] 。它们长度都为 1 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>m == paths.length</code></li> \n <li><code>2 &lt;= m &lt;= 10<sup>5</sup></code></li> \n <li><code>sum(paths[i].length) &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= paths[i][j] &lt; n</code></li> \n <li><code>paths[i]</code>&nbsp;中同一个城市不会连续重复出现。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1925. 统计平方和三元组的数目', '<p>一个 <strong>平方和三元组</strong>&nbsp;<code>(a,b,c)</code>&nbsp;指的是满足 <code>a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup></code>&nbsp;的 <strong>整数&nbsp;</strong>三元组&nbsp;<code>a</code>，<code>b</code>&nbsp;和&nbsp;<code>c</code>&nbsp;。</p> \n<p>给你一个整数&nbsp;<code>n</code>&nbsp;，请你返回满足<em>&nbsp;</em><code>1 &lt;= a, b, c &lt;= n</code>&nbsp;的 <strong>平方和三元组</strong> 的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>n = 5\n<b>输出：</b>2\n<b>解释：</b>平方和三元组为 (3,4,5) 和 (4,3,5) 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>n = 10\n<b>输出：</b>4\n<b>解释：</b>平方和三元组为 (3,4,5)，(4,3,5)，(6,8,10) 和 (8,6,10) 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 250</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1926. 迷宫中离入口最近的出口', '<p>给你一个&nbsp;<code>m x n</code>&nbsp;的迷宫矩阵&nbsp;<code>maze</code>&nbsp;（<strong>下标从 0 开始</strong>），矩阵中有空格子（用&nbsp;<code>\'.\'</code>&nbsp;表示）和墙（用&nbsp;<code>\'+\'</code>&nbsp;表示）。同时给你迷宫的入口&nbsp;<code>entrance</code>&nbsp;，用&nbsp;<code>entrance = [entrance<sub>row</sub>, entrance<sub>col</sub>]</code>&nbsp;表示你一开始所在格子的行和列。</p> \n<p>每一步操作，你可以往 <strong>上</strong>，<strong>下</strong>，<strong>左</strong> 或者 <strong>右</strong>&nbsp;移动一个格子。你不能进入墙所在的格子，你也不能离开迷宫。你的目标是找到离&nbsp;<code>entrance</code>&nbsp;<strong>最近</strong>&nbsp;的出口。<strong>出口</strong>&nbsp;的含义是&nbsp;<code>maze</code>&nbsp;<strong>边界</strong>&nbsp;上的&nbsp;<strong>空格子</strong>。<code>entrance</code>&nbsp;格子&nbsp;<strong>不算</strong>&nbsp;出口。</p> \n<p>请你返回从 <code>entrance</code>&nbsp;到最近出口的最短路径的 <strong>步数</strong>&nbsp;，如果不存在这样的路径，请你返回 <code>-1</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 333px; height: 253px;\" src=\"https://assets.leetcode.com/uploads/2021/06/04/nearest1-grid.jpg\" alt=\"\"> \n<pre><b>输入：</b>maze = [[\"+\",\"+\",\".\",\"+\"],[\".\",\".\",\".\",\"+\"],[\"+\",\"+\",\"+\",\".\"]], entrance = [1,2]\n<b>输出：</b>1\n<b>解释：</b>总共有 3 个出口，分别位于 (1,0)，(0,2) 和 (2,3) 。\n一开始，你在入口格子 (1,2) 处。\n- 你可以往左移动 2 步到达 (1,0) 。\n- 你可以往上移动 1 步到达 (0,2) 。\n从入口处没法到达 (2,3) 。\n所以，最近的出口是 (0,2) ，距离为 1 步。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 253px; height: 253px;\" src=\"https://assets.leetcode.com/uploads/2021/06/04/nearesr2-grid.jpg\" alt=\"\"> \n<pre><b>输入：</b>maze = [[\"+\",\"+\",\"+\"],[\".\",\".\",\".\"],[\"+\",\"+\",\"+\"]], entrance = [1,0]\n<b>输出：</b>2\n<b>解释：</b>迷宫中只有 1 个出口，在 (1,2) 处。\n(1,0) 不算出口，因为它是入口格子。\n初始时，你在入口与格子 (1,0) 处。\n- 你可以往右移动 2 步到达 (1,2) 处。\n所以，最近的出口为 (1,2) ，距离为 2 步。\n</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 173px; height: 93px;\" src=\"https://assets.leetcode.com/uploads/2021/06/04/nearest3-grid.jpg\" alt=\"\"> \n<pre><b>输入：</b>maze = [[\".\",\"+\"]], entrance = [0,0]\n<b>输出：</b>-1\n<b>解释：</b>这个迷宫中没有出口。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>maze.length == m</code></li> \n <li><code>maze[i].length == n</code></li> \n <li><code>1 &lt;= m, n &lt;= 100</code></li> \n <li><code>maze[i][j]</code> 要么是&nbsp;<code>\'.\'</code>&nbsp;，要么是&nbsp;<code>\'+\'</code>&nbsp;。</li> \n <li><code>entrance.length == 2</code></li> \n <li><code>0 &lt;= entrance<sub>row</sub> &lt; m</code></li> \n <li><code>0 &lt;= entrance<sub>col</sub> &lt; n</code></li> \n <li><code>entrance</code>&nbsp;一定是空格子。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1927. 求和游戏', '<p>Alice 和 Bob 玩一个游戏，两人轮流行动，<strong>Alice 先手</strong>&nbsp;。</p> \n<p>给你一个 <strong>偶数长度</strong>&nbsp;的字符串&nbsp;<code>num</code>&nbsp;，每一个字符为数字字符或者&nbsp;<code>\'?\'</code>&nbsp;。每一次操作中，如果 <code>num</code>&nbsp;中至少有一个 <code>\'?\'</code>&nbsp;，那么玩家可以执行以下操作：</p> \n<ol> \n <li>选择一个下标 <code>i</code>&nbsp;满足&nbsp;<code>num[i] == \'?\'</code>&nbsp;。</li> \n <li>将&nbsp;<code>num[i]</code>&nbsp;用&nbsp;<code>\'0\'</code>&nbsp;到&nbsp;<code>\'9\'</code>&nbsp;之间的一个数字字符替代。</li> \n</ol> \n<p>当 <code>num</code>&nbsp;中没有<span style=\"\"> </span><code>\'?\'</code> 时，游戏结束。</p> \n<p>Bob 获胜的条件是 <code>num</code>&nbsp;中前一半数字的和 <strong>等于</strong>&nbsp;后一半数字的和。Alice 获胜的条件是前一半的和与后一半的和 <strong>不相等</strong>&nbsp;。</p> \n<ul> \n <li>比方说，游戏结束时&nbsp;<code>num = \"243801\"</code>&nbsp;，那么&nbsp;Bob 获胜，因为&nbsp;<code>2+4+3 = 8+0+1</code>&nbsp;。如果游戏结束时&nbsp;<code>num = \"243803\"</code>&nbsp;，那么 Alice 获胜，因为&nbsp;<code>2+4+3 != 8+0+3</code>&nbsp;。</li> \n</ul> \n<p>在 Alice 和 Bob 都采取 <strong>最优</strong>&nbsp;策略的前提下，如果 Alice 获胜，请返回 <code>true</code>&nbsp;，如果 Bob 获胜，请返回 <code>false</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>num = \"5023\"\n<b>输出：</b>false\n<b>解释：</b>num 中没有 \'?\' ，没法进行任何操作。\n前一半的和等于后一半的和：5 + 0 = 2 + 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>num = \"25??\"\n<b>输出：</b>true\n<strong>解释：</strong>Alice 可以将两个 \'?\' 中的一个替换为 \'9\' ，Bob 无论如何都无法使前一半的和等于后一半的和。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>num = \"?3295???\"\n<b>输出：</b>false\n<b>解释：</b>Bob 总是能赢。一种可能的结果是：\n- Alice 将第一个 \'?\' 用 \'9\' 替换。num = \"93295???\" 。\n- Bob 将后面一半中的一个 \'?\' 替换为 \'9\' 。num = \"932959??\" 。\n- Alice 将后面一半中的一个 \'?\' 替换为 \'2\' 。num = \"9329592?\" 。\n- Bob 将后面一半中最后一个 \'?\' 替换为 \'7\' 。num = \"93295927\" 。\nBob 获胜，因为 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= num.length &lt;= 10<sup>5</sup></code></li> \n <li><code>num.length</code>&nbsp;是 <strong>偶数</strong>&nbsp;。</li> \n <li><code>num</code>&nbsp;只包含数字字符和&nbsp;<code>\'?\'</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1928. 规定时间内到达终点的最小花费', '<p>一个国家有 <code>n</code>&nbsp;个城市，城市编号为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;，题目保证 <strong>所有城市</strong>&nbsp;都由双向道路 <b>连接在一起</b>&nbsp;。道路由二维整数数组&nbsp;<code>edges</code>&nbsp;表示，其中&nbsp;<code>edges[i] = [x<sub>i</sub>, y<sub>i</sub>, time<sub>i</sub>]</code>&nbsp;表示城市&nbsp;<code>x<sub>i</sub></code> 和&nbsp;<code>y<sub>i</sub></code>&nbsp;之间有一条双向道路，耗费时间为&nbsp;<code>time<sub>i</sub></code>&nbsp;分钟。两个城市之间可能会有多条耗费时间不同的道路，但是不会有道路两头连接着同一座城市。</p> \n<p>每次经过一个城市时，你需要付通行费。通行费用一个长度为 <code>n</code>&nbsp;且下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>passingFees</code>&nbsp;表示，其中&nbsp;<code>passingFees[j]</code>&nbsp;是你经过城市 <code>j</code>&nbsp;需要支付的费用。</p> \n<p>一开始，你在城市&nbsp;<code>0</code>&nbsp;，你想要在 <code>maxTime</code>&nbsp;<strong>分钟以内</strong>&nbsp;（包含 <code>maxTime</code>&nbsp;分钟）到达城市&nbsp;<code>n - 1</code>&nbsp;。旅行的 <strong>费用</strong> 为你经过的所有城市 <strong>通行费之和</strong>&nbsp;（<strong>包括</strong>&nbsp;起点和终点城市的通行费）。</p> \n<p>给你&nbsp;<code>maxTime</code>，<code>edges</code>&nbsp;和&nbsp;<code>passingFees</code>&nbsp;，请你返回完成旅行的&nbsp;<strong>最小费用</strong>&nbsp;，如果无法在&nbsp;<code>maxTime</code>&nbsp;分钟以内完成旅行，请你返回&nbsp;<code>-1</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 371px; height: 171px;\" src=\"https://assets.leetcode.com/uploads/2021/06/04/leetgraph1-1.png\" alt=\"\"></p> \n<pre><b>输入：</b>maxTime = 30, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]\n<b>输出：</b>11\n<b>解释：</b>最优路径为 0 -&gt; 1 -&gt; 2 -&gt; 5 ，总共需要耗费 30 分钟，需要支付 11 的通行费。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"width: 371px; height: 171px;\" src=\"https://assets.leetcode.com/uploads/2021/06/04/copy-of-leetgraph1-1.png\" alt=\"\"></strong></p> \n<pre><b>输入：</b>maxTime = 29, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]\n<b>输出：</b>48\n<b>解释：</b>最优路径为 0 -&gt; 3 -&gt; 4 -&gt; 5 ，总共需要耗费 26 分钟，需要支付 48 的通行费。\n你不能选择路径 0 -&gt; 1 -&gt; 2 -&gt; 5 ，因为这条路径耗费的时间太长。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>maxTime = 25, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]\n<b>输出：</b>-1\n<b>解释：</b>无法在 25 分钟以内从城市 0 到达城市 5 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= maxTime &lt;= 1000</code></li> \n <li><code>n == passingFees.length</code></li> \n <li><code>2 &lt;= n &lt;= 1000</code></li> \n <li><code>n - 1 &lt;= edges.length &lt;= 1000</code></li> \n <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= n - 1</code></li> \n <li><code>1 &lt;= time<sub>i</sub> &lt;= 1000</code></li> \n <li><code>1 &lt;= passingFees[j] &lt;= 1000</code>&nbsp;</li> \n <li>图中两个节点之间可能有多条路径。</li> \n <li>图中不含有自环。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1929. 数组串联', '<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> 。请你构建一个长度为 <code>2n</code> 的答案数组 <code>ans</code> ，数组下标<strong> 从 0 开始计数 </strong>，对于所有&nbsp;<code>0 &lt;= i &lt; n</code> 的 <code>i</code> ，满足下述所有要求：</p> \n<ul> \n <li><code>ans[i] == nums[i]</code></li> \n <li><code>ans[i + n] == nums[i]</code></li> \n</ul> \n<p>具体而言，<code>ans</code> 由两个 <code>nums</code> 数组 <strong>串联</strong> 形成。</p> \n<p>返回数组<em> </em><code>ans</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,1]\n<strong>输出：</strong>[1,2,1,1,2,1]\n<strong>解释：</strong>数组 ans 按下述方式形成：\n- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]\n- ans = [1,2,1,1,2,1]</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,3,2,1]\n<strong>输出：</strong>[1,3,2,1,1,3,2,1]\n<strong>解释：</strong>数组 ans 按下述方式形成：\n- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]\n- ans = [1,3,2,1,1,3,2,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>1 &lt;= n &lt;= 1000</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('193. 有效电话号码', '<p>给定一个包含电话号码列表（一行一个电话号码）的文本文件 <code>file.txt</code>，写一个单行 bash 脚本输出所有有效的电话号码。</p> \n<p>你可以假设一个有效的电话号码必须满足以下两种格式： (xxx) xxx-xxxx 或&nbsp;xxx-xxx-xxxx。（x 表示一个数字）</p> \n<p>你也可以假设每行前后没有多余的空格字符。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<p>假设&nbsp;<code>file.txt</code>&nbsp;内容如下：</p> \n<pre>987-123-4567\n123 456 7890\n(123) 456-7890\n</pre> \n<p>你的脚本应当输出下列有效的电话号码：</p> \n<pre>987-123-4567\n(123) 456-7890\n</pre>');
INSERT INTO `leecode` VALUES ('1930. 长度为 3 的不同回文子序列', '<p>给你一个字符串 <code>s</code> ，返回 <code>s</code> 中 <strong>长度为 3 </strong>的<strong>不同回文子序列</strong> 的个数。</p> \n<p>即便存在多种方法来构建相同的子序列，但相同的子序列只计数一次。</p> \n<p><strong>回文</strong> 是正着读和反着读一样的字符串。</p> \n<p><strong>子序列</strong> 是由原字符串删除其中部分字符（也可以不删除）且不改变剩余字符之间相对顺序形成的一个新字符串。</p> \n<ul> \n <li>例如，<code>\"ace\"</code> 是 <code>\"<strong><em>a</em></strong>b<strong><em>c</em></strong>d<strong><em>e</em></strong>\"</code> 的一个子序列。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"aabca\"\n<strong>输出：</strong>3\n<strong>解释：</strong>长度为 3 的 3 个回文子序列分别是：\n- \"aba\" (\"<strong><em>a</em></strong>a<strong><em>b</em></strong>c<strong><em>a</em></strong>\" 的子序列)\n- \"aaa\" (\"<strong><em>aa</em></strong>bc<strong><em>a</em></strong>\" 的子序列)\n- \"aca\" (\"<strong><em>a</em></strong>ab<strong><em>ca</em></strong>\" 的子序列)\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"adc\"\n<strong>输出：</strong>0\n<strong>解释：</strong>\"adc\" 不存在长度为 3 的回文子序列。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"bbcbaba\"\n<strong>输出：</strong>4\n<strong>解释：</strong>长度为 3 的 4 个回文子序列分别是：\n- \"bbb\" (\"<strong><em>bb</em></strong>c<strong><em>b</em></strong>aba\" 的子序列)\n- \"bcb\" (\"<strong><em>b</em></strong>b<strong><em>cb</em></strong>aba\" 的子序列)\n- \"bab\" (\"<strong><em>b</em></strong>bcb<strong><em>ab</em></strong>a\" 的子序列)\n- \"aba\" (\"bbcb<strong><em>aba</em></strong>\" 的子序列)\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s</code> 仅由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1931. 用三种不同颜色为网格涂色', '<p>给你两个整数 <code>m</code> 和 <code>n</code> 。构造一个 <code>m x n</code> 的网格，其中每个单元格最开始是白色。请你用 <strong>红、绿、蓝</strong> 三种颜色为每个单元格涂色。所有单元格都需要被涂色。</p> \n<p>涂色方案需要满足：<strong>不存在相邻两个单元格颜色相同的情况</strong> 。返回网格涂色的方法数。因为答案可能非常大， 返回 <strong>对 </strong><code>10<sup>9</sup> + 7</code><strong> 取余</strong> 的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 200px; height: 50px;\" src=\"https://assets.leetcode.com/uploads/2021/06/22/colorthegrid.png\" alt=\"\"> \n<pre><strong>输入：</strong>m = 1, n = 1\n<strong>输出：</strong>3\n<strong>解释：</strong>如上图所示，存在三种可能的涂色方案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 321px; height: 121px;\" src=\"https://assets.leetcode.com/uploads/2021/06/22/copy-of-colorthegrid.png\" alt=\"\"> \n<pre><strong>输入：</strong>m = 1, n = 2\n<strong>输出：</strong>6\n<strong>解释：</strong>如上图所示，存在六种可能的涂色方案。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>m = 5, n = 5\n<strong>输出：</strong>580986\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= m &lt;= 5</code></li> \n <li><code>1 &lt;= n &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1932. 合并多棵二叉搜索树', '<p>给你 <code>n</code> 个 <strong>二叉搜索树的根节点</strong> ，存储在数组 <code>trees</code> 中（<strong>下标从 0 开始</strong>），对应 <code>n</code> 棵不同的二叉搜索树。<code>trees</code> 中的每棵二叉搜索树 <strong>最多有 3 个节点</strong> ，且不存在值相同的两个根节点。在一步操作中，将会完成下述步骤：</p> \n<ul> \n <li>选择两个 <strong>不同的</strong> 下标 <code>i</code> 和 <code>j</code> ，要求满足在&nbsp;<code>trees[i]</code> 中的某个 <strong>叶节点</strong> 的值等于&nbsp;<code>trees[j]</code> 的 <strong>根节点的值</strong> 。</li> \n <li>用&nbsp;<code>trees[j]</code> 替换 <code>trees[i]</code> 中的那个叶节点。</li> \n <li>从 <code>trees</code> 中移除 <code>trees[j]</code> 。</li> \n</ul> \n<p>如果在执行 <code>n - 1</code> 次操作后，能形成一棵有效的二叉搜索树，则返回结果二叉树的 <strong>根节点</strong> ；如果无法构造一棵有效的二叉搜索树<em>，</em>返回<em> </em><code>null</code> 。</p> \n<p>二叉搜索树是一种二叉树，且树中每个节点均满足下述属性：</p> \n<ul> \n <li>任意节点的左子树中的值都 <strong>严格小于</strong>&nbsp;此节点的值。</li> \n <li>任意节点的右子树中的值都 <strong>严格大于</strong>&nbsp;此节点的值。</li> \n</ul> \n<p>叶节点是不含子节点的节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 450px; height: 163px;\" src=\"https://assets.leetcode.com/uploads/2021/06/08/d1.png\" alt=\"\"> \n<pre><strong>输入：</strong>trees = [[2,1],[3,2,5],[5,4]]\n<strong>输出：</strong>[3,2,5,1,null,4]\n<strong>解释：</strong>\n第一步操作中，选出 i=1 和 j=0 ，并将 trees[0] 合并到 trees[1] 中。\n删除 trees[0] ，trees = [[3,2,5,1],[5,4]] 。\n<img style=\"width: 450px; height: 181px;\" src=\"https://assets.leetcode.com/uploads/2021/06/24/diagram.png\" alt=\"\">\n在第二步操作中，选出 i=0 和 j=1 ，将 trees[1] 合并到 trees[0] 中。\n删除 trees[1] ，trees = [[3,2,5,1,null,4]] 。\n<img style=\"width: 220px; height: 165px;\" src=\"https://assets.leetcode.com/uploads/2021/06/24/diagram-2.png\" alt=\"\">\n结果树如上图所示，为一棵有效的二叉搜索树，所以返回该树的根节点。</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 450px; height: 171px;\" src=\"https://assets.leetcode.com/uploads/2021/06/08/d2.png\" alt=\"\"> \n<pre><strong>输入：</strong>trees = [[5,3,8],[3,2,6]]\n<strong>输出：</strong>[]\n<strong>解释：</strong>\n选出 i=0 和 j=1 ，然后将 trees[1] 合并到 trees[0] 中。\n删除 trees[1] ，trees = [[5,3,8,2,6]] 。\n<img style=\"width: 240px; height: 196px;\" src=\"https://assets.leetcode.com/uploads/2021/06/24/diagram-3.png\" alt=\"\">\n结果树如上图所示。仅能执行一次有效的操作，但结果树不是一棵有效的二叉搜索树，所以返回 null 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 430px; height: 168px;\" src=\"https://assets.leetcode.com/uploads/2021/06/08/d3.png\" alt=\"\"> \n<pre><strong>输入：</strong>trees = [[5,4],[3]]\n<strong>输出：</strong>[]\n<strong>解释：</strong>无法执行任何操作。\n</pre> \n<p><strong>示例 4：</strong></p> \n<img style=\"width: 250px; height: 158px;\" src=\"https://assets.leetcode.com/uploads/2021/06/08/d4.png\" alt=\"\"> \n<pre><strong>输入：</strong>trees = [[2,1,3]]\n<strong>输出：</strong>[2,1,3]\n<strong>解释：</strong>trees 中只有一棵树，且这棵树已经是一棵有效的二叉搜索树，所以返回该树的根节点。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == trees.length</code></li> \n <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> \n <li>每棵树中节点数目在范围 <code>[1, 3]</code> 内。</li> \n <li>输入数据的每个节点可能有子节点但不存在子节点的子节点</li> \n <li><code>trees</code> 中不存在两棵树根节点值相同的情况。</li> \n <li>输入中的所有树都是 <strong>有效的二叉树搜索树</strong> 。</li> \n <li><code>1 &lt;= TreeNode.val &lt;= 5 * 10<sup>4</sup></code>.</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1935. 可以输入的最大单词数', '<p>键盘出现了一些故障，有些字母键无法正常工作。而键盘上所有其他键都能够正常工作。</p> \n<p>给你一个由若干单词组成的字符串 <code>text</code> ，单词间由单个空格组成（不含前导和尾随空格）；另有一个字符串 <code>brokenLetters</code> ，由所有已损坏的不同字母键组成，返回你可以使用此键盘完全输入的 <code>text</code> 中单词的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>text = \"hello world\", brokenLetters = \"ad\"\n<strong>输出：</strong>1\n<strong>解释：</strong>无法输入 \"world\" ，因为字母键 \'d\' 已损坏。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>text = \"leet code\", brokenLetters = \"lt\"\n<strong>输出：</strong>1\n<strong>解释：</strong>无法输入 \"leet\" ，因为字母键 \'l\' 和 \'t\' 已损坏。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>text = \"leet code\", brokenLetters = \"e\"\n<strong>输出：</strong>0\n<strong>解释：</strong>无法输入任何单词，因为字母键 \'e\' 已损坏。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= text.length &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= brokenLetters.length &lt;= 26</code></li> \n <li><code>text</code> 由若干用单个空格分隔的单词组成，且不含任何前导和尾随空格</li> \n <li>每个单词仅由小写英文字母组成</li> \n <li><code>brokenLetters</code> 由 <strong>互不相同</strong> 的小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1936. 新增的最少台阶数', '<p>给你一个 <strong>严格递增</strong> 的整数数组 <code>rungs</code> ，用于表示梯子上每一台阶的 <strong>高度</strong> 。当前你正站在高度为 <code>0</code> 的地板上，并打算爬到最后一个台阶。</p> \n<p>另给你一个整数 <code>dist</code> 。每次移动中，你可以到达下一个距离你当前位置（地板或台阶）<strong>不超过</strong>&nbsp;<code>dist</code>&nbsp;高度的台阶。当然，你也可以在任何正 <strong>整数</strong> 高度处插入尚不存在的新台阶。</p> \n<p>返回爬到最后一阶时必须添加到梯子上的 <strong>最少</strong>&nbsp;台阶数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>rungs = [1,3,5,10], dist = 2\n<strong>输出：</strong>2\n<strong>解释：\n</strong>现在无法到达最后一阶。\n在高度为 7 和 8 的位置增设新的台阶，以爬上梯子。 \n梯子在高度为 [1,3,5,<strong><em>7</em></strong>,<strong><em>8</em></strong>,10] 的位置上有台阶。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>rungs = [3,6,8,10], dist = 3\n<strong>输出：</strong>0\n<strong>解释：</strong>\n这个梯子无需增设新台阶也可以爬上去。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>rungs = [3,4,6,7], dist = 2\n<strong>输出：</strong>1\n<strong>解释：</strong>\n现在无法从地板到达梯子的第一阶。 \n在高度为 1 的位置增设新的台阶，以爬上梯子。 \n梯子在高度为 [<strong><em>1</em></strong>,3,4,6,7] 的位置上有台阶。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>rungs = [5], dist = 10\n<strong>输出：</strong>0\n<strong>解释：</strong>这个梯子无需增设新台阶也可以爬上去。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= rungs.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= rungs[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>1 &lt;= dist &lt;= 10<sup>9</sup></code></li> \n <li><code>rungs</code> <strong>严格递增</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1937. 扣分后的最大得分', '<p>给你一个&nbsp;<code>m x n</code>&nbsp;的整数矩阵&nbsp;<code>points</code>&nbsp;（下标从 <strong>0</strong>&nbsp;开始）。一开始你的得分为 <code>0</code>&nbsp;，你想最大化从矩阵中得到的分数。</p> \n<p>你的得分方式为：<strong>每一行</strong>&nbsp;中选取一个格子，选中坐标为&nbsp;<code>(r, c)</code>&nbsp;的格子会给你的总得分 <strong>增加</strong>&nbsp;<code>points[r][c]</code>&nbsp;。</p> \n<p>然而，相邻行之间被选中的格子如果隔得太远，你会失去一些得分。对于相邻行&nbsp;<code>r</code> 和&nbsp;<code>r + 1</code>&nbsp;（其中&nbsp;<code>0 &lt;= r &lt; m - 1</code>），选中坐标为&nbsp;<code>(r, c<sub>1</sub>)</code> 和&nbsp;<code>(r + 1, c<sub>2</sub>)</code>&nbsp;的格子，你的总得分&nbsp;<b>减少</b>&nbsp;<code>abs(c<sub>1</sub> - c<sub>2</sub>)</code>&nbsp;。</p> \n<p>请你返回你能得到的 <strong>最大</strong>&nbsp;得分。</p> \n<p><code>abs(x)</code>&nbsp;定义为：</p> \n<ul> \n <li>如果&nbsp;<code>x &gt;= 0</code>&nbsp;，那么值为&nbsp;<code>x</code>&nbsp;。</li> \n <li>如果&nbsp;<code>x &lt;&nbsp;0</code>&nbsp;，那么值为 <code>-x</code>&nbsp;。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 300px; height: 300px;\" src=\"https://assets.leetcode.com/uploads/2021/07/12/screenshot-2021-07-12-at-13-40-26-diagram-drawio-diagrams-net.png\" alt=\"\"> \n<pre><b>输入：</b>points = [[1,2,3],[1,5,1],[3,1,1]]\n<b>输出：</b>9\n<strong>解释：</strong>\n蓝色格子是最优方案选中的格子，坐标分别为 (0, 2)，(1, 1) 和 (2, 0) 。\n你的总得分增加 3 + 5 + 3 = 11 。\n但是你的总得分需要扣除 abs(2 - 1) + abs(1 - 0) = 2 。\n你的最终得分为 11 - 2 = 9 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 200px; height: 299px;\" src=\"https://assets.leetcode.com/uploads/2021/07/12/screenshot-2021-07-12-at-13-42-14-diagram-drawio-diagrams-net.png\" alt=\"\"> \n<pre><b>输入：</b>points = [[1,5],[2,3],[4,2]]\n<b>输出：</b>11\n<strong>解释：</strong>\n蓝色格子是最优方案选中的格子，坐标分别为 (0, 1)，(1, 1) 和 (2, 0) 。\n你的总得分增加 5 + 3 + 4 = 12 。\n但是你的总得分需要扣除 abs(1 - 1) + abs(1 - 0) = 1 。\n你的最终得分为 12 - 1 = 11 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == points.length</code></li> \n <li><code>n == points[r].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= points[r][c] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1938. 查询最大基因差', '<p>给你一棵 <code>n</code>&nbsp;个节点的有根树，节点编号从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;。每个节点的编号表示这个节点的 <strong>独一无二的基因值</strong>&nbsp;（也就是说节点 <code>x</code>&nbsp;的基因值为 <code>x</code>）。两个基因值的 <strong>基因差</strong>&nbsp;是两者的 <strong>异或和</strong>&nbsp;。给你整数数组&nbsp;<code>parents</code>&nbsp;，其中&nbsp;<code>parents[i]</code>&nbsp;是节点 <code>i</code>&nbsp;的父节点。如果节点 <code>x</code>&nbsp;是树的 <strong>根</strong>&nbsp;，那么&nbsp;<code>parents[x] == -1</code>&nbsp;。</p> \n<p>给你查询数组&nbsp;<code>queries</code>&nbsp;，其中&nbsp;<code>queries[i] = [node<sub>i</sub>, val<sub>i</sub>]</code>&nbsp;。对于查询&nbsp;<code>i</code>&nbsp;，请你找到 <code>val<sub>i</sub></code>&nbsp;和 <code>p<sub>i</sub></code>&nbsp;的 <strong>最大基因差</strong>&nbsp;，其中&nbsp;<code>p<sub>i</sub></code>&nbsp;是节点 <code>node<sub>i</sub></code>&nbsp;到根之间的任意节点（包含 <code>node<sub>i</sub></code>&nbsp;和根节点）。更正式的，你想要最大化&nbsp;<code>val<sub>i</sub> XOR p<sub>i</sub></code><sub>&nbsp;</sub>。</p> \n<p>请你返回数组<em>&nbsp;</em><code>ans</code>&nbsp;，其中&nbsp;<code>ans[i]</code>&nbsp;是第 <code>i</code>&nbsp;个查询的答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 118px; height: 163px;\" src=\"https://assets.leetcode.com/uploads/2021/06/29/c1.png\" alt=\"\"> \n<pre><b>输入：</b>parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]\n<b>输出：</b>[2,3,7]\n<strong>解释：</strong>查询数组处理如下：\n- [0,2]：最大基因差的对应节点为 0 ，基因差为 2 XOR 0 = 2 。\n- [3,2]：最大基因差的对应节点为 1 ，基因差为 2 XOR 1 = 3 。\n- [2,5]：最大基因差的对应节点为 2 ，基因差为 5 XOR 2 = 7 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 256px; height: 221px;\" src=\"https://assets.leetcode.com/uploads/2021/06/29/c2.png\" alt=\"\"> \n<pre><b>输入：</b>parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]\n<b>输出：</b>[6,14,7]\n<strong>解释：</strong>查询数组处理如下：\n- [4,6]：最大基因差的对应节点为 0 ，基因差为 6 XOR 0 = 6 。\n- [1,15]：最大基因差的对应节点为 1 ，基因差为 15 XOR 1 = 14 。\n- [0,5]：最大基因差的对应节点为 2 ，基因差为 5 XOR 2 = 7 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= parents.length &lt;= 10<sup>5</sup></code></li> \n <li>对于每个&nbsp;<strong>不是</strong>&nbsp;根节点的&nbsp;<code>i</code>&nbsp;，有&nbsp;<code>0 &lt;= parents[i] &lt;= parents.length - 1</code>&nbsp;。</li> \n <li><code>parents[root] == -1</code></li> \n <li><code>1 &lt;= queries.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>0 &lt;= node<sub>i</sub> &lt;= parents.length - 1</code></li> \n <li><code>0 &lt;= val<sub>i</sub> &lt;= 2 * 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('194. 转置文件', '<p>给定一个文件&nbsp;<code>file.txt</code>，转置它的内容。</p> \n<p>你可以假设每行列数相同，并且每个字段由&nbsp;<code>\' \'</code> 分隔。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<p>假设&nbsp;<code>file.txt</code>&nbsp;文件内容如下：</p> \n<pre>name age\nalice 21\nryan 30\n</pre> \n<p>应当输出：</p> \n<pre>name alice ryan\nage 21 30\n</pre>');
INSERT INTO `leecode` VALUES ('1941. 检查是否所有字符出现次数相同', '<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，如果 <code>s</code>&nbsp;是一个 <strong>好</strong>&nbsp;字符串，请你返回 <code>true</code>&nbsp;，否则请返回 <code>false</code>&nbsp;。</p> \n<p>如果 <code>s</code>&nbsp;中出现过的&nbsp;<strong>所有</strong> 字符的出现次数 <strong>相同</strong>&nbsp;，那么我们称字符串 <code>s</code>&nbsp;是 <strong>好</strong>&nbsp;字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"abacbc\"\n<b>输出：</b>true\n<b>解释：</b>s 中出现过的字符为 \'a\'，\'b\' 和 \'c\' 。s 中所有字符均出现 2 次。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"aaabb\"\n<b>输出：</b>false\n<b>解释：</b>s 中出现过的字符为 \'a\' 和 \'b\' 。\n\'a\' 出现了 3 次，\'b\' 出现了 2 次，两者出现次数不同。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 1000</code></li> \n <li><code>s</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1942. 最小未被占据椅子的编号', '<p>有 <code>n</code>&nbsp;个朋友在举办一个派对，这些朋友从 <code>0</code>&nbsp;到 <code>n - 1</code>&nbsp;编号。派对里有 <strong>无数</strong>&nbsp;张椅子，编号为 <code>0</code>&nbsp;到 <code>infinity</code>&nbsp;。当一个朋友到达派对时，他会占据&nbsp;<strong>编号最小</strong>&nbsp;且未被占据的椅子。</p> \n<ul> \n <li>比方说，当一个朋友到达时，如果椅子&nbsp;<code>0</code>&nbsp;，<code>1</code>&nbsp;和&nbsp;<code>5</code>&nbsp;被占据了，那么他会占据&nbsp;<code>2</code>&nbsp;号椅子。</li> \n</ul> \n<p>当一个朋友离开派对时，他的椅子会立刻变成未占据状态。如果同一时刻有另一个朋友到达，可以立即占据这张椅子。</p> \n<p>给你一个下标从 <strong>0</strong>&nbsp;开始的二维整数数组&nbsp;<code>times</code>&nbsp;，其中&nbsp;<code>times[i] = [arrival<sub>i</sub>, leaving<sub>i</sub>]</code>&nbsp;表示第 <code>i</code>&nbsp;个朋友到达和离开的时刻，同时给你一个整数 <code>targetFriend</code>&nbsp;。所有到达时间 <strong>互不相同</strong>&nbsp;。</p> \n<p>请你返回编号为 <code>targetFriend</code>&nbsp;的朋友占据的 <strong>椅子编号</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>times = [[1,4],[2,3],[4,6]], targetFriend = 1\n<b>输出：</b>1\n<b>解释：</b>\n- 朋友 0 时刻 1 到达，占据椅子 0 。\n- 朋友 1 时刻 2 到达，占据椅子 1 。\n- 朋友 1 时刻 3 离开，椅子 1 变成未占据。\n- 朋友 0 时刻 4 离开，椅子 0 变成未占据。\n- 朋友 2 时刻 4 到达，占据椅子 0 。\n朋友 1 占据椅子 1 ，所以返回 1 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>times = [[3,10],[1,5],[2,6]], targetFriend = 0\n<b>输出：</b>2\n<b>解释：</b>\n- 朋友 1 时刻 1 到达，占据椅子 0 。\n- 朋友 2 时刻 2 到达，占据椅子 1 。\n- 朋友 0 时刻 3 到达，占据椅子 2 。\n- 朋友 1 时刻 5 离开，椅子 0 变成未占据。\n- 朋友 2 时刻 6 离开，椅子 1 变成未占据。\n- 朋友 0 时刻 10 离开，椅子 2 变成未占据。\n朋友 0 占据椅子 2 ，所以返回 2 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == times.length</code></li> \n <li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li> \n <li><code>times[i].length == 2</code></li> \n <li><code>1 &lt;= arrival<sub>i</sub> &lt; leaving<sub>i</sub> &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= targetFriend &lt;= n - 1</code></li> \n <li>每个&nbsp;<code>arrival<sub>i</sub></code>&nbsp;时刻&nbsp;<strong>互不相同</strong>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1943. 描述绘画结果', '<p>给你一个细长的画，用数轴表示。这幅画由若干有重叠的线段表示，每个线段有 <strong>独一无二</strong>&nbsp;的颜色。给你二维整数数组&nbsp;<code>segments</code>&nbsp;，其中&nbsp;<code>segments[i] = [start<sub>i</sub>, end<sub>i</sub>, color<sub>i</sub>]</code>&nbsp;表示线段为&nbsp;<strong>半开区间</strong>&nbsp;<code>[start<sub>i</sub>, end<sub>i</sub>)</code> 且颜色为&nbsp;<code>color<sub>i</sub></code>&nbsp;。</p> \n<p>线段间重叠部分的颜色会被 <strong>混合</strong>&nbsp;。如果有两种或者更多颜色混合时，它们会形成一种新的颜色，用一个 <strong>集合</strong>&nbsp;表示这个混合颜色。</p> \n<ul> \n <li>比方说，如果颜色&nbsp;<code>2</code>&nbsp;，<code>4</code>&nbsp;和&nbsp;<code>6</code>&nbsp;被混合，那么结果颜色为&nbsp;<code>{2,4,6}</code>&nbsp;。</li> \n</ul> \n<p>为了简化题目，你不需要输出整个集合，只需要用集合中所有元素的 <strong>和</strong>&nbsp;来表示颜色集合。</p> \n<p>你想要用 <strong>最少数目</strong>&nbsp;不重叠 <strong>半开区间</strong>&nbsp;来 <b>表示</b>&nbsp;这幅混合颜色的画。这些线段可以用二维数组&nbsp;<code>painting</code>&nbsp;表示，其中 <code>painting[j] = [left<sub>j</sub>, right<sub>j</sub>, mix<sub>j</sub>]</code>&nbsp;表示一个&nbsp;<strong>半开区间</strong><code>[left<sub>j</sub>, right<sub>j</sub>)</code>&nbsp;的颜色 <strong>和</strong>&nbsp;为&nbsp;<code>mix<sub>j</sub></code>&nbsp;。</p> \n<ul> \n <li>比方说，这幅画由&nbsp;<code>segments = [[1,4,5],[1,7,7]]</code>&nbsp;组成，那么它可以表示为&nbsp;<code>painting = [[1,4,12],[4,7,7]]</code>&nbsp;，因为： \n  <ul> \n   <li><code>[1,4)</code>&nbsp;由颜色&nbsp;<code>{5,7}</code>&nbsp;组成（和为&nbsp;<code>12</code>），分别来自第一个线段和第二个线段。</li> \n   <li><code>[4,7)</code>&nbsp;由颜色 <code>{7}</code>&nbsp;组成，来自第二个线段。</li> \n  </ul> </li> \n</ul> \n<p>请你返回二维数组&nbsp;<code>painting</code>&nbsp;，它表示最终绘画的结果（<strong>没有</strong>&nbsp;被涂色的部分不出现在结果中）。你可以按 <strong>任意顺序</strong> 返回最终数组的结果。</p> \n<p><strong>半开区间&nbsp;</strong><code>[a, b)</code>&nbsp;是数轴上点&nbsp;<code>a</code> 和点&nbsp;<code>b</code>&nbsp;之间的部分，<strong>包含 </strong>点&nbsp;<code>a</code>&nbsp;且 <strong>不包含</strong>&nbsp;点&nbsp;<code>b</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 529px; height: 241px;\" src=\"https://assets.leetcode.com/uploads/2021/06/18/1.png\" alt=\"\"> \n<pre><b>输入：</b>segments = [[1,4,5],[4,7,7],[1,7,9]]\n<b>输出：</b>[[1,4,14],[4,7,16]]\n<strong>解释：</strong>绘画借故偶可以表示为：\n- [1,4) 颜色为 {5,9} （和为 14），分别来自第一和第二个线段。\n- [4,7) 颜色为 {7,9} （和为 16），分别来自第二和第三个线段。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 532px; height: 219px;\" src=\"https://assets.leetcode.com/uploads/2021/06/18/2.png\" alt=\"\"> \n<pre><b>输入：</b>segments = [[1,7,9],[6,8,15],[8,10,7]]\n<b>输出：</b>[[1,6,9],[6,7,24],[7,8,15],[8,10,7]]\n<b>解释：</b>绘画结果可以以表示为：\n- [1,6) 颜色为 9 ，来自第一个线段。\n- [6,7) 颜色为 {9,15} （和为 24），来自第一和第二个线段。\n- [7,8) 颜色为 15 ，来自第二个线段。\n- [8,10) 颜色为 7 ，来自第三个线段。\n</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 529px; height: 289px;\" src=\"https://assets.leetcode.com/uploads/2021/07/04/c1.png\" alt=\"\"> \n<pre><b>输入：</b>segments = [[1,4,5],[1,4,7],[4,7,1],[4,7,11]]\n<b>输出：</b>[[1,4,12],[4,7,12]]\n<strong>解释：</strong>绘画结果可以表示为：\n- [1,4) 颜色为 {5,7} （和为 12），分别来自第一和第二个线段。\n- [4,7) 颜色为 {1,11} （和为 12），分别来自第三和第四个线段。\n注意，只返回一个单独的线段 [1,7) 是不正确的，因为混合颜色的集合不相同。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= segments.length &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>segments[i].length == 3</code></li> \n <li><code>1 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= color<sub>i</sub> &lt;= 10<sup>9</sup></code></li> \n <li>每种颜色&nbsp;<code>color<sub>i</sub></code>&nbsp;互不相同。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1944. 队列中可以看到的人数', '<p>有&nbsp;<code>n</code>&nbsp;个人排成一个队列，<strong>从左到右</strong>&nbsp;编号为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;。给你以一个整数数组&nbsp;<code>heights</code>&nbsp;，每个整数 <strong>互不相同</strong>，<code>heights[i]</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;个人的高度。</p> \n<p>一个人能 <strong>看到</strong> 他右边另一个人的条件是这两人之间的所有人都比他们两人 <strong>矮</strong>&nbsp;。更正式的，第&nbsp;<code>i</code>&nbsp;个人能看到第&nbsp;<code>j</code>&nbsp;个人的条件是&nbsp;<code>i &lt; j</code>&nbsp;且&nbsp;<code>min(heights[i], heights[j]) &gt; max(heights[i+1], heights[i+2], ..., heights[j-1])</code>&nbsp;。</p> \n<p>请你返回一个长度为 <code>n</code>&nbsp;的数组<em>&nbsp;</em><code>answer</code><em>&nbsp;</em>，其中<em>&nbsp;</em><code>answer[i]</code><em>&nbsp;</em>是第&nbsp;<code>i</code>&nbsp;个人在他右侧队列中能&nbsp;<strong>看到</strong>&nbsp;的&nbsp;<strong>人数</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 600px; height: 247px;\" src=\"https://assets.leetcode.com/uploads/2021/05/29/queue-plane.jpg\" alt=\"\"></p> \n<pre><b>输入：</b>heights = [10,6,8,5,11,9]\n<b>输出：</b>[3,1,2,1,1,0]\n<strong>解释：</strong>\n第 0 个人能看到编号为 1 ，2 和 4 的人。\n第 1 个人能看到编号为 2 的人。\n第 2 个人能看到编号为 3 和 4 的人。\n第 3 个人能看到编号为 4 的人。\n第 4 个人能看到编号为 5 的人。\n第 5 个人谁也看不到因为他右边没人。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>heights = [5,1,2,3,10]\n<b>输出：</b>[4,1,1,1,0]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == heights.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= heights[i] &lt;= 10<sup>5</sup></code></li> \n <li><code>heights</code>&nbsp;中所有数 <strong>互不相同</strong>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1945. 字符串转化后的各位数字之和', '<p>给你一个由小写字母组成的字符串 <code>s</code> ，以及一个整数 <code>k</code> 。</p> \n<p>首先，用字母在字母表中的位置替换该字母，将 <code>s</code> <strong>转化</strong> 为一个整数（也就是，<code>\'a\'</code> 用 <code>1</code> 替换，<code>\'b\'</code> 用 <code>2</code> 替换，... <code>\'z\'</code> 用 <code>26</code> 替换）。接着，将整数 <strong>转换</strong> 为其 <strong>各位数字之和</strong> 。共重复 <strong>转换</strong> 操作 <strong><code>k</code> 次</strong> 。</p> \n<p>例如，如果 <code>s = \"zbax\"</code> 且 <code>k = 2</code> ，那么执行下述步骤后得到的结果是整数 <code>8</code> ：</p> \n<ul> \n <li><strong>转化：</strong><code>\"zbax\" ➝ \"(26)(2)(1)(24)\" ➝ \"262124\" ➝ 262124</code></li> \n <li><strong>转换 #1</strong>：<code>262124&nbsp;➝ 2 + 6 + 2 + 1 + 2 + 4&nbsp;➝ 17</code></li> \n <li><strong>转换 #2</strong>：<code>17 ➝ 1 + 7 ➝ 8</code></li> \n</ul> \n<p>返回执行上述操作后得到的结果整数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"iiii\", k = 1\n<strong>输出：</strong>36\n<strong>解释：</strong>操作如下：\n- 转化：\"iiii\" ➝ \"(9)(9)(9)(9)\" ➝ \"9999\" ➝ 9999\n- 转换 #1：9999 ➝ 9 + 9 + 9 + 9 ➝ 36\n因此，结果整数为 36 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"leetcode\", k = 2\n<strong>输出：</strong>6\n<strong>解释：</strong>操作如下：\n- 转化：\"leetcode\" ➝ \"(12)(5)(5)(20)(3)(15)(4)(5)\" ➝ \"12552031545\" ➝ 12552031545\n- 转换 #1：12552031545 ➝ 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 ➝ 33\n- 转换 #2：33 ➝ 3 + 3 ➝ 6\n因此，结果整数为 6 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 100</code></li> \n <li><code>1 &lt;= k &lt;= 10</code></li> \n <li><code>s</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1946. 子字符串突变后可能得到的最大整数', '<p>给你一个字符串 <code>num</code> ，该字符串表示一个大整数。另给你一个长度为 <code>10</code> 且 <strong>下标从 0&nbsp; 开始</strong> 的整数数组 <code>change</code> ，该数组将 <code>0-9</code> 中的每个数字映射到另一个数字。更规范的说法是，数字 <code>d</code> 映射为数字 <code>change[d]</code> 。</p> \n<p>你可以选择 <strong>突变</strong>&nbsp; <code>num</code> 的任一子字符串。<strong>突变</strong> 子字符串意味着将每位数字 <code>num[i]</code> 替换为该数字在 <code>change</code> 中的映射（也就是说，将 <code>num[i]</code> 替换为 <code>change[num[i]]</code>）。</p> \n<p>请你找出在对 <code>num</code> 的任一子字符串执行突变操作（也可以不执行）后，可能得到的 <strong>最大整数</strong> ，并用字符串表示返回。</p> \n<p><strong>子字符串</strong> 是字符串中的一个连续序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>num = \"<strong><em>1</em></strong>32\", change = [9,8,5,0,3,6,4,2,6,8]\n<strong>输出：</strong>\"<strong><em>8</em></strong>32\"\n<strong>解释：</strong>替换子字符串 \"1\"：\n- 1 映射为 change[1] = 8 。\n因此 \"<strong><em>1</em></strong>32\" 变为 \"<strong><em>8</em></strong>32\" 。\n\"832\" 是可以构造的最大整数，所以返回它的字符串表示。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>num = \"<strong><em>021</em></strong>\", change = [9,4,3,5,7,2,1,9,0,6]\n<strong>输出：</strong>\"<strong><em>934</em></strong>\"\n<strong>解释：</strong>替换子字符串 \"021\"：\n- 0 映射为 change[0] = 9 。\n- 2 映射为 change[2] = 3 。\n- 1 映射为 change[1] = 4 。\n因此，\"<strong><em>021</em></strong>\" 变为 \"<strong><em>934</em></strong>\" 。\n\"934\" 是可以构造的最大整数，所以返回它的字符串表示。 \n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>num = \"5\", change = [1,4,7,5,3,2,5,6,9,4]\n<strong>输出：</strong>\"5\"\n<strong>解释：</strong>\"5\" 已经是可以构造的最大整数，所以返回它的字符串表示。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= num.length &lt;= 10<sup>5</sup></code></li> \n <li><code>num</code> 仅由数字 <code>0-9</code> 组成</li> \n <li><code>change.length == 10</code></li> \n <li><code>0 &lt;= change[d] &lt;= 9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1947. 最大兼容性评分和', '<p>有一份由 <code>n</code> 个问题组成的调查问卷，每个问题的答案要么是 <code>0</code>（no，否），要么是 <code>1</code>（yes，是）。</p> \n<p>这份调查问卷被分发给 <code>m</code> 名学生和 <code>m</code> 名导师，学生和导师的编号都是从 <code>0</code> 到 <code>m - 1</code> 。学生的答案用一个二维整数数组 <code>students</code> 表示，其中 <code>students[i]</code> 是一个整数数组，包含第 <code>i</code> 名学生对调查问卷给出的答案（<strong>下标从 0 开始</strong>）。导师的答案用一个二维整数数组 <code>mentors</code> 表示，其中 <code>mentors[j]</code> 是一个整数数组，包含第 <code>j</code> 名导师对调查问卷给出的答案（<strong>下标从 0 开始</strong>）。</p> \n<p>每个学生都会被分配给 <strong>一名</strong> 导师，而每位导师也会分配到 <strong>一名</strong> 学生。配对的学生与导师之间的兼容性评分等于学生和导师答案相同的次数。</p> \n<ul> \n <li>例如，学生答案为<code>[1, <strong><em>0</em></strong>, <strong><em>1</em></strong>]</code> 而导师答案为 <code>[0, <strong><em>0</em></strong>, <strong><em>1</em></strong>]</code> ，那么他们的兼容性评分为 2 ，因为只有第二个和第三个答案相同。</li> \n</ul> \n<p>请你找出最优的学生与导师的配对方案，以 <strong>最大程度上</strong> 提高 <strong>兼容性评分和</strong> 。</p> \n<p>给你 <code>students</code> 和 <code>mentors</code> ，返回可以得到的<em> </em><strong>最大兼容性评分和</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>students = [[1,1,0],[1,0,1],[0,0,1]], mentors = [[1,0,0],[0,0,1],[1,1,0]]\n<strong>输出：</strong>8\n<strong>解释：</strong>按下述方式分配学生和导师：\n- 学生 0 分配给导师 2 ，兼容性评分为 3 。\n- 学生 1 分配给导师 0 ，兼容性评分为 2 。\n- 学生 2 分配给导师 1 ，兼容性评分为 3 。\n最大兼容性评分和为 3 + 2 + 3 = 8 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>students = [[0,0],[0,0],[0,0]], mentors = [[1,1],[1,1],[1,1]]\n<strong>输出：</strong>0\n<strong>解释：</strong>任意学生与导师配对的兼容性评分都是 0 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == students.length == mentors.length</code></li> \n <li><code>n == students[i].length == mentors[j].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 8</code></li> \n <li><code>students[i][k]</code> 为 <code>0</code> 或 <code>1</code></li> \n <li><code>mentors[j][k]</code> 为 <code>0</code> 或 <code>1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1948. 删除系统中的重复文件夹', '<p>由于一个漏洞，文件系统中存在许多重复文件夹。给你一个二维数组 <code>paths</code>，其中 <code>paths[i]</code> 是一个表示文件系统中第 <code>i</code> 个文件夹的绝对路径的数组。</p> \n<ul> \n <li>例如，<code>[\"one\", \"two\", \"three\"]</code> 表示路径 <code>\"/one/two/three\"</code> 。</li> \n</ul> \n<p>如果两个文件夹（不需要在同一层级）包含 <strong>非空且</strong><b>相同的&nbsp;</b>子文件夹&nbsp;<strong>集合</strong> 并具有相同的子文件夹结构，则认为这两个文件夹是相同文件夹。相同文件夹的根层级 <strong>不</strong> 需要相同。如果存在两个（或两个以上）<strong>相同</strong> 文件夹，则需要将这些文件夹和所有它们的子文件夹 <strong>标记</strong> 为待删除。</p> \n<ul> \n <li>例如，下面文件结构中的文件夹 <code>\"/a\"</code> 和 <code>\"/b\"</code> 相同。它们（以及它们的子文件夹）应该被 <strong>全部</strong> 标记为待删除： \n  <ul> \n   <li><code>/a</code></li> \n   <li><code>/a/x</code></li> \n   <li><code>/a/x/y</code></li> \n   <li><code>/a/z</code></li> \n   <li><code>/b</code></li> \n   <li><code>/b/x</code></li> \n   <li><code>/b/x/y</code></li> \n   <li><code>/b/z</code></li> \n  </ul> </li> \n <li>然而，如果文件结构中还包含路径 <code>\"/b/w\"</code> ，那么文件夹 <code>\"/a\"</code> 和 <code>\"/b\"</code> 就不相同。注意，即便添加了新的文件夹 <code>\"/b/w\"</code> ，仍然认为 <code>\"/a/x\"</code> 和 <code>\"/b/x\"</code> 相同。</li> \n</ul> \n<p>一旦所有的相同文件夹和它们的子文件夹都被标记为待删除，文件系统将会 <strong>删除</strong> 所有上述文件夹。文件系统只会执行一次删除操作。执行完这一次删除操作后，不会删除新出现的相同文件夹。</p> \n<p>返回二维数组<em> </em><code>ans</code> ，该数组包含删除所有标记文件夹之后剩余文件夹的路径。路径可以按 <strong>任意顺序</strong> 返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 200px; height: 218px;\" src=\"https://assets.leetcode.com/uploads/2021/07/19/lc-dupfolder1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>paths = [[\"a\"],[\"c\"],[\"d\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"d\",\"a\"]]\n<strong>输出：</strong>[[\"d\"],[\"d\",\"a\"]]\n<strong>解释：</strong>文件结构如上所示。\n文件夹 \"/a\" 和 \"/c\"（以及它们的子文件夹）都会被标记为待删除，因为它们都包含名为 \"b\" 的空文件夹。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 200px; height: 355px;\" src=\"https://assets.leetcode.com/uploads/2021/07/19/lc-dupfolder2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>paths = [[\"a\"],[\"c\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"a\",\"b\",\"x\"],[\"a\",\"b\",\"x\",\"y\"],[\"w\"],[\"w\",\"y\"]]\n<strong>输出：</strong>[[\"c\"],[\"c\",\"b\"],[\"a\"],[\"a\",\"b\"]]\n<strong>解释：</strong>文件结构如上所示。\n文件夹 \"/a/b/x\" 和 \"/w\"（以及它们的子文件夹）都会被标记为待删除，因为它们都包含名为 \"y\" 的空文件夹。\n注意，文件夹 \"/a\" 和 \"/c\" 在删除后变为相同文件夹，但这两个文件夹不会被删除，因为删除只会进行一次，且它们没有在删除前被标记。\n</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 200px; height: 201px;\" src=\"https://assets.leetcode.com/uploads/2021/07/19/lc-dupfolder3.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>paths = [[\"a\",\"b\"],[\"c\",\"d\"],[\"c\"],[\"a\"]]\n<strong>输出：</strong>[[\"c\"],[\"c\",\"d\"],[\"a\"],[\"a\",\"b\"]]\n<strong>解释：</strong>文件系统中所有文件夹互不相同。\n注意，返回的数组可以按不同顺序返回文件夹路径，因为题目对顺序没有要求。\n</pre> \n<p><strong>示例 4：</strong></p> \n<img style=\"width: 300px; height: 290px;\" src=\"https://assets.leetcode.com/uploads/2021/07/19/lc-dupfolder4_.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>paths = [[\"a\"],[\"a\",\"x\"],[\"a\",\"x\",\"y\"],[\"a\",\"z\"],[\"b\"],[\"b\",\"x\"],[\"b\",\"x\",\"y\"],[\"b\",\"z\"]]\n<strong>输出：</strong>[]\n<strong>解释：</strong>文件结构如上所示。\n文件夹 \"/a/x\" 和 \"/b/x\"（以及它们的子文件夹）都会被标记为待删除，因为它们都包含名为 \"y\" 的空文件夹。\n文件夹 \"/a\" 和 \"/b\"（以及它们的子文件夹）都会被标记为待删除，因为它们都包含一个名为 \"z\" 的空文件夹以及上面提到的文件夹 \"x\" 。\n</pre> \n<p><strong>示例 5：</strong></p> \n<img style=\"width: 300px; height: 282px;\" src=\"https://assets.leetcode.com/uploads/2021/07/19/lc-dupfolder5_.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>paths = [[\"a\"],[\"a\",\"x\"],[\"a\",\"x\",\"y\"],[\"a\",\"z\"],[\"b\"],[\"b\",\"x\"],[\"b\",\"x\",\"y\"],[\"b\",\"z\"],[\"b\",\"w\"]]\n<strong>输出：</strong>[[\"b\"],[\"b\",\"w\"],[\"b\",\"z\"],[\"a\"],[\"a\",\"z\"]]\n<strong>解释：</strong>本例与上例的结构基本相同，除了新增 \"/b/w\" 文件夹。\n文件夹 \"/a/x\" 和 \"/b/x\" 仍然会被标记，但 \"/a\" 和 \"/b\" 不再被标记，因为 \"/b\" 中有名为 \"w\" 的空文件夹而 \"/a\" 没有。\n注意，\"/a/z\" 和 \"/b/z\" 不会被标记，因为相同子文件夹的集合必须是非空集合，但这两个文件夹都是空的。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= paths.length &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= paths[i].length &lt;= 500</code></li> \n <li><code>1 &lt;= paths[i][j].length &lt;= 10</code></li> \n <li><code>1 &lt;= sum(paths[i][j].length) &lt;= 2 * 10<sup>5</sup></code></li> \n <li><code>path[i][j]</code> 由小写英文字母组成</li> \n <li>不会存在两个路径都指向同一个文件夹的情况</li> \n <li>对于不在根层级的任意文件夹，其父文件夹也会包含在输入中</li> \n</ul>');
INSERT INTO `leecode` VALUES ('195. 第十行', '<p>给定一个文本文件&nbsp;<code>file.txt</code>，请只打印这个文件中的第十行。</p> \n<p><strong>示例:</strong></p> \n<p>假设&nbsp;<code>file.txt</code> 有如下内容：</p> \n<pre>Line 1\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\nLine 7\nLine 8\nLine 9\nLine 10\n</pre> \n<p>你的脚本应当显示第十行：</p> \n<pre>Line 10\n</pre> \n<p><strong>说明:</strong><br> 1. 如果文件少于十行，你应当输出什么？<br> 2. 至少有三种不同的解法，请尝试尽可能多的方法来解题。</p>');
INSERT INTO `leecode` VALUES ('1952. 三除数', '<p>给你一个整数 <code>n</code> 。如果 <code>n</code> <strong>恰好有三个正除数</strong> ，返回 <code>true</code><em> </em>；否则，返回<em> </em><code>false</code> 。</p> \n<p>如果存在整数 <code>k</code> ，满足 <code>n = k * m</code> ，那么整数 <code>m</code> 就是 <code>n</code> 的一个 <strong>除数</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>false\n<strong>解释：</strong>2 只有两个除数：1 和 2 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 4\n<strong>输出：</strong>true\n<strong>解释：</strong>4 有三个除数：1、2 和 4 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1953. 你可以工作的最大周数', '<p>给你&nbsp;<code>n</code> 个项目，编号从 <code>0</code> 到 <code>n - 1</code> 。同时给你一个整数数组 <code>milestones</code> ，其中每个 <code>milestones[i]</code> 表示第 <code>i</code> 个项目中的阶段任务数量。</p> \n<p>你可以按下面两个规则参与项目中的工作：</p> \n<ul> \n <li>每周，你将会完成 <strong>某一个</strong> 项目中的 <strong>恰好一个</strong>&nbsp;阶段任务。你每周都 <strong>必须</strong> 工作。</li> \n <li>在 <strong>连续的</strong> 两周中，你 <strong>不能</strong> 参与并完成同一个项目中的两个阶段任务。</li> \n</ul> \n<p>一旦所有项目中的全部阶段任务都完成，或者仅剩余一个阶段任务都会导致你违反上面的规则，那么你将&nbsp;<strong>停止工作</strong> 。注意，由于这些条件的限制，你可能无法完成所有阶段任务。</p> \n<p>返回在不违反上面规则的情况下你&nbsp;<strong>最多</strong>&nbsp;能工作多少周。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>milestones = [1,2,3]\n<strong>输出：</strong>6\n<strong>解释：</strong>一种可能的情形是：\n​​​​- 第 1 周，你参与并完成项目 0 中的一个阶段任务。\n- 第 2 周，你参与并完成项目 2 中的一个阶段任务。\n- 第 3 周，你参与并完成项目 1 中的一个阶段任务。\n- 第 4 周，你参与并完成项目 2 中的一个阶段任务。\n- 第 5 周，你参与并完成项目 1 中的一个阶段任务。\n- 第 6 周，你参与并完成项目 2 中的一个阶段任务。\n总周数是 6 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>milestones = [5,2,1]\n<strong>输出：</strong>7\n<strong>解释：</strong>一种可能的情形是：\n- 第 1 周，你参与并完成项目 0 中的一个阶段任务。\n- 第 2 周，你参与并完成项目 1 中的一个阶段任务。\n- 第 3 周，你参与并完成项目 0 中的一个阶段任务。\n- 第 4 周，你参与并完成项目 1 中的一个阶段任务。\n- 第 5 周，你参与并完成项目 0 中的一个阶段任务。\n- 第 6 周，你参与并完成项目 2 中的一个阶段任务。\n- 第 7 周，你参与并完成项目 0 中的一个阶段任务。\n总周数是 7 。\n注意，你不能在第 8 周参与完成项目 0 中的最后一个阶段任务，因为这会违反规则。\n因此，项目 0 中会有一个阶段任务维持未完成状态。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == milestones.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= milestones[i] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1954. 收集足够苹果的最小花园周长', '<p>给你一个用无限二维网格表示的花园，<strong>每一个</strong>&nbsp;整数坐标处都有一棵苹果树。整数坐标&nbsp;<code>(i, j)</code>&nbsp;处的苹果树有 <code>|i| + |j|</code>&nbsp;个苹果。</p> \n<p>你将会买下正中心坐标是 <code>(0, 0)</code>&nbsp;的一块 <strong>正方形土地</strong>&nbsp;，且每条边都与两条坐标轴之一平行。</p> \n<p>给你一个整数&nbsp;<code>neededApples</code>&nbsp;，请你返回土地的&nbsp;<strong>最小周长</strong>&nbsp;，使得&nbsp;<strong>至少</strong>&nbsp;有<strong>&nbsp;</strong><code>neededApples</code>&nbsp;个苹果在土地&nbsp;<strong>里面或者边缘上</strong>。</p> \n<p><code>|x|</code>&nbsp;的值定义为：</p> \n<ul> \n <li>如果&nbsp;<code>x &gt;= 0</code>&nbsp;，那么值为&nbsp;<code>x</code></li> \n <li>如果&nbsp;<code>x &lt;&nbsp;0</code>&nbsp;，那么值为&nbsp;<code>-x</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 442px; height: 449px;\" src=\"https://pic.leetcode-cn.com/1627790803-qcBKFw-image.png\" alt=\"\"> \n<pre><b>输入：</b>neededApples = 1\n<b>输出：</b>8\n<b>解释：</b>边长长度为 1 的正方形不包含任何苹果。\n但是边长为 2 的正方形包含 12 个苹果（如上图所示）。\n周长为 2 * 4 = 8 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>neededApples = 13\n<b>输出：</b>16\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>neededApples = 1000000000\n<b>输出：</b>5040\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= neededApples &lt;= 10<sup>15</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1955. 统计特殊子序列的数目', '<p><strong>特殊序列</strong> 是由&nbsp;<strong>正整数</strong>&nbsp;个 <code>0</code>&nbsp;，紧接着&nbsp;<strong>正整数</strong>&nbsp;个 <code>1</code>&nbsp;，最后 <strong>正整数</strong>&nbsp;个 <code>2</code>&nbsp;组成的序列。</p> \n<ul> \n <li>比方说，<code>[0,1,2]</code> 和&nbsp;<code>[0,0,1,1,1,2]</code>&nbsp;是特殊序列。</li> \n <li>相反，<code>[2,1,0]</code>&nbsp;，<code>[1]</code>&nbsp;和&nbsp;<code>[0,1,2,0]</code>&nbsp;就不是特殊序列。</li> \n</ul> \n<p>给你一个数组&nbsp;<code>nums</code>&nbsp;（<strong>仅</strong>&nbsp;包含整数&nbsp;<code>0</code>，<code>1</code>&nbsp;和&nbsp;<code>2</code>），请你返回 <b>不同特殊子序列的数目</b>&nbsp;。由于答案可能很大，请你将它对&nbsp;<code>10<sup>9</sup> + 7</code> <strong>取余</strong> 后返回。</p> \n<p>一个数组的 <strong>子序列</strong>&nbsp;是从原数组中删除零个或者若干个元素后，剩下元素不改变顺序得到的序列。如果两个子序列的 <strong>下标集合</strong>&nbsp;不同，那么这两个子序列是 <strong>不同的</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [0,1,2,2]\n<b>输出：</b>3\n<b>解释：</b>特殊子序列为 [<strong>0</strong>,<strong>1</strong>,<strong>2</strong>,2]，[<strong>0</strong>,<strong>1</strong>,2,<strong>2</strong>] 和 [<strong>0</strong>,<strong>1</strong>,<strong>2</strong>,<strong>2</strong>] 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [2,2,0,0]\n<b>输出：</b>0\n<b>解释：</b>数组 [2,2,0,0] 中没有特殊子序列。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [0,1,2,0,1,2]\n<b>输出：</b>7\n<b>解释：</b>特殊子序列包括：\n- [<strong>0</strong>,<strong>1</strong>,<strong>2</strong>,0,1,2]\n- [<strong>0</strong>,<strong>1</strong>,2,0,1,<strong>2</strong>]\n- [<strong>0</strong>,<strong>1</strong>,<strong>2</strong>,0,1,<strong>2</strong>]\n- [<strong>0</strong>,<strong>1</strong>,2,0,<strong>1</strong>,<strong>2</strong>]\n- [<strong>0</strong>,1,2,<strong>0</strong>,<strong>1</strong>,<strong>2</strong>]\n- [<strong>0</strong>,1,2,0,<strong>1</strong>,<strong>2</strong>]\n- [0,1,2,<strong>0</strong>,<strong>1</strong>,<strong>2</strong>]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= nums[i] &lt;= 2</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1957. 删除字符使字符串变好', '<p>一个字符串如果没有 <strong>三个连续</strong>&nbsp;相同字符，那么它就是一个 <strong>好字符串</strong>&nbsp;。</p> \n<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，请你从 <code>s</code>&nbsp;删除&nbsp;<strong>最少</strong>&nbsp;的字符，使它变成一个 <strong>好字符串</strong> 。</p> \n<p>请你返回删除后的字符串。题目数据保证答案总是 <strong>唯一的 </strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"le<strong>e</strong>etcode\"\n<b>输出：</b>\"leetcode\"\n<strong>解释：</strong>\n从第一组 \'e\' 里面删除一个 \'e\' ，得到 \"leetcode\" 。\n没有连续三个相同字符，所以返回 \"leetcode\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"<strong>a</strong>aab<strong>aa</strong>aa\"\n<b>输出：</b>\"aabaa\"\n<strong>解释：</strong>\n从第一组 \'a\' 里面删除一个 \'a\' ，得到 \"aabaaaa\" 。\n从第二组 \'a\' 里面删除两个 \'a\' ，得到 \"aabaa\" 。\n没有连续三个相同字符，所以返回 \"aabaa\" 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>s = \"aab\"\n<b>输出：</b>\"aab\"\n<b>解释：</b>没有连续三个相同字符，所以返回 \"aab\" 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1958. 检查操作是否合法', '<p>给你一个下标从&nbsp;<strong>0</strong>&nbsp;开始的&nbsp;<code>8 x 8</code> 网格&nbsp;<code>board</code>&nbsp;，其中&nbsp;<code>board[r][c]</code>&nbsp;表示游戏棋盘上的格子&nbsp;<code>(r, c)</code>&nbsp;。棋盘上空格用&nbsp;<code>\'.\'</code>&nbsp;表示，白色格子用&nbsp;<code>\'W\'</code>&nbsp;表示，黑色格子用&nbsp;<code>\'B\'</code>&nbsp;表示。</p> \n<p>游戏中每次操作步骤为：选择一个空格子，将它变成你正在执行的颜色（要么白色，要么黑色）。但是，<strong>合法 </strong>操作必须满足：涂色后这个格子是 <strong>好线段的一个端点</strong>&nbsp;（好线段可以是水平的，竖直的或者是对角线）。</p> \n<p><strong>好线段</strong>&nbsp;指的是一个包含 <strong>三个或者更多格子（包含端点格子）</strong>的线段，线段两个端点格子为 <strong>同一种颜色</strong>&nbsp;，且中间剩余格子的颜色都为 <strong>另一种颜色</strong>&nbsp;（线段上不能有任何空格子）。你可以在下图找到好线段的例子：</p> \n<img style=\"width: 500px; height: 312px;\" src=\"https://assets.leetcode.com/uploads/2021/07/22/goodlines5.png\" alt=\"\"> \n<p>给你两个整数&nbsp;<code>rMove</code> 和&nbsp;<code>cMove</code>&nbsp;以及一个字符&nbsp;<code>color</code>&nbsp;，表示你正在执行操作的颜色（白或者黑），如果将格子&nbsp;<code>(rMove, cMove)</code>&nbsp;变成颜色&nbsp;<code>color</code>&nbsp;后，是一个&nbsp;<strong>合法</strong>&nbsp;操作，那么返回&nbsp;<code>true</code>&nbsp;，如果不是合法操作返回&nbsp;<code>false</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 350px; height: 350px;\" src=\"https://assets.leetcode.com/uploads/2021/07/10/grid11.png\" alt=\"\"></p> \n<pre><b>输入：</b>board = [[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\"W\",\"B\",\"B\",\".\",\"W\",\"W\",\"W\",\"B\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"]], rMove = 4, cMove = 3, color = \"B\"\n<b>输出：</b>true\n<b>解释：</b>\'.\'，\'W\' 和 \'B\' 分别用颜色蓝色，白色和黑色表示。格子 (rMove, cMove) 用 \'X\' 标记。\n以选中格子为端点的两个好线段在上图中用红色矩形标注出来了。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 350px; height: 351px;\" src=\"https://assets.leetcode.com/uploads/2021/07/10/grid2.png\" alt=\"\"></p> \n<pre><b>输入：</b>board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"B\",\".\",\".\",\"W\",\".\",\".\",\".\"],[\".\",\".\",\"W\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\"B\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"B\",\"W\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\"W\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"B\"]], rMove = 4, cMove = 4, color = \"W\"\n<b>输出：</b>false\n<b>解释：</b>虽然选中格子涂色后，棋盘上产生了好线段，但选中格子是作为中间格子，没有产生以选中格子为端点的好线段。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>board.length == board[r].length == 8</code></li> \n <li><code>0 &lt;= rMove, cMove &lt; 8</code></li> \n <li><code>board[rMove][cMove] == \'.\'</code></li> \n <li><code>color</code>&nbsp;要么是&nbsp;<code>\'B\'</code> 要么是&nbsp;<code>\'W\'</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1959. K 次调整数组大小浪费的最小总空间', '<p>你正在设计一个动态数组。给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>nums</code>&nbsp;，其中&nbsp;<code>nums[i]</code>&nbsp;是&nbsp;<code>i</code>&nbsp;时刻数组中的元素数目。除此以外，你还有一个整数 <code>k</code>&nbsp;，表示你可以 <strong>调整</strong>&nbsp;数组大小的 <strong>最多</strong>&nbsp;次数（每次都可以调整成 <strong>任意</strong>&nbsp;大小）。</p> \n<p><code>t</code>&nbsp;时刻数组的大小&nbsp;<code>size<sub>t</sub></code>&nbsp;必须大于等于&nbsp;<code>nums[t]</code>&nbsp;，因为数组需要有足够的空间容纳所有元素。<code>t</code>&nbsp;时刻 <strong>浪费的空间</strong>&nbsp;为&nbsp;<code>size<sub>t</sub> - nums[t]</code>&nbsp;，<strong>总</strong>&nbsp;浪费空间为满足&nbsp;<code>0 &lt;= t &lt; nums.length</code>&nbsp;的每一个时刻&nbsp;<code>t</code>&nbsp;浪费的空间&nbsp;<strong>之和</strong>&nbsp;。</p> \n<p>在调整数组大小不超过 <code>k</code>&nbsp;次的前提下，请你返回 <strong>最小总浪费空间</strong>&nbsp;。</p> \n<p><strong>注意：</strong>数组最开始时可以为&nbsp;<strong>任意大小</strong>&nbsp;，且&nbsp;<strong>不计入</strong>&nbsp;调整大小的操作次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [10,20], k = 0\n<b>输出：</b>10\n<b>解释：</b>size = [20,20].\n我们可以让数组初始大小为 20 。\n总浪费空间为 (20 - 10) + (20 - 20) = 10 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [10,20,30], k = 1\n<b>输出：</b>10\n<b>解释：</b>size = [20,20,30].\n我们可以让数组初始大小为 20 ，然后时刻 2 调整大小为 30 。\n总浪费空间为 (20 - 10) + (20 - 20) + (30 - 30) = 10 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [10,20,15,30,20], k = 2\n<b>输出：</b>15\n<b>解释：</b>size = [10,20,20,30,30].\n我们可以让数组初始大小为 10 ，时刻 1 调整大小为 20 ，时刻 3 调整大小为 30 。\n总浪费空间为 (10 - 10) + (20 - 20) + (20 - 15) + (30 - 30) + (30 - 20) = 15 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 200</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> \n <li><code>0 &lt;= k &lt;= nums.length - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('196. 删除重复的电子邮箱', '<p>编写一个 SQL 查询，来删除&nbsp;<code>Person</code>&nbsp;表中所有重复的电子邮箱，重复的邮箱里只保留&nbsp;<strong>Id&nbsp;</strong><em>最小&nbsp;</em>的那个。</p> \n<pre>+----+------------------+\n| Id | Email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n| 3  | john@example.com |\n+----+------------------+\nId 是这个表的主键。\n</pre> \n<p>例如，在运行你的查询语句之后，上面的 <code>Person</code> 表应返回以下几行:</p> \n<pre>+----+------------------+\n| Id | Email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n+----+------------------+\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>执行 SQL 之后，输出是整个 <code>Person</code>&nbsp;表。</li> \n <li>使用 <code>delete</code> 语句。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1960. 两个回文子字符串长度的最大乘积', '<p>给你一个下标从 <strong>0</strong>&nbsp;开始的字符串&nbsp;<code>s</code>&nbsp;，你需要找到两个 <strong>不重叠</strong><strong>的回文&nbsp;</strong>子字符串，它们的长度都必须为 <strong>奇数</strong>&nbsp;，使得它们长度的乘积最大。</p> \n<p>更正式地，你想要选择四个整数&nbsp;<code>i</code>&nbsp;，<code>j</code>&nbsp;，<code>k</code>&nbsp;，<code>l</code>&nbsp;，使得&nbsp;<code>0 &lt;= i &lt;= j &lt; k &lt;= l &lt; s.length</code>&nbsp;，且子字符串&nbsp;<code>s[i...j]</code> 和&nbsp;<code>s[k...l]</code>&nbsp;都是回文串且长度为奇数。<code>s[i...j]</code>&nbsp;表示下标从 <code>i</code>&nbsp;到 <code>j</code>&nbsp;且 <strong>包含</strong>&nbsp;两端下标的子字符串。</p> \n<p>请你返回两个不重叠回文子字符串长度的 <strong>最大</strong>&nbsp;乘积。</p> \n<p><strong>回文字符串</strong>&nbsp;指的是一个从前往后读和从后往前读一模一样的字符串。<strong>子字符串</strong>&nbsp;指的是一个字符串中一段连续字符。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>s = \"ababbb\"\n<b>输出：</b>9\n<b>解释：</b>子字符串 \"aba\" 和 \"bbb\" 为奇数长度的回文串。乘积为 3 * 3 = 9 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>s = \"zaaaxbbby\"\n<b>输出：</b>9\n<b>解释：</b>子字符串 \"aaa\" 和 \"bbb\" 为奇数长度的回文串。乘积为 3 * 3 = 9 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1961. 检查字符串是否为数组前缀', '<p>给你一个字符串 <code>s</code> 和一个字符串数组 <code>words</code> ，请你判断 <code>s</code> 是否为 <code>words</code> 的 <strong>前缀字符串</strong> 。</p> \n<p>字符串 <code>s</code> 要成为 <code>words</code> 的 <strong>前缀字符串</strong> ，需要满足：<code>s</code> 可以由 <code>words</code> 中的前 <code>k</code>（<code>k</code> 为 <strong>正数</strong> ）个字符串按顺序相连得到，且 <code>k</code> 不超过 <code>words.length</code> 。</p> \n<p>如果 <code>s</code> 是 <code>words</code> 的 <strong>前缀字符串</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"iloveleetcode\", words = [\"i\",\"love\",\"leetcode\",\"apples\"]\n<strong>输出：</strong>true\n<strong>解释：</strong>\ns 可以由 \"i\"、\"love\" 和 \"leetcode\" 相连得到。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"iloveleetcode\", words = [\"apples\",\"i\",\"love\",\"leetcode\"]\n<strong>输出：</strong>false\n<strong>解释：</strong>\n数组的前缀相连无法得到 s 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 100</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 20</code></li> \n <li><code>1 &lt;= s.length &lt;= 1000</code></li> \n <li><code>words[i]</code> 和 <code>s</code> 仅由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1962. 移除石子使总数最小', '<p>给你一个整数数组 <code>piles</code> ，数组 <strong>下标从 0 开始</strong> ，其中 <code>piles[i]</code> 表示第 <code>i</code> 堆石子中的石子数量。另给你一个整数 <code>k</code> ，请你执行下述操作 <strong>恰好</strong> <code>k</code> 次：</p> \n<ul> \n <li>选出任一石子堆 <code>piles[i]</code> ，并从中 <strong>移除</strong> <code>floor(piles[i] / 2)</code> 颗石子。</li> \n</ul> \n<p><strong>注意：</strong>你可以对 <strong>同一堆</strong> 石子多次执行此操作。</p> \n<p>返回执行 <code>k</code> 次操作后，剩下石子的 <strong>最小</strong> 总数。</p> \n<p><code>floor(x)</code> 为 <strong>小于</strong> 或 <strong>等于</strong> <code>x</code> 的 <strong>最大</strong> 整数。（即，对 <code>x</code> 向下取整）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>piles = [5,4,9], k = 2\n<strong>输出：</strong>12\n<strong>解释：</strong>可能的执行情景如下：\n- 对第 2 堆石子执行移除操作，石子分布情况变成 [5,4,<strong><em>5</em></strong>] 。\n- 对第 0 堆石子执行移除操作，石子分布情况变成 [<strong><em>3</em></strong>,4,5] 。\n剩下石子的总数为 12 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>piles = [4,3,6,7], k = 3\n<strong>输出：</strong>12\n<strong>解释：</strong>可能的执行情景如下：\n- 对第 2 堆石子执行移除操作，石子分布情况变成 [4,3,<strong><em>3</em></strong>,7] 。\n- 对第 3 堆石子执行移除操作，石子分布情况变成 [4,3,3,<strong><em>4</em></strong>] 。\n- 对第 0 堆石子执行移除操作，石子分布情况变成 [<strong><em>2</em></strong>,3,3,4] 。\n剩下石子的总数为 12 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= piles.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= piles[i] &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1963. 使字符串平衡的最小交换次数', '<p>给你一个字符串 <code>s</code> ，<strong>下标从 0 开始</strong> ，且长度为偶数 <code>n</code> 。字符串 <strong>恰好</strong> 由 <code>n / 2</code> 个开括号 <code>\'[\'</code> 和 <code>n / 2</code> 个闭括号 <code>\']\'</code> 组成。</p> \n<p>只有能满足下述所有条件的字符串才能称为 <strong>平衡字符串</strong> ：</p> \n<ul> \n <li>字符串是一个空字符串，或者</li> \n <li>字符串可以记作 <code>AB</code> ，其中 <code>A</code> 和 <code>B</code> 都是 <strong>平衡字符串</strong> ，或者</li> \n <li>字符串可以写成 <code>[C]</code> ，其中 <code>C</code> 是一个 <strong>平衡字符串</strong> 。</li> \n</ul> \n<p>你可以交换 <strong>任意</strong> 两个下标所对应的括号 <strong>任意</strong> 次数。</p> \n<p>返回使<em> </em><code>s</code> 变成 <strong>平衡字符串</strong> 所需要的 <strong>最小</strong> 交换次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"][][\"\n<strong>输出：</strong>1\n<strong>解释：</strong>交换下标 0 和下标 3 对应的括号，可以使字符串变成平衡字符串。\n最终字符串变成 \"[[]]\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"]]][[[\"\n<strong>输出：</strong>2\n<strong>解释：</strong>执行下述操作可以使字符串变成平衡字符串：\n- 交换下标 0 和下标 4 对应的括号，s = \"[]][][\" 。\n- 交换下标 1 和下标 5 对应的括号，s = \"[[][]]\" 。\n最终字符串变成 \"[[][]]\" 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"[]\"\n<strong>输出：</strong>0\n<strong>解释：</strong>这个字符串已经是平衡字符串。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == s.length</code></li> \n <li><code>2 &lt;= n &lt;= 10<sup>6</sup></code></li> \n <li><code>n</code> 为偶数</li> \n <li><code>s[i]</code> 为<code>\'[\'</code> 或 <code>\']\'</code></li> \n <li>开括号 <code>\'[\'</code> 的数目为 <code>n / 2</code> ，闭括号 <code>\']\'</code> 的数目也是 <code>n / 2</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1964. 找出到每个位置为止最长的有效障碍赛跑路线', '<p>你打算构建一些障碍赛跑路线。给你一个 <strong>下标从 0 开始</strong> 的整数数组 <code>obstacles</code> ，数组长度为 <code>n</code> ，其中 <code>obstacles[i]</code> 表示第 <code>i</code> 个障碍的高度。</p> \n<p>对于每个介于 <code>0</code> 和 <code>n - 1</code> 之间（包含 <code>0</code> 和 <code>n - 1</code>）的下标&nbsp; <code>i</code> ，在满足下述条件的前提下，请你找出&nbsp;<code>obstacles</code> 能构成的最长障碍路线的长度：</p> \n<ul> \n <li>你可以选择下标介于 <code>0</code> 到 <code>i</code> 之间（包含 <code>0</code> 和 <code>i</code>）的任意个障碍。</li> \n <li>在这条路线中，必须包含第 <code>i</code> 个障碍。</li> \n <li>你必须按障碍在&nbsp;<code>obstacles</code>&nbsp;中的<strong> </strong><strong>出现顺序</strong> 布置这些障碍。</li> \n <li>除第一个障碍外，路线中每个障碍的高度都必须和前一个障碍 <strong>相同</strong> 或者 <strong>更高</strong> 。</li> \n</ul> \n<p>返回长度为 <code>n</code> 的答案数组 <code>ans</code> ，其中 <code>ans[i]</code> 是上面所述的下标 <code>i</code> 对应的最长障碍赛跑路线的长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>obstacles = [1,2,3,2]\n<strong>输出：</strong>[1,2,3,3]\n<strong>解释：</strong>每个位置的最长有效障碍路线是：\n- i = 0: [<em><strong>1</strong></em>], [1] 长度为 1\n- i = 1: [<em><strong>1</strong></em>,<em><strong>2</strong></em>], [1,2] 长度为 2\n- i = 2: [<em><strong>1</strong></em>,<em><strong>2</strong></em>,<em><strong>3</strong></em>], [1,2,3] 长度为 3\n- i = 3: [<em><strong>1</strong></em>,<em><strong>2</strong></em>,3,<em><strong>2</strong></em>], [1,2,2] 长度为 3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>obstacles = [2,2,1]\n<strong>输出：</strong>[1,2,1]\n<strong>解释：</strong>每个位置的最长有效障碍路线是：\n- i = 0: [<em><strong>2</strong></em>], [2] 长度为 1\n- i = 1: [<em><strong>2</strong></em>,<em><strong>2</strong></em>], [2,2] 长度为 2\n- i = 2: [2,2,<em><strong>1</strong></em>], [1] 长度为 1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>obstacles = [3,1,5,6,4,2]\n<strong>输出：</strong>[1,1,2,3,2,2]\n<strong>解释：</strong>每个位置的最长有效障碍路线是：\n- i = 0: [<em><strong>3</strong></em>], [3] 长度为 1\n- i = 1: [3,<em><strong>1</strong></em>], [1] 长度为 1\n- i = 2: [<em><strong>3</strong></em>,1,<em><strong>5</strong></em>], [3,5] 长度为 2, [1,5] 也是有效的障碍赛跑路线\n- i = 3: [<em><strong>3</strong></em>,1,<em><strong>5</strong></em>,<em><strong>6</strong></em>], [3,5,6] 长度为 3, [1,5,6] 也是有效的障碍赛跑路线\n- i = 4: [<em><strong>3</strong></em>,1,5,6,<em><strong>4</strong></em>], [3,4] 长度为 2, [1,4] 也是有效的障碍赛跑路线\n- i = 5: [3,<em><strong>1</strong></em>,5,6,4,<em><strong>2</strong></em>], [1,2] 长度为 2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == obstacles.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= obstacles[i] &lt;= 10<sup>7</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1966. Binary Searchable Numbers in an Unsorted Array', 'English description is not available for the problem. Please switch to Chinese.');
INSERT INTO `leecode` VALUES ('1967. 作为子字符串出现在单词中的字符串数目', '<p>给你一个字符串数组 <code>patterns</code> 和一个字符串 <code>word</code> ，统计 <code>patterns</code> 中有多少个字符串是 <code>word</code> 的子字符串。返回字符串数目。</p> \n<p><strong>子字符串</strong> 是字符串中的一个连续字符序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>patterns = [\"a\",\"abc\",\"bc\",\"d\"], word = \"abc\"\n<strong>输出：</strong>3\n<strong>解释：</strong>\n- \"a\" 是 \"<em><strong>a</strong></em>bc\" 的子字符串。\n- \"abc\" 是 \"<em><strong>abc</strong></em>\" 的子字符串。\n- \"bc\" 是 \"a<em><strong>bc</strong></em>\" 的子字符串。\n- \"d\" 不是 \"abc\" 的子字符串。\npatterns 中有 3 个字符串作为子字符串出现在 word 中。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>patterns = [\"a\",\"b\",\"c\"], word = \"aaaaabbbbb\"\n<strong>输出：</strong>2\n<strong>解释：</strong>\n- \"a\" 是 \"a<em><strong>a</strong></em>aaabbbbb\" 的子字符串。\n- \"b\" 是 \"aaaaabbbb<em><strong>b</strong></em>\" 的子字符串。\n- \"c\" 不是 \"aaaaabbbbb\" 的字符串。\npatterns 中有 2 个字符串作为子字符串出现在 word 中。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>patterns = [\"a\",\"a\",\"a\"], word = \"ab\"\n<strong>输出：</strong>3\n<strong>解释：</strong>patterns 中的每个字符串都作为子字符串出现在 word \"<em><strong>a</strong></em>b\" 中。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= patterns.length &lt;= 100</code></li> \n <li><code>1 &lt;= patterns[i].length &lt;= 100</code></li> \n <li><code>1 &lt;= word.length &lt;= 100</code></li> \n <li><code>patterns[i]</code> 和 <code>word</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1968. 构造元素不等于两相邻元素平均值的数组', '<p>给你一个 <strong>下标从 0 开始</strong> 的数组 <code>nums</code> ，数组由若干 <strong>互不相同的</strong> 整数组成。你打算重新排列数组中的元素以满足：重排后，数组中的每个元素都 <strong>不等于</strong> 其两侧相邻元素的 <strong>平均值</strong> 。</p> \n<p>更公式化的说法是，重新排列的数组应当满足这一属性：对于范围&nbsp;<code>1 &lt;= i &lt; nums.length - 1</code> 中的每个 <code>i</code> ，<code>(nums[i-1] + nums[i+1]) / 2</code> <strong>不等于</strong> <code>nums[i]</code> 均成立 。</p> \n<p>返回满足题意的任一重排结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4,5]\n<strong>输出：</strong>[1,2,4,5,3]\n<strong>解释：</strong>\ni=1, nums[i] = 2, 两相邻元素平均值为 (1+4) / 2 = 2.5\ni=2, nums[i] = 4, 两相邻元素平均值为 (2+5) / 2 = 3.5\ni=3, nums[i] = 5, 两相邻元素平均值为 (4+3) / 2 = 3.5\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [6,2,0,9,7]\n<strong>输出：</strong>[9,7,6,2,0]\n<strong>解释：</strong>\ni=1, nums[i] = 7, 两相邻元素平均值为 (9+6) / 2 = 7.5\ni=2, nums[i] = 6, 两相邻元素平均值为 (7+2) / 2 = 4.5\ni=3, nums[i] = 2, 两相邻元素平均值为 (6+0) / 2 = 3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1969. 数组元素的最小非零乘积', '<p>给你一个正整数&nbsp;<code>p</code>&nbsp;。你有一个下标从 <strong>1</strong>&nbsp;开始的数组&nbsp;<code>nums</code>&nbsp;，这个数组包含范围&nbsp;<code>[1, 2<sup>p</sup> - 1]</code>&nbsp;内所有整数的二进制形式（两端都 <strong>包含</strong>）。你可以进行以下操作 <strong>任意</strong>&nbsp;次：</p> \n<ul> \n <li>从 <code>nums</code>&nbsp;中选择两个元素&nbsp;<code>x</code>&nbsp;和&nbsp;<code>y</code>&nbsp; 。</li> \n <li>选择 <code>x</code>&nbsp;中的一位与 <code>y</code>&nbsp;对应位置的位交换。对应位置指的是两个整数 <strong>相同位置</strong>&nbsp;的二进制位。</li> \n</ul> \n<p>比方说，如果&nbsp;<code>x = 11<em><strong>0</strong></em>1</code>&nbsp;且&nbsp;<code>y = 00<em><strong>1</strong></em>1</code>&nbsp;，交换右边数起第 <code>2</code>&nbsp;位后，我们得到&nbsp;<code>x = 11<em><strong>1</strong></em>1</code> 和&nbsp;<code>y = 00<em><strong>0</strong></em>1</code>&nbsp;。</p> \n<p>请你算出进行以上操作 <strong>任意次</strong>&nbsp;以后，<code>nums</code>&nbsp;能得到的 <strong>最小非零</strong>&nbsp;乘积。将乘积对<em>&nbsp;</em><code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong> 后返回。</p> \n<p><strong>注意：</strong>答案应为取余 <strong>之前</strong>&nbsp;的最小值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>p = 1\n<b>输出：</b>1\n<b>解释：</b>nums = [1] 。\n只有一个元素，所以乘积为该元素。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>p = 2\n<b>输出：</b>6\n<b>解释：</b>nums = [01, 10, 11] 。\n所有交换要么使乘积变为 0 ，要么乘积与初始乘积相同。\n所以，数组乘积 1 * 2 * 3 = 6 已经是最小值。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>p = 3\n<b>输出：</b>1512\n<b>解释：</b>nums = [001, 010, 011, 100, 101, 110, 111]\n- 第一次操作中，我们交换第二个和第五个元素最左边的数位。\n    - 结果数组为 [001, <em><strong>1</strong></em>10, 011, 100, <em><strong>0</strong></em>01, 110, 111] 。\n- 第二次操作中，我们交换第三个和第四个元素中间的数位。\n    - 结果数组为 [001, 110, 0<em><strong>0</strong></em>1, 1<em><strong>1</strong></em>0, 001, 110, 111] 。\n数组乘积 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512 是最小乘积。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= p &lt;= 60</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('197. 上升的温度', '<div class=\"original__bRMd\"> \n <div> \n  <p>表 <code>Weather</code></p> \n  <pre>+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| recordDate    | date    |\n| temperature   | int     |\n+---------------+---------+\nid 是这个表的主键\n该表包含特定日期的温度信息</pre> \n  <p>&nbsp;</p> \n  <p>编写一个 SQL 查询，来查找与之前（昨天的）日期相比温度更高的所有日期的 <code>id</code> 。</p> \n  <p>返回结果 <strong>不要求顺序</strong> 。</p> \n  <p>查询结果格式如下例：</p> \n  <pre><code>Weather</code>\n+----+------------+-------------+\n| id | recordDate | Temperature |\n+----+------------+-------------+\n| 1  | 2015-01-01 | 10          |\n| 2  | 2015-01-02 | 25          |\n| 3  | 2015-01-03 | 20          |\n| 4  | 2015-01-04 | 30          |\n+----+------------+-------------+\n\nResult table:\n+----+\n| id |\n+----+\n| 2  |\n| 4  |\n+----+\n2015-01-02 的温度比前一天高（10 -&gt; 25）\n2015-01-04 的温度比前一天高（20 -&gt; 30）\n</pre> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('1970. 你能穿过矩阵的最后一天', '<p>给你一个下标从 <strong>1</strong>&nbsp;开始的二进制矩阵，其中&nbsp;<code>0</code>&nbsp;表示陆地，<code>1</code>&nbsp;表示水域。同时给你&nbsp;<code>row</code> 和&nbsp;<code>col</code>&nbsp;分别表示矩阵中行和列的数目。</p> \n<p>一开始在第&nbsp;<code>0</code>&nbsp;天，<strong>整个</strong>&nbsp;矩阵都是&nbsp;<strong>陆地</strong>&nbsp;。但每一天都会有一块新陆地被&nbsp;<strong>水</strong>&nbsp;淹没变成水域。给你一个下标从&nbsp;<strong>1</strong>&nbsp;开始的二维数组&nbsp;<code>cells</code>&nbsp;，其中&nbsp;<code>cells[i] = [r<sub>i</sub>, c<sub>i</sub>]</code>&nbsp;表示在第&nbsp;<code>i</code>&nbsp;天，第&nbsp;<code>r<sub>i</sub></code>&nbsp;行&nbsp;<code>c<sub>i</sub></code>&nbsp;列（下标都是从 <strong>1</strong>&nbsp;开始）的陆地会变成 <strong>水域</strong>&nbsp;（也就是 <code>0</code>&nbsp;变成 <code>1</code>&nbsp;）。</p> \n<p>你想知道从矩阵最 <strong>上面</strong>&nbsp;一行走到最 <strong>下面</strong>&nbsp;一行，且只经过陆地格子的 <strong>最后一天</strong>&nbsp;是哪一天。你可以从最上面一行的&nbsp;<strong>任意</strong>&nbsp;格子出发，到达最下面一行的&nbsp;<strong>任意</strong>&nbsp;格子。你只能沿着&nbsp;<strong>四个</strong>&nbsp;基本方向移动（也就是上下左右）。</p> \n<p>请返回只经过陆地格子能从最 <strong>上面</strong>&nbsp;一行走到最 <strong>下面</strong>&nbsp;一行的 <strong>最后一天</strong>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 624px; height: 162px;\" src=\"https://assets.leetcode.com/uploads/2021/07/27/1.png\" alt=\"\"> \n<pre><b>输入：</b>row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]\n<b>输出：</b>2\n<b>解释：</b>上图描述了矩阵从第 0 天开始是如何变化的。\n可以从最上面一行到最下面一行的最后一天是第 2 天。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 504px; height: 178px;\" src=\"https://assets.leetcode.com/uploads/2021/07/27/2.png\" alt=\"\"> \n<pre><b>输入：</b>row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]\n<b>输出：</b>1\n<b>解释：</b>上图描述了矩阵从第 0 天开始是如何变化的。\n可以从最上面一行到最下面一行的最后一天是第 1 天。\n</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 666px; height: 167px;\" src=\"https://assets.leetcode.com/uploads/2021/07/27/3.png\" alt=\"\"> \n<pre><b>输入：</b>row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]\n<b>输出：</b>3\n<b>解释：</b>上图描述了矩阵从第 0 天开始是如何变化的。\n可以从最上面一行到最下面一行的最后一天是第 3 天。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= row, col &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>4 &lt;= row * col &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>cells.length == row * col</code></li> \n <li><code>1 &lt;= r<sub>i</sub> &lt;= row</code></li> \n <li><code>1 &lt;= c<sub>i</sub> &lt;= col</code></li> \n <li><code>cells</code>&nbsp;中的所有格子坐标都是 <strong>唯一</strong>&nbsp;的。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1971. Find if Path Exists in Graph', '<p>There is a <strong>bi-directional</strong> graph with <code>n</code> vertices, where each vertex is labeled from <code>0</code> to <code>n - 1</code> (<strong>inclusive</strong>). The edges in the graph are represented as a 2D integer array <code>edges</code>, where each <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> denotes a bi-directional edge between vertex <code>u<sub>i</sub></code> and vertex <code>v<sub>i</sub></code>. Every vertex pair is connected by <strong>at most one</strong> edge, and no vertex has an edge to itself.</p> \n<p>You want to determine if there is a <strong>valid path</strong> that exists from vertex <code>start</code> to vertex <code>end</code>.</p> \n<p>Given <code>edges</code> and the integers <code>n</code>, <code>start</code>, and <code>end</code>, return <code>true</code><em> if there is a <strong>valid path</strong> from </em><code>start</code><em> to </em><code>end</code><em>, or </em><code>false</code><em> otherwise</em><em>.</em></p> \n<p>&nbsp;</p> \n<p><strong>Example 1:</strong></p> \n<img style=\"width: 141px; height: 121px;\" src=\"https://assets.leetcode.com/uploads/2021/08/14/validpath-ex1.png\" alt=\"\"> \n<pre><strong>Input:</strong> n = 3, edges = [[0,1],[1,2],[2,0]], start = 0, end = 2\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There are two paths from vertex 0 to vertex 2:\n- 0 → 1 → 2\n- 0 → 2\n</pre> \n<p><strong>Example 2:</strong></p> \n<img style=\"width: 281px; height: 141px;\" src=\"https://assets.leetcode.com/uploads/2021/08/14/validpath-ex2.png\" alt=\"\"> \n<pre><strong>Input:</strong> n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], start = 0, end = 5\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no path from vertex 0 to vertex 5.\n</pre> \n<p>&nbsp;</p> \n<p><strong>Constraints:</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 2 * 10<sup>5</sup></code></li> \n <li><code>0 &lt;= edges.length &lt;= 2 * 10<sup>5</sup></code></li> \n <li><code>edges[i].length == 2</code></li> \n <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li> \n <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> \n <li><code>1 &lt;= start, end &lt;= n - 1</code></li> \n <li>There are no duplicate edges.</li> \n <li>There are no self edges.</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1972. First and Last Call On the Same Day', 'English description is not available for the problem. Please switch to Chinese.');
INSERT INTO `leecode` VALUES ('1974. 使用特殊打字机键入单词的最少时间', '<p>有一个特殊打字机，它由一个 <strong>圆盘</strong> 和一个 <strong>指针</strong>&nbsp;组成， 圆盘上标有小写英文字母&nbsp;<code>\'a\'</code> 到&nbsp;<code>\'z\'</code>。<strong>只有</strong>&nbsp;当指针指向某个字母时，它才能被键入。指针 <strong>初始时</strong>&nbsp;指向字符 <code>\'a\'</code>&nbsp;。</p> \n<img style=\"width: 530px; height: 410px;\" src=\"https://assets.leetcode.com/uploads/2021/07/31/chart.jpg\" alt=\"\"> \n<p>每一秒钟，你可以执行以下操作之一：</p> \n<ul> \n <li>将指针 <strong>顺时针</strong>&nbsp;或者 <b>逆时针</b>&nbsp;移动一个字符。</li> \n <li>键入指针 <strong>当前</strong>&nbsp;指向的字符。</li> \n</ul> \n<p>给你一个字符串&nbsp;<code>word</code>&nbsp;，请你返回键入&nbsp;<code>word</code>&nbsp;所表示单词的 <b>最少</b>&nbsp;秒数&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>word = \"abc\"\n<b>输出：</b>5\n<strong>解释：\n</strong>单词按如下操作键入：\n- 花 1 秒键入字符 \'a\' in 1 ，因为指针初始指向 \'a\' ，故不需移动指针。\n- 花 1 秒将指针顺时针移到 \'b\' 。\n- 花 1 秒键入字符 \'b\' 。\n- 花 1 秒将指针顺时针移到 \'c\' 。\n- 花 1 秒键入字符 \'c\' 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>word = \"bza\"\n<b>输出：</b>7\n<strong>解释：\n</strong>单词按如下操作键入：\n- 花 1 秒将指针顺时针移到 \'b\' 。\n- 花 1 秒键入字符 \'b\' 。\n- 花 2 秒将指针逆时针移到 \'z\' 。\n- 花 1 秒键入字符 \'z\' 。\n- 花 1 秒将指针顺时针移到 \'a\' 。\n- 花 1 秒键入字符 \'a\' 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>word = \"zjpc\"\n<b>输出：</b>34\n<strong>解释：</strong>\n单词按如下操作键入：\n- 花 1 秒将指针逆时针移到 \'z\' 。\n- 花 1 秒键入字符 \'z\' 。\n- 花 10 秒将指针顺时针移到 \'j\' 。\n- 花 1 秒键入字符 \'j\' 。\n- 花 6 秒将指针顺时针移到 \'p\' 。\n- 花 1 秒键入字符 \'p\' 。\n- 花 13 秒将指针逆时针移到 \'c\' 。\n- 花 1 秒键入字符 \'c\' 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= word.length &lt;= 100</code></li> \n <li><code>word</code>&nbsp;只包含小写英文字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1975. 最大方阵和', '<p>给你一个&nbsp;<code>n x n</code>&nbsp;的整数方阵&nbsp;<code>matrix</code>&nbsp;。你可以执行以下操作&nbsp;<strong>任意次</strong>&nbsp;：</p> \n<ul> \n <li>选择&nbsp;<code>matrix</code>&nbsp;中&nbsp;<strong>相邻</strong>&nbsp;两个元素，并将它们都 <strong>乘以</strong>&nbsp;<code>-1</code>&nbsp;。</li> \n</ul> \n<p>如果两个元素有 <strong>公共边</strong>&nbsp;，那么它们就是 <strong>相邻</strong>&nbsp;的。</p> \n<p>你的目的是 <strong>最大化</strong>&nbsp;方阵元素的和。请你在执行以上操作之后，返回方阵的&nbsp;<strong>最大</strong>&nbsp;和。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 401px; height: 81px;\" src=\"https://assets.leetcode.com/uploads/2021/07/16/pc79-q2ex1.png\" alt=\"\"> \n<pre><b>输入：</b>matrix = [[1,-1],[-1,1]]\n<b>输出：</b>4\n<b>解释：</b>我们可以执行以下操作使和等于 4 ：\n- 将第一行的 2 个元素乘以 -1 。\n- 将第一列的 2 个元素乘以 -1 。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<img style=\"width: 321px; height: 121px;\" src=\"https://assets.leetcode.com/uploads/2021/07/16/pc79-q2ex2.png\" alt=\"\"> \n<pre><b>输入：</b>matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]\n<b>输出：</b>16\n<b>解释：</b>我们可以执行以下操作使和等于 16 ：\n- 将第二行的最后 2 个元素乘以 -1 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == matrix.length == matrix[i].length</code></li> \n <li><code>2 &lt;= n &lt;= 250</code></li> \n <li><code>-10<sup>5</sup> &lt;= matrix[i][j] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1976. 到达目的地的方案数', '<p>你在一个城市里，城市由 <code>n</code>&nbsp;个路口组成，路口编号为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;，某些路口之间有 <strong>双向</strong>&nbsp;道路。输入保证你可以从任意路口出发到达其他任意路口，且任意两个路口之间最多有一条路。</p> \n<p>给你一个整数&nbsp;<code>n</code>&nbsp;和二维整数数组&nbsp;<code>roads</code>&nbsp;，其中&nbsp;<code>roads[i] = [u<sub>i</sub>, v<sub>i</sub>, time<sub>i</sub>]</code>&nbsp;表示在路口&nbsp;<code>u<sub>i</sub></code>&nbsp;和&nbsp;<code>v<sub>i</sub></code>&nbsp;之间有一条需要花费&nbsp;<code>time<sub>i</sub></code>&nbsp;时间才能通过的道路。你想知道花费 <strong>最少时间</strong>&nbsp;从路口&nbsp;<code>0</code>&nbsp;出发到达路口&nbsp;<code>n - 1</code>&nbsp;的方案数。</p> \n<p>请返回花费 <strong>最少时间</strong>&nbsp;到达目的地的 <strong>路径数目</strong>&nbsp;。由于答案可能很大，将结果对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 235px; height: 381px;\" src=\"https://assets.leetcode.com/uploads/2021/07/17/graph2.png\" alt=\"\"> \n<pre><b>输入：</b>n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]\n<b>输出：</b>4\n<b>解释：</b>从路口 0 出发到路口 6 花费的最少时间是 7 分钟。\n四条花费 7 分钟的路径分别为：\n- 0 ➝ 6\n- 0 ➝ 4 ➝ 6\n- 0 ➝ 1 ➝ 2 ➝ 5 ➝ 6\n- 0 ➝ 1 ➝ 3 ➝ 5 ➝ 6\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>n = 2, roads = [[1,0,10]]\n<b>输出：</b>1\n<b>解释：</b>只有一条从路口 0 到路口 1 的路，花费 10 分钟。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 200</code></li> \n <li><code>n - 1 &lt;= roads.length &lt;= n * (n - 1) / 2</code></li> \n <li><code>roads[i].length == 3</code></li> \n <li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li> \n <li><code>1 &lt;= time<sub>i</sub> &lt;= 10<sup>9</sup></code></li> \n <li><code>u<sub>i </sub>!= v<sub>i</sub></code></li> \n <li>任意两个路口之间至多有一条路。</li> \n <li>从任意路口出发，你能够到达其他任意路口。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1977. 划分数字的方案数', '<p>你写下了若干 <strong>正整数</strong>&nbsp;，并将它们连接成了一个字符串&nbsp;<code>num</code>&nbsp;。但是你忘记给这些数字之间加逗号了。你只记得这一列数字是 <strong>非递减</strong>&nbsp;的且&nbsp;<strong>没有</strong> 任何数字有前导 0 。</p> \n<p>请你返回有多少种可能的 <strong>正整数数组</strong>&nbsp;可以得到字符串&nbsp;<code>num</code>&nbsp;。由于答案可能很大，将结果对 <code>10<sup>9</sup> + 7</code>&nbsp;<b>取余</b>&nbsp;后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>num = \"327\"\n<b>输出：</b>2\n<b>解释：</b>以下为可能的方案：\n3, 27\n327\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>num = \"094\"\n<b>输出：</b>0\n<b>解释：</b>不能有数字有前导 0 ，且所有数字均为正数。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>num = \"0\"\n<b>输出：</b>0\n<strong>解释：</strong>不能有数字有前导 0 ，且所有数字均为正数。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>num = \"9999999999999\"\n<b>输出：</b>101\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= num.length &lt;= 3500</code></li> \n <li><code>num</code>&nbsp;只含有数字&nbsp;<code>\'0\'</code> 到&nbsp;<code>\'9\'</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('1979. 找出数组的最大公约数', '<p>给你一个整数数组 <code>nums</code> ，返回数组中最大数和最小数的 <strong>最大公约数</strong> 。</p> \n<p>两个数的&nbsp;<strong>最大公约数</strong> 是能够被两个数整除的最大正整数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [2,5,6,9,10]\n<strong>输出：</strong>2\n<strong>解释：</strong>\nnums 中最小的数是 2\nnums 中最大的数是 10\n2 和 10 的最大公约数是 2\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [7,5,6,8,3]\n<strong>输出：</strong>1\n<strong>解释：</strong>\nnums 中最小的数是 3\nnums 中最大的数是 8\n3 和 8 的最大公约数是 1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [3,3]\n<strong>输出：</strong>3\n<strong>解释：</strong>\nnums 中最小的数是 3\nnums 中最大的数是 3\n3 和 3 的最大公约数是 3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= nums.length &lt;= 1000</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('198. 打家劫舍', '<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p> \n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你<strong> 不触动警报装置的情况下 </strong>，一夜之内能够偷窃到的最高金额。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1,2,3,1]\n<strong>输出：</strong>4\n<strong>解释：</strong>偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n&nbsp;    偷窃到的最高金额 = 1 + 3 = 4 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[2,7,9,3,1]\n<strong>输出：</strong>12\n<strong>解释：</strong>偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。\n&nbsp;    偷窃到的最高金额 = 2 + 9 + 1 = 12 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 100</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 400</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1980. 找出不同的二进制字符串', '<p>给你一个字符串数组 <code>nums</code> ，该数组由 <code>n</code> 个 <strong>互不相同</strong> 的二进制字符串组成，且每个字符串长度都是 <code>n</code> 。请你找出并返回一个长度为&nbsp;<code>n</code>&nbsp;且&nbsp;<strong>没有出现</strong> 在 <code>nums</code> 中的二进制字符串<em>。</em>如果存在多种答案，只需返回 <strong>任意一个</strong> 即可。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [\"01\",\"10\"]\n<strong>输出：</strong>\"11\"\n<strong>解释：</strong>\"11\" 没有出现在 nums 中。\"00\" 也是正确答案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [\"00\",\"01\"]\n<strong>输出：</strong>\"11\"\n<strong>解释：</strong>\"11\" 没有出现在 nums 中。\"10\" 也是正确答案。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [\"111\",\"011\",\"001\"]\n<strong>输出：</strong>\"101\"\n<strong>解释：</strong>\"101\" 没有出现在 nums 中。\"000\"、\"010\"、\"100\"、\"110\" 也是正确答案。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>1 &lt;= n &lt;= 16</code></li> \n <li><code>nums[i].length == n</code></li> \n <li><code>nums[i] </code>为 <code>\'0\'</code> 或 <code>\'1\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1981. 最小化目标值与所选元素的差', '<p>给你一个大小为 <code>m x n</code> 的整数矩阵 <code>mat</code> 和一个整数 <code>target</code> 。</p> \n<p>从矩阵的 <strong>每一行</strong> 中选择一个整数，你的目标是&nbsp;<strong>最小化</strong>&nbsp;所有选中元素之&nbsp;<strong>和</strong>&nbsp;与目标值 <code>target</code> 的 <strong>绝对差</strong> 。</p> \n<p>返回 <strong>最小的绝对差</strong> 。</p> \n<p><code>a</code> 和 <code>b</code> 两数字的 <strong>绝对差</strong> 是 <code>a - b</code> 的绝对值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 181px; height: 181px;\" src=\"https://assets.leetcode.com/uploads/2021/08/03/matrix1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13\n<strong>输出：</strong>0\n<strong>解释：</strong>一种可能的最优选择方案是：\n- 第一行选出 1\n- 第二行选出 5\n- 第三行选出 7\n所选元素的和是 13 ，等于目标值，所以绝对差是 0 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 61px; height: 181px;\" src=\"https://assets.leetcode.com/uploads/2021/08/03/matrix1-1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>mat = [[1],[2],[3]], target = 100\n<strong>输出：</strong>94\n<strong>解释：</strong>唯一一种选择方案是：\n- 第一行选出 1\n- 第二行选出 2\n- 第三行选出 3\n所选元素的和是 6 ，绝对差是 94 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"width: 301px; height: 61px;\" src=\"https://assets.leetcode.com/uploads/2021/08/03/matrix1-3.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>mat = [[1,2,9,8,7]], target = 6\n<strong>输出：</strong>1\n<strong>解释：</strong>最优的选择方案是选出第一行的 7 。\n绝对差是 1 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == mat.length</code></li> \n <li><code>n == mat[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 70</code></li> \n <li><code>1 &lt;= mat[i][j] &lt;= 70</code></li> \n <li><code>1 &lt;= target &lt;= 800</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('1982. 从子集的和还原数组', '<p>存在一个未知数组需要你进行还原，给你一个整数 <code>n</code> 表示该数组的长度。另给你一个数组 <code>sums</code> ，由未知数组中全部 <code>2<sup>n</sup></code> 个 <strong>子集的和</strong> 组成（子集中的元素没有特定的顺序）。</p> \n<p>返回一个长度为 <code>n</code> 的数组<em> </em><code>ans</code><em> </em>表示还原得到的未知数组。如果存在 <strong>多种</strong> 答案，只需返回其中 <strong>任意一个</strong> 。</p> \n<p>如果可以由数组 <code>arr</code> 删除部分元素（也可能不删除或全删除）得到数组 <code>sub</code> ，那么数组 <code>sub</code> 就是数组 <code>arr</code> 的一个<strong> 子集</strong> 。<code>sub</code> 的元素之和就是 <code>arr</code> 的一个 <strong>子集的和</strong> 。一个空数组的元素之和为 <code>0</code> 。</p> \n<p><strong>注意：</strong>生成的测试用例将保证至少存在一个正确答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 3, sums = [-3,-2,-1,0,0,1,2,3]\n<strong>输出：</strong>[1,2,-3]\n<strong>解释：</strong>[1,2,-3] 能够满足给出的子集的和：\n- []：和是 0\n- [1]：和是 1\n- [2]：和是 2\n- [1,2]：和是 3\n- [-3]：和是 -3\n- [1,-3]：和是 -2\n- [2,-3]：和是 -1\n- [1,2,-3]：和是 0\n注意，[1,2,-3] 的任何排列和 [-1,-2,3] 的任何排列都会被视作正确答案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2, sums = [0,0,0,0]\n<strong>输出：</strong>[0,0]\n<strong>解释：</strong>唯一的正确答案是 [0,0] 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]\n<strong>输出：</strong>[0,-1,4,5]\n<strong>解释：</strong>[0,-1,4,5] 能够满足给出的子集的和。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 15</code></li> \n <li><code>sums.length == 2<sup>n</sup></code></li> \n <li><code>-10<sup>4</sup> &lt;= sums[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('199. 二叉树的右视图', '<p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<p><img style=\"width: 270px;\" src=\"https://assets.leetcode.com/uploads/2021/02/14/tree.jpg\"></p> \n<pre><strong>输入:</strong>&nbsp;[1,2,3,null,5,null,4]\n<strong>输出:</strong>&nbsp;[1,3,4]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong>&nbsp;[1,null,3]\n<strong>输出:</strong>&nbsp;[1,3]\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong>&nbsp;[]\n<strong>输出:</strong>&nbsp;[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li>二叉树的节点个数的范围是 <code>[0,100]</code></li> \n <li><code>-100&nbsp;&lt;= Node.val &lt;= 100</code>&nbsp;</li> \n</ul>');
INSERT INTO `leecode` VALUES ('2. 两数相加', '<p>给你两个&nbsp;<strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照&nbsp;<strong>逆序</strong>&nbsp;的方式存储的，并且每个节点只能存储&nbsp;<strong>一位</strong>&nbsp;数字。</p> \n<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p> \n<p>你可以假设除了数字 0 之外，这两个数都不会以 0&nbsp;开头。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 483px; height: 342px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>l1 = [2,4,3], l2 = [5,6,4]\n<strong>输出：</strong>[7,0,8]\n<strong>解释：</strong>342 + 465 = 807.\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>l1 = [0], l2 = [0]\n<strong>输出：</strong>[0]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n<strong>输出：</strong>[8,9,9,9,0,0,0,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li> \n <li><code>0 &lt;= Node.val &lt;= 9</code></li> \n <li>题目数据保证列表表示的数字不含前导零</li> \n</ul>');
INSERT INTO `leecode` VALUES ('20. 有效的括号', '<p>给定一个只包括 <code>\'(\'</code>，<code>\')\'</code>，<code>\'{\'</code>，<code>\'}\'</code>，<code>\'[\'</code>，<code>\']\'</code>&nbsp;的字符串 <code>s</code> ，判断字符串是否有效。</p> \n<p>有效字符串需满足：</p> \n<ol> \n <li>左括号必须用相同类型的右括号闭合。</li> \n <li>左括号必须以正确的顺序闭合。</li> \n</ol> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"()\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>s = \"()[]{}\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<pre><strong>输入：</strong>s = \"(]\"\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例&nbsp;4：</strong></p> \n<pre><strong>输入：</strong>s = \"([)]\"\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例&nbsp;5：</strong></p> \n<pre><strong>输入：</strong>s = \"{[]}\"\n<strong>输出：</strong>true</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> \n <li><code>s</code> 仅由括号 <code>\'()[]{}\'</code> 组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('200. 岛屿数量', '<p>给你一个由&nbsp;<code>\'1\'</code>（陆地）和 <code>\'0\'</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p> \n<p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p> \n<p>此外，你可以假设该网格的四条边均被水包围。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 300</code></li> \n <li><code>grid[i][j]</code> 的值为 <code>\'0\'</code> 或 <code>\'1\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('201. 数字范围按位与', '<p>给你两个整数 <code>left</code> 和 <code>right</code> ，表示区间 <code>[left, right]</code> ，返回此区间内所有数字 <strong>按位与</strong> 的结果（包含 <code>left</code> 、<code>right</code> 端点）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>left = 5, right = 7\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>left = 0, right = 0\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>left = 1, right = 2147483647\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= left &lt;= right &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('202. 快乐数', '<p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p> \n<p>「快乐数」定义为：</p> \n<ul> \n <li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li> \n <li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。</li> \n <li>如果 <strong>可以变为</strong>&nbsp; 1，那么这个数就是快乐数。</li> \n</ul> \n<p>如果 <code>n</code> 是快乐数就返回 <code>true</code> ；不是，则返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>19\n<strong>输出：</strong>true\n<strong>解释：\n</strong>1<sup>2</sup> + 9<sup>2</sup> = 82\n8<sup>2</sup> + 2<sup>2</sup> = 68\n6<sup>2</sup> + 8<sup>2</sup> = 100\n1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('203. 移除链表元素', '给你一个链表的头节点 \n<code>head</code> 和一个整数 \n<code>val</code> ，请你删除链表中所有满足 \n<code>Node.val == val</code> 的节点，并返回 \n<strong>新的头节点</strong> 。 \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 500px; height: 142px;\" src=\"https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,2,6,3,4,5,6], val = 6\n<strong>输出：</strong>[1,2,3,4,5]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>head = [], val = 1\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>head = [7,7,7,7], val = 7\n<strong>输出：</strong>[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>列表中的节点数目在范围 <code>[0, 10<sup>4</sup>]</code> 内</li> \n <li><code>1 &lt;= Node.val &lt;= 50</code></li> \n <li><code>0 &lt;= val &lt;= 50</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('204. 计数质数', '<p>统计所有小于非负整数&nbsp;<em><code>n</code>&nbsp;</em>的质数的数量。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 10\n<strong>输出：</strong>4\n<strong>解释：</strong>小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 0\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出</strong>：0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= n &lt;= 5 * 10<sup>6</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('205. 同构字符串', '<p>给定两个字符串&nbsp;<em><strong>s&nbsp;</strong></em>和&nbsp;<strong><em>t</em></strong>，判断它们是否是同构的。</p> \n<p>如果&nbsp;<em><strong>s&nbsp;</strong></em>中的字符可以按某种映射关系替换得到&nbsp;<strong><em>t&nbsp;</em></strong>，那么这两个字符串是同构的。</p> \n<p>每个出现的字符都应当映射到另一个字符，同时不改变字符的顺序。不同字符不能映射到同一个字符上，相同字符只能映射到同一个字符上，字符可以映射到自己本身。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入：</strong><strong><em>s</em></strong> = <code>\"egg\", </code><strong><em>t = </em></strong><code>\"add\"</code>\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong><strong><em>s</em></strong> = <code>\"foo\", </code><strong><em>t = </em></strong><code>\"bar\"</code>\n<strong>输出：</strong>false</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong><strong><em>s</em></strong> = <code>\"paper\", </code><strong><em>t = </em></strong><code>\"title\"</code>\n<strong>输出：</strong>true</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>可以假设&nbsp;<em><strong>s&nbsp;</strong></em>和 <strong><em>t </em></strong>长度相同。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('206. 反转链表', '给你单链表的头节点 \n<code>head</code> ，请你反转链表，并返回反转后的链表。 \n<div class=\"original__bRMd\"> \n <div> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <img style=\"width: 542px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>head = [1,2,3,4,5]\n<strong>输出：</strong>[5,4,3,2,1]\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <img style=\"width: 182px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>head = [1,2]\n<strong>输出：</strong>[2,1]\n</pre> \n  <p><strong>示例 3：</strong></p> \n  <pre><strong>输入：</strong>head = []\n<strong>输出：</strong>[]\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li>链表中节点的数目范围是 <code>[0, 5000]</code></li> \n   <li><code>-5000 &lt;= Node.val &lt;= 5000</code></li> \n  </ul> \n  <p>&nbsp;</p> \n  <p><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('207. 课程表', '<p>你这个学期必须选修 <code>numCourses</code> 门课程，记为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>numCourses - 1</code> 。</p> \n<p>在选修某些课程之前需要一些先修课程。 先修课程按数组&nbsp;<code>prerequisites</code> 给出，其中&nbsp;<code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> ，表示如果要学习课程&nbsp;<code>a<sub>i</sub></code> 则 <strong>必须</strong> 先学习课程&nbsp; <code>b<sub>i</sub></code><sub> </sub>。</p> \n<ul> \n <li>例如，先修课程对&nbsp;<code>[0, 1]</code> 表示：想要学习课程 <code>0</code> ，你需要先完成课程 <code>1</code> 。</li> \n</ul> \n<p>请你判断是否可能完成所有课程的学习？如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>numCourses = 2, prerequisites = [[1,0]]\n<strong>输出：</strong>true\n<strong>解释：</strong>总共有 2 门课程。学习课程 1 之前，你需要完成课程 0 。这是可能的。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>numCourses = 2, prerequisites = [[1,0],[0,1]]\n<strong>输出：</strong>false\n<strong>解释：</strong>总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0 ；并且学习课程 0 之前，你还应先完成课程 1 。这是不可能的。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= numCourses &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= prerequisites.length &lt;= 5000</code></li> \n <li><code>prerequisites[i].length == 2</code></li> \n <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</code></li> \n <li><code>prerequisites[i]</code> 中的所有课程对 <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('208. 实现 Trie (前缀树)', '<p><strong><a href=\"https://baike.baidu.com/item/字典树/9825209?fr=aladdin\">Trie</a></strong>（发音类似 \"try\"）或者说 <strong>前缀树</strong> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p> \n<p>请你实现 Trie 类：</p> \n<ul> \n <li><code>Trie()</code> 初始化前缀树对象。</li> \n <li><code>void insert(String word)</code> 向前缀树中插入字符串 <code>word</code> 。</li> \n <li><code>boolean search(String word)</code> 如果字符串 <code>word</code> 在前缀树中，返回 <code>true</code>（即，在检索之前已经插入）；否则，返回 <code>false</code> 。</li> \n <li><code>boolean startsWith(String prefix)</code> 如果之前已经插入的字符串&nbsp;<code>word</code> 的前缀之一为 <code>prefix</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入</strong>\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n<strong>输出</strong>\n[null, null, true, false, true, null, true]\n\n<strong>解释</strong>\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // 返回 True\ntrie.search(\"app\");     // 返回 False\ntrie.startsWith(\"app\"); // 返回 True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // 返回 True\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li> \n <li><code>word</code> 和 <code>prefix</code> 仅由小写英文字母组成</li> \n <li><code>insert</code>、<code>search</code> 和 <code>startsWith</code> 调用次数 <strong>总计</strong> 不超过 <code>3 * 10<sup>4</sup></code> 次</li> \n</ul>');
INSERT INTO `leecode` VALUES ('209. 长度最小的子数组', '<p>给定一个含有&nbsp;<code>n</code><strong>&nbsp;</strong>个正整数的数组和一个正整数 <code>target</code><strong> 。</strong></p> \n<p>找出该数组中满足其和<strong> </strong><code>≥ target</code><strong> </strong>的长度最小的 <strong>连续子数组</strong>&nbsp;<code>[nums<sub>l</sub>, nums<sub>l+1</sub>, ..., nums<sub>r-1</sub>, nums<sub>r</sub>]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>target = 7, nums = [2,3,1,2,4,3]\n<strong>输出：</strong>2\n<strong>解释：</strong>子数组&nbsp;<code>[4,3]</code>&nbsp;是该条件下的长度最小的子数组。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>target = 4, nums = [1,4,4]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>target = 11, nums = [1,1,1,1,1,1,1,1]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>如果你已经实现<em> </em><code>O(n)</code> 时间复杂度的解法, 请尝试设计一个 <code>O(n log(n))</code> 时间复杂度的解法。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('21. 合并两个有序链表', '<p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。&nbsp;</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 662px; height: 302px;\" src=\"https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>l1 = [1,2,4], l2 = [1,3,4]\n<strong>输出：</strong>[1,1,2,3,4,4]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>l1 = [], l2 = []\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>l1 = [], l2 = [0]\n<strong>输出：</strong>[0]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>两个链表的节点数目范围是 <code>[0, 50]</code></li> \n <li><code>-100 &lt;= Node.val &lt;= 100</code></li> \n <li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li> \n</ul>');
INSERT INTO `leecode` VALUES ('210. 课程表 II', '<p>现在你总共有 <em>n</em> 门课需要选，记为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>。</p> \n<p>在选修某些课程之前需要一些先修课程。&nbsp;例如，想要学习课程 0 ，你需要先完成课程&nbsp;1 ，我们用一个匹配来表示他们: <code>[0,1]</code></p> \n<p>给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。</p> \n<p>可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> 2, [[1,0]] \n<strong>输出: </strong><code>[0,1]</code>\n<strong>解释:</strong>&nbsp;总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 <code>[0,1] 。</code></pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> 4, [[1,0],[2,0],[3,1],[3,2]]\n<strong>输出: </strong><code>[0,1,2,3] or [0,2,1,3]</code>\n<strong>解释:</strong>&nbsp;总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。\n&nbsp;    因此，一个正确的课程顺序是&nbsp;<code>[0,1,2,3]</code> 。另一个正确的排序是&nbsp;<code>[0,2,1,3]</code> 。\n</pre> \n<p><strong>说明:</strong></p> \n<ol> \n <li>输入的先决条件是由<strong>边缘列表</strong>表示的图形，而不是邻接矩阵。详情请参见<a href=\"http://blog.csdn.net/woaidapaopao/article/details/51732947\">图的表示法</a>。</li> \n <li>你可以假定输入的先决条件中没有重复的边。</li> \n</ol> \n<p><strong>提示:</strong></p> \n<ol> \n <li>这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。</li> \n <li><a href=\"https://www.coursera.org/specializations/algorithms\">通过 DFS 进行拓扑排序</a> - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。</li> \n <li> <p>拓扑排序也可以通过&nbsp;<a href=\"https://baike.baidu.com/item/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/5224802?fr=aladdin&amp;fromid=2148012&amp;fromtitle=%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\">BFS</a>&nbsp;完成。</p> </li> \n</ol>');
INSERT INTO `leecode` VALUES ('211. 添加与搜索单词 - 数据结构设计', '<p>请你设计一个数据结构，支持 添加新单词 和 查找字符串是否与任何先前添加的字符串匹配 。</p> \n<p>实现词典类 <code>WordDictionary</code> ：</p> \n<ul> \n <li><code>WordDictionary()</code> 初始化词典对象</li> \n <li><code>void addWord(word)</code> 将 <code>word</code> 添加到数据结构中，之后可以对它进行匹配</li> \n <li><code>bool search(word)</code> 如果数据结构中存在字符串与&nbsp;<code>word</code> 匹配，则返回 <code>true</code> ；否则，返回&nbsp; <code>false</code> 。<code>word</code> 中可能包含一些 <code>\'.\'</code> ，每个&nbsp;<code>.</code> 都可以表示任何一个字母。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\n<strong>输出：</strong>\n[null,null,null,null,false,true,true,true]\n\n<strong>解释：</strong>\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(\"bad\");\nwordDictionary.addWord(\"dad\");\nwordDictionary.addWord(\"mad\");\nwordDictionary.search(\"pad\"); // return False\nwordDictionary.search(\"bad\"); // return True\nwordDictionary.search(\".ad\"); // return True\nwordDictionary.search(\"b..\"); // return True\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= word.length &lt;= 500</code></li> \n <li><code>addWord</code> 中的 <code>word</code> 由小写英文字母组成</li> \n <li><code>search</code> 中的 <code>word</code> 由 \'.\' 或小写英文字母组成</li> \n <li>最多调用 <code>50000</code> 次 <code>addWord</code> 和 <code>search</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('212. 单词搜索 II', '<p>给定一个&nbsp;<code>m x n</code> 二维字符网格&nbsp;<code>board</code><strong>&nbsp;</strong>和一个单词（字符串）列表 <code>words</code>，找出所有同时在二维网格和字典中出现的单词。</p> \n<p>单词必须按照字母顺序，通过 <strong>相邻的单元格</strong> 内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 322px; height: 322px;\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\n<strong>输出：</strong>[\"eat\",\"oath\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 162px; height: 162px;\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\n<strong>输出：</strong>[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == board.length</code></li> \n <li><code>n == board[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 12</code></li> \n <li><code>board[i][j]</code> 是一个小写英文字母</li> \n <li><code>1 &lt;= words.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= words[i].length &lt;= 10</code></li> \n <li><code>words[i]</code> 由小写英文字母组成</li> \n <li><code>words</code> 中的所有字符串互不相同</li> \n</ul>');
INSERT INTO `leecode` VALUES ('213. 打家劫舍 II', '<p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 <strong>围成一圈</strong> ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong> 。</p> \n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>在不触动警报装置的情况下</strong> ，今晚能够偷窃到的最高金额。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>nums = [2,3,2]\n<strong>输出：</strong>3\n<strong>解释：</strong>你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,1]\n<strong>输出：</strong>4\n<strong>解释：</strong>你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。\n&nbsp;    偷窃到的最高金额 = 1 + 3 = 4 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [0]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 100</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('214. 最短回文串', '<p>给定一个字符串 <em><strong>s</strong></em>，你可以通过在字符串前面添加字符将其转换为回文串。找到并返回可以用这种方式转换的最短回文串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"aacecaaa\"\n<strong>输出：</strong>\"aaacecaaa\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abcd\"\n<strong>输出：</strong>\"dcbabcd\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> \n <li><code>s</code> 仅由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('215. 数组中的第K个最大元素', '<p>给定整数数组 <code>nums</code> 和整数 <code>k</code>，请返回数组中第 <code><strong>k</strong></code> 个最大的元素。</p> \n<p>请注意，你需要找的是数组排序后的第 <code>k</code> 个最大的元素，而不是第 <code>k</code> 个不同的元素。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> <code>[3,2,1,5,6,4] 和</code> k = 2\n<strong>输出:</strong> 5\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> <code>[3,2,3,1,2,4,5,5,6] 和</code> k = 4\n<strong>输出:</strong> 4</pre> \n<p>&nbsp;</p> \n<p><strong>提示： </strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-10<sup>4</sup>&nbsp;&lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('216. 组合总和 III', '<p>找出所有相加之和为&nbsp;<em><strong>n</strong> </em>的&nbsp;<strong><em>k&nbsp;</em></strong>个数的组合<strong><em>。</em></strong>组合中只允许含有 1 -&nbsp;9 的正整数，并且每种组合中不存在重复的数字。</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li>所有数字都是正整数。</li> \n <li>解集不能包含重复的组合。&nbsp;</li> \n</ul> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> <em><strong>k</strong></em> = 3, <em><strong>n</strong></em> = 7\n<strong>输出:</strong> [[1,2,4]]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> <em><strong>k</strong></em> = 3, <em><strong>n</strong></em> = 9\n<strong>输出:</strong> [[1,2,6], [1,3,5], [2,3,4]]\n</pre>');
INSERT INTO `leecode` VALUES ('217. 存在重复元素', '<p>给定一个整数数组，判断是否存在重复元素。</p> \n<p>如果存在一值在数组中出现至少两次，函数返回 <code>true</code> 。如果数组中每个元素都不相同，则返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [1,2,3,1]\n<strong>输出:</strong> true</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>[1,2,3,4]\n<strong>输出:</strong> false</pre> \n<p><strong>示例&nbsp;3:</strong></p> \n<pre><strong>输入: </strong>[1,1,1,3,3,4,3,2,4,2]\n<strong>输出:</strong> true</pre>');
INSERT INTO `leecode` VALUES ('218. 天际线问题', '<p>城市的天际线是从远处观看该城市中所有建筑物形成的轮廓的外部轮廓。给你所有建筑物的位置和高度，请返回由这些建筑物形成的<strong> 天际线</strong> 。</p> \n<p>每个建筑物的几何信息由数组 <code>buildings</code> 表示，其中三元组 <code>buildings[i] = [lefti, righti, heighti]</code> 表示：</p> \n<ul> \n <li><code>left<sub>i</sub></code> 是第 <code>i</code> 座建筑物左边缘的 <code>x</code> 坐标。</li> \n <li><code>right<sub>i</sub></code> 是第 <code>i</code> 座建筑物右边缘的 <code>x</code> 坐标。</li> \n <li><code>height<sub>i</sub></code> 是第 <code>i</code> 座建筑物的高度。</li> \n</ul> \n<p><strong>天际线</strong> 应该表示为由 “关键点” 组成的列表，格式 <code>[[x<sub>1</sub>,y<sub>1</sub>],[x<sub>2</sub>,y<sub>2</sub>],...]</code> ，并按 <strong>x 坐标 </strong>进行 <strong>排序</strong> 。<strong>关键点是水平线段的左端点</strong>。列表中最后一个点是最右侧建筑物的终点，<code>y</code> 坐标始终为 <code>0</code> ，仅用于标记天际线的终点。此外，任何两个相邻建筑物之间的地面都应被视为天际线轮廓的一部分。</p> \n<p><strong>注意：</strong>输出天际线中不得有连续的相同高度的水平线。例如 <code>[...[2 3], [4 5], [7 5], [11 5], [12 7]...]</code> 是不正确的答案；三条高度为 5 的线应该在最终输出中合并为一个：<code>[...[2 3], [4 5], [12 7], ...]</code></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 800px; height: 331px;\" src=\"https://assets.leetcode.com/uploads/2020/12/01/merged.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n<strong>输出：</strong>[[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\n<strong>解释：</strong>\n图 A<strong> </strong>显示输入的所有建筑物的位置和高度，\n图 B 显示由这些建筑物形成的天际线。图 B 中的红点表示输出列表中的关键点。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>buildings = [[0,2,3],[2,5,3]]\n<strong>输出：</strong>[[0,3],[5,0]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= buildings.length &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= left<sub>i</sub> &lt; right<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>1 &lt;= height<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>buildings</code> 按 <code>left<sub>i</sub></code> 非递减排序</li> \n</ul>');
INSERT INTO `leecode` VALUES ('219. 存在重复元素 II', '<p>给定一个整数数组和一个整数&nbsp;<em>k</em>，判断数组中是否存在两个不同的索引<em>&nbsp;i</em>&nbsp;和<em>&nbsp;j</em>，使得&nbsp;<strong>nums [i] = nums [j]</strong>，并且 <em>i</em> 和 <em>j</em>&nbsp;的差的 <strong>绝对值</strong> 至多为 <em>k</em>。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> nums = [1,2,3,1], k<em> </em>= 3\n<strong>输出:</strong> true</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>nums = [1,0,1,1], k<em> </em>=<em> </em>1\n<strong>输出:</strong> true</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入: </strong>nums = [1,2,3,1,2,3], k<em> </em>=<em> </em>2\n<strong>输出:</strong> false</pre>');
INSERT INTO `leecode` VALUES ('22. 括号生成', '<p>数字 <code>n</code>&nbsp;代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的 </strong>括号组合。</p> \n<p>有效括号组合需满足：左括号必须以正确的顺序闭合。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>[\"()\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 8</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('220. 存在重复元素 III', '<p>给你一个整数数组 <code>nums</code> 和两个整数&nbsp;<code>k</code> 和 <code>t</code> 。请你判断是否存在 <b>两个不同下标</b> <code>i</code> 和 <code>j</code>，使得&nbsp;<code>abs(nums[i] - nums[j]) &lt;= t</code> ，同时又满足 <code>abs(i - j) &lt;= k</code><em> </em>。</p> \n<p>如果存在则返回 <code>true</code>，不存在返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,1], k<em> </em>= 3, t = 0\n<strong>输出：</strong>true</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,0,1,1], k<em> </em>=<em> </em>1, t = 2\n<strong>输出：</strong>true</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,5,9,1,5,9], k = 2, t = 3\n<strong>输出：</strong>false</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>0 &lt;= k &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= t &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('221. 最大正方形', '<p>在一个由 <code>\'0\'</code> 和 <code>\'1\'</code> 组成的二维矩阵内，找到只包含 <code>\'1\'</code> 的最大正方形，并返回其面积。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 400px; height: 319px;\" src=\"https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 165px; height: 165px;\" src=\"https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>matrix = [[\"0\"]]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 300</code></li> \n <li><code>matrix[i][j]</code> 为 <code>\'0\'</code> 或 <code>\'1\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('222. 完全二叉树的节点个数', '<p>给你一棵<strong> 完全二叉树</strong> 的根节点 <code>root</code> ，求出该树的节点个数。</p> \n<p><a href=\"https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin\">完全二叉树</a> 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 <code>h</code> 层，则该层包含 <code>1~&nbsp;2<sup>h</sup></code>&nbsp;个节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 372px; height: 302px;\" src=\"https://assets.leetcode.com/uploads/2021/01/14/complete.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,2,3,4,5,6]\n<strong>输出：</strong>6\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = []\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [1]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点的数目范围是<code>[0, 5 * 10<sup>4</sup>]</code></li> \n <li><code>0 &lt;= Node.val &lt;= 5 * 10<sup>4</sup></code></li> \n <li>题目数据保证输入的树是 <strong>完全二叉树</strong></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>遍历树来统计节点是一种时间复杂度为 <code>O(n)</code> 的简单解决方案。你可以设计一个更快的算法吗？</p>');
INSERT INTO `leecode` VALUES ('223. 矩形面积', '<p>给你 <strong>二维</strong> 平面上两个 <strong>由直线构成的</strong> 矩形，请你计算并返回两个矩形覆盖的总面积。</p> \n<p>每个矩形由其 <strong>左下</strong> 顶点和 <strong>右上</strong> 顶点坐标表示：</p> \n<div class=\"MachineTrans-Lines\"> \n <ul> \n  <li class=\"MachineTrans-lang-zh-CN\">第一个矩形由其左下顶点 <code>(ax1, ay1)</code> 和右上顶点 <code>(ax2, ay2)</code> 定义。</li> \n  <li class=\"MachineTrans-lang-zh-CN\">第二个矩形由其左下顶点 <code>(bx1, by1)</code> 和右上顶点 <code>(bx2, by2)</code> 定义。</li> \n </ul> \n</div> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 700px; height: 365px;\" src=\"https://assets.leetcode.com/uploads/2021/05/08/rectangle-plane.png\" alt=\"Rectangle Area\"> \n<pre><strong>输入：</strong>ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\n<strong>输出：</strong>45\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\n<strong>输出：</strong>16\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>-10<sup>4</sup> &lt;= ax1, ay1, ax2, ay2, bx1, by1, bx2, by2 &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('224. 基本计算器', '<p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"1 + 1\"\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \" 2-1 + 2 \"\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"(1+(4+5+2)-3)+(6+8)\"\n<strong>输出：</strong>23\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 3&nbsp;* 10<sup>5</sup></code></li> \n <li><code>s</code> 由数字、<code>\'+\'</code>、<code>\'-\'</code>、<code>\'(\'</code>、<code>\')\'</code>、和 <code>\' \'</code> 组成</li> \n <li><code>s</code> 表示一个有效的表达式</li> \n</ul>');
INSERT INTO `leecode` VALUES ('225. 用队列实现栈', '<p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p> \n<p>实现 <code>MyStack</code> 类：</p> \n<ul> \n <li><code>void push(int x)</code> 将元素 x 压入栈顶。</li> \n <li><code>int pop()</code> 移除并返回栈顶元素。</li> \n <li><code>int top()</code> 返回栈顶元素。</li> \n <li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>注意：</strong></p> \n<ul> \n <li>你只能使用队列的基本操作 —— 也就是&nbsp;<code>push to back</code>、<code>peek/pop from front</code>、<code>size</code> 和&nbsp;<code>is empty</code>&nbsp;这些操作。</li> \n <li>你所使用的语言也许不支持队列。&nbsp;你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列&nbsp;, 只要是标准的队列操作即可。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\n<strong>输出：</strong>\n[null, null, null, 2, 2, false]\n\n<strong>解释：</strong>\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // 返回 2\nmyStack.pop(); // 返回 2\nmyStack.empty(); // 返回 False\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= x &lt;= 9</code></li> \n <li>最多调用<code>100</code> 次 <code>push</code>、<code>pop</code>、<code>top</code> 和 <code>empty</code></li> \n <li>每次调用 <code>pop</code> 和 <code>top</code> 都保证栈不为空</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你能否实现每种操作的均摊时间复杂度为 <code>O(1)</code> 的栈？换句话说，执行 <code>n</code> 个操作的总时间复杂度 <code>O(n)</code> ，尽管其中某个操作可能需要比其他操作更长的时间。你可以使用两个以上的队列。</p>');
INSERT INTO `leecode` VALUES ('226. 翻转二叉树', '<p>翻转一棵二叉树。</p> \n<p><strong>示例：</strong></p> \n<p>输入：</p> \n<pre>     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9</pre> \n<p>输出：</p> \n<pre>     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1</pre> \n<p><strong>备注:</strong><br> 这个问题是受到 <a href=\"https://twitter.com/mxcl\">Max Howell </a>的 <a href=\"https://twitter.com/mxcl/status/608682016205344768\">原问题</a> 启发的 ：</p> \n<blockquote>\n 谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。\n</blockquote>');
INSERT INTO `leecode` VALUES ('227. 基本计算器 II', '<p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值。</p> \n<p>整数除法仅保留整数部分。</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <pre><strong>输入：</strong>s = \"3+2*2\"\n<strong>输出：</strong>7\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>s = \" 3/2 \"\n<strong>输出：</strong>1\n</pre> \n  <p><strong>示例 3：</strong></p> \n  <pre><strong>输入：</strong>s = \" 3+5 / 2 \"\n<strong>输出：</strong>5\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li> \n   <li><code>s</code> 由整数和算符 <code>(\'+\', \'-\', \'*\', \'/\')</code> 组成，中间由一些空格隔开</li> \n   <li><code>s</code> 表示一个 <strong>有效表达式</strong></li> \n   <li>表达式中的所有整数都是非负整数，且在范围 <code>[0, 2<sup>31</sup> - 1]</code> 内</li> \n   <li>题目数据保证答案是一个 <strong>32-bit 整数</strong></li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('228. 汇总区间', '<p>给定一个无重复元素的有序整数数组 <code>nums</code> 。</p> \n<p>返回 <strong>恰好覆盖数组中所有数字</strong> 的 <strong>最小有序</strong> 区间范围列表。也就是说，<code>nums</code> 的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 <code>nums</code> 的数字 <code>x</code> 。</p> \n<p>列表中的每个区间范围 <code>[a,b]</code> 应该按如下格式输出：</p> \n<ul> \n <li><code>\"a-&gt;b\"</code> ，如果 <code>a != b</code></li> \n <li><code>\"a\"</code> ，如果 <code>a == b</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [0,1,2,4,5,7]\n<strong>输出：</strong>[\"0-&gt;2\",\"4-&gt;5\",\"7\"]\n<strong>解释：</strong>区间范围是：\n[0,2] --&gt; \"0-&gt;2\"\n[4,5] --&gt; \"4-&gt;5\"\n[7,7] --&gt; \"7\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,2,3,4,6,8,9]\n<strong>输出：</strong>[\"0\",\"2-&gt;4\",\"6\",\"8-&gt;9\"]\n<strong>解释：</strong>区间范围是：\n[0,0] --&gt; \"0\"\n[2,4] --&gt; \"2-&gt;4\"\n[6,6] --&gt; \"6\"\n[8,9] --&gt; \"8-&gt;9\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = []\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [-1]\n<strong>输出：</strong>[\"-1\"]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>nums = [0]\n<strong>输出：</strong>[\"0\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= nums.length &lt;= 20</code></li> \n <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>nums</code> 中的所有值都 <strong>互不相同</strong></li> \n <li><code>nums</code> 按升序排列</li> \n</ul>');
INSERT INTO `leecode` VALUES ('229. 求众数 II', '<p>给定一个大小为&nbsp;<em>n&nbsp;</em>的整数数组，找出其中所有出现超过&nbsp;<code>⌊ n/3 ⌋</code>&nbsp;次的元素。</p> \n<p><strong>进阶：</strong>尝试设计时间复杂度为 O(n)、空间复杂度为 O(1)的算法解决此问题。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>[3,2,3]\n<strong>输出：</strong>[3]</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1]\n<strong>输出：</strong>[1]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[1,1,1,3,3,2,2,2]\n<strong>输出：</strong>[1,2]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li> \n <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('23. 合并K个升序链表', '<p>给你一个链表数组，每个链表都已经按升序排列。</p> \n<p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>lists = [[1,4,5],[1,3,4],[2,6]]\n<strong>输出：</strong>[1,1,2,3,4,4,5,6]\n<strong>解释：</strong>链表数组如下：\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\n将它们合并到一个有序链表中得到。\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>lists = []\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>lists = [[]]\n<strong>输出：</strong>[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>k == lists.length</code></li> \n <li><code>0 &lt;= k &lt;= 10^4</code></li> \n <li><code>0 &lt;= lists[i].length &lt;= 500</code></li> \n <li><code>-10^4 &lt;= lists[i][j] &lt;= 10^4</code></li> \n <li><code>lists[i]</code> 按 <strong>升序</strong> 排列</li> \n <li><code>lists[i].length</code> 的总和不超过 <code>10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('230. 二叉搜索树中第K小的元素', '<p>给定一个二叉搜索树的根节点 <code>root</code> ，和一个整数 <code>k</code> ，请你设计一个算法查找其中第&nbsp;<code>k</code><strong>&nbsp;</strong>个最小元素（从 1 开始计数）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 212px; height: 301px;\" src=\"https://assets.leetcode.com/uploads/2021/01/28/kthtree1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [3,1,4,null,2], k = 1\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 382px; height: 302px;\" src=\"https://assets.leetcode.com/uploads/2021/01/28/kthtree2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [5,3,6,2,4,null,null,1], k = 3\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中的节点数为 <code>n</code> 。</li> \n <li><code>1 &lt;= k &lt;= n &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 <code>k</code> 小的值，你将如何优化算法？</p>');
INSERT INTO `leecode` VALUES ('231. 2 的幂', '<p>给你一个整数 <code>n</code>，请你判断该整数是否是 2 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>如果存在一个整数 <code>x</code> 使得&nbsp;<code>n == 2<sup>x</sup></code> ，则认为 <code>n</code> 是 2 的幂次方。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>true\n<strong>解释：</strong>2<sup>0</sup> = 1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 16\n<strong>输出：</strong>true\n<strong>解释：</strong>2<sup>4</sup> = 16\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 4\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 5\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你能够不使用循环/递归解决此问题吗？</p>');
INSERT INTO `leecode` VALUES ('232. 用栈实现队列', '<p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p> \n<p>实现 <code>MyQueue</code> 类：</p> \n<ul> \n <li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li> \n <li><code>int pop()</code> 从队列的开头移除并返回元素</li> \n <li><code>int peek()</code> 返回队列开头的元素</li> \n <li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li>你只能使用标准的栈操作 —— 也就是只有&nbsp;<code>push to top</code>,&nbsp;<code>peek/pop from top</code>,&nbsp;<code>size</code>, 和&nbsp;<code>is empty</code>&nbsp;操作是合法的。</li> \n <li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你能否实现每个操作均摊时间复杂度为 <code>O(1)</code> 的队列？换句话说，执行 <code>n</code> 个操作的总时间复杂度为 <code>O(n)</code> ，即使其中一个操作可能花费较长时间。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\n<strong>输出：</strong>\n[null, null, null, 1, 1, false]\n\n<strong>解释：</strong>\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n</pre> \n<ul> \n</ul> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= x &lt;= 9</code></li> \n <li>最多调用 <code>100</code> 次 <code>push</code>、<code>pop</code>、<code>peek</code> 和 <code>empty</code></li> \n <li>假设所有操作都是有效的 （例如，一个空的队列不会调用 <code>pop</code> 或者 <code>peek</code> 操作）</li> \n</ul>');
INSERT INTO `leecode` VALUES ('233. 数字 1 的个数', '<p>给定一个整数 <code>n</code>，计算所有小于等于 <code>n</code> 的非负整数中数字 <code>1</code> 出现的个数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 13\n<strong>输出：</strong>6\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 0\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('234. 回文链表', '<p>给你一个单链表的头节点 <code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 422px; height: 62px;\" src=\"https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,2,2,1]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 182px; height: 62px;\" src=\"https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,2]\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表中节点数目在范围<code>[1, 10<sup>5</sup>]</code> 内</li> \n <li><code>0 &lt;= Node.val &lt;= 9</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你能否用&nbsp;<code>O(n)</code> 时间复杂度和 <code>O(1)</code> 空间复杂度解决此题？</p>');
INSERT INTO `leecode` VALUES ('235. 二叉搜索树的最近公共祖先', '<p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p> \n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p> \n<p>例如，给定如下二叉搜索树:&nbsp; root =&nbsp;[6,2,8,0,4,7,9,null,null,3,5]</p> \n<p><img style=\"height: 190px; width: 200px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n<strong>输出:</strong> 6 \n<strong>解释: </strong>节点 <code>2 </code>和节点 <code>8 </code>的最近公共祖先是 <code>6。</code>\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n<strong>输出:</strong> 2\n<strong>解释: </strong>节点 <code>2</code> 和节点 <code>4</code> 的最近公共祖先是 <code>2</code>, 因为根据定义最近公共祖先节点可以为节点本身。</pre> \n<p>&nbsp;</p> \n<p><strong>说明:</strong></p> \n<ul> \n <li>所有节点的值都是唯一的。</li> \n <li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('236. 二叉树的最近公共祖先', '<p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p> \n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 200px; height: 190px;\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" alt=\"\"> \n<pre><strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n<strong>输出：</strong>3\n<strong>解释：</strong>节点 <code>5 </code>和节点 <code>1 </code>的最近公共祖先是节点 <code>3 。</code>\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 200px; height: 190px;\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" alt=\"\"> \n<pre><strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n<strong>输出：</strong>5\n<strong>解释：</strong>节点 <code>5 </code>和节点 <code>4 </code>的最近公共祖先是节点 <code>5 。</code>因为根据定义最近公共祖先节点可以为节点本身。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [1,2], p = 1, q = 2\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点数目在范围 <code>[2, 10<sup>5</sup>]</code> 内。</li> \n <li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li> \n <li>所有 <code>Node.val</code> <code>互不相同</code> 。</li> \n <li><code>p != q</code></li> \n <li><code>p</code> 和 <code>q</code> 均存在于给定的二叉树中。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('237. 删除链表中的节点', '<p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 <strong>要被删除的节点</strong> 。</p> \n<p>&nbsp;</p> \n<p>现有一个链表 --&nbsp;head =&nbsp;[4,5,1,9]，它可以表示为:</p> \n<p><img style=\"height: 49px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/237_example.png\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>head = [4,5,1,9], node = 5\n<strong>输出：</strong>[4,1,9]\n<strong>解释：</strong>给定你链表中值为&nbsp;5&nbsp;的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>head = [4,5,1,9], node = 1\n<strong>输出：</strong>[4,5,9]\n<strong>解释：</strong>给定你链表中值为&nbsp;1&nbsp;的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表至少包含两个节点。</li> \n <li>链表中所有节点的值都是唯一的。</li> \n <li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li> \n <li>不要从你的函数中返回任何结果。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('238. 除自身以外数组的乘积', '<p>给你一个长度为&nbsp;<em>n</em>&nbsp;的整数数组&nbsp;<code>nums</code>，其中&nbsp;<em>n</em> &gt; 1，返回输出数组&nbsp;<code>output</code>&nbsp;，其中 <code>output[i]</code>&nbsp;等于&nbsp;<code>nums</code>&nbsp;中除&nbsp;<code>nums[i]</code>&nbsp;之外其余各元素的乘积。</p> \n<p>&nbsp;</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> <code>[1,2,3,4]</code>\n<strong>输出:</strong> <code>[24,12,8,6]</code></pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong>题目数据保证数组之中任意元素的全部前缀元素和后缀（甚至是整个数组）的乘积都在 32 位整数范围内。</p> \n<p><strong>说明: </strong>请<strong>不要使用除法，</strong>且在&nbsp;O(<em>n</em>) 时间复杂度内完成此题。</p> \n<p><strong>进阶：</strong><br> 你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组<strong>不被视为</strong>额外空间。）</p>');
INSERT INTO `leecode` VALUES ('239. 滑动窗口最大值', '<p>给你一个整数数组 <code>nums</code>，有一个大小为&nbsp;<code>k</code><em>&nbsp;</em>的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code>&nbsp;个数字。滑动窗口每次只向右移动一位。</p> \n<p>返回滑动窗口中的最大值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>nums = [1,3,-1,-3,5,3,6,7], k = 3\n<b>输出：</b>[3,3,5,5,6,7]\n<b>解释：</b>\n滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       <strong>3</strong>\n 1 [3  -1  -3] 5  3  6  7       <strong>3</strong>\n 1  3 [-1  -3  5] 3  6  7      <strong> 5</strong>\n 1  3  -1 [-3  5  3] 6  7       <strong>5</strong>\n 1  3  -1  -3 [5  3  6] 7       <strong>6</strong>\n 1  3  -1  -3  5 [3  6  7]      <strong>7</strong>\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><b>输入：</b>nums = [1], k = 1\n<b>输出：</b>[1]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>nums = [1,-1], k = 1\n<b>输出：</b>[1,-1]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><b>输入：</b>nums = [9,11], k = 2\n<b>输出：</b>[11]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><b>输入：</b>nums = [4,-2], k = 2\n<b>输出：</b>[4]</pre> \n<p>&nbsp;</p> \n<p><b>提示：</b></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>-10<sup>4</sup>&nbsp;&lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= k &lt;= nums.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('24. 两两交换链表中的节点', '<p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p> \n<p><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 422px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,2,3,4]\n<strong>输出：</strong>[2,1,4,3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>head = []\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>head = [1]\n<strong>输出：</strong>[1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li> \n <li><code>0 &lt;= Node.val &lt;= 100</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你能在不修改链表节点值的情况下解决这个问题吗?（也就是说，仅修改节点本身。）</p>');
INSERT INTO `leecode` VALUES ('240. 搜索二维矩阵 II', '<p>编写一个高效的算法来搜索&nbsp;<code><em>m</em>&nbsp;x&nbsp;<em>n</em></code>&nbsp;矩阵 <code>matrix</code> 中的一个目标值 <code>target</code> 。该矩阵具有以下特性：</p> \n<ul> \n <li>每行的元素从左到右升序排列。</li> \n <li>每列的元素从上到下升序排列。</li> \n</ul> \n<p>&nbsp;</p> \n<p><b>示例 1：</b></p> \n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/searchgrid2.jpg\" alt=\"\"> \n<pre><b>输入：</b>matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\n<b>输出：</b>true\n</pre> \n<p><b>示例 2：</b></p> \n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/searchgrid.jpg\" alt=\"\"> \n<pre><b>输入：</b>matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\n<b>输出：</b>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= n, m &lt;= 300</code></li> \n <li><code>-10<sup>9</sup>&nbsp;&lt;= matix[i][j] &lt;= 10<sup>9</sup></code></li> \n <li>每行的所有元素从左到右升序排列</li> \n <li>每列的所有元素从上到下升序排列</li> \n <li><code>-10<sup>9</sup>&nbsp;&lt;= target &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('241. 为运算表达式设计优先级', '<p>给定一个含有数字和运算符的字符串，为表达式添加括号，改变其运算优先级以求出不同的结果。你需要给出所有可能的组合的结果。有效的运算符号包含 <code>+</code>,&nbsp;<code>-</code>&nbsp;以及&nbsp;<code>*</code>&nbsp;。</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> <code>\"2-1-1\"</code>\n<strong>输出:</strong> <code>[0, 2]</code>\n<strong>解释: </strong>\n((2-1)-1) = 0 \n(2-(1-1)) = 2</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入: </strong><code>\"2*3-4*5\"</code>\n<strong>输出:</strong> <code>[-34, -14, -10, -10, 10]</code>\n<strong>解释: \n</strong>(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10</pre>');
INSERT INTO `leecode` VALUES ('242. 有效的字母异位词', '<p>给定两个字符串 <code><em>s</em></code> 和 <code><em>t</em></code> ，编写一个函数来判断 <code><em>t</em></code> 是否是 <code><em>s</em></code> 的字母异位词。</p> \n<p><strong>注意：</strong>若&nbsp;<code><em>s</em></code> 和 <code><em>t</em></code><em>&nbsp;</em>中每个字符出现的次数都相同，则称&nbsp;<code><em>s</em></code> 和 <code><em>t</em></code><em>&nbsp;</em>互为字母异位词。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> <em>s</em> = \"anagram\", <em>t</em> = \"nagaram\"\n<strong>输出:</strong> true\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> <em>s</em> = \"rat\", <em>t</em> = \"car\"\n<strong>输出: </strong>false</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= s.length, t.length &lt;= 5 * 10<sup>4</sup></code></li> \n <li><code>s</code> 和 <code>t</code>&nbsp;仅包含小写字母</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶:&nbsp;</strong>如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p>');
INSERT INTO `leecode` VALUES ('25. K 个一组翻转链表', '<p>给你一个链表，每&nbsp;<em>k&nbsp;</em>个节点一组进行翻转，请你返回翻转后的链表。</p> \n<p><em>k&nbsp;</em>是一个正整数，它的值小于或等于链表的长度。</p> \n<p>如果节点总数不是&nbsp;<em>k&nbsp;</em>的整数倍，那么请将最后剩余的节点保持原有顺序。</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你可以设计一个只使用常数额外空间的算法来解决此问题吗？</li> \n <li><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际进行节点交换。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 542px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,2,3,4,5], k = 2\n<strong>输出：</strong>[2,1,4,3,5]\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 542px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,2,3,4,5], k = 3\n<strong>输出：</strong>[3,2,1,4,5]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>head = [1,2,3,4,5], k = 1\n<strong>输出：</strong>[1,2,3,4,5]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>head = [1], k = 1\n<strong>输出：</strong>[1]\n</pre> \n<ul> \n</ul> \n<p><strong>提示：</strong></p> \n<ul> \n <li>列表中节点的数量在范围 <code>sz</code> 内</li> \n <li><code>1 &lt;= sz &lt;= 5000</code></li> \n <li><code>0 &lt;= Node.val &lt;= 1000</code></li> \n <li><code>1 &lt;= k &lt;= sz</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('257. 二叉树的所有路径', '<p>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p> \n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong>\n\n   1\n /   \\\n2     3\n \\\n  5\n\n<strong>输出:</strong> [\"1-&gt;2-&gt;5\", \"1-&gt;3\"]\n\n<strong>解释:</strong> 所有根节点到叶子节点的路径为: 1-&gt;2-&gt;5, 1-&gt;3</pre>');
INSERT INTO `leecode` VALUES ('258. 各位相加', '<p>给定一个非负整数 <code>num</code>，反复将各个位上的数字相加，直到结果为一位数。</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> <code>38</code>\n<strong>输出:</strong> 2 \n<strong>解释: </strong>各位相加的过程为<strong>：</strong><code>3 + 8 = 11</code>, <code>1 + 1 = 2</code>。 由于&nbsp;<code>2</code> 是一位数，所以返回 2。\n</pre> \n<p><strong>进阶:</strong><br> 你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？</p>');
INSERT INTO `leecode` VALUES ('26. 删除有序数组中的重复项', '<p>给你一个有序数组 <code>nums</code> ，请你<strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\"> 原地</a></strong> 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。</p> \n<p>不要使用额外的数组空间，你必须在 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地 </a>修改输入数组 </strong>并在使用 O(1) 额外空间的条件下完成。</p> \n<p>&nbsp;</p> \n<p><strong>说明:</strong></p> \n<p>为什么返回数值是整数，但输出的答案是数组呢?</p> \n<p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p> \n<p>你可以想象内部操作如下:</p> \n<pre>// <strong>nums</strong> 是以“引用”方式传递的。也就是说，不对实参做任何拷贝\nint len = removeDuplicates(nums);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中<strong> 该长度范围内</strong> 的所有元素。\nfor (int i = 0; i &lt; len; i++) {\n&nbsp; &nbsp; print(nums[i]);\n}\n</pre> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,2]\n<strong>输出：</strong>2, nums = [1,2]\n<strong>解释：</strong>函数应该返回新的长度 <strong><code>2</code></strong> ，并且原数组 <em>nums </em>的前两个元素被修改为 <strong><code>1</code></strong>, <strong><code>2 </code></strong><code>。</code>不需要考虑数组中超出新长度后面的元素。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,0,1,1,1,2,2,3,3,4]\n<strong>输出：</strong>5, nums = [0,1,2,3,4]\n<strong>解释：</strong>函数应该返回新的长度 <strong><code>5</code></strong> ， 并且原数组 <em>nums </em>的前五个元素被修改为 <strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>2</code></strong>, <strong><code>3</code></strong>, <strong><code>4</code></strong> 。不需要考虑数组中超出新长度后面的元素。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n <li><code>nums</code> 已按升序排列</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('260. 只出现一次的数字 III', '<p>给定一个整数数组&nbsp;<code>nums</code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 <strong>任意顺序</strong> 返回答案。</p> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,1,3,2,5]\n<strong>输出：</strong>[3,5]\n<strong>解释：</strong>[5, 3] 也是有效的答案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [-1,0]\n<strong>输出：</strong>[-1,0]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [0,1]\n<strong>输出：</strong>[1,0]\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> \n <li>除两个只出现一次的整数外，<code>nums</code> 中的其他数字都出现两次</li> \n</ul>');
INSERT INTO `leecode` VALUES ('262. 行程和用户', '表：\n<code>Trips</code> \n<div class=\"original__bRMd\"> \n <div> \n  <pre>+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| Id          | int      |\n| Client_Id   | int      |\n| Driver_Id   | int      |\n| City_Id     | int      |\n| Status      | enum     |\n| Request_at  | date     |     \n+-------------+----------+\nId 是这张表的主键。\n这张表中存所有出租车的行程信息。每段行程有唯一 Id ，其中 Client_Id 和 Driver_Id 是 Users 表中 Users_Id 的外键。\nStatus 是一个表示行程状态的枚举类型，枚举成员为(‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’) 。\n</pre> \n  <p>&nbsp;</p> \n  <div class=\"original__bRMd\"> \n   <div> \n    <p>表：<code>Users</code></p> \n   </div> \n  </div> \n  <pre>+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| Users_Id    | int      |\n| Banned      | enum     |\n| Role        | enum     |\n+-------------+----------+\nUsers_Id 是这张表的主键。\n这张表中存所有用户，每个用户都有一个唯一的 Users_Id ，Role 是一个表示用户身份的枚举类型，枚举成员为 (‘client’, ‘driver’, ‘partner’) 。\nBanned 是一个表示用户是否被禁止的枚举类型，枚举成员为 (‘Yes’, ‘No’) 。\n</pre> \n  <p>&nbsp;</p> \n  <p>写一段 SQL 语句查出&nbsp;<code>\"2013-10-01\"</code><strong>&nbsp;</strong>至&nbsp;<code>\"2013-10-03\"</code><strong>&nbsp;</strong>期间非禁止用户（<strong>乘客和司机都必须未被禁止</strong>）的取消率。非禁止用户即 Banned 为 No 的用户，禁止用户即 Banned 为 Yes 的用户。</p> \n  <p><strong>取消率</strong> 的计算方式如下：(被司机或乘客取消的非禁止用户生成的订单数量) / (非禁止用户生成的订单总数)。</p> \n  <p>返回结果表中的数据可以按任意顺序组织。其中取消率 <code>Cancellation Rate</code> 需要四舍五入保留 <strong>两位小数</strong> 。</p> \n  <p>&nbsp;</p> \n  <p>查询结果格式如下例所示：</p> \n  <pre>Trips 表：\n+----+-----------+-----------+---------+---------------------+------------+\n| Id | Client_Id | Driver_Id | City_Id | Status              | Request_at |\n+----+-----------+-----------+---------+---------------------+------------+\n| 1  | 1         | 10        | 1       | completed           | 2013-10-01 |\n| 2  | 2         | 11        | 1       | cancelled_by_driver | 2013-10-01 |\n| 3  | 3         | 12        | 6       | completed           | 2013-10-01 |\n| 4  | 4         | 13        | 6       | cancelled_by_client | 2013-10-01 |\n| 5  | 1         | 10        | 1       | completed           | 2013-10-02 |\n| 6  | 2         | 11        | 6       | completed           | 2013-10-02 |\n| 7  | 3         | 12        | 6       | completed           | 2013-10-02 |\n| 8  | 2         | 12        | 12      | completed           | 2013-10-03 |\n| 9  | 3         | 10        | 12      | completed           | 2013-10-03 |\n| 10 | 4         | 13        | 12      | cancelled_by_driver | 2013-10-03 |\n+----+-----------+-----------+---------+---------------------+------------+\n\nUsers 表：\n+----------+--------+--------+\n| Users_Id | Banned | Role   |\n+----------+--------+--------+\n| 1        | No     | client |\n| 2        | Yes    | client |\n| 3        | No     | client |\n| 4        | No     | client |\n| 10       | No     | driver |\n| 11       | No     | driver |\n| 12       | No     | driver |\n| 13       | No     | driver |\n+----------+--------+--------+\n\nResult 表：\n+------------+-------------------+\n| Day        | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 | 0.33              |\n| 2013-10-02 | 0.00              |\n| 2013-10-03 | 0.50              |\n+------------+-------------------+\n\n2013-10-01：\n  - 共有 4 条请求，其中 2 条取消。\n  - 然而，Id=2 的请求是由禁止用户（User_Id=2）发出的，所以计算时应当忽略它。\n  - 因此，总共有 3 条非禁止请求参与计算，其中 1 条取消。\n  - 取消率为 (1 / 3) = 0.33\n2013-10-02：\n  - 共有 3 条请求，其中 0 条取消。\n  - 然而，Id=6 的请求是由禁止用户发出的，所以计算时应当忽略它。\n  - 因此，总共有 2 条非禁止请求参与计算，其中 0 条取消。\n  - 取消率为 (0 / 2) = 0.00\n2013-10-03：\n  - 共有 3 条请求，其中 1 条取消。\n  - 然而，Id=8 的请求是由禁止用户发出的，所以计算时应当忽略它。\n  - 因此，总共有 2 条非禁止请求参与计算，其中 1 条取消。\n  - 取消率为 (1 / 2) = 0.50\n</pre> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('263. 丑数', '<p>给你一个整数 <code>n</code> ，请你判断 <code>n</code> 是否为 <strong>丑数</strong> 。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p><strong>丑数 </strong>就是只包含质因数&nbsp;<code>2</code>、<code>3</code> 和/或&nbsp;<code>5</code>&nbsp;的正整数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 6\n<strong>输出：</strong>true\n<strong>解释：</strong>6 = 2 × 3</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 8\n<strong>输出：</strong>true\n<strong>解释：</strong>8 = 2 × 2 × 2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 14\n<strong>输出：</strong>false\n<strong>解释：</strong>14 不是丑数，因为它包含了另外一个质因数&nbsp;<code>7 </code>。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>true\n<strong>解释：</strong>1 通常被视为丑数。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('264. 丑数 II', '<p>给你一个整数 <code>n</code> ，请你找出并返回第 <code>n</code> 个 <strong>丑数</strong> 。</p> \n<p><strong>丑数 </strong>就是只包含质因数&nbsp;<code>2</code>、<code>3</code> 和/或&nbsp;<code>5</code>&nbsp;的正整数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 10\n<strong>输出：</strong>12\n<strong>解释：</strong>[1, 2, 3, 4, 5, 6, 8, 9, 10, 12] 是由前 10 个丑数组成的序列。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>1\n<strong>解释：</strong>1 通常被视为丑数。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 1690</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('268. 丢失的数字', '<p>给定一个包含 <code>[0, n]</code>&nbsp;中&nbsp;<code>n</code>&nbsp;个数的数组 <code>nums</code> ，找出 <code>[0, n]</code> 这个范围内没有出现在数组中的那个数。</p> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你能否实现线性时间复杂度、仅使用额外常数空间的算法解决此问题?</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [3,0,1]\n<strong>输出：</strong>2\n<b>解释：</b>n = 3，因为有 3 个数字，所以所有的数字都在范围 [0,3] 内。2 是丢失的数字，因为它没有出现在 nums 中。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,1]\n<strong>输出：</strong>2\n<b>解释：</b>n = 2，因为有 2 个数字，所以所有的数字都在范围 [0,2] 内。2 是丢失的数字，因为它没有出现在 nums 中。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [9,6,4,2,3,5,7,0,1]\n<strong>输出：</strong>8\n<b>解释：</b>n = 9，因为有 9 个数字，所以所有的数字都在范围 [0,9] 内。8 是丢失的数字，因为它没有出现在 nums 中。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [0]\n<strong>输出：</strong>1\n<b>解释：</b>n = 1，因为有 1 个数字，所以所有的数字都在范围 [0,1] 内。1 是丢失的数字，因为它没有出现在 nums 中。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= nums[i] &lt;= n</code></li> \n <li><code>nums</code> 中的所有数字都 <strong>独一无二</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('27. 移除元素', '<p>给你一个数组 <code>nums</code><em>&nbsp;</em>和一个值 <code>val</code>，你需要 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a></strong> 移除所有数值等于&nbsp;<code>val</code><em>&nbsp;</em>的元素，并返回移除后数组的新长度。</p> \n<p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地 </a>修改输入数组</strong>。</p> \n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p> \n<p>&nbsp;</p> \n<p><strong>说明:</strong></p> \n<p>为什么返回数值是整数，但输出的答案是数组呢?</p> \n<p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p> \n<p>你可以想象内部操作如下:</p> \n<pre>// <strong>nums</strong> 是以“引用”方式传递的。也就是说，不对实参作任何拷贝\nint len = removeElement(nums, val);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中<strong> 该长度范围内</strong> 的所有元素。\nfor (int i = 0; i &lt; len; i++) {\n&nbsp; &nbsp; print(nums[i]);\n}\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [3,2,2,3], val = 3\n<strong>输出：</strong>2, nums = [2,2]\n<strong>解释：</strong>函数应该返回新的长度 <strong>2</strong>, 并且 nums<em> </em>中的前两个元素均为 <strong>2</strong>。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,1,2,2,3,0,4,2], val = 2\n<strong>输出：</strong>5, nums = [0,1,4,0,3]\n<strong>解释：</strong>函数应该返回新的长度 <strong><code>5</code></strong>, 并且 nums 中的前五个元素为 <strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>3</code></strong>, <strong><code>0</code></strong>, <strong>4</strong>。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= nums.length &lt;= 100</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 50</code></li> \n <li><code>0 &lt;= val &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('273. 整数转换英文表示', '<p>将非负整数 <code>num</code> 转换为其对应的英文表示。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>num = 123\n<strong>输出：</strong>\"One Hundred Twenty Three\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>num = 12345\n<strong>输出：</strong>\"Twelve Thousand Three Hundred Forty Five\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>num = 1234567\n<strong>输出：</strong>\"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>num = 1234567891\n<strong>输出：</strong>\"One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('274. H 指数', '<p>给你一个整数数组 <code>citations</code> ，其中 <code>citations[i]</code> 表示研究者的第 <code>i</code> 篇论文被引用的次数。计算并返回该研究者的 <strong><code>h</code><em>&nbsp;</em>指数</strong>。</p> \n<p><a href=\"https://baike.baidu.com/item/h-index/3991452?fr=aladdin\">h 指数的定义</a>：h 代表“高引用次数”（high citations），一名科研人员的 h 指数是指他（她）的 （<code>n</code> 篇论文中）<strong>总共</strong>有 <code>h</code> 篇论文分别被引用了<strong>至少</strong> <code>h</code> 次。且其余的 <em><code>n - h</code>&nbsp;</em>篇论文每篇被引用次数&nbsp;<strong>不超过 </strong><em><code>h</code> </em>次。</p> \n<p>例如：某人的 h 指数是 20，这表示他已发表的论文中，每篇被引用了至少 20 次的论文总共有 20 篇。</p> \n<p><strong>提示：</strong>如果 <code>h</code><em> </em>有多种可能的值，<strong><code>h</code> 指数 </strong>是其中最大的那个。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong><code>citations = [3,0,6,1,5]</code>\n<strong>输出：</strong>3 \n<strong>解释：</strong>给定数组表示研究者总共有 <code>5</code> 篇论文，每篇论文相应的被引用了 <code>3, 0, 6, 1, 5</code> 次。\n&nbsp;    由于研究者有 <code>3 </code>篇论文每篇 <strong>至少 </strong>被引用了 <code>3</code> 次，其余两篇论文每篇被引用 <strong>不多于</strong> <code>3</code> 次，所以她的 <em>h </em>指数是 <code>3</code>。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>citations = [1,3,1]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == citations.length</code></li> \n <li><code>1 &lt;= n &lt;= 5000</code></li> \n <li><code>0 &lt;= citations[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('275. H 指数 II', '<p>给你一个整数数组 <code>citations</code> ，其中 <code>citations[i]</code> 表示研究者的第 <code>i</code> 篇论文被引用的次数，<code>citations</code> 已经按照&nbsp;<strong>升序排列&nbsp;</strong>。计算并返回该研究者的 <strong><code>h</code><em>&nbsp;</em>指数</strong>。</p> \n<p><a href=\"https://baike.baidu.com/item/h-index/3991452?fr=aladdin\">h 指数的定义</a>：h 代表“高引用次数”（high citations），一名科研人员的 h 指数是指他（她）的 （<code>n</code> 篇论文中）<strong>总共</strong>有 <code>h</code> 篇论文分别被引用了<strong>至少</strong> <code>h</code> 次。且其余的 <em><code>n - h</code>&nbsp;</em>篇论文每篇被引用次数&nbsp;<strong>不超过 </strong><em><code>h</code> </em>次。</p> \n<p><strong>提示：</strong>如果 <code>h</code><em> </em>有多种可能的值，<strong><code>h</code> 指数 </strong>是其中最大的那个。</p> \n<p>请你设计并实现对数时间复杂度的算法解决此问题。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入<code>：</code></strong><code>citations = [0,1,3,5,6]</code>\n<strong>输出：</strong>3 \n<strong>解释：</strong>给定数组表示研究者总共有 <code>5</code> 篇论文，每篇论文相应的被引用了 0<code>, 1, 3, 5, 6</code> 次。\n&nbsp;    由于研究者有 <code>3 </code>篇论文每篇<strong> 至少 </strong>被引用了 <code>3</code> 次，其余两篇论文每篇被引用<strong> 不多于</strong> <code>3</code> 次，所以她的<em> h </em>指数是 <code>3</code> 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>citations = [1,2,100]\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == citations.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= citations[i] &lt;= 1000</code></li> \n <li><code>citations</code> 按 <strong>升序排列</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('278. 第一个错误的版本', '<p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p> \n<p>假设你有 <code>n</code> 个版本 <code>[1, 2, ..., n]</code>，你想找出导致之后所有版本出错的第一个错误的版本。</p> \n<p>你可以通过调用&nbsp;<code>bool isBadVersion(version)</code>&nbsp;接口来判断版本号 <code>version</code> 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 5, bad = 4\n<strong>输出：</strong>4\n<strong>解释：</strong>\n<code>调用 isBadVersion(3) -&gt; false \n调用 isBadVersion(5)&nbsp;-&gt; true \n调用 isBadVersion(4)&nbsp;-&gt; true</code>\n<code>所以，4 是第一个错误的版本。</code>\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1, bad = 1\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= bad &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('279. 完全平方数', '<p>给定正整数&nbsp;<em>n</em>，找到若干个完全平方数（比如&nbsp;<code>1, 4, 9, 16, ...</code>）使得它们的和等于<em> n</em>。你需要让组成和的完全平方数的个数最少。</p> \n<p>给你一个整数 <code>n</code> ，返回和为 <code>n</code> 的完全平方数的 <strong>最少数量</strong> 。</p> \n<p><strong>完全平方数</strong> 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，<code>1</code>、<code>4</code>、<code>9</code> 和 <code>16</code> 都是完全平方数，而 <code>3</code> 和 <code>11</code> 不是。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>n = <code>12</code>\n<strong>输出：</strong>3 \n<strong>解释：</strong><code>12 = 4 + 4 + 4</code></pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = <code>13</code>\n<strong>输出：</strong>2\n<strong>解释：</strong><code>13 = 4 + 9</code></pre> &nbsp; \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('28. 实现 strStr()', '<p>实现&nbsp;<a href=\"https://baike.baidu.com/item/strstr/811469\">strStr()</a>&nbsp;函数。</p> \n<p>给你两个字符串&nbsp;<code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回&nbsp; <code>-1</code><strong> </strong>。</p> \n<p>&nbsp;</p> \n<p><strong>说明：</strong></p> \n<p>当&nbsp;<code>needle</code>&nbsp;是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p> \n<p>对于本题而言，当&nbsp;<code>needle</code>&nbsp;是空字符串时我们应当返回 0 。这与 C 语言的&nbsp;<a href=\"https://baike.baidu.com/item/strstr/811469\">strstr()</a>&nbsp;以及 Java 的&nbsp;<a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)\">indexOf()</a>&nbsp;定义相符。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>haystack = \"hello\", needle = \"ll\"\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>haystack = \"aaaaa\", needle = \"bba\"\n<strong>输出：</strong>-1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>haystack = \"\", needle = \"\"\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= haystack.length, needle.length &lt;= 5 * 10<sup>4</sup></code></li> \n <li><code>haystack</code> 和 <code>needle</code> 仅由小写英文字符组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('282. 给表达式添加运算符', '<p>给定一个仅包含数字&nbsp;<code>0-9</code>&nbsp;的字符串和一个目标值，在数字之间添加 <strong>二元 </strong>运算符（不是一元）<code>+</code>、<code>-</code>&nbsp;或&nbsp;<code>*</code>&nbsp;，返回所有能够得到目标值的表达式。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> <code><em>num</em> = </code>\"123\", <em>target</em> = 6\n<strong>输出: </strong>[\"1+2+3\", \"1*2*3\"] \n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> <code><em>num</em> = </code>\"232\", <em>target</em> = 8\n<strong>输出: </strong>[\"2*3+2\", \"2+3*2\"]</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> <code><em>num</em> = </code>\"105\", <em>target</em> = 5\n<strong>输出: </strong>[\"1*0+5\",\"10-5\"]</pre> \n<p><strong>示例&nbsp;4:</strong></p> \n<pre><strong>输入:</strong> <code><em>num</em> = </code>\"00\", <em>target</em> = 0\n<strong>输出: </strong>[\"0+0\", \"0-0\", \"0*0\"]\n</pre> \n<p><strong>示例 5:</strong></p> \n<pre><strong>输入:</strong> <code><em>num</em> = </code>\"3456237490\", <em>target</em> = 9191\n<strong>输出: </strong>[]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= num.length &lt;= 10</code></li> \n <li><code>num</code> 仅含数字</li> \n</ul>');
INSERT INTO `leecode` VALUES ('283. 移动零', '<p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> <code>[0,1,0,3,12]</code>\n<strong>输出:</strong> <code>[1,3,12,0,0]</code></pre> \n<p><strong>说明</strong>:</p> \n<ol> \n <li>必须在原数组上操作，不能拷贝额外的数组。</li> \n <li>尽量减少操作次数。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('284. 顶端迭代器', '<p>给定一个迭代器类的接口，接口包含两个方法：&nbsp;<code>next()</code>&nbsp;和&nbsp;<code>hasNext()</code>。设计并实现一个支持&nbsp;<code>peek()</code>&nbsp;操作的顶端迭代器 -- 其本质就是把原本应由&nbsp;<code>next()</code>&nbsp;方法返回的元素&nbsp;<code>peek()</code>&nbsp;出来。</p> \n<p><strong>示例:</strong></p> \n<pre>假设迭代器被初始化为列表&nbsp;<strong><code>[1,2,3]</code></strong>。\n\n调用&nbsp;<strong><code>next() </code></strong>返回 <strong>1</strong>，得到列表中的第一个元素。\n现在调用&nbsp;<strong><code>peek()</code></strong>&nbsp;返回 <strong>2</strong>，下一个元素。在此之后调用&nbsp;<strong><code>next() </code></strong>仍然返回 <strong>2</strong>。\n最后一次调用&nbsp;<strong><code>next()</code></strong>&nbsp;返回 <strong>3</strong>，末尾元素。在此之后调用&nbsp;<strong><code>hasNext()</code></strong>&nbsp;应该返回 <strong>false</strong>。\n</pre> \n<p><strong>进阶：</strong>你将如何拓展你的设计？使之变得通用化，从而适应所有的类型，而不只是整数型？</p>');
INSERT INTO `leecode` VALUES ('287. 寻找重复数', '<p>给定一个包含&nbsp;<code>n + 1</code> 个整数的数组&nbsp;<code>nums</code> ，其数字都在 <code>1</code> 到 <code>n</code><em>&nbsp;</em>之间（包括 <code>1</code> 和 <code>n</code>），可知至少存在一个重复的整数。</p> \n<p>假设 <code>nums</code> 只有 <strong>一个重复的整数</strong> ，找出 <strong>这个重复的数</strong> 。</p> \n<p>你设计的解决方案必须不修改数组 <code>nums</code> 且只用常量级 <code>O(1)</code> 的额外空间。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,3,4,2,2]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [3,1,3,4,2]\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,2]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>nums.length == n + 1</code></li> \n <li><code>1 &lt;= nums[i] &lt;= n</code></li> \n <li><code>nums</code> 中 <strong>只有一个整数</strong> 出现 <strong>两次或多次</strong> ，其余整数均只出现 <strong>一次</strong></li> \n</ul> \n<p>&nbsp;</p> \n<p><b>进阶：</b></p> \n<ul> \n <li>如何证明 <code>nums</code> 中至少存在一个重复的数字?</li> \n <li>你可以设计一个线性级时间复杂度 <code>O(n)</code> 的解决方案吗？</li> \n</ul>');
INSERT INTO `leecode` VALUES ('289. 生命游戏', '<p>根据&nbsp;<a href=\"https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin\">百度百科</a>&nbsp;，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。</p> \n<p>给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态：1 即为活细胞（live），或 0 即为死细胞（dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：</p> \n<ol> \n <li>如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；</li> \n <li>如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；</li> \n <li>如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；</li> \n <li>如果死细胞周围正好有三个活细胞，则该位置死细胞复活；</li> \n</ol> \n<p>下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。给你 <span><code>m x n</code></span> 网格面板 <code>board</code> 的当前状态，返回下一个状态。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 562px; height: 322px;\" src=\"https://assets.leetcode.com/uploads/2020/12/26/grid1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\n<strong>输出：</strong>[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 402px; height: 162px;\" src=\"https://assets.leetcode.com/uploads/2020/12/26/grid2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>board = [[1,1],[1,0]]\n<strong>输出：</strong>[[1,1],[1,1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == board.length</code></li> \n <li><code>n == board[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 25</code></li> \n <li><code>board[i][j]</code> 为 <code>0</code> 或 <code>1</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。</li> \n <li>本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？</li> \n</ul>');
INSERT INTO `leecode` VALUES ('29. 两数相除', '<p>给定两个整数，被除数&nbsp;<code>dividend</code>&nbsp;和除数&nbsp;<code>divisor</code>。将两数相除，要求不使用乘法、除法和 mod 运算符。</p> \n<p>返回被除数&nbsp;<code>dividend</code>&nbsp;除以除数&nbsp;<code>divisor</code>&nbsp;得到的商。</p> \n<p>整数除法的结果应当截去（<code>truncate</code>）其小数部分，例如：<code>truncate(8.345) = 8</code> 以及 <code>truncate(-2.7335) = -2</code></p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> dividend = 10, divisor = 3\n<strong>输出:</strong> 3\n<strong>解释: </strong>10/3 = truncate(3.33333..) = truncate(3) = 3</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> dividend = 7, divisor = -3\n<strong>输出:</strong> -2\n<strong>解释:</strong> 7/-3 = truncate(-2.33333..) = -2</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>被除数和除数均为 32 位有符号整数。</li> \n <li>除数不为&nbsp;0。</li> \n <li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>− 1]。本题中，如果除法结果溢出，则返回 2<sup>31&nbsp;</sup>− 1。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('290. 单词规律', '<p>给定一种规律 <code>pattern</code>&nbsp;和一个字符串&nbsp;<code>str</code>&nbsp;，判断 <code>str</code> 是否遵循相同的规律。</p> \n<p>这里的&nbsp;<strong>遵循&nbsp;</strong>指完全匹配，例如，&nbsp;<code>pattern</code>&nbsp;里的每个字母和字符串&nbsp;<code>str</code><strong>&nbsp;</strong>中的每个非空单词之间存在着双向连接的对应规律。</p> \n<p><strong>示例1:</strong></p> \n<pre><strong>输入:</strong> pattern = <code>\"abba\"</code>, str = <code>\"dog cat cat dog\"</code>\n<strong>输出:</strong> true</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong>pattern = <code>\"abba\"</code>, str = <code>\"dog cat cat fish\"</code>\n<strong>输出:</strong> false</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> pattern = <code>\"aaaa\"</code>, str = <code>\"dog cat cat dog\"</code>\n<strong>输出:</strong> false</pre> \n<p><strong>示例&nbsp;4:</strong></p> \n<pre><strong>输入:</strong> pattern = <code>\"abba\"</code>, str = <code>\"dog dog dog dog\"</code>\n<strong>输出:</strong> false</pre> \n<p><strong>说明:</strong><br> 你可以假设&nbsp;<code>pattern</code>&nbsp;只包含小写字母，&nbsp;<code>str</code>&nbsp;包含了由单个空格分隔的小写字母。&nbsp; &nbsp;&nbsp;</p>');
INSERT INTO `leecode` VALUES ('292. Nim 游戏', '<p>你和你的朋友，两个人一起玩&nbsp;<a href=\"https://baike.baidu.com/item/Nim游戏/6737105\">Nim 游戏</a>：</p> \n<ul> \n <li>桌子上有一堆石头。</li> \n <li>你们轮流进行自己的回合，你作为先手。</li> \n <li>每一回合，轮到的人拿掉&nbsp;1 - 3 块石头。</li> \n <li>拿掉最后一块石头的人就是获胜者。</li> \n</ul> \n<p>假设你们每一步都是最优解。请编写一个函数，来判断你是否可以在给定石头数量为 <code>n</code> 的情况下赢得游戏。如果可以赢，返回 <code>true</code>；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong><code>n = 4</code>\n<strong>输出：</strong>false \n<strong>解释：</strong>如果堆中有 4 块石头，那么你永远不会赢得比赛；\n&nbsp;    因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('295. 数据流的中位数', '<p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p> \n<p>例如，</p> \n<p>[2,3,4]&nbsp;的中位数是 3</p> \n<p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p> \n<p>设计一个支持以下两种操作的数据结构：</p> \n<ul> \n <li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li> \n <li>double findMedian() - 返回目前所有元素的中位数。</li> \n</ul> \n<p><strong>示例：</strong></p> \n<pre>addNum(1)\naddNum(2)\nfindMedian() -&gt; 1.5\naddNum(3) \nfindMedian() -&gt; 2</pre> \n<p><strong>进阶:</strong></p> \n<ol> \n <li>如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？</li> \n <li>如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？</li> \n</ol>');
INSERT INTO `leecode` VALUES ('297. 二叉树的序列化与反序列化', '<p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p> \n<p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p> \n<p><strong>提示: </strong>输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅&nbsp;<a href=\"/faq/#binary-tree\">LeetCode 序列化二叉树的格式</a>。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 442px; height: 324px;\" src=\"https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,2,3,null,null,4,5]\n<strong>输出：</strong>[1,2,3,null,null,4,5]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = []\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [1]\n<strong>输出：</strong>[1]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>root = [1,2]\n<strong>输出：</strong>[1,2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中结点数在范围 <code>[0, 10<sup>4</sup>]</code> 内</li> \n <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('299. 猜数字游戏', '<p>你在和朋友一起玩 <a href=\"https://baike.baidu.com/item/%E7%8C%9C%E6%95%B0%E5%AD%97/83200?fromtitle=Bulls+and+Cows&amp;fromid=12003488&amp;fr=aladdin\">猜数字（Bulls and Cows）</a>游戏，该游戏规则如下：</p> \n<ol> \n <li>你写出一个秘密数字，并请朋友猜这个数字是多少。</li> \n <li>朋友每猜测一次，你就会给他一个提示，告诉他的猜测数字中有多少位属于数字和确切位置都猜对了（称为“Bulls”, 公牛），有多少位属于数字猜对了但是位置不对（称为“Cows”, 奶牛）。</li> \n <li>朋友根据提示继续猜，直到猜出秘密数字。</li> \n</ol> \n<p>请写出一个根据秘密数字和朋友的猜测数返回提示的函数，返回字符串的格式为 <code>xAyB</code> ，<code>x</code> 和 <code>y</code> 都是数字，<code>A</code> 表示公牛，用&nbsp;<code>B</code>&nbsp;表示奶牛。</p> \n<ul> \n <li><code>xA</code> 表示有 <code>x</code> 位数字出现在秘密数字中，且位置都与秘密数字一致。</li> \n <li><code>yB</code> 表示有 <code>y</code> 位数字出现在秘密数字中，但位置与秘密数字不一致。</li> \n</ul> \n<p>请注意秘密数字和朋友的猜测数都可能含有重复数字，每位数字只能统计一次。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> secret = \"1807\", guess = \"7810\"\n<strong>输出:</strong> \"1A3B\"\n<strong>解释:</strong> <code>1</code>&nbsp;公牛和&nbsp;<code>3</code>&nbsp;奶牛。公牛是 <code>8</code>，奶牛是 <code>0</code>, <code>1</code>&nbsp;和 <code>7</code>。</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> secret = \"1123\", guess = \"0111\"\n<strong>输出:</strong> \"1A1B\"\n<strong>解释: </strong>朋友猜测数中的第一个 <code>1</code>&nbsp;是公牛，第二个或第三个 <code>1</code>&nbsp;可被视为奶牛。</pre> \n<p>&nbsp;</p> \n<p><strong>说明: </strong>你可以假设秘密数字和朋友的猜测数都只包含数字，并且它们的长度永远相等。</p>');
INSERT INTO `leecode` VALUES ('3. 无重复字符的最长子串', '<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的&nbsp;<strong>最长子串&nbsp;</strong>的长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入: </strong>s = \"abcabcbb\"\n<strong>输出: </strong>3 \n<strong>解释:</strong> 因为无重复字符的最长子串是 <code>\"abc\"，所以其</code>长度为 3。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>s = \"bbbbb\"\n<strong>输出: </strong>1\n<strong>解释: </strong>因为无重复字符的最长子串是 <code>\"b\"</code>，所以其长度为 1。\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入: </strong>s = \"pwwkew\"\n<strong>输出: </strong>3\n<strong>解释: </strong>因为无重复字符的最长子串是&nbsp;<code>\"wke\"</code>，所以其长度为 3。\n&nbsp;    请注意，你的答案必须是 <strong>子串 </strong>的长度，<code>\"pwke\"</code>&nbsp;是一个<em>子序列，</em>不是子串。\n</pre> \n<p><strong>示例 4:</strong></p> \n<pre><strong>输入: </strong>s = \"\"\n<strong>输出: </strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> \n <li><code>s</code>&nbsp;由英文字母、数字、符号和空格组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('30. 串联所有单词的子串', '<p>给定一个字符串&nbsp;<code>s</code><strong>&nbsp;</strong>和一些 <strong>长度相同</strong> 的单词&nbsp;<code>words</code><strong> 。</strong>找出 <code>s</code><strong> </strong>中恰好可以由&nbsp;<code>words</code><strong> </strong>中所有单词串联形成的子串的起始位置。</p> \n<p>注意子串要与&nbsp;<code>words</code><strong> </strong>中的单词完全匹配，<strong>中间不能有其他字符 </strong>，但不需要考虑&nbsp;<code>words</code><strong>&nbsp;</strong>中单词串联的顺序。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\n<strong>输出：</strong><code>[0,9]</code>\n<strong>解释：</strong>\n从索引 0 和 9 开始的子串分别是 \"barfoo\" 和 \"foobar\" 。\n输出的顺序不重要, [9,0] 也是有效答案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\n<code><strong>输出：</strong>[]</code>\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\n<strong>输出：</strong>[6,9,12]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> \n <li><code>s</code> 由小写英文字母组成</li> \n <li><code>1 &lt;= words.length &lt;= 5000</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 30</code></li> \n <li><code>words[i]</code>&nbsp;由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('300. 最长递增子序列', '<p>给你一个整数数组 <code>nums</code> ，找到其中最长严格递增子序列的长度。</p> \n<p>子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，<code>[3,6,2,7]</code> 是数组 <code>[0,3,1,6,2,2,7]</code> 的子序列。</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [10,9,2,5,3,7,101,18]\n<strong>输出：</strong>4\n<strong>解释：</strong>最长递增子序列是 [2,3,7,101]，因此长度为 4 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,1,0,3,2,3]\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [7,7,7,7,7,7,7]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 2500</code></li> \n <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><b>进阶：</b></p> \n<ul> \n <li>你可以设计时间复杂度为 <code>O(n<sup>2</sup>)</code> 的解决方案吗？</li> \n <li>你能将算法的时间复杂度降低到&nbsp;<code>O(n log(n))</code> 吗?</li> \n</ul>');
INSERT INTO `leecode` VALUES ('301. 删除无效的括号', '<p>给你一个由若干括号和字母组成的字符串 <code>s</code> ，删除最小数量的无效括号，使得输入的字符串有效。</p> \n<p>返回所有可能的结果。答案可以按 <strong>任意顺序</strong> 返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"()())()\"\n<strong>输出：</strong>[\"(())()\",\"()()()\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"(a)())()\"\n<strong>输出：</strong>[\"(a())()\",\"(a)()()\"]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \")(\"\n<strong>输出：</strong>[\"\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 25</code></li> \n <li><code>s</code> 由小写英文字母以及括号 <code>\'(\'</code> 和 <code>\')\'</code> 组成</li> \n <li><code>s</code> 中至多含 <code>20</code> 个括号</li> \n</ul>');
INSERT INTO `leecode` VALUES ('303. 区域和检索 - 数组不可变', '<p>给定一个整数数组 &nbsp;<code>nums</code>，求出数组从索引&nbsp;<code>i</code><em>&nbsp;</em>到&nbsp;<code>j</code>（<code>i&nbsp;≤&nbsp;j</code>）范围内元素的总和，包含&nbsp;<code>i</code>、<code>j&nbsp;</code>两点。</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p>实现 <code>NumArray</code> 类：</p> \n  <ul> \n   <li><code>NumArray(int[] nums)</code> 使用数组 <code>nums</code> 初始化对象</li> \n   <li><code>int sumRange(int i, int j)</code> 返回数组 <code>nums</code> 从索引&nbsp;<code>i</code><em>&nbsp;</em>到&nbsp;<code>j</code><em>（</em><code>i&nbsp;≤&nbsp;j</code>）范围内元素的总和，包含&nbsp;<code>i</code>、<code>j&nbsp;</code>两点（也就是 <code>sum(nums[i], nums[i + 1], ... , nums[j])</code>）</li> \n  </ul> \n  <p>&nbsp;</p> \n  <p><strong>示例：</strong></p> \n  <pre><strong>输入：</strong>\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\n<strong>输出：\n</strong>[null, 1, -1, -3]\n\n<strong>解释：</strong>\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return 1 ((-2) + 0 + 3)\nnumArray.sumRange(2, 5); // return -1 (3 + (-5) + 2 + (-1)) \nnumArray.sumRange(0, 5); // return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>0 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n   <li><code>-10<sup>5</sup>&nbsp;&lt;= nums[i] &lt;=&nbsp;10<sup>5</sup></code></li> \n   <li><code>0 &lt;= i &lt;= j &lt; nums.length</code></li> \n   <li>最多调用 <code>10<sup>4</sup></code> 次 <code>sumRange</code><strong> </strong>方法</li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('304. 二维区域和检索 - 矩阵不可变', '<p><big><small>给定一个二维矩阵 <code>matrix</code>，</small></big>以下类型的多个请求：</p> \n<ul> \n <li><big><small>计算其子矩形范围内元素的总和，该子矩阵的左上角为 <code>(row1,&nbsp;col1)</code> ，右下角为 <code>(row2,&nbsp;col2)</code> 。</small></big></li> \n</ul> \n<p>实现 <code>NumMatrix</code> 类：</p> \n<ul> \n <li><code>NumMatrix(int[][] matrix)</code>&nbsp;给定整数矩阵 <code>matrix</code> 进行初始化</li> \n <li><code>int sumRegion(int row1, int col1, int row2, int col2)</code>&nbsp;返回<big><small>左上角</small></big><big><small> <code>(row1,&nbsp;col1)</code>&nbsp;、右下角&nbsp;<code>(row2,&nbsp;col2)</code></small></big>&nbsp;的子矩阵的元素总和。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 200px;\" src=\"https://pic.leetcode-cn.com/1626332422-wUpUHT-image.png\"></p> \n<pre><strong>输入:</strong> \n[\"NumMatrix\",\"sumRegion\",\"sumRegion\",\"sumRegion\"]\n[[[[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]],[2,1,4,3],[1,1,2,2],[1,2,2,4]]\n<strong>输出:</strong> \n[null, 8, 11, 12]\n\n<strong>解释:</strong>\nNumMatrix numMatrix = new NumMatrix([[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (红色矩形框的元素总和)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (绿色矩形框的元素总和)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (蓝色矩形框的元素总和)\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= m,&nbsp;n &lt;=&nbsp;200</code></li> \n <li><code>-10<sup>5</sup>&nbsp;&lt;= matrix[i][j] &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= row1 &lt;= row2 &lt; m</code></li> \n <li><code>0 &lt;= col1 &lt;= col2 &lt; n</code></li> \n <li>最多调用 <code>10<sup>4</sup></code> 次&nbsp;<code>sumRegion</code> 方法</li> \n</ul>');
INSERT INTO `leecode` VALUES ('306. 累加数', '<p>累加数是一个字符串，组成它的数字可以形成累加序列。</p> \n<p>一个有效的累加序列必须<strong>至少</strong>包含 3 个数。除了最开始的两个数以外，字符串中的其他数都等于它之前两个数相加的和。</p> \n<p>给定一个只包含数字&nbsp;<code>\'0\'-\'9\'</code>&nbsp;的字符串，编写一个算法来判断给定输入是否是累加数。</p> \n<p><strong>说明:&nbsp;</strong>累加序列里的数不会以 0 开头，所以不会出现&nbsp;<code>1, 2, 03</code> 或者&nbsp;<code>1, 02, 3</code>&nbsp;的情况。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> <code>\"112358\"</code>\n<strong>输出:</strong> true \n<strong>解释: </strong>累加序列为: <code>1, 1, 2, 3, 5, 8 </code>。1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> <code>\"199100199\"</code>\n<strong>输出:</strong> true \n<strong>解释: </strong>累加序列为: <code>1, 99, 100, 199。</code>1 + 99 = 100, 99 + 100 = 199</pre> \n<p><strong>进阶:</strong><br> 你如何处理一个溢出的过大的整数输入?</p>');
INSERT INTO `leecode` VALUES ('307. 区域和检索 - 数组可修改', '<p>给你一个数组 <code>nums</code> ，请你完成两类查询，其中一类查询要求更新数组下标对应的值，另一类查询要求返回数组中某个范围内元素的总和。</p> \n<p>实现 <code>NumArray</code> 类：</p> \n<div class=\"original__bRMd\"> \n <div> \n  <ul> \n   <li><code>NumArray(int[] nums)</code> 用整数数组 <code>nums</code> 初始化对象</li> \n   <li><code>void update(int index, int val)</code> 将 <code>nums[index]</code> 的值更新为 <code>val</code></li> \n   <li><code>int sumRange(int left, int right)</code> 返回子数组 <code>nums[left, right]</code> 的总和（即，<code>nums[left] + nums[left + 1], ..., nums[right]</code>）</li> \n  </ul> \n  <p>&nbsp;</p> \n  <p><strong>示例：</strong></p> \n  <pre><strong>输入</strong>：\n[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\n<strong>输出</strong>：\n[null, 9, null, 8]\n\n<strong>解释</strong>：\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // 返回 9 ，sum([1,3,5]) = 9\nnumArray.update(1, 2);   // nums = [1,2,5]\nnumArray.sumRange(0, 2); // 返回 8 ，sum([1,2,5]) = 8\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> \n   <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> \n   <li><code>0 &lt;= index &lt; nums.length</code></li> \n   <li><code>-100 &lt;= val &lt;= 100</code></li> \n   <li><code>0 &lt;= left &lt;= right &lt; nums.length</code></li> \n   <li>最多调用 <code>3 * 10<sup>4</sup></code> 次 <code>update</code> 和 <code>sumRange</code> 方法</li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('309. 最佳买卖股票时机含冷冻期', '<p>给定一个整数数组，其中第<em>&nbsp;i</em>&nbsp;个元素代表了第&nbsp;<em>i</em>&nbsp;天的股票价格 。​</p> \n<p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p> \n<ul> \n <li>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</li> \n <li>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。</li> \n</ul> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> [1,2,3,0,2]\n<strong>输出: </strong>3 \n<strong>解释:</strong> 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]</pre>');
INSERT INTO `leecode` VALUES ('31. 下一个排列', '<p>实现获取 <strong>下一个排列</strong> 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列（即，组合出下一个更大的整数）。</p> \n<p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p> \n<p>必须<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\"> 原地 </a></strong>修改，只允许使用额外常数空间。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3]\n<strong>输出：</strong>[1,3,2]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [3,2,1]\n<strong>输出：</strong>[1,2,3]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,5]\n<strong>输出：</strong>[1,5,1]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [1]\n<strong>输出：</strong>[1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 100</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('310. 最小高度树', '<p>树是一个无向图，其中任何两个顶点只通过一条路径连接。 换句话说，一个任何没有简单环路的连通图都是一棵树。</p> \n<p>给你一棵包含&nbsp;<code>n</code>&nbsp;个节点的树，标记为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code> 。给定数字&nbsp;<code>n</code>&nbsp;和一个有 <code>n - 1</code> 条无向边的 <code>edges</code>&nbsp;列表（每一个边都是一对标签），其中 <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> 表示树中节点 <code>a<sub>i</sub></code> 和 <code>b<sub>i</sub></code> 之间存在一条无向边。</p> \n<p>可选择树中任何一个节点作为根。当选择节点 <code>x</code> 作为根节点时，设结果树的高度为 <code>h</code> 。在所有可能的树中，具有最小高度的树（即，<code>min(h)</code>）被称为 <strong>最小高度树</strong> 。</p> \n<p>请你找到所有的 <strong>最小高度树</strong> 并按 <strong>任意顺序</strong> 返回它们的根节点标签列表。</p> 树的 \n<strong>高度</strong> 是指根节点和叶子节点之间最长向下路径上边的数量。 \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 800px; height: 213px;\" src=\"https://assets.leetcode.com/uploads/2020/09/01/e1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>n = 4, edges = [[1,0],[1,2],[1,3]]\n<strong>输出：</strong>[1]\n<strong>解释：</strong>如图所示，当根是标签为 1 的节点时，树的高度是 1 ，这是唯一的最小高度树。</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 800px; height: 321px;\" src=\"https://assets.leetcode.com/uploads/2020/09/01/e2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\n<strong>输出：</strong>[3,4]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 1, edges = []\n<strong>输出：</strong>[0]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 2, edges = [[0,1]]\n<strong>输出：</strong>[0,1]\n</pre> \n<p>&nbsp;</p> \n<ul> \n</ul> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>edges.length == n - 1</code></li> \n <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li> \n <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> \n <li>所有 <code>(a<sub>i</sub>, b<sub>i</sub>)</code> 互不相同</li> \n <li>给定的输入 <strong>保证</strong> 是一棵树，并且 <strong>不会有重复的边</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('312. 戳气球', '<p>有 <code>n</code> 个气球，编号为<code>0</code> 到 <code>n - 1</code>，每个气球上都标有一个数字，这些数字存在数组&nbsp;<code>nums</code>&nbsp;中。</p> \n<p>现在要求你戳破所有的气球。戳破第 <code>i</code> 个气球，你可以获得&nbsp;<code>nums[i - 1] * nums[i] * nums[i + 1]</code> 枚硬币。&nbsp;这里的 <code>i - 1</code> 和 <code>i + 1</code> 代表和&nbsp;<code>i</code>&nbsp;相邻的两个气球的序号。如果 <code>i - 1</code>或 <code>i + 1</code> 超出了数组的边界，那么就当它是一个数字为 <code>1</code> 的气球。</p> \n<p>求所能获得硬币的最大数量。</p> \n<p>&nbsp;</p> \n<strong>示例 1：</strong> \n<pre><strong>输入：</strong>nums = [3,1,5,8]\n<strong>输出：</strong>167\n<strong>解释：</strong>\nnums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,5]\n<strong>输出：</strong>10\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>1 &lt;= n &lt;= 500</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('313. 超级丑数', '<p><strong>超级丑数</strong> 是一个正整数，并满足其所有质因数都出现在质数数组 <code>primes</code> 中。</p> \n<p>给你一个整数 <code>n</code> 和一个整数数组 <code>primes</code> ，返回第 <code>n</code> 个 <strong>超级丑数</strong> 。</p> \n<p>题目数据保证第 <code>n</code> 个 <strong>超级丑数</strong> 在 <strong>32-bit</strong> 带符号整数范围内。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 12, <code>primes</code> = <code>[2,7,13,19]</code>\n<strong>输出：</strong>32 \n<strong>解释：</strong>给定长度为 4 的质数数组 primes = [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32] 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1, primes = [2,3,5]\n<strong>输出：</strong>1\n<strong>解释：</strong>1 不含质因数，因此它的所有质因数都在质数数组 primes = [2,3,5] 中。\n</pre> &nbsp; \n<div class=\"top-view__1vxA\"> \n <div class=\"original__bRMd\"> \n  <div> \n   <p><strong>提示：</strong></p> \n   <ul> \n    <li><code>1 &lt;= n &lt;= 10<sup>6</sup></code></li> \n    <li><code>1 &lt;= primes.length &lt;= 100</code></li> \n    <li><code>2 &lt;= primes[i] &lt;= 1000</code></li> \n    <li>题目数据<strong> 保证</strong> <code>primes[i]</code> 是一个质数</li> \n    <li><code>primes</code> 中的所有值都 <strong>互不相同</strong> ，且按 <strong>递增顺序</strong> 排列</li> \n   </ul> \n  </div> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('315. 计算右侧小于当前元素的个数', '<p>给定一个整数数组 <em>nums</em>，按要求返回一个新数组&nbsp;<em>counts</em>。数组 <em>counts</em> 有该性质： <code>counts[i]</code> 的值是&nbsp; <code>nums[i]</code> 右侧小于&nbsp;<code>nums[i]</code> 的元素的数量。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>nums = [5,2,6,1]\n<strong>输出：</strong><code>[2,1,1,0] \n<strong>解释：</strong></code>\n5 的右侧有 <strong>2 </strong>个更小的元素 (2 和 1)\n2 的右侧仅有 <strong>1 </strong>个更小的元素 (1)\n6 的右侧有 <strong>1 </strong>个更小的元素 (1)\n1 的右侧有 <strong>0 </strong>个更小的元素\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= nums.length &lt;= 10^5</code></li> \n <li><code>-10^4&nbsp;&lt;= nums[i] &lt;= 10^4</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('316. 去除重复字母', '<p>给你一个字符串 <code>s</code> ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 <strong>返回结果的字典序最小</strong>（要求不能打乱其他字符的相对位置）。</p> \n<p><strong>注意：</strong>该题与 1081 <a href=\"https://leetcode-cn.com/problems/smallest-subsequence-of-distinct-characters\">https://leetcode-cn.com/problems/smallest-subsequence-of-distinct-characters</a> 相同</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong><code>s = \"bcabc\"</code>\n<strong>输出<code>：</code></strong><code>\"abc\"</code>\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong><code>s = \"cbacdcbc\"</code>\n<strong>输出：</strong><code>\"acdb\"</code></pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> \n <li><code>s</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('318. 最大单词长度乘积', '<p>给定一个字符串数组&nbsp;<code>words</code>，找到&nbsp;<code>length(word[i]) * length(word[j])</code>&nbsp;的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> <code>[\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]</code>\n<strong>输出: </strong><code>16 \n<strong>解释:</strong> 这两个单词为<strong> </strong></code><code>\"abcw\", \"xtfn\"</code>。</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> <code>[\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]</code>\n<strong>输出: </strong><code>4 \n<strong>解释: </strong></code>这两个单词为 <code>\"ab\", \"cd\"</code>。</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> <code>[\"a\",\"aa\",\"aaa\",\"aaaa\"]</code>\n<strong>输出: </strong><code>0 \n<strong>解释: </strong>不存在这样的两个单词。</code>\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= words.length &lt;= 1000</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 1000</code></li> \n <li><code>words[i]</code>&nbsp;仅包含小写字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('319. 灯泡开关', '<p>初始时有&nbsp;<code>n</code><em>&nbsp;</em>个灯泡处于关闭状态。</p> \n<p>对某个灯泡切换开关意味着：如果灯泡状态为关闭，那该灯泡就会被开启；而灯泡状态为开启，那该灯泡就会被关闭。</p> \n<p>第 1 轮，每个灯泡切换一次开关。即，打开所有的灯泡。</p> \n<p>第 2 轮，每两个灯泡切换一次开关。 即，每两个灯泡关闭一个。</p> \n<p>第 3 轮，每三个灯泡切换一次开关。</p> \n<p>第&nbsp;<code>i</code> 轮，每&nbsp;<code>i</code><em>&nbsp;</em>个灯泡切换一次开关。 而第&nbsp;<code>n</code><em>&nbsp;</em>轮，你只切换最后一个灯泡的开关。</p> \n<p>找出&nbsp;<code>n</code><em>&nbsp;</em>轮后有多少个亮着的灯泡。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 421px; height: 321px;\" src=\"https://assets.leetcode.com/uploads/2020/11/05/bulb.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>n =<strong> </strong>3\n<strong>输出：</strong>1 \n<strong>解释：</strong>\n初始时, 灯泡状态 <strong>[关闭, 关闭, 关闭]</strong>.\n第一轮后, 灯泡状态 <strong>[开启, 开启, 开启]</strong>.\n第二轮后, 灯泡状态 <strong>[开启, 关闭, 开启]</strong>.\n第三轮后, 灯泡状态 <strong>[开启, 关闭, 关闭]</strong>. \n\n你应该返回 1，因为只有一个灯泡还亮着。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 0\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('32. 最长有效括号', '<p>给你一个只包含 <code>\'(\'</code>&nbsp;和 <code>\')\'</code>&nbsp;的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p> \n<p>&nbsp;</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p><strong>示例 1：</strong></p> \n  <pre><strong>输入：</strong>s = \"(()\"\n<strong>输出：</strong>2\n<strong>解释：</strong>最长有效括号子串是 \"()\"\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>s = \")()())\"\n<strong>输出：</strong>4\n<strong>解释：</strong>最长有效括号子串是 \"()()\"\n</pre> \n  <p><strong>示例 3：</strong></p> \n  <pre><strong>输入：</strong>s = \"\"\n<strong>输出：</strong>0\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li> \n   <li><code>s[i]</code> 为 <code>\'(\'</code> 或 <code>\')\'</code></li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('321. 拼接最大数', '<p>给定长度分别为&nbsp;<code>m</code>&nbsp;和&nbsp;<code>n</code>&nbsp;的两个数组，其元素由&nbsp;<code>0-9</code>&nbsp;构成，表示两个自然数各位上的数字。现在从这两个数组中选出 <code>k (k &lt;= m + n)</code>&nbsp;个数字拼接成一个新的数，要求从同一个数组中取出的数字保持其在原数组中的相对顺序。</p> \n<p>求满足该条件的最大数。结果返回一个表示该最大数的长度为&nbsp;<code>k</code>&nbsp;的数组。</p> \n<p><strong>说明: </strong>请尽可能地优化你算法的时间和空间复杂度。</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong>\nnums1 = <code>[3, 4, 6, 5]</code>\nnums2 = <code>[9, 1, 2, 5, 8, 3]</code>\nk = <code>5</code>\n<strong>输出:</strong>\n<code>[9, 8, 6, 5, 3]</code></pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong>\nnums1 = <code>[6, 7]</code>\nnums2 = <code>[6, 0, 4]</code>\nk = <code>5</code>\n<strong>输出:</strong>\n<code>[6, 7, 6, 0, 4]</code></pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong>\nnums1 = <code>[3, 9]</code>\nnums2 = <code>[8, 9]</code>\nk = <code>3</code>\n<strong>输出:</strong>\n<code>[9, 8, 9]</code></pre>');
INSERT INTO `leecode` VALUES ('322. 零钱兑换', '<p>给你一个整数数组 <code>coins</code> ，表示不同面额的硬币；以及一个整数 <code>amount</code> ，表示总金额。</p> \n<p>计算并返回可以凑成总金额所需的 <strong>最少的硬币个数</strong> 。如果没有任何一种硬币组合能组成总金额，返回&nbsp;<code>-1</code> 。</p> \n<p>你可以认为每种硬币的数量是无限的。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>coins = <code>[1, 2, 5]</code>, amount = <code>11</code>\n<strong>输出：</strong><code>3</code> \n<strong>解释：</strong>11 = 5 + 5 + 1</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>coins = <code>[2]</code>, amount = <code>3</code>\n<strong>输出：</strong>-1</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>coins = [1], amount = 0\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>coins = [1], amount = 1\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>coins = [1], amount = 2\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= coins.length &lt;= 12</code></li> \n <li><code>1 &lt;= coins[i] &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>0 &lt;= amount &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('324. 摆动排序 II', '<p>给你一个整数数组&nbsp;<code>nums</code>，将它重新排列成&nbsp;<code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>&nbsp;的顺序。</p> \n<p>你可以假设所有输入数组都可以得到满足题目要求的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,5,1,1,6,4]\n<strong>输出：</strong>[1,6,1,5,1,4]\n<strong>解释：</strong>[1,4,1,5,1,6] 同样是符合题目要求的结果，可以被判题程序接受。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,3,2,2,3,1]\n<strong>输出：</strong>[2,3,1,3,1,2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li> \n <li><code>0 &lt;= nums[i] &lt;= 5000</code></li> \n <li>题目数据保证，对于给定的输入 <code>nums</code> ，总能产生满足题目要求的结果</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你能用&nbsp;O(n) 时间复杂度和 / 或原地 O(1) 额外空间来实现吗？</p>');
INSERT INTO `leecode` VALUES ('326. 3的幂', '<p>给定一个整数，写一个函数来判断它是否是 3&nbsp;的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>整数 <code>n</code> 是 3 的幂次方需满足：存在整数 <code>x</code> 使得 <code>n == 3<sup>x</sup></code></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 27\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 0\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 9\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 45\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你能不使用循环或者递归来完成本题吗？</li> \n</ul>');
INSERT INTO `leecode` VALUES ('327. 区间和的个数', '<p>给你一个整数数组&nbsp;<code>nums</code> 以及两个整数&nbsp;<code>lower</code> 和 <code>upper</code> 。求数组中，值位于范围 <code>[lower, upper]</code> （包含&nbsp;<code>lower</code>&nbsp;和&nbsp;<code>upper</code>）之内的 <strong>区间和的个数</strong> 。</p> \n<p><strong>区间和</strong>&nbsp;<code>S(i, j)</code>&nbsp;表示在&nbsp;<code>nums</code>&nbsp;中，位置从&nbsp;<code>i</code>&nbsp;到&nbsp;<code>j</code>&nbsp;的元素之和，包含&nbsp;<code>i</code>&nbsp;和&nbsp;<code>j</code>&nbsp;(<code>i</code> ≤ <code>j</code>)。</p> \n<p>&nbsp;</p> \n<strong>示例 1：</strong> \n<pre><strong>输入：</strong>nums = [-2,5,-1], lower = -2, upper = 2\n<strong>输出：</strong>3\n<strong>解释：</strong>存在三个区间：[0,0]、[2,2] 和 [0,2] ，对应的区间和分别是：-2 、-1 、2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0], lower = 0, upper = 0\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>-10<sup>5</sup> &lt;= lower &lt;= upper &lt;= 10<sup>5</sup></code></li> \n <li>题目数据保证答案是一个 <strong>32 位</strong> 的整数</li> \n</ul>');
INSERT INTO `leecode` VALUES ('328. 奇偶链表', '<p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</p> \n<p>请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n<strong>输出:</strong> 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL \n<strong>输出:</strong> 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</pre> \n<p><strong>说明:</strong></p> \n<ul> \n <li>应当保持奇数节点和偶数节点的相对顺序。</li> \n <li>链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('329. 矩阵中的最长递增路径', '<p>给定一个&nbsp;<code>m x n</code> 整数矩阵&nbsp;<code>matrix</code> ，找出其中 <strong>最长递增路径</strong> 的长度。</p> \n<p>对于每个单元格，你可以往上，下，左，右四个方向移动。 你 <strong>不能</strong> 在 <strong>对角线</strong> 方向上移动或移动到 <strong>边界外</strong>（即不允许环绕）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 242px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2021/01/05/grid1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[9,9,4],[6,6,8],[2,1,1]]\n<strong>输出：</strong>4 \n<strong>解释：</strong>最长递增路径为&nbsp;<code>[1, 2, 6, 9]</code>。</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 253px; height: 253px;\" src=\"https://assets.leetcode.com/uploads/2021/01/27/tmp-grid.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[3,4,5],[3,2,6],[2,2,1]]\n<strong>输出：</strong>4 \n<strong>解释：</strong>最长递增路径是&nbsp;<code>[3, 4, 5, 6]</code>。注意不允许在对角线方向上移动。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>matrix = [[1]]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 200</code></li> \n <li><code>0 &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('33. 搜索旋转排序数组', '<p>整数数组 <code>nums</code> 按升序排列，数组中的值 <strong>互不相同</strong> 。</p> \n<p>在传递给函数之前，<code>nums</code> 在预先未知的某个下标 <code>k</code>（<code>0 &lt;= k &lt; nums.length</code>）上进行了 <strong>旋转</strong>，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 <strong>从 0 开始</strong> 计数）。例如， <code>[0,1,2,4,5,6,7]</code> 在下标 <code>3</code> 处经旋转后可能变为&nbsp;<code>[4,5,6,7,0,1,2]</code> 。</p> \n<p>给你 <strong>旋转后</strong> 的数组 <code>nums</code> 和一个整数 <code>target</code> ，如果 <code>nums</code> 中存在这个目标值 <code>target</code> ，则返回它的下标，否则返回&nbsp;<code>-1</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [<code>4,5,6,7,0,1,2]</code>, target = 0\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>nums = [<code>4,5,6,7,0,1,2]</code>, target = 3\n<strong>输出：</strong>-1</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1], target = 0\n<strong>输出：</strong>-1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 5000</code></li> \n <li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li> \n <li><code>nums</code> 中的每个值都 <strong>独一无二</strong></li> \n <li>题目数据保证 <code>nums</code> 在预先未知的某个下标上进行了旋转</li> \n <li><code>-10^4 &lt;= target &lt;= 10^4</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你可以设计一个时间复杂度为 <code>O(log n)</code> 的解决方案吗？</p>');
INSERT INTO `leecode` VALUES ('330. 按要求补齐数组', '<p>给定一个已排序的正整数数组 <em>nums，</em>和一个正整数&nbsp;<em>n 。</em>从&nbsp;<code>[1, n]</code>&nbsp;区间内选取任意个数字补充到&nbsp;<em>nums&nbsp;</em>中，使得&nbsp;<code>[1, n]</code>&nbsp;区间内的任何数字都可以用&nbsp;<em>nums&nbsp;</em>中某几个数字的和来表示。请输出满足上述要求的最少需要补充的数字个数。</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入: </strong><em>nums</em> = <code>[1,3]</code>, <em>n</em> = <code>6</code>\n<strong>输出: </strong>1 \n<strong>解释:</strong>\n根据<em> nums&nbsp;</em>里现有的组合&nbsp;<code>[1], [3], [1,3]</code>，可以得出&nbsp;<code>1, 3, 4</code>。\n现在如果我们将&nbsp;<code>2</code>&nbsp;添加到&nbsp;<em>nums 中，</em>&nbsp;组合变为: <code>[1], [2], [3], [1,3], [2,3], [1,2,3]</code>。\n其和可以表示数字&nbsp;<code>1, 2, 3, 4, 5, 6</code>，能够覆盖&nbsp;<code>[1, 6]</code>&nbsp;区间里所有的数。\n所以我们最少需要添加一个数字。</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong><em>nums</em> = <code>[1,5,10]</code>, <em>n</em> = <code>20</code>\n<strong>输出:</strong> 2\n<strong>解释: </strong>我们需要添加&nbsp;<code>[2, 4]</code>。\n</pre> \n<p><strong>示例&nbsp;3:</strong></p> \n<pre><strong>输入: </strong><em>nums</em> = <code>[1,2,2]</code>, <em>n</em> = <code>5</code>\n<strong>输出:</strong> 0\n</pre>');
INSERT INTO `leecode` VALUES ('331. 验证二叉树的前序序列化', '<p>序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 <code>#</code>。</p> \n<pre>     _9_\n    /   \\\n   3     2\n  / \\   / \\\n 4   1  #  6\n/ \\ / \\   / \\\n# # # #   # #\n</pre> \n<p>例如，上面的二叉树可以被序列化为字符串 <code>\"9,3,4,#,#,1,#,#,2,#,6,#,#\"</code>，其中 <code>#</code> 代表一个空节点。</p> \n<p>给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。</p> \n<p>每个以逗号分隔的字符或为一个整数或为一个表示 <code>null</code> 指针的 <code>\'#\'</code> 。</p> \n<p>你可以认为输入格式总是有效的，例如它永远不会包含两个连续的逗号，比如&nbsp;<code>\"1,,3\"</code> 。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong><code>\"9,3,4,#,#,1,#,#,2,#,6,#,#\"</code>\n<strong>输出: </strong><code>true</code></pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入: </strong><code>\"1,#\"</code>\n<strong>输出: </strong><code>false</code>\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入: </strong><code>\"9,#,#,1\"</code>\n<strong>输出: </strong><code>false</code></pre>');
INSERT INTO `leecode` VALUES ('332. 重新安排行程', '<p>给你一份航线列表 <code>tickets</code> ，其中 <code>tickets[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> 表示飞机出发和降落的机场地点。请你对该行程进行重新规划排序。</p> \n<p>所有这些机票都属于一个从 <code>JFK</code>（肯尼迪国际机场）出发的先生，所以该行程必须从 <code>JFK</code> 开始。如果存在多种有效的行程，请你按字典排序返回最小的行程组合。</p> \n<ul> \n <li>例如，行程 <code>[\"JFK\", \"LGA\"]</code> 与 <code>[\"JFK\", \"LGB\"]</code> 相比就更小，排序更靠前。</li> \n</ul> \n<p>假定所有机票至少存在一种合理的行程。且所有的机票 必须都用一次 且 只能用一次。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 382px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2021/03/14/itinerary1-graph.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\n<strong>输出：</strong>[\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 222px; height: 230px;\" src=\"https://assets.leetcode.com/uploads/2021/03/14/itinerary2-graph.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\n<strong>输出：</strong>[\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\n<strong>解释：</strong>另一种有效的行程是 [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] ，但是它字典排序更大更靠后。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= tickets.length &lt;= 300</code></li> \n <li><code>tickets[i].length == 2</code></li> \n <li><code>from<sub>i</sub>.length == 3</code></li> \n <li><code>to<sub>i</sub>.length == 3</code></li> \n <li><code>from<sub>i</sub></code> 和 <code>to<sub>i</sub></code> 由大写英文字母组成</li> \n <li><code>from<sub>i</sub> != to<sub>i</sub></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('334. 递增的三元子序列', '<p>给你一个整数数组&nbsp;<code>nums</code> ，判断这个数组中是否存在长度为 <code>3</code> 的递增子序列。</p> \n<p>如果存在这样的三元组下标 <code>(i, j, k)</code>&nbsp;且满足 <code>i &lt; j &lt; k</code> ，使得&nbsp;<code>nums[i] &lt; nums[j] &lt; nums[k]</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4,5]\n<strong>输出：</strong>true\n<strong>解释：</strong>任何 i &lt; j &lt; k 的三元组都满足题意\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [5,4,3,2,1]\n<strong>输出：</strong>false\n<strong>解释：</strong>不存在满足题意的三元组</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [2,1,5,0,4,6]\n<strong>输出：</strong>true\n<strong>解释：</strong>三元组 (3, 4, 5) 满足题意，因为 nums[3] == 0 &lt; nums[4] == 4 &lt; nums[5] == 6\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你能实现时间复杂度为 <code>O(n)</code> ，空间复杂度为 <code>O(1)</code> 的解决方案吗？</p>');
INSERT INTO `leecode` VALUES ('335. 路径交叉', '<p>给定一个含有&nbsp;<code>n</code>&nbsp;个正数的数组&nbsp;<em>x</em>。从点&nbsp;<code>(0,0)</code>&nbsp;开始，先向北移动&nbsp;<code>x[0]</code>&nbsp;米，然后向西移动&nbsp;<code>x[1]</code>&nbsp;米，向南移动&nbsp;<code>x[2]</code>&nbsp;米，向东移动&nbsp;<code>x[3]</code>&nbsp;米，持续移动。也就是说，每次移动后你的方位会发生逆时针变化。</p> \n<p>编写一个&nbsp;<code>O(1)</code>&nbsp;空间复杂度的一趟扫描算法，判断你所经过的路径是否相交。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>┌───┐\n│ &nbsp; │\n└───┼──&gt;\n&nbsp; &nbsp; │\n\n输入: </strong><code>[2,1,1,2]</code>\n<strong>输出:</strong> true \n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>┌──────┐\n│ &nbsp; &nbsp; &nbsp;│\n│\n│\n└────────────&gt;\n\n输入: </strong><code>[1,2,3,4]</code>\n<strong>输出: </strong>false \n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>┌───┐\n│ &nbsp; │\n└───┼&gt;\n\n输入:</strong> <code>[1,1,1,1]</code>\n<strong>输出:</strong> true \n</pre>');
INSERT INTO `leecode` VALUES ('336. 回文对', '<p>给定一组<strong> 互不相同</strong> 的单词， 找出所有<strong> 不同<em>&nbsp;</em></strong>的索引对 <code>(i, j)</code>，使得列表中的两个单词，&nbsp;<code>words[i] + words[j]</code>&nbsp;，可拼接成回文串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\n<strong>输出：</strong>[[0,1],[1,0],[3,2],[2,4]] \n<strong>解释：</strong>可拼接成的回文串为 <code>[\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"]</code>\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>words = [\"bat\",\"tab\",\"cat\"]\n<strong>输出：</strong>[[0,1],[1,0]] \n<strong>解释：</strong>可拼接成的回文串为 <code>[\"battab\",\"tabbat\"]</code></pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>words = [\"a\",\"\"]\n<strong>输出：</strong>[[0,1],[1,0]]\n</pre> &nbsp; \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 5000</code></li> \n <li><code>0 &lt;= words[i].length &lt;= 300</code></li> \n <li><code>words[i]</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('337. 打家劫舍 III', '<p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p> \n<p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>[3,2,3,null,3,null,1]\n\n     <strong>3</strong>\n    / \\\n   2   3\n    \\   \\ \n     <strong>3</strong>   <strong>1</strong>\n\n<strong>输出:</strong> 7 \n<strong>解释:</strong>&nbsp;小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = <strong>7</strong>.</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>[3,4,5,1,3,null,1]\n\n&nbsp;    3\n    / \\\n   <strong>4</strong>   <strong>5</strong>\n  / \\   \\ \n 1   3   1\n\n<strong>输出:</strong> 9\n<strong>解释:</strong>&nbsp;小偷一晚能够盗取的最高金额&nbsp;= <strong>4</strong> + <strong>5</strong> = <strong>9</strong>.\n</pre>');
INSERT INTO `leecode` VALUES ('338. 比特位计数', '<p>给定一个非负整数&nbsp;<strong>num</strong>。对于&nbsp;<strong>0 ≤ i ≤ num </strong>范围中的每个数字&nbsp;<strong>i&nbsp;</strong>，计算其二进制数中的 1 的数目并将它们作为数组返回。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>2\n<strong>输出: </strong>[0,1,1]</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入: </strong>5\n<strong>输出: </strong><code>[0,1,1,2,1,2]</code></pre> \n<p><strong>进阶:</strong></p> \n<ul> \n <li>给出时间复杂度为<strong>O(n*sizeof(integer))</strong>的解答非常容易。但你可以在线性时间<strong>O(n)</strong>内用一趟扫描做到吗？</li> \n <li>要求算法的空间复杂度为<strong>O(n)</strong>。</li> \n <li>你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的&nbsp;<strong>__builtin_popcount</strong>）来执行此操作。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('34. 在排序数组中查找元素的第一个和最后一个位置', '<p>给定一个按照升序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。找出给定目标值在数组中的开始位置和结束位置。</p> \n<p>如果数组中不存在目标值 <code>target</code>，返回&nbsp;<code>[-1, -1]</code>。</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你可以设计并实现时间复杂度为&nbsp;<code>O(log n)</code>&nbsp;的算法解决此问题吗？</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [<code>5,7,7,8,8,10]</code>, target = 8\n<strong>输出：</strong>[3,4]</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>nums = [<code>5,7,7,8,8,10]</code>, target = 6\n<strong>输出：</strong>[-1,-1]</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [], target = 0\n<strong>输出：</strong>[-1,-1]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>-10<sup>9</sup>&nbsp;&lt;= nums[i]&nbsp;&lt;= 10<sup>9</sup></code></li> \n <li><code>nums</code>&nbsp;是一个非递减数组</li> \n <li><code>-10<sup>9</sup>&nbsp;&lt;= target&nbsp;&lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('341. 扁平化嵌套列表迭代器', '<p>给你一个嵌套的整数列表 <code>nestedList</code> 。每个元素要么是一个整数，要么是一个列表；该列表的元素也可能是整数或者是其他列表。请你实现一个迭代器将其扁平化，使之能够遍历这个列表中的所有整数。</p> \n<p>实现扁平迭代器类 <code>NestedIterator</code> ：</p> \n<ul> \n <li><code>NestedIterator(List&lt;NestedInteger&gt; nestedList)</code> 用嵌套列表 <code>nestedList</code> 初始化迭代器。</li> \n <li><code>int next()</code> 返回嵌套列表的下一个整数。</li> \n <li><code>boolean hasNext()</code> 如果仍然存在待迭代的整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li> \n</ul> \n<p>你的代码将会用下述伪代码检测：</p> \n<pre>initialize iterator with nestedList\nres = []\nwhile iterator.hasNext()\n    append iterator.next() to the end of res\nreturn res</pre> \n<p>如果 <code>res</code> 与预期的扁平化列表匹配，那么你的代码将会被判为正确。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nestedList = [[1,1],2,[1,1]]\n<strong>输出：</strong>[1,1,2,1,1]\n<strong>解释：</strong>通过重复调用&nbsp;<em>next </em>直到&nbsp;<em>hasNex</em>t 返回 false，<em>next&nbsp;</em>返回的元素的顺序应该是: <code>[1,1,2,1,1]</code>。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nestedList = [1,[4,[6]]]\n<strong>输出：</strong>[1,4,6]\n<strong>解释：</strong>通过重复调用&nbsp;<em>next&nbsp;</em>直到&nbsp;<em>hasNex</em>t 返回 false，<em>next&nbsp;</em>返回的元素的顺序应该是: <code>[1,4,6]</code>。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nestedList.length &lt;= 500</code></li> \n <li>嵌套列表中的整数值在范围 <code>[-10<sup>6</sup>, 10<sup>6</sup>]</code> 内</li> \n</ul>');
INSERT INTO `leecode` VALUES ('342. 4的幂', '<p>给定一个整数，写一个函数来判断它是否是 4 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>整数 <code>n</code> 是 4 的幂次方需满足：存在整数 <code>x</code> 使得 <code>n == 4<sup>x</sup></code></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 16\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 5\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你能不使用循环或者递归来完成本题吗？</li> \n</ul>');
INSERT INTO `leecode` VALUES ('343. 整数拆分', '<p>给定一个正整数&nbsp;<em>n</em>，将其拆分为<strong>至少</strong>两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>2\n<strong>输出: </strong>1\n<strong>解释: </strong>2 = 1 + 1, 1 × 1 = 1。</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入: </strong>10\n<strong>输出: </strong>36\n<strong>解释: </strong>10 = 3 + 3 + 4, 3 ×&nbsp;3 ×&nbsp;4 = 36。</pre> \n<p><strong>说明: </strong>你可以假设&nbsp;<em>n&nbsp;</em>不小于 2 且不大于 58。</p>');
INSERT INTO `leecode` VALUES ('344. 反转字符串', '<p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>char[]</code> 的形式给出。</p> \n<p>不要给另外的数组分配额外的空间，你必须<strong><a href=\"https://baike.baidu.com/item/原地算法\">原地</a>修改输入数组</strong>、使用 O(1) 的额外空间解决这一问题。</p> \n<p>你可以假设数组中的所有字符都是 <a href=\"https://baike.baidu.com/item/ASCII\">ASCII</a> 码表中的可打印字符。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[\"h\",\"e\",\"l\",\"l\",\"o\"]\n<strong>输出：</strong>[\"o\",\"l\",\"l\",\"e\",\"h\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n<strong>输出：</strong>[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]</pre>');
INSERT INTO `leecode` VALUES ('345. 反转字符串中的元音字母', '<p>给你一个字符串 <code>s</code> ，仅反转字符串中的所有元音字母，并返回结果字符串。</p> \n<p>元音字母包括 <code>\'a\'</code>、<code>\'e\'</code>、<code>\'i\'</code>、<code>\'o\'</code>、<code>\'u\'</code>，且可能以大小写两种形式出现。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"hello\"\n<strong>输出：</strong>\"holle\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"leetcode\"\n<strong>输出：</strong>\"leotcede\"</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li> \n <li><code>s</code> 由 <strong>可打印的 ASCII</strong> 字符组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('347. 前 K 个高频元素', '<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按 <strong>任意顺序</strong> 返回答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>nums = [1,1,1,2,2,3], k = 2\n<strong>输出: </strong>[1,2]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>nums = [1], k = 1\n<strong>输出: </strong>[1]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>k</code> 的取值范围是 <code>[1, 数组中不相同的元素的个数]</code></li> \n <li>题目数据保证答案唯一，换句话说，数组中前 <code>k</code> 个高频元素的集合是唯一的</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你所设计算法的时间复杂度 <strong>必须</strong> 优于 <code>O(n log n)</code> ，其中 <code>n</code><em>&nbsp;</em>是数组大小。</p>');
INSERT INTO `leecode` VALUES ('349. 两个数组的交集', '<p>给定两个数组，编写一个函数来计算它们的交集。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>输出：</strong>[2]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>输出：</strong>[9,4]</pre> \n<p>&nbsp;</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li>输出结果中的每个元素一定是唯一的。</li> \n <li>我们可以不考虑输出结果的顺序。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('35. 搜索插入位置', '<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p> \n<p>请必须使用时间复杂度为 <code>O(log n)</code> 的算法。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums = [1,3,5,6], target = 5\n<strong>输出:</strong> 2\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> nums = [1,3,5,6], target = 2\n<strong>输出:</strong> 1\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> nums = [1,3,5,6], target = 7\n<strong>输出:</strong> 4\n</pre> \n<p><strong>示例 4:</strong></p> \n<pre><strong>输入:</strong> nums = [1,3,5,6], target = 0\n<strong>输出:</strong> 0\n</pre> \n<p><strong>示例 5:</strong></p> \n<pre><strong>输入:</strong> nums = [1], target = 0\n<strong>输出:</strong> 0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n <li><code>nums</code> 为<strong>无重复元素</strong>的<strong>升序</strong>排列数组</li> \n <li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('350. 两个数组的交集 II', '<p>给定两个数组，编写一个函数来计算它们的交集。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>输出：</strong>[2,2]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入：</strong>nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>输出：</strong>[4,9]</pre> \n<p>&nbsp;</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li>输出结果中每个元素出现的次数，应与元素在两个数组中出现次数的最小值一致。</li> \n <li>我们可以不考虑输出结果的顺序。</li> \n</ul> \n<p><strong><strong>进阶</strong>：</strong></p> \n<ul> \n <li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li> \n <li>如果&nbsp;<em>nums1&nbsp;</em>的大小比&nbsp;<em>nums2&nbsp;</em>小很多，哪种方法更优？</li> \n <li>如果&nbsp;<em>nums2&nbsp;</em>的元素存储在磁盘上，内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li> \n</ul>');
INSERT INTO `leecode` VALUES ('352. 将数据流变为多个不相交区间', '<p>给定一个非负整数的数据流输入 a<sub>1</sub>，a<sub>2</sub>，…，a<sub>n，</sub>…，将到目前为止看到的数字总结为不相交的区间列表。</p> \n<p>例如，假设数据流中的整数为 1，3，7，2，6，…，每次的总结为：</p> \n<pre>[1, 1]\n[1, 1], [3, 3]\n[1, 1], [3, 3], [7, 7]\n[1, 3], [7, 7]\n[1, 3], [6, 7]\n</pre> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong><br> 如果有很多合并，并且与数据流的大小相比，不相交区间的数量很小，该怎么办?</p> \n<p><strong>提示：</strong><br> 特别感谢 <a href=\"https://discuss.leetcode.com/user/yunhong\">@yunhong</a> 提供了本问题和其测试用例。</p>');
INSERT INTO `leecode` VALUES ('354. 俄罗斯套娃信封问题', '<p>给你一个二维整数数组 <code>envelopes</code> ，其中 <code>envelopes[i] = [w<sub>i</sub>, h<sub>i</sub>]</code> ，表示第 <code>i</code> 个信封的宽度和高度。</p> \n<p>当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。</p> \n<p>请计算 <strong>最多能有多少个</strong> 信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。</p> \n<p><strong>注意</strong>：不允许旋转信封。</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>envelopes = [[5,4],[6,4],[6,7],[2,3]]\n<strong>输出：</strong>3\n<strong>解释：</strong>最多信封的个数为 <code>3, 组合为: </code>[2,3] =&gt; [5,4] =&gt; [6,7]。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>envelopes = [[1,1],[1,1],[1,1]]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= envelopes.length &lt;= 5000</code></li> \n <li><code>envelopes[i].length == 2</code></li> \n <li><code>1 &lt;= w<sub>i</sub>, h<sub>i</sub> &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('355. 设计推特', '<p>设计一个简化版的推特(Twitter)，可以让用户实现发送推文，关注/取消关注其他用户，能够看见关注人（包括自己）的最近十条推文。你的设计需要支持以下的几个功能：</p> \n<ol> \n <li><strong>postTweet(userId, tweetId)</strong>: 创建一条新的推文</li> \n <li><strong>getNewsFeed(userId)</strong>: 检索最近的十条推文。每个推文都必须是由此用户关注的人或者是用户自己发出的。推文必须按照时间顺序由最近的开始排序。</li> \n <li><strong>follow(followerId, followeeId)</strong>: 关注一个用户</li> \n <li><strong>unfollow(followerId, followeeId)</strong>: 取消关注一个用户</li> \n</ol> \n<p><strong>示例:</strong></p> \n<pre>Twitter twitter = new Twitter();\n\n// 用户1发送了一条新推文 (用户id = 1, 推文id = 5).\ntwitter.postTweet(1, 5);\n\n// 用户1的获取推文应当返回一个列表，其中包含一个id为5的推文.\ntwitter.getNewsFeed(1);\n\n// 用户1关注了用户2.\ntwitter.follow(1, 2);\n\n// 用户2发送了一个新推文 (推文id = 6).\ntwitter.postTweet(2, 6);\n\n// 用户1的获取推文应当返回一个列表，其中包含两个推文，id分别为 -&gt; [6, 5].\n// 推文id6应当在推文id5之前，因为它是在5之后发送的.\ntwitter.getNewsFeed(1);\n\n// 用户1取消关注了用户2.\ntwitter.unfollow(1, 2);\n\n// 用户1的获取推文应当返回一个列表，其中包含一个id为5的推文.\n// 因为用户1已经不再关注用户2.\ntwitter.getNewsFeed(1);\n</pre>');
INSERT INTO `leecode` VALUES ('357. 计算各个位数不同的数字个数', '<p>给定一个<strong>非负</strong>整数 n，计算各位数字都不同的数字 x 的个数，其中 0 ≤ x &lt; 10<sup>n&nbsp;</sup>。</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入: </strong>2\n<strong>输出: </strong>91 \n<strong>解释: </strong>答案应为除去 <code>11,22,33,44,55,66,77,88,99 </code>外，在 [0,100) 区间内的所有数字。\n</pre>');
INSERT INTO `leecode` VALUES ('36. 有效的数独', '<p>请你判断一个&nbsp;<code>9x9</code> 的数独是否有效。只需要<strong> 根据以下规则</strong> ，验证已经填入的数字是否有效即可。</p> \n<ol> \n <li>数字&nbsp;<code>1-9</code>&nbsp;在每一行只能出现一次。</li> \n <li>数字&nbsp;<code>1-9</code>&nbsp;在每一列只能出现一次。</li> \n <li>数字&nbsp;<code>1-9</code>&nbsp;在每一个以粗实线分隔的&nbsp;<code>3x3</code>&nbsp;宫内只能出现一次。（请参考示例图）</li> \n</ol> \n<p>数独部分空格内已填入了数字，空白格用&nbsp;<code>\'.\'</code>&nbsp;表示。</p> \n<p><strong>注意：</strong></p> \n<ul> \n <li>一个有效的数独（部分已被填充）不一定是可解的。</li> \n <li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"height:250px; width:250px\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/12/250px-sudoku-by-l2g-20050714svg.png\"> \n<pre><strong>输入：</strong>board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>board = \n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n<strong>输出：</strong>false\n<strong>解释：</strong>除了第一行的第一个数字从<strong> 5</strong> 改为 <strong>8 </strong>以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>board.length == 9</code></li> \n <li><code>board[i].length == 9</code></li> \n <li><code>board[i][j]</code> 是一位数字或者 <code>\'.\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('363. 矩形区域不超过 K 的最大数值和', '<p>给你一个 <code>m x n</code> 的矩阵 <code>matrix</code> 和一个整数 <code>k</code> ，找出并返回矩阵内部矩形区域的不超过 <code>k</code> 的最大数值和。</p> \n<p>题目数据保证总会存在一个数值和不超过 <code>k</code> 的矩形区域。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 255px; height: 176px;\" src=\"https://assets.leetcode.com/uploads/2021/03/18/sum-grid.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[1,0,1],[0,-2,3]], k = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>蓝色边框圈出来的矩形区域&nbsp;<code>[[0, 1], [-2, 3]]</code>&nbsp;的数值和是 2，且 2 是不超过 k 的最大数字（k = 2）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>matrix = [[2,2,-1]], k = 3\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 100</code></li> \n <li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li> \n <li><code>-10<sup>5</sup> &lt;= k &lt;= 10<sup>5</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>如果行数远大于列数，该如何设计解决方案？</p>');
INSERT INTO `leecode` VALUES ('365. 水壶问题', '<p>有两个容量分别为&nbsp;<em>x</em>升 和<em> y</em>升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好&nbsp;<em>z</em>升 的水？</p> \n<p>如果可以，最后请用以上水壶中的一或两个来盛放取得的&nbsp;<em>z升&nbsp;</em>水。</p> \n<p>你允许：</p> \n<ul> \n <li>装满任意一个水壶</li> \n <li>清空任意一个水壶</li> \n <li>从一个水壶向另外一个水壶倒水，直到装满或者倒空</li> \n</ul> \n<p><strong>示例 1:</strong> (From the famous <a href=\"https://www.youtube.com/watch?v=BVtQNK_ZUJg\"><em>\"Die Hard\"</em> example</a>)</p> \n<pre>输入: x = 3, y = 5, z = 4\n输出: True\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre>输入: x = 2, y = 6, z = 5\n输出: False\n</pre>');
INSERT INTO `leecode` VALUES ('367. 有效的完全平方数', '<p>给定一个 <strong>正整数</strong> <code>num</code> ，编写一个函数，如果 <code>num</code> 是一个完全平方数，则返回 <code>true</code> ，否则返回 <code>false</code> 。</p> \n<p><strong>进阶：不要</strong> 使用任何内置的库函数，如&nbsp; <code>sqrt</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>num = 16\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>num = 14\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= num &lt;= 2^31 - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('368. 最大整除子集', '给你一个由 \n<strong>无重复</strong> 正整数组成的集合 \n<code>nums</code> ，请你找出并返回其中最大的整除子集 \n<code>answer</code> ，子集中每一元素对 \n<code>(answer[i], answer[j])</code> 都应当满足： \n<ul> \n <li><code>answer[i] % answer[j] == 0</code> ，或</li> \n <li><code>answer[j] % answer[i] == 0</code></li> \n</ul> \n<p>如果存在多个有效解子集，返回其中任何一个均可。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3]\n<strong>输出：</strong>[1,2]\n<strong>解释：</strong>[1,3] 也会被视为正确答案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,4,8]\n<strong>输出：</strong>[1,2,4,8]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 1000</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 2 * 10<sup>9</sup></code></li> \n <li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('37. 解数独', '<p>编写一个程序，通过填充空格来解决数独问题。</p> \n<p>数独的解法需<strong> 遵循如下规则</strong>：</p> \n<ol> \n <li>数字&nbsp;<code>1-9</code>&nbsp;在每一行只能出现一次。</li> \n <li>数字&nbsp;<code>1-9</code>&nbsp;在每一列只能出现一次。</li> \n <li>数字&nbsp;<code>1-9</code>&nbsp;在每一个以粗实线分隔的&nbsp;<code>3x3</code>&nbsp;宫内只能出现一次。（请参考示例图）</li> \n</ol> \n<p>数独部分空格内已填入了数字，空白格用&nbsp;<code>\'.\'</code>&nbsp;表示。</p> \n<p>&nbsp;</p> \n<div class=\"top-view__1vxA\"> \n <div class=\"original__bRMd\"> \n  <div> \n   <p><strong>示例：</strong></p> \n   <img style=\"height:250px; width:250px\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/12/250px-sudoku-by-l2g-20050714svg.png\"> \n   <pre><strong>输入：</strong>board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n<strong>输出：</strong>[[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\n<strong>解释：</strong>输入的数独如上图所示，唯一有效的解决方案如下所示：\n\n<img style=\"height:250px; width:250px\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/12/250px-sudoku-by-l2g-20050714_solutionsvg.png\">\n</pre> \n   <p>&nbsp;</p> \n   <p><strong>提示：</strong></p> \n   <ul> \n    <li><code>board.length == 9</code></li> \n    <li><code>board[i].length == 9</code></li> \n    <li><code>board[i][j]</code> 是一位数字或者 <code>\'.\'</code></li> \n    <li>题目数据 <strong>保证</strong> 输入数独仅有一个解</li> \n   </ul> \n  </div> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('371. 两整数之和', '<p><strong>不使用</strong>运算符&nbsp;<code>+</code> 和&nbsp;<code>-</code>&nbsp;​​​​​​​，计算两整数&nbsp;​​​​​​​<code>a</code>&nbsp;、<code>b</code>&nbsp;​​​​​​​之和。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>a = 1, b = 2\n<strong>输出: </strong>3\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>a = -2, b = 3\n<strong>输出: </strong>1</pre>');
INSERT INTO `leecode` VALUES ('372. 超级次方', '<p>你的任务是计算&nbsp;<code>a<sup>b</sup></code>&nbsp;对&nbsp;<code>1337</code> 取模，<code>a</code> 是一个正整数，<code>b</code> 是一个非常大的正整数且会以数组形式给出。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>a = 2, b = [3]\n<strong>输出：</strong>8\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>a = 2, b = [1,0]\n<strong>输出：</strong>1024\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>a = 1, b = [4,3,3,8,5,2]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>a = 2147483647, b = [2,0,0]\n<strong>输出：</strong>1198\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= a &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>1 &lt;= b.length &lt;= 2000</code></li> \n <li><code>0 &lt;= b[i] &lt;= 9</code></li> \n <li><code>b</code> 不含前导 0</li> \n</ul>');
INSERT INTO `leecode` VALUES ('373. 查找和最小的K对数字', '<p>给定两个以升序排列的整数数组 <code>nums1</code> 和<strong> </strong><code>nums2</code><strong>&nbsp;</strong>,&nbsp;以及一个整数 <code>k</code><strong>&nbsp;</strong>。</p> \n<p>定义一对值&nbsp;<code>(u,v)</code>，其中第一个元素来自&nbsp;<code>nums1</code>，第二个元素来自 <code>nums2</code><strong>&nbsp;</strong>。</p> \n<p>请找到和最小的 <code>k</code>&nbsp;个数对&nbsp;<code>(u<sub>1</sub>,v<sub>1</sub>)</code>, <code>&nbsp;(u<sub>2</sub>,v<sub>2</sub>)</code> &nbsp;... &nbsp;<code>(u<sub>k</sub>,v<sub>k</sub>)</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums1 = [1,7,11], nums2 = [2,4,6], k = 3\n<strong>输出:</strong> [1,2],[1,4],[1,6]\n<strong>解释: </strong>返回序列中的前 3 对数：\n     [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>nums1 = [1,1,2], nums2 = [1,2,3], k = 2\n<strong>输出: </strong>[1,1],[1,1]\n<strong>解释: </strong>返回序列中的前 2 对数：\n&nbsp;    [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入: </strong>nums1 = [1,2], nums2 = [3], k = 3 \n<strong>输出:</strong> [1,3],[2,3]\n<strong>解释: </strong>也可能序列中所有的数对都被返回:[1,3],[2,3]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>nums1</code>, <code>nums2</code> 均为升序排列</li> \n <li><code>1 &lt;= k &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('374. 猜数字大小', '<p>猜数字游戏的规则如下：</p> \n<ul> \n <li>每轮游戏，我都会从&nbsp;<strong>1</strong>&nbsp;到&nbsp;<em><strong>n</strong></em> 随机选择一个数字。 请你猜选出的是哪个数字。</li> \n <li>如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。</li> \n</ul> \n<p>你可以通过调用一个预先定义好的接口 <code>int guess(int num)</code> 来获取猜测结果，返回值一共有 3 种可能的情况（<code>-1</code>，<code>1</code>&nbsp;或 <code>0</code>）：</p> \n<ul> \n <li>-1：我选出的数字比你猜的数字小 <code>pick &lt; num</code></li> \n <li>1：我选出的数字比你猜的数字大 <code>pick &gt; num</code></li> \n <li>0：我选出的数字和你猜的数字一样。恭喜！你猜对了！<code>pick == num</code></li> \n</ul> \n<p>返回我选出的数字。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 10, pick = 6\n<strong>输出：</strong>6\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1, pick = 1\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 2, pick = 1\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 2, pick = 2\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>1 &lt;= pick &lt;= n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('375. 猜数字大小 II', '<p>我们正在玩一个猜数游戏，游戏规则如下：</p> \n<p>我从&nbsp;<strong>1&nbsp;</strong>到 <strong>n</strong> 之间选择一个数字，你来猜我选了哪个数字。</p> \n<p>每次你猜错了，我都会告诉你，我选的数字比你的大了或者小了。</p> \n<p>然而，当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。直到你猜到我选的数字，你才算赢得了这个游戏。</p> \n<p><strong>示例:</strong></p> \n<pre>n = 10, 我选择了8.\n\n第一轮: 你猜我选择的数字是5，我会告诉你，我的数字更大一些，然后你需要支付5块。\n第二轮: 你猜是7，我告诉你，我的数字更大一些，你支付7块。\n第三轮: 你猜是9，我告诉你，我的数字更小一些，你支付9块。\n\n游戏结束。8 就是我选的数字。\n\n你最终要支付 5 + 7 + 9 = 21 块钱。\n</pre> \n<p>给定&nbsp;<strong>n ≥ 1，</strong>计算你至少需要拥有多少现金才能确保你能赢得这个游戏。</p>');
INSERT INTO `leecode` VALUES ('376. 摆动序列', '<p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为<strong> 摆动序列 。</strong>第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p> \n<ul> \n <li> <p>例如，&nbsp;<code>[1, 7, 4, 9, 2, 5]</code> 是一个 <strong>摆动序列</strong> ，因为差值 <code>(6, -3, 5, -7, 3)</code>&nbsp;是正负交替出现的。</p> </li> \n <li>相反，<code>[1, 4, 7, 2, 5]</code>&nbsp;和&nbsp;<code>[1, 7, 4, 5, 5]</code> 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</li> \n</ul> \n<p><strong>子序列</strong> 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p> \n<p>给你一个整数数组 <code>nums</code> ，返回 <code>nums</code> 中作为 <strong>摆动序列 </strong>的 <strong>最长子序列的长度</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,7,4,9,2,5]\n<strong>输出：</strong>6\n<strong>解释：</strong>整个序列均为摆动序列，各元素之间的差值为 (6, -3, 5, -7, 3) 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,17,5,10,13,15,10,5,16,8]\n<strong>输出：</strong>7\n<strong>解释：</strong>这个序列包含几个长度为 7 摆动序列。\n其中一个是 [1, 17, 10, 13, 10, 16, 8] ，各元素之间的差值为 (16, -7, 3, -3, 6, -8) 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4,5,6,7,8,9]\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 1000</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你能否用&nbsp;<code>O(n)</code><em> </em>时间复杂度完成此题?</p>');
INSERT INTO `leecode` VALUES ('377. 组合总和 Ⅳ', '<p>给你一个由 <strong>不同</strong> 整数组成的数组 <code>nums</code> ，和一个目标整数 <code>target</code> 。请你从 <code>nums</code> 中找出并返回总和为 <code>target</code> 的元素组合的个数。</p> \n<p>题目数据保证答案符合 32 位整数范围。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3], target = 4\n<strong>输出：</strong>7\n<strong>解释：</strong>\n所有可能的组合为：\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\n请注意，顺序不同的序列被视作不同的组合。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [9], target = 3\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 200</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> \n <li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li> \n <li><code>1 &lt;= target &lt;= 1000</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>如果给定的数组中含有负数会发生什么？问题会产生何种变化？如果允许负数出现，需要向题目中添加哪些限制条件？</p>');
INSERT INTO `leecode` VALUES ('378. 有序矩阵中第 K 小的元素', '<p>给你一个&nbsp;<code>n x n</code><em>&nbsp;</em>矩阵&nbsp;<code>matrix</code> ，其中每行和每列元素均按升序排序，找到矩阵中第 <code>k</code> 小的元素。<br> 请注意，它是 <strong>排序后</strong> 的第 <code>k</code> 小元素，而不是第 <code>k</code> 个 <strong>不同</strong> 的元素。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\n<strong>输出：</strong>13\n<strong>解释：</strong>矩阵中的元素为 [1,5,9,10,11,12,13,<strong>13</strong>,15]，第 8 小元素是 13\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>matrix = [[-5]], k = 1\n<strong>输出：</strong>-5\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= n &lt;= 300</code></li> \n <li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li> \n <li>题目数据 <strong>保证</strong> <code>matrix</code> 中的所有行和列都按 <strong>非递减顺序</strong> 排列</li> \n <li><code>1 &lt;= k &lt;= n<sup>2</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('38. 外观数列', '<p>给定一个正整数 <code>n</code> ，输出外观数列的第 <code>n</code> 项。</p> \n<p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。</p> \n<p>你可以将其视作是由递归公式定义的数字字符串序列：</p> \n<ul> \n <li><code>countAndSay(1) = \"1\"</code></li> \n <li><code>countAndSay(n)</code> 是对 <code>countAndSay(n-1)</code> 的描述，然后转换成另一个数字字符串。</li> \n</ul> \n<p>前五项如下：</p> \n<pre>1.     1\n2.     11\n3.     21\n4.     1211\n5.     111221\n第一项是数字 1 \n描述前一项，这个数是 <code>1</code> 即 “ 一 个 1 ”，记作 <code>\"11\"\n</code>描述前一项，这个数是 <code>11</code> 即 “ 二 个 1 ” ，记作 <code>\"21\"\n</code>描述前一项，这个数是 <code>21</code> 即 “ 一 个 2 + 一 个 1 ” ，记作 \"<code>1211\"\n</code>描述前一项，这个数是 <code>1211</code> 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 \"<code>111221\"</code>\n</pre> \n<p>要 <strong>描述</strong> 一个数字字符串，首先要将字符串分割为 <strong>最小</strong> 数量的组，每个组都由连续的最多 <strong>相同字符</strong> 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。</p> \n<p>例如，数字字符串 <code>\"3322251\"</code> 的描述如下图：</p> \n<img style=\"width: 581px; height: 172px;\" src=\"https://assets.leetcode.com/uploads/2020/10/23/countandsay.jpg\" alt=\"\"> \n<ul> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>\"1\"\n<strong>解释：</strong>这是一个基本样例。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 4\n<strong>输出：</strong>\"1211\"\n<strong>解释：</strong>\ncountAndSay(1) = \"1\"\ncountAndSay(2) = 读 \"1\" = 一 个 1 = \"11\"\ncountAndSay(3) = 读 \"11\" = 二 个 1 = \"21\"\ncountAndSay(4) = 读 \"21\" = 一 个 2 + 一 个 1 = \"12\" + \"11\" = \"1211\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 30</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('380. O(1) 时间插入、删除和获取随机元素', '<p>设计一个支持在<em>平均&nbsp;</em>时间复杂度 <strong>O(1)</strong>&nbsp;下，执行以下操作的数据结构。</p> \n<ol> \n <li><code>insert(val)</code>：当元素 val 不存在时，向集合中插入该项。</li> \n <li><code>remove(val)</code>：元素 val 存在时，从集合中移除该项。</li> \n <li><code>getRandom</code>：随机返回现有集合中的一项。每个元素应该有<strong>相同的概率</strong>被返回。</li> \n</ol> \n<p><strong>示例 :</strong></p> \n<pre>// 初始化一个空的集合。\nRandomizedSet randomSet = new RandomizedSet();\n\n// 向集合中插入 1 。返回 true 表示 1 被成功地插入。\nrandomSet.insert(1);\n\n// 返回 false ，表示集合中不存在 2 。\nrandomSet.remove(2);\n\n// 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。\nrandomSet.insert(2);\n\n// getRandom 应随机返回 1 或 2 。\nrandomSet.getRandom();\n\n// 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。\nrandomSet.remove(1);\n\n// 2 已在集合中，所以返回 false 。\nrandomSet.insert(2);\n\n// 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。\nrandomSet.getRandom();\n</pre>');
INSERT INTO `leecode` VALUES ('381. O(1) 时间插入、删除和获取随机元素 - 允许重复', '<p>设计一个支持在<em>平均&nbsp;</em>时间复杂度&nbsp;<strong>O(1)&nbsp;</strong>下<strong>，&nbsp;</strong>执行以下操作的数据结构。</p> \n<p><strong>注意: 允许出现重复元素。</strong></p> \n<ol> \n <li><code>insert(val)</code>：向集合中插入元素 val。</li> \n <li><code>remove(val)</code>：当 val 存在时，从集合中移除一个 val。</li> \n <li><code>getRandom</code>：从现有集合中随机获取一个元素。每个元素被返回的概率应该与其在集合中的数量呈线性相关。</li> \n</ol> \n<p><strong>示例:</strong></p> \n<pre>// 初始化一个空的集合。\nRandomizedCollection collection = new RandomizedCollection();\n\n// 向集合中插入 1 。返回 true 表示集合不包含 1 。\ncollection.insert(1);\n\n// 向集合中插入另一个 1 。返回 false 表示集合包含 1 。集合现在包含 [1,1] 。\ncollection.insert(1);\n\n// 向集合中插入 2 ，返回 true 。集合现在包含 [1,1,2] 。\ncollection.insert(2);\n\n// getRandom 应当有 2/3 的概率返回 1 ，1/3 的概率返回 2 。\ncollection.getRandom();\n\n// 从集合中删除 1 ，返回 true 。集合现在包含 [1,2] 。\ncollection.remove(1);\n\n// getRandom 应有相同概率返回 1 和 2 。\ncollection.getRandom();\n</pre>');
INSERT INTO `leecode` VALUES ('382. 链表随机节点', '<p>给定一个单链表，随机选择链表的一个节点，并返回相应的节点值。保证每个节点<strong>被选的概率一样</strong>。</p> \n<p><strong>进阶:</strong><br> 如果链表十分大且长度未知，如何解决这个问题？你能否使用常数级空间复杂度实现？</p> \n<p><strong>示例:</strong></p> \n<pre>// 初始化一个单链表 [1,2,3].\nListNode head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nSolution solution = new Solution(head);\n\n// getRandom()方法应随机返回1,2,3中的一个，保证每个元素被返回的概率相等。\nsolution.getRandom();\n</pre>');
INSERT INTO `leecode` VALUES ('383. 赎金信', '<p>给定一个赎金信 (<code>ransom</code>) 字符串和一个杂志(<code>magazine</code>)字符串，判断第一个字符串 <code>ransom</code> 能不能由第二个字符串 <code>magazines</code> 里面的字符构成。如果可以构成，返回 <code>true</code> ；否则返回 <code>false</code>。</p> \n<p>(题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。杂志字符串中的每个字符只能在赎金信字符串中使用一次。)</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>ransomNote = \"a\", magazine = \"b\"\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>ransomNote = \"aa\", magazine = \"ab\"\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>ransomNote = \"aa\", magazine = \"aab\"\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>你可以假设两个字符串均只含有小写字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('384. 打乱数组', '<p>给你一个整数数组 nums ，设计算法来打乱一个没有重复元素的数组。</p> \n<p>实现 <code>Solution</code> class:</p> \n<ul> \n <li><code>Solution(int[] nums)</code> 使用整数数组 <code>nums</code> 初始化对象</li> \n <li><code>int[] reset()</code> 重设数组到它的初始状态并返回</li> \n <li><code>int[] shuffle()</code> 返回数组随机打乱后的结果</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入</strong>\n[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n[[[1, 2, 3]], [], [], []]\n<strong>输出</strong>\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n\n<strong>解释</strong>\nSolution solution = new Solution([1, 2, 3]);\nsolution.shuffle();    // 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。例如，返回 [3, 1, 2]\nsolution.reset();      // 重设数组到它的初始状态 [1, 2, 3] 。返回 [1, 2, 3]\nsolution.shuffle();    // 随机返回数组 [1, 2, 3] 打乱后的结果。例如，返回 [1, 3, 2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 200</code></li> \n <li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> \n <li><code>nums</code> 中的所有元素都是 <strong>唯一的</strong></li> \n <li>最多可以调用 <code>5 * 10<sup>4</sup></code> 次 <code>reset</code> 和 <code>shuffle</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('385. 迷你语法分析器', '<p>给定一个用字符串表示的整数的嵌套列表，实现一个解析它的语法分析器。</p> \n<p>列表中的每个元素只可能是整数或整数嵌套列表</p> \n<p><strong>提示：</strong>你可以假定这些字符串都是格式良好的：</p> \n<ul> \n <li>字符串非空</li> \n <li>字符串不包含空格</li> \n <li>字符串只包含数字<code>0-9</code>、<code>[</code>、<code>-</code>、<code>,</code>、<code>]</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre>给定 s = \"324\",\n\n你应该返回一个 NestedInteger 对象，其中只包含整数值 324。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre>给定 s = \"[123,[456,[789]]]\",\n\n返回一个 NestedInteger 对象包含一个有两个元素的嵌套列表：\n\n1. 一个 integer 包含值 123\n2. 一个包含两个元素的嵌套列表：\n    i.  一个 integer 包含值 456\n    ii. 一个包含一个元素的嵌套列表\n         a. 一个 integer 包含值 789\n</pre>');
INSERT INTO `leecode` VALUES ('386. 字典序排数', '<p>给定一个整数&nbsp;<em>n</em>, 返回从&nbsp;<em>1&nbsp;</em>到&nbsp;<em>n&nbsp;</em>的字典顺序。</p> \n<p>例如，</p> \n<p>给定 <em>n</em> =1 3，返回 [1,10,11,12,13,2,3,4,5,6,7,8,9] 。</p> \n<p>请尽可能的优化算法的时间复杂度和空间复杂度。 输入的数据&nbsp;<em>n&nbsp;</em>小于等于&nbsp;5,000,000。</p>');
INSERT INTO `leecode` VALUES ('387. 字符串中的第一个唯一字符', '<p>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre>s = \"leetcode\"\n返回 0\n\ns = \"loveleetcode\"\n返回 2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong>你可以假定该字符串只包含小写字母。</p>');
INSERT INTO `leecode` VALUES ('388. 文件的最长绝对路径', '<p>假设文件系统如下图所示：</p> \n<p><img style=\"width: 681px; height: 322px;\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mdir.jpg\" alt=\"\"></p> \n<p>这里将 <code>dir</code> 作为根目录中的唯一目录。<code>dir</code> 包含两个子目录 <code>subdir1</code> 和 <code>subdir2</code> 。<code>subdir1</code> 包含文件 <code>file1.ext</code> 和子目录 <code>subsubdir1</code>；<code>subdir2</code> 包含子目录 <code>subsubdir2</code>，该子目录下包含文件 <code>file2.ext</code> 。</p> \n<p>在文本格式中，如下所示(⟶表示制表符)：</p> \n<pre>dir\n⟶ subdir1\n⟶ ⟶ file1.ext\n⟶ ⟶ subsubdir1\n⟶ subdir2\n⟶ ⟶ subsubdir2\n⟶ ⟶ ⟶ file2.ext\n</pre> \n<p>如果是代码表示，上面的文件系统可以写为 <code>\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"</code> 。<code>\'\\n\'</code> 和 <code>\'\\t\'</code> 分别是换行符和制表符。</p> \n<p>文件系统中的每个文件和文件夹都有一个唯一的 <strong>绝对路径</strong> ，即必须打开才能到达文件/目录所在位置的目录顺序，所有路径用 <code>\'/\'</code> 连接。上面例子中，指向 <code>file2.ext</code> 的绝对路径是 <code>\"dir/subdir2/subsubdir2/file2.ext\"</code> 。每个目录名由字母、数字和/或空格组成，每个文件名遵循 <code>name.extension</code> 的格式，其中名称和扩展名由字母、数字和/或空格组成。</p> \n<p>给定一个以上述格式表示文件系统的字符串 <code>input</code> ，返回文件系统中 <strong>指向文件的最长绝对路径</strong> 的长度。 如果系统中没有文件，返回&nbsp;<code>0</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 401px; height: 202px;\" src=\"https://assets.leetcode.com/uploads/2020/08/28/dir1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"\n<strong>输出：</strong>20\n<strong>解释：</strong>只有一个文件，绝对路径为 \"dir/subdir2/file.ext\" ，路径长度 20\n路径 \"dir/subdir1\" 不含任何文件\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 641px; height: 322px;\" src=\"https://assets.leetcode.com/uploads/2020/08/28/dir2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"\n<strong>输出：</strong>32\n<strong>解释：</strong>存在两个文件：\n\"dir/subdir1/file1.ext\" ，路径长度 21\n\"dir/subdir2/subsubdir2/file2.ext\" ，路径长度 32\n返回 32 ，因为这是最长的路径</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>input = \"a\"\n<strong>输出：</strong>0\n<strong>解释：</strong>不存在任何文件</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>input = \"file1.txt\\nfile2.txt\\nlongfile.txt\"\n<strong>输出：</strong>12\n<strong>解释：</strong>根目录下有 3 个文件。\n因为根目录中任何东西的绝对路径只是名称本身，所以答案是 \"longfile.txt\" ，路径长度为 12\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= input.length &lt;= 10<sup>4</sup></code></li> \n <li><code>input</code> 可能包含小写或大写的英文字母，一个换行符 <code>\'\\n\'</code>，一个指表符 <code>\'\\t\'</code>，一个点 <code>\'.\'</code>，一个空格 <code>\' \'</code>，和数字。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('389. 找不同', '<p>给定两个字符串 <em><strong>s</strong></em> 和 <em><strong>t</strong></em>，它们只包含小写字母。</p> \n<p>字符串&nbsp;<strong><em>t</em></strong>&nbsp;由字符串&nbsp;<strong><em>s</em></strong>&nbsp;随机重排，然后在随机位置添加一个字母。</p> \n<p>请找出在 <em><strong>t</strong></em> 中被添加的字母。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"abcd\", t = \"abcde\"\n<strong>输出：</strong>\"e\"\n<strong>解释：</strong>\'e\' 是那个被添加的字母。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"\", t = \"y\"\n<strong>输出：</strong>\"y\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"a\", t = \"aa\"\n<strong>输出：</strong>\"a\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"ae\", t = \"aea\"\n<strong>输出：</strong>\"a\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s.length &lt;= 1000</code></li> \n <li><code>t.length == s.length + 1</code></li> \n <li><code>s</code> 和 <code>t</code> 只包含小写字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('39. 组合总和', '<p>给定一个<strong>无重复元素</strong>的正整数数组&nbsp;<code>candidates</code>&nbsp;和一个正整数&nbsp;<code>target</code>&nbsp;，找出&nbsp;<code>candidates</code>&nbsp;中所有可以使数字和为目标数&nbsp;<code>target</code>&nbsp;的唯一组合。</p> \n<p><code>candidates</code>&nbsp;中的数字可以无限制重复被选取。如果至少一个所选数字数量不同，则两种组合是唯一的。&nbsp;</p> \n<p>对于给定的输入，保证和为&nbsp;<code>target</code> 的唯一组合数少于 <code>150</code> 个。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入: </strong>candidates = <code>[2,3,6,7], </code>target = <code>7</code>\n<strong>输出: </strong>[[7],[2,2,3]]\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入: </strong>candidates = [2,3,5]<code>, </code>target = 8\n<strong>输出: </strong>[[2,2,2,2],[2,3,3],[3,5]]</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入: </strong>candidates = <code>[2], </code>target = 1\n<strong>输出: </strong>[]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入: </strong>candidates = <code>[1], </code>target = <code>1</code>\n<strong>输出: </strong>[[1]]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入: </strong>candidates = <code>[1], </code>target = <code>2</code>\n<strong>输出: </strong>[[1,1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= candidates.length &lt;= 30</code></li> \n <li><code>1 &lt;= candidates[i] &lt;= 200</code></li> \n <li><code>candidate</code> 中的每个元素都是独一无二的。</li> \n <li><code>1 &lt;= target &lt;= 500</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('390. 消除游戏', '<p>给定一个从1 到 n 排序的整数列表。<br> 首先，从左到右，从第一个数字开始，每隔一个数字进行删除，直到列表的末尾。<br> 第二步，在剩下的数字中，从右到左，从倒数第一个数字开始，每隔一个数字进行删除，直到列表开头。<br> 我们不断重复这两步，从左到右和从右到左交替进行，直到只剩下一个数字。<br> 返回长度为 n 的列表中，最后剩下的数字。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入:</strong>\nn = 9,\n<u>1</u> 2 <u>3</u> 4 <u>5</u> 6 <u>7</u> 8 <u>9</u>\n2 <u>4</u> 6 <u>8</u>\n<u>2</u> 6\n6\n\n<strong>输出:</strong>\n6</pre>');
INSERT INTO `leecode` VALUES ('391. 完美矩形', '<p>我们有 N 个与坐标轴对齐的矩形, 其中 N &gt; 0, 判断它们是否能精确地覆盖一个矩形区域。</p> \n<p>每个矩形用左下角的点和右上角的点的坐标来表示。例如，&nbsp;一个单位正方形可以表示为 [1,1,2,2]。&nbsp;( 左下角的点的坐标为 (1, 1) 以及右上角的点的坐标为 (2, 2) )。</p> \n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_perfect.gif\"></p> \n<p><strong>示例 1:</strong></p> \n<pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [3,2,4,4],\n  [1,3,2,4],\n  [2,3,3,4]\n]\n\n返回 true。5个矩形一起可以精确地覆盖一个矩形区域。\n</pre> \n<p>&nbsp;</p> \n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_separated.gif\"></p> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre>rectangles = [\n  [1,1,2,3],\n  [1,3,2,4],\n  [3,1,4,2],\n  [3,2,4,4]\n]\n\n返回 false。两个矩形之间有间隔，无法覆盖成一个矩形。\n</pre> \n<p>&nbsp;</p> \n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_hole.gif\"></p> \n<p><strong>示例 3:</strong></p> \n<pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [1,3,2,4],\n  [3,2,4,4]\n]\n\n返回 false。图形顶端留有间隔，无法覆盖成一个矩形。\n</pre> \n<p>&nbsp;</p> \n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_intersect.gif\"></p> \n<p><strong>示例 4:</strong></p> \n<pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [1,3,2,4],\n  [2,2,4,4]\n]\n\n返回 false。因为中间有相交区域，虽然形成了矩形，但不是精确覆盖。\n</pre>');
INSERT INTO `leecode` VALUES ('392. 判断子序列', '<p>给定字符串 <strong>s</strong> 和 <strong>t</strong> ，判断 <strong>s</strong> 是否为 <strong>t</strong> 的子序列。</p> \n<p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，<code>\"ace\"</code>是<code>\"abcde\"</code>的一个子序列，而<code>\"aec\"</code>不是）。</p> \n<p><strong>进阶：</strong></p> \n<p>如果有大量输入的 S，称作 S1, S2, ... , Sk 其中 k &gt;= 10亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？</p> \n<p><strong>致谢：</strong></p> \n<p>特别感谢<strong> </strong><a href=\"https://leetcode.com/pbrother/\">@pbrother&nbsp;</a>添加此问题并且创建所有测试用例。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"abc\", t = \"ahbgdc\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"axc\", t = \"ahbgdc\"\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s.length &lt;= 100</code></li> \n <li><code>0 &lt;= t.length &lt;= 10^4</code></li> \n <li>两个字符串都只由小写字符组成。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('393. UTF-8 编码验证', '<p>UTF-8 中的一个字符可能的长度为 <strong>1 到 4 字节</strong>，遵循以下的规则：</p> \n<ol> \n <li>对于 1 字节的字符，字节的第一位设为 0 ，后面 7 位为这个符号的 unicode 码。</li> \n <li>对于 n 字节的字符 (n &gt; 1)，第一个字节的前 n 位都设为1，第 n+1 位设为 0 ，后面字节的前两位一律设为 10 。剩下的没有提及的二进制位，全部为这个符号的 unicode 码。</li> \n</ol> \n<p>这是 UTF-8 编码的工作方式：</p> \n<pre><code>   Char. number range  |        UTF-8 octet sequence\n      (hexadecimal)    |              (binary)\n   --------------------+---------------------------------------------\n   0000 0000-0000 007F | 0xxxxxxx\n   0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n</code></pre> \n<p>给定一个表示数据的整数数组，返回它是否为有效的 utf-8 编码。</p> \n<p><strong>注意：</strong><br> 输入是整数数组。只有每个整数的 <strong>最低 8 个有效位</strong> 用来存储数据。这意味着每个整数只表示 1 字节的数据。</p> \n<p><strong>示例 1：</strong></p> \n<pre>data = [197, 130, 1], 表示 8 位的序列: <strong>11000101 10000010 00000001</strong>.\n\n返回 <strong>true </strong>。\n这是有效的 utf-8 编码，为一个2字节字符，跟着一个1字节字符。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre>data = [235, 140, 4], 表示 8 位的序列: <strong>11101011 10001100 00000100</strong>.\n\n返回<strong> false</strong> 。\n前 3 位都是 1 ，第 4 位为 0 表示它是一个3字节字符。\n下一个字节是开头为 10 的延续字节，这是正确的。\n但第二个延续字节不以 10 开头，所以是不符合规则的。\n</pre>');
INSERT INTO `leecode` VALUES ('394. 字符串解码', '<p>给定一个经过编码的字符串，返回它解码后的字符串。</p> \n<p>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <em>encoded_string</em> 正好重复 <em>k</em> 次。注意 <em>k</em> 保证为正整数。</p> \n<p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p> \n<p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <em>k</em> ，例如不会出现像&nbsp;<code>3a</code>&nbsp;或&nbsp;<code>2[4]</code>&nbsp;的输入。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"3[a]2[bc]\"\n<strong>输出：</strong>\"aaabcbc\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"3[a2[c]]\"\n<strong>输出：</strong>\"accaccacc\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"2[abc]3[cd]ef\"\n<strong>输出：</strong>\"abcabccdcdcdef\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"abc3[cd]xyz\"\n<strong>输出：</strong>\"abccdcdcdxyz\"\n</pre>');
INSERT INTO `leecode` VALUES ('395. 至少有 K 个重复字符的最长子串', '<p>给你一个字符串 <code>s</code> 和一个整数 <code>k</code> ，请你找出 <code>s</code> 中的最长子串，&nbsp;要求该子串中的每一字符出现次数都不少于 <code>k</code> 。返回这一子串的长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"aaabb\", k = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>最长子串为 \"aaa\" ，其中 \'a\' 重复了 3 次。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"ababbc\", k = 2\n<strong>输出：</strong>5\n<strong>解释：</strong>最长子串为 \"ababb\" ，其中 \'a\' 重复了 2 次， \'b\' 重复了 3 次。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> \n <li><code>s</code> 仅由小写英文字母组成</li> \n <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('396. 旋转函数', '<p>给定一个长度为 <em>n</em> 的整数数组&nbsp;<code>A</code>&nbsp;。</p> \n<p>假设&nbsp;<code>B<sub>k</sub></code>&nbsp;是数组&nbsp;<code>A</code>&nbsp;顺时针旋转 <em>k</em> 个位置后的数组，我们定义&nbsp;<code>A</code>&nbsp;的“旋转函数”&nbsp;<code>F</code>&nbsp;为：</p> \n<p><code>F(k) = 0 * B<sub>k</sub>[0] + 1 * B<sub>k</sub>[1] + ... + (n-1) * B<sub>k</sub>[n-1]</code>。</p> \n<p>计算<code>F(0), F(1), ..., F(n-1)</code>中的最大值。</p> \n<p><strong>注意:</strong><br> 可以认为<em> n</em> 的值小于 10<sup>5</sup>。</p> \n<p><strong>示例:</strong></p> \n<pre>A = [4, 3, 2, 6]\n\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\n\n所以 F(0), F(1), F(2), F(3) 中的最大值是 F(3) = 26 。\n</pre>');
INSERT INTO `leecode` VALUES ('397. 整数替换', '<p>给定一个正整数&nbsp;<code>n</code> ，你可以做如下操作：</p> \n<ol> \n <li>如果&nbsp;<code>n</code><em>&nbsp;</em>是偶数，则用&nbsp;<code>n / 2</code>替换&nbsp;<code>n</code><em> </em>。</li> \n <li>如果&nbsp;<code>n</code><em>&nbsp;</em>是奇数，则可以用&nbsp;<code>n + 1</code>或<code>n - 1</code>替换&nbsp;<code>n</code> 。</li> \n</ol> \n<p><code>n</code><em>&nbsp;</em>变为 <code>1</code> 所需的最小替换次数是多少？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 8\n<strong>输出：</strong>3\n<strong>解释：</strong>8 -&gt; 4 -&gt; 2 -&gt; 1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 7\n<strong>输出：</strong>4\n<strong>解释：</strong>7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1\n或 7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 4\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('398. 随机数索引', '<p>给定一个可能含有重复元素的整数数组，要求随机输出给定的数字的索引。 您可以假设给定的数字一定存在于数组中。</p> \n<p><strong>注意：</strong><br> 数组大小可能非常大。 使用太多额外空间的解决方案将不会通过测试。</p> \n<p><strong>示例:</strong></p> \n<pre>int[] nums = new int[] {1,2,3,3,3};\nSolution solution = new Solution(nums);\n\n// pick(3) 应该返回索引 2,3 或者 4。每个索引的返回概率应该相等。\nsolution.pick(3);\n\n// pick(1) 应该返回 0。因为只有nums[0]等于1。\nsolution.pick(1);\n</pre>');
INSERT INTO `leecode` VALUES ('399. 除法求值', '<p>给你一个变量对数组 <code>equations</code> 和一个实数值数组 <code>values</code> 作为已知条件，其中 <code>equations[i] = [A<sub>i</sub>, B<sub>i</sub>]</code> 和 <code>values[i]</code> 共同表示等式 <code>A<sub>i</sub> / B<sub>i</sub> = values[i]</code> 。每个 <code>A<sub>i</sub></code> 或 <code>B<sub>i</sub></code> 是一个表示单个变量的字符串。</p> \n<p>另有一些以数组 <code>queries</code> 表示的问题，其中 <code>queries[j] = [C<sub>j</sub>, D<sub>j</sub>]</code> 表示第 <code>j</code> 个问题，请你根据已知条件找出 <code>C<sub>j</sub> / D<sub>j</sub> = ?</code> 的结果作为答案。</p> \n<p>返回 <strong>所有问题的答案</strong> 。如果存在某个无法确定的答案，则用 <code>-1.0</code> 替代这个答案。如果问题中出现了给定的已知条件中没有出现的字符串，也需要用 <code>-1.0</code> 替代这个答案。</p> \n<p><strong>注意：</strong>输入总是有效的。你可以假设除法运算中不会出现除数为 0 的情况，且不存在任何矛盾的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\n<strong>输出：</strong>[6.00000,0.50000,-1.00000,1.00000,-1.00000]\n<strong>解释：</strong>\n条件：<em>a / b = 2.0</em>, <em>b / c = 3.0</em>\n问题：<em>a / c = ?</em>, <em>b / a = ?</em>, <em>a / e = ?</em>, <em>a / a = ?</em>, <em>x / x = ?</em>\n结果：[6.0, 0.5, -1.0, 1.0, -1.0 ]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\n<strong>输出：</strong>[3.75000,0.40000,5.00000,0.20000]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]\n<strong>输出：</strong>[0.50000,2.00000,-1.00000,-1.00000]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= equations.length &lt;= 20</code></li> \n <li><code>equations[i].length == 2</code></li> \n <li><code>1 &lt;= A<sub>i</sub>.length, B<sub>i</sub>.length &lt;= 5</code></li> \n <li><code>values.length == equations.length</code></li> \n <li><code>0.0 &lt; values[i] &lt;= 20.0</code></li> \n <li><code>1 &lt;= queries.length &lt;= 20</code></li> \n <li><code>queries[i].length == 2</code></li> \n <li><code>1 &lt;= C<sub>j</sub>.length, D<sub>j</sub>.length &lt;= 5</code></li> \n <li><code>A<sub>i</sub>, B<sub>i</sub>, C<sub>j</sub>, D<sub>j</sub></code> 由小写英文字母与数字组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('4. 寻找两个正序数组的中位数', '<p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组&nbsp;<code>nums1</code> 和&nbsp;<code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums1 = [1,3], nums2 = [2]\n<strong>输出：</strong>2.00000\n<strong>解释：</strong>合并数组 = [1,2,3] ，中位数 2\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums1 = [1,2], nums2 = [3,4]\n<strong>输出：</strong>2.50000\n<strong>解释：</strong>合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums1 = [0,0], nums2 = [0,0]\n<strong>输出：</strong>0.00000\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums1 = [], nums2 = [1]\n<strong>输出：</strong>1.00000\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>nums1 = [2], nums2 = []\n<strong>输出：</strong>2.00000\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>nums1.length == m</code></li> \n <li><code>nums2.length == n</code></li> \n <li><code>0 &lt;= m &lt;= 1000</code></li> \n <li><code>0 &lt;= n &lt;= 1000</code></li> \n <li><code>1 &lt;= m + n &lt;= 2000</code></li> \n <li><code>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你能设计一个时间复杂度为 <code>O(log (m+n))</code> 的算法解决此问题吗？</p>');
INSERT INTO `leecode` VALUES ('40. 组合总和 II', '<p>给定一个数组&nbsp;<code>candidates</code>&nbsp;和一个目标数&nbsp;<code>target</code>&nbsp;，找出&nbsp;<code>candidates</code>&nbsp;中所有可以使数字和为&nbsp;<code>target</code>&nbsp;的组合。</p> \n<p><code>candidates</code>&nbsp;中的每个数字在每个组合中只能使用一次。</p> \n<p><strong>注意：</strong>解集不能包含重复的组合。&nbsp;</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> candidates =&nbsp;<code>[10,1,2,7,6,1,5]</code>, target =&nbsp;<code>8</code>,\n<strong>输出:</strong>\n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> candidates =&nbsp;[2,5,2,1,2], target =&nbsp;5,\n<strong>输出:</strong>\n[\n[1,2,2],\n[5]\n]</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;candidates.length &lt;= 100</code></li> \n <li><code>1 &lt;=&nbsp;candidates[i] &lt;= 50</code></li> \n <li><code>1 &lt;= target &lt;= 30</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('400. 第 N 位数字', '<p>在无限的整数序列&nbsp;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...中找到第&nbsp;<code>n</code><em> </em>位数字。</p> \n<p>&nbsp;</p> \n<p><strong>注意：</strong><code>n</code><em>&nbsp;</em>是正数且在 32 位整数范围内（<code>n &lt; 2<sup>31</sup></code>）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>3\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>11\n<strong>输出：</strong>0\n<strong>解释：</strong>第 11 位数字在序列 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... 里是 <strong>0 </strong>，它是 10 的一部分。\n</pre>');
INSERT INTO `leecode` VALUES ('401. 二进制手表', '<p>二进制手表顶部有 4 个 LED 代表<strong> 小时（0-11）</strong>，底部的 6 个 LED 代表<strong> 分钟（0-59）</strong>。每个 LED 代表一个 0 或 1，最低位在右侧。</p> \n<ul> \n <li>例如，下面的二进制手表读取 <code>\"3:25\"</code> 。</li> \n</ul> \n<p><img style=\"height: 300px; width\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/03/29/binary_clock_samui_moon.jpg\"></p> \n<p><small><em>（图源：<a href=\"https://commons.m.wikimedia.org/wiki/File:Binary_clock_samui_moon.jpg\">WikiMedia - Binary clock samui moon.jpg</a> ，许可协议：<a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.en\">Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0)</a> ）</em></small></p> \n<p>给你一个整数 <code>turnedOn</code> ，表示当前亮着的 LED 的数量，返回二进制手表可以表示的所有可能时间。你可以 <strong>按任意顺序</strong> 返回答案。</p> \n<p>小时不会以零开头：</p> \n<ul> \n <li>例如，<code>\"01:00\"</code> 是无效的时间，正确的写法应该是 <code>\"1:00\"</code> 。</li> \n</ul> \n<p>分钟必须由两位数组成，可能会以零开头：</p> \n<ul> \n <li>例如，<code>\"10:2\"</code> 是无效的时间，正确的写法应该是 <code>\"10:02\"</code> 。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>turnedOn = 1\n<strong>输出：</strong>[\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>turnedOn = 9\n<strong>输出：</strong>[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= turnedOn &lt;= 10</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('402. 移掉 K 位数字', '<p>给你一个以字符串表示的非负整数&nbsp;<code>num</code> 和一个整数 <code>k</code> ，移除这个数中的 <code>k</code><em> </em>位数字，使得剩下的数字最小。请你以字符串形式返回这个最小的数字。</p> &nbsp; \n<p><strong>示例 1 ：</strong></p> \n<pre><strong>输入：</strong>num = \"1432219\", k = 3\n<strong>输出：</strong>\"1219\"\n<strong>解释：</strong>移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219 。\n</pre> \n<p><strong>示例 2 ：</strong></p> \n<pre><strong>输入：</strong>num = \"10200\", k = 1\n<strong>输出：</strong>\"200\"\n<strong>解释：</strong>移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。\n</pre> \n<p><strong>示例 3 ：</strong></p> \n<pre><strong>输入：</strong>num = \"10\", k = 2\n<strong>输出：</strong>\"0\"\n<strong>解释：</strong>从原数字移除所有的数字，剩余为空就是 0 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= num.length &lt;= 10<sup>5</sup></code></li> \n <li><code>num</code> 仅由若干位数字（0 - 9）组成</li> \n <li>除了 <strong>0</strong> 本身之外，<code>num</code> 不含任何前导零</li> \n</ul>');
INSERT INTO `leecode` VALUES ('403. 青蛙过河', '<p>一只青蛙想要过河。 假定河流被等分为若干个单元格，并且在每一个单元格内都有可能放有一块石子（也有可能没有）。 青蛙可以跳上石子，但是不可以跳入水中。</p> \n<p>给你石子的位置列表 <code>stones</code>（用单元格序号 <strong>升序</strong> 表示），&nbsp;请判定青蛙能否成功过河（即能否在最后一步跳至最后一块石子上）。</p> \n<p>开始时，&nbsp;青蛙默认已站在第一块石子上，并可以假定它第一步只能跳跃一个单位（即只能从单元格 1 跳至单元格 2 ）。</p> \n<p>如果青蛙上一步跳跃了&nbsp;<code>k</code><em>&nbsp;</em>个单位，那么它接下来的跳跃距离只能选择为&nbsp;<code>k - 1</code>、<code>k</code><em>&nbsp;</em>或&nbsp;<code>k + 1</code> 个单位。&nbsp;另请注意，青蛙只能向前方（终点的方向）跳跃。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>stones = [0,1,3,5,6,8,12,17]\n<strong>输出：</strong>true\n<strong>解释：</strong>青蛙可以成功过河，按照如下方案跳跃：跳 1 个单位到第 2 块石子, 然后跳 2 个单位到第 3 块石子, 接着 跳 2 个单位到第 4 块石子, 然后跳 3 个单位到第 6 块石子, 跳 4 个单位到第 7 块石子, 最后，跳 5 个单位到第 8 个石子（即最后一块石子）。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>stones = [0,1,2,3,4,8,9,11]\n<strong>输出：</strong>false\n<strong>解释：</strong>这是因为第 5 和第 6 个石子之间的间距太大，没有可选的方案供青蛙跳跃过去。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= stones.length &lt;= 2000</code></li> \n <li><code>0 &lt;= stones[i] &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>stones[0] == 0</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('404. 左叶子之和', '<p>计算给定二叉树的所有左叶子之和。</p> \n<p><strong>示例：</strong></p> \n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24</pre> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('405. 数字转换为十六进制数', '<p>给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用&nbsp;<a href=\"https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81/6854613?fr=aladdin\">补码运算</a>&nbsp;方法。</p> \n<p><strong>注意:</strong></p> \n<ol> \n <li>十六进制中所有字母(<code>a-f</code>)都必须是小写。</li> \n <li>十六进制字符串中不能包含多余的前导零。如果要转化的数为0，那么以单个字符<code>\'0\'</code>来表示；对于其他情况，十六进制字符串中的第一个字符将不会是0字符。&nbsp;</li> \n <li>给定的数确保在32位有符号整数范围内。</li> \n <li><strong>不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。</strong></li> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre>输入:\n26\n\n输出:\n\"1a\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre>输入:\n-1\n\n输出:\n\"ffffffff\"\n</pre>');
INSERT INTO `leecode` VALUES ('406. 根据身高重建队列', '<p>假设有打乱顺序的一群人站成一个队列，数组 <code>people</code> 表示队列中一些人的属性（不一定按顺序）。每个 <code>people[i] = [h<sub>i</sub>, k<sub>i</sub>]</code> 表示第 <code>i</code> 个人的身高为 <code>h<sub>i</sub></code> ，前面 <strong>正好</strong> 有 <code>k<sub>i</sub></code><sub> </sub>个身高大于或等于 <code>h<sub>i</sub></code> 的人。</p> \n<p>请你重新构造并返回输入数组&nbsp;<code>people</code> 所表示的队列。返回的队列应该格式化为数组 <code>queue</code> ，其中 <code>queue[j] = [h<sub>j</sub>, k<sub>j</sub>]</code> 是队列中第 <code>j</code> 个人的属性（<code>queue[0]</code> 是排在队列前面的人）。</p> \n<p>&nbsp;</p> \n<ul> \n</ul> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n<strong>输出：</strong>[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n<strong>解释：</strong>\n编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。\n编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。\n编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。\n编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。\n编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n<strong>输出：</strong>[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= people.length &lt;= 2000</code></li> \n <li><code>0 &lt;= h<sub>i</sub> &lt;= 10<sup>6</sup></code></li> \n <li><code>0 &lt;= k<sub>i</sub> &lt; people.length</code></li> \n <li>题目数据确保队列可以被重建</li> \n</ul>');
INSERT INTO `leecode` VALUES ('407. 接雨水 II', '<p>给你一个&nbsp;<code>m x n</code>&nbsp;的矩阵，其中的值均为非负整数，代表二维高度图每个单元的高度，请计算图中形状最多能接多少体积的雨水。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<p><img src=\"https://assets.leetcode.com/uploads/2021/04/08/trap1-3d.jpg\" alt=\"\"></p> \n<pre><strong>输入:</strong> heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 下雨后，雨水将会被上图蓝色的方块中。总的接雨水量为1+2+1=4。\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<p><img src=\"https://assets.leetcode.com/uploads/2021/04/08/trap2-3d.jpg\" alt=\"\"></p> \n<pre><strong>输入:</strong> heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\n<strong>输出:</strong> 10\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>m == heightMap.length</code></li> \n <li><code>n == heightMap[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 200</code></li> \n <li><code>0 &lt;= heightMap[i][j] &lt;= 2 * 10<sup>4</sup></code></li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('409. 最长回文串', '<p>给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。</p> \n<p>在构造过程中，请注意区分大小写。比如&nbsp;<code>\"Aa\"</code>&nbsp;不能当做一个回文字符串。</p> \n<p><strong>注意:</strong><br> 假设字符串的长度不会超过 1010。</p> \n<p><strong>示例 1: </strong></p> \n<pre>输入:\n\"abccccdd\"\n\n输出:\n7\n\n解释:\n我们可以构造的最长的回文串是\"dccaccd\", 它的长度是 7。\n</pre>');
INSERT INTO `leecode` VALUES ('41. 缺失的第一个正数', '<p>给你一个未排序的整数数组 <code>nums</code> ，请你找出其中没有出现的最小的正整数。</p> 请你实现时间复杂度为 \n<code>O(n)</code> 并且只使用常数级别额外空间的解决方案。 \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,0]\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [3,4,-1,1]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [7,8,9,11,12]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>5</sup></code></li> \n <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('410. 分割数组的最大值', '<p>给定一个非负整数数组 <code>nums</code> 和一个整数&nbsp;<code>m</code> ，你需要将这个数组分成&nbsp;<code>m</code><em>&nbsp;</em>个非空的连续子数组。</p> \n<p>设计一个算法使得这&nbsp;<code>m</code><em>&nbsp;</em>个子数组各自和的最大值最小。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [7,2,5,10,8], m = 2\n<strong>输出：</strong>18\n<strong>解释：</strong>\n一共有四种方法将 nums 分割为 2 个子数组。 其中最好的方式是将其分为 [7,2,5] 和 [10,8] 。\n因为此时这两个子数组各自的和的最大值为18，在所有情况中最小。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4,5], m = 2\n<strong>输出：</strong>9\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,4,4], m = 3\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 1000</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> \n <li><code>1 &lt;= m &lt;= min(50, nums.length)</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('412. Fizz Buzz', '<p>写一个程序，输出从 1 到 <em>n</em> 数字的字符串表示。</p> \n<p>1. 如果&nbsp;<em>n&nbsp;</em>是3的倍数，输出“Fizz”；</p> \n<p>2. 如果&nbsp;<em>n&nbsp;</em>是5的倍数，输出“Buzz”；</p> \n<p>3.如果&nbsp;<em>n&nbsp;</em>同时是3和5的倍数，输出 “FizzBuzz”。</p> \n<p><strong>示例：</strong></p> \n<pre>n = 15,\n\n返回:\n[\n    \"1\",\n    \"2\",\n    \"Fizz\",\n    \"4\",\n    \"Buzz\",\n    \"Fizz\",\n    \"7\",\n    \"8\",\n    \"Fizz\",\n    \"Buzz\",\n    \"11\",\n    \"Fizz\",\n    \"13\",\n    \"14\",\n    \"FizzBuzz\"\n]\n</pre>');
INSERT INTO `leecode` VALUES ('413. 等差数列划分', '<p>如果一个数列 <strong>至少有三个元素</strong> ，并且任意两个相邻元素之差相同，则称该数列为等差数列。</p> \n<ul> \n <li>例如，<code>[1,3,5,7,9]</code>、<code>[7,7,7,7]</code> 和 <code>[3,-1,-5,-9]</code> 都是等差数列。</li> \n</ul> \n<div class=\"original__bRMd\"> \n <div> \n  <p>给你一个整数数组 <code>nums</code> ，返回数组 <code>nums</code> 中所有为等差数组的 <strong>子数组</strong> 个数。</p> \n  <p><strong>子数组</strong> 是数组中的一个连续序列。</p> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <pre><strong>输入：</strong>nums = [1,2,3,4]\n<strong>输出：</strong>3\n<strong>解释：</strong>nums 中有三个子等差数组：[1, 2, 3]、[2, 3, 4] 和 [1,2,3,4] 自身。\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>nums = [1]\n<strong>输出：</strong>0\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>1 &lt;= nums.length &lt;= 5000</code></li> \n   <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('414. 第三大的数', '<p>给你一个非空数组，返回此数组中 <strong>第三大的数</strong> 。如果不存在，则返回数组中最大的数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[3, 2, 1]\n<strong>输出：</strong>1\n<strong>解释：</strong>第三大的数是 1 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[1, 2]\n<strong>输出：</strong>2\n<strong>解释：</strong>第三大的数不存在, 所以返回最大的数 2 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[2, 2, 3, 1]\n<strong>输出：</strong>1\n<strong>解释：</strong>注意，要求返回第三大的数，是指在所有不同数字中排第三大的数。\n此例中存在两个值为 2 的数，它们都排第二。在所有不同数字中排第三大的数为 1 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你能设计一个时间复杂度 <code>O(n)</code> 的解决方案吗？</p>');
INSERT INTO `leecode` VALUES ('415. 字符串相加', '<p>给定两个字符串形式的非负整数&nbsp;<code>num1</code> 和<code>num2</code>&nbsp;，计算它们的和。</p> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>num1</code> 和<code>num2</code>&nbsp;的长度都小于 5100</li> \n <li><code>num1</code> 和<code>num2</code> 都只包含数字&nbsp;<code>0-9</code></li> \n <li><code>num1</code> 和<code>num2</code> 都不包含任何前导零</li> \n <li><strong>你不能使用任何內建 BigInteger 库，&nbsp;也不能直接将输入的字符串转换为整数形式</strong></li> \n</ol>');
INSERT INTO `leecode` VALUES ('416. 分割等和子集', '<p>给你一个 <strong>只包含正整数 </strong>的 <strong>非空 </strong>数组&nbsp;<code>nums</code> 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,5,11,5]\n<strong>输出：</strong>true\n<strong>解释：</strong>数组可以分割成 [1, 5, 5] 和 [11] 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,5]\n<strong>输出：</strong>false\n<strong>解释：</strong>数组不能分割成两个元素和相等的子集。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 200</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('417. 太平洋大西洋水流问题', '<p>给定一个 <code>m x n</code> 的非负整数矩阵来表示一片大陆上各个单元格的高度。“太平洋”处于大陆的左边界和上边界，而“大西洋”处于大陆的右边界和下边界。</p> \n<p>规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。</p> \n<p>请找出那些水流既可以流动到“太平洋”，又能流动到“大西洋”的陆地单元的坐标。</p> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>输出坐标的顺序不重要</li> \n <li><em>m</em> 和 <em>n</em> 都小于150</li> \n</ol> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<p>&nbsp;</p> \n<pre>给定下面的 5x5 矩阵:\n\n  太平洋 ~   ~   ~   ~   ~ \n       ~  1   2   2   3  (5) *\n       ~  3   2   3  (4) (4) *\n       ~  2   4  (5)  3   1  *\n       ~ (6) (7)  1   4   5  *\n       ~ (5)  1   1   2   4  *\n          *   *   *   *   * 大西洋\n\n返回:\n\n[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (上图中带括号的单元).\n</pre> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('419. 甲板上的战舰', '<p>给定一个二维的甲板， 请计算其中有多少艘战舰。&nbsp;战舰用&nbsp;<code>\'X\'</code>表示，空位用&nbsp;<code>\'.\'</code>表示。&nbsp;你需要遵守以下规则：</p> \n<ul> \n <li>给你一个有效的甲板，仅由战舰或者空位组成。</li> \n <li>战舰只能水平或者垂直放置。换句话说,战舰只能由&nbsp;<code>1xN</code> (1 行, N 列)组成，或者&nbsp;<code>Nx1</code> (N 行, 1 列)组成，其中N可以是任意大小。</li> \n <li>两艘战舰之间至少有一个水平或垂直的空位分隔&nbsp;- 即没有相邻的战舰。</li> \n</ul> \n<p><strong>示例 :</strong></p> \n<pre>X..X\n...X\n...X\n</pre> \n<p>在上面的甲板中有2艘战舰。</p> \n<p><strong>无效样例 :</strong></p> \n<pre>...X\nXXXX\n...X\n</pre> \n<p>你不会收到这样的无效甲板&nbsp;- 因为战舰之间至少会有一个空位将它们分开。</p> \n<p><strong>进阶:</strong></p> \n<p>你可以用<strong>一次扫描算法</strong>，只使用<strong>O(1)额外空间，</strong>并且<strong>不修改</strong>甲板的值来解决这个问题吗？</p>');
INSERT INTO `leecode` VALUES ('42. 接雨水', '<p>给定&nbsp;<em>n</em> 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 161px; width: 412px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png\"></p> \n<pre><strong>输入：</strong>height = [0,1,0,2,1,0,1,3,2,1,2,1]\n<strong>输出：</strong>6\n<strong>解释：</strong>上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>height = [4,2,0,3,2,5]\n<strong>输出：</strong>9\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == height.length</code></li> \n <li><code>0 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>0 &lt;= height[i] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('420. 强密码检验器', '<p>一个强密码应满足以下所有条件：</p> \n<ol> \n <li>由至少6个，至多20个字符组成。</li> \n <li>至少包含一个小写字母，一个大写字母，和一个数字。</li> \n <li>同一字符<strong>不能</strong>连续出现三次 (比如 \"...aaa...\" 是不允许的, 但是&nbsp;\"...aa...a...\" 是可以的)。</li> \n</ol> \n<p>编写函数&nbsp;strongPasswordChecker(s)，s 代表输入字符串，如果 s 已经符合强密码条件，则返回0；否则返回要将 s 修改为满足强密码条件的字符串所需要进行修改的<strong>最小</strong>步数。</p> \n<p>插入、删除、替换任一字符都算作一次修改。</p>');
INSERT INTO `leecode` VALUES ('421. 数组中两个数的最大异或值', '<p>给你一个整数数组 <code>nums</code> ，返回<em> </em><code>nums[i] XOR nums[j]</code> 的最大运算结果，其中 <code>0 ≤ i ≤ j &lt; n</code> 。</p> \n<p><strong>进阶：</strong>你可以在 <code>O(n)</code> 的时间解决这个问题吗？</p> \n<p>&nbsp;</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p><strong>示例 1：</strong></p> \n  <pre><strong>输入：</strong>nums = [3,10,5,25,2,8]\n<strong>输出：</strong>28\n<strong>解释：</strong>最大运算结果是 5 XOR 25 = 28.</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>nums = [0]\n<strong>输出：</strong>0\n</pre> \n  <p><strong>示例 3：</strong></p> \n  <pre><strong>输入：</strong>nums = [2,4]\n<strong>输出：</strong>6\n</pre> \n  <p><strong>示例 4：</strong></p> \n  <pre><strong>输入：</strong>nums = [8,10,2]\n<strong>输出：</strong>10\n</pre> \n  <p><strong>示例 5：</strong></p> \n  <pre><strong>输入：</strong>nums = [14,70,53,83,49,91,36,80,92,51,66,70]\n<strong>输出：</strong>127\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> \n   <li><code>0 &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('423. 从英文中重建数字', '<p>给定一个<strong>非空</strong>字符串，其中包含字母顺序打乱的英文单词表示的数字<code>0-9</code>。按升序输出原始的数字。</p> \n<p><strong>注意:</strong></p> \n<ol> \n <li>输入只包含小写英文字母。</li> \n <li>输入保证合法并可以转换为原始的数字，这意味着像 \"abc\" 或 \"zerone\" 的输入是不允许的。</li> \n <li>输入字符串的长度小于 50,000。</li> \n</ol> \n<p><strong>示例 1:</strong></p> \n<pre>输入: \"owoztneoer\"\n\n输出: \"012\" (zeroonetwo)\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre>输入: \"fviefuro\"\n\n输出: \"45\" (fourfive)\n</pre>');
INSERT INTO `leecode` VALUES ('424. 替换后的最长重复字符', '<p>给你一个仅由大写英文字母组成的字符串，你可以将任意位置上的字符替换成另外的字符，总共可最多替换&nbsp;<em>k&nbsp;</em>次。在执行上述操作后，找到包含重复字母的最长子串的长度。</p> \n<p><strong>注意：</strong>字符串长度 和 <em>k </em>不会超过&nbsp;10<sup>4</sup>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"ABAB\", k = 2\n<strong>输出：</strong>4\n<strong>解释：</strong>用两个\'A\'替换为两个\'B\',反之亦然。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"AABABBA\", k = 1\n<strong>输出：</strong>4\n<strong>解释：</strong>\n将中间的一个\'A\'替换为\'B\',字符串变为 \"AABBBBA\"。\n子串 \"BBBB\" 有最长重复字母, 答案为 4。\n</pre>');
INSERT INTO `leecode` VALUES ('427. 建立四叉树', '<p>给你一个 <code>n * n</code> 矩阵 <code>grid</code> ，矩阵由若干 <code>0</code> 和 <code>1</code> 组成。请你用四叉树表示该矩阵 <code>grid</code> 。</p> \n<p>你需要返回能表示矩阵的 四叉树 的根结点。</p> \n<p>注意，当 <code>isLeaf</code> 为 <strong>False </strong>时，你可以把 <strong>True</strong> 或者 <strong>False</strong> 赋值给节点，两种值都会被判题机制 <strong>接受</strong> 。</p> \n<p>四叉树数据结构中，每个内部节点只有四个子节点。此外，每个节点都有两个属性：</p> \n<ul> \n <li><code>val</code>：储存叶子结点所代表的区域的值。1 对应 <strong>True</strong>，0 对应 <strong>False</strong>；</li> \n <li><code>isLeaf</code>: 当这个节点是一个叶子结点时为 <strong>True</strong>，如果它有 4 个子节点则为 <strong>False</strong> 。</li> \n</ul> \n<pre>class Node {\n    public boolean val;\n&nbsp; &nbsp; public boolean isLeaf;\n&nbsp; &nbsp; public Node topLeft;\n&nbsp; &nbsp; public Node topRight;\n&nbsp; &nbsp; public Node bottomLeft;\n&nbsp; &nbsp; public Node bottomRight;\n}</pre> \n<p>我们可以按以下步骤为二维区域构建四叉树：</p> \n<ol> \n <li>如果当前网格的值相同（即，全为 <code>0</code> 或者全为 <code>1</code>），将 <code>isLeaf</code> 设为 True ，将 <code>val</code> 设为网格相应的值，并将四个子节点都设为 Null 然后停止。</li> \n <li>如果当前网格的值不同，将 <code>isLeaf</code> 设为 False， 将 <code>val</code> 设为任意值，然后如下图所示，将当前网格划分为四个子网格。</li> \n <li>使用适当的子网格递归每个子节点。</li> \n</ol> \n<p><img style=\"height: 181px; width: 777px;\" src=\"https://assets.leetcode.com/uploads/2020/02/11/new_top.png\" alt=\"\"></p> \n<p>如果你想了解更多关于四叉树的内容，可以参考 <a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a> 。</p> \n<p><strong>四叉树格式：</strong></p> \n<p>输出为使用层序遍历后四叉树的序列化形式，其中 <code>null</code> 表示路径终止符，其下面不存在节点。</p> \n<p>它与二叉树的序列化非常相似。唯一的区别是节点以列表形式表示 <code>[isLeaf, val]</code> 。</p> \n<p>如果 <code>isLeaf</code> 或者 <code>val</code> 的值为 True ，则表示它在列表&nbsp;<code>[isLeaf, val]</code> 中的值为 <strong>1</strong> ；如果 <code>isLeaf</code> 或者 <code>val</code> 的值为 False ，则表示值为 <strong>0 </strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 99px; width: 777px;\" src=\"https://assets.leetcode.com/uploads/2020/02/11/grid1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>grid = [[0,1],[1,0]]\n<strong>输出：</strong>[[0,1],[1,0],[1,1],[1,1],[1,0]]\n<strong>解释：</strong>此示例的解释如下：\n请注意，在下面四叉树的图示中，0 表示 false，1 表示 True 。\n<img style=\"height: 186px; width: 777px;\" src=\"https://assets.leetcode.com/uploads/2020/02/12/e1tree.png\" alt=\"\">\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 343px; width: 777px;\" src=\"https://assets.leetcode.com/uploads/2020/02/12/e2mat.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\n<strong>输出：</strong>[[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n<strong>解释：</strong>网格中的所有值都不相同。我们将网格划分为四个子网格。\ntopLeft，bottomLeft 和 bottomRight 均具有相同的值。\ntopRight 具有不同的值，因此我们将其再分为 4 个子网格，这样每个子网格都具有相同的值。\n解释如下图所示：\n<img style=\"height: 328px; width: 777px;\" src=\"https://assets.leetcode.com/uploads/2020/02/12/e2tree.png\" alt=\"\">\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,1],[1,1]]\n<strong>输出：</strong>[[1,1]]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>grid = [[0]]\n<strong>输出：</strong>[[1,0]]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,1,0,0],[1,1,0,0],[0,0,1,1],[0,0,1,1]]\n<strong>输出：</strong>[[0,1],[1,1],[1,0],[1,0],[1,1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>n == grid.length == grid[i].length</code></li> \n <li><code>n == 2^x</code> 其中 <code>0 &lt;= x &lt;= 6</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('429. N 叉树的层序遍历', '<p>给定一个 N 叉树，返回其节点值的<em>层序遍历</em>。（即从左到右，逐层遍历）。</p> \n<p>树的序列化输入是用层序遍历，每组子节点都由 null 值分隔（参见示例）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 100%; max-width: 300px;\" src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\"></p> \n<pre><strong>输入：</strong>root = [1,null,3,2,4,null,5,6]\n<strong>输出：</strong>[[1],[3,2,4],[5,6]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 296px; height: 241px;\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>输出：</strong>[[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树的高度不会超过&nbsp;<code>1000</code></li> \n <li>树的节点总数在 <code>[0,&nbsp;10^4]</code> 之间</li> \n</ul>');
INSERT INTO `leecode` VALUES ('43. 字符串相乘', '<p>给定两个以字符串形式表示的非负整数&nbsp;<code>num1</code>&nbsp;和&nbsp;<code>num2</code>，返回&nbsp;<code>num1</code>&nbsp;和&nbsp;<code>num2</code>&nbsp;的乘积，它们的乘积也表示为字符串形式。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> num1 = \"2\", num2 = \"3\"\n<strong>输出:</strong> \"6\"</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> num1 = \"123\", num2 = \"456\"\n<strong>输出:</strong> \"56088\"</pre> \n<p><strong>说明：</strong></p> \n<ol> \n <li><code>num1</code>&nbsp;和&nbsp;<code>num2</code>&nbsp;的长度小于110。</li> \n <li><code>num1</code> 和&nbsp;<code>num2</code> 只包含数字&nbsp;<code>0-9</code>。</li> \n <li><code>num1</code> 和&nbsp;<code>num2</code>&nbsp;均不以零开头，除非是数字 0 本身。</li> \n <li><strong>不能使用任何标准库的大数类型（比如 BigInteger）</strong>或<strong>直接将输入转换为整数来处理</strong>。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('430. 扁平化多级双向链表', '<p>多级双向链表中，除了指向下一个节点和前一个节点指针之外，它还有一个子链表指针，可能指向单独的双向链表。这些子列表也可能会有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。</p> \n<p>给你位于列表第一级的头节点，请你扁平化列表，使所有结点出现在单级双链表中。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n<strong>输出：</strong>[1,2,3,7,8,11,12,9,10,4,5,6]\n<strong>解释：\n</strong>\n输入的多级列表如下图所示：\n\n<img style=\"height: 363px; width: 640px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlist.png\">\n\n扁平化后的链表如下图：\n\n<img style=\"height: 80px; width: 1100px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlistflattened.png\">\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>head = [1,2,null,3]\n<strong>输出：</strong>[1,3,2]\n<strong>解释：\n\n</strong>输入的多级列表如下图所示：\n\n  1---2---NULL\n  |\n  3---NULL\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>head = []\n<strong>输出：</strong>[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>如何表示测试用例中的多级链表？</strong></p> \n<p>以 <strong>示例 1</strong> 为例：</p> \n<pre> 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL</pre> \n<p>序列化其中的每一级之后：</p> \n<pre>[1,2,3,4,5,6,null]\n[7,8,9,10,null]\n[11,12,null]\n</pre> \n<p>为了将每一级都序列化到一起，我们需要每一级中添加值为 null 的元素，以表示没有节点连接到上一级的上级节点。</p> \n<pre>[1,2,3,4,5,6,null]\n[null,null,7,8,9,10,null]\n[null,11,12,null]\n</pre> \n<p>合并所有序列化结果，并去除末尾的 null 。</p> \n<pre>[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>节点数目不超过 1000</li> \n <li><code>1 &lt;= Node.val &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('432. 全 O(1) 的数据结构', '<p>请你实现一个数据结构支持以下操作：</p> \n<ol> \n <li><code>Inc(key)</code> - 插入一个新的值为 1 的 key。或者使一个存在的 key 增加一，保证 key 不为空字符串。</li> \n <li><code>Dec(key)</code> - 如果这个 key 的值是 1，那么把他从数据结构中移除掉。否则使一个存在的 key 值减一。如果这个 key 不存在，这个函数不做任何事情。key 保证不为空字符串。</li> \n <li><code>GetMaxKey()</code> - 返回 key 中值最大的任意一个。如果没有元素存在，返回一个空字符串<code>\"\"</code> 。</li> \n <li><code>GetMinKey()</code> - 返回 key 中值最小的任意一个。如果没有元素存在，返回一个空字符串<code>\"\"</code>。</li> \n</ol> \n<p>&nbsp;</p> \n<p><strong>挑战：</strong></p> \n<p>你能够以 O(1) 的时间复杂度实现所有操作吗？</p>');
INSERT INTO `leecode` VALUES ('433. 最小基因变化', '<p>一条基因序列由一个带有8个字符的字符串表示，其中每个字符都属于 <code>\"A\"</code>, <code>\"C\"</code>, <code>\"G\"</code>, <code>\"T\"</code>中的任意一个。</p> \n<p>假设我们要调查一个基因序列的变化。<strong>一次</strong>基因变化意味着这个基因序列中的<strong>一个</strong>字符发生了变化。</p> \n<p>例如，基因序列由<code>\"AACCGGTT\"</code>&nbsp;变化至&nbsp;<code>\"AACCGGTA\"&nbsp;</code>即发生了一次基因变化。</p> \n<p>与此同时，每一次基因变化的结果，都需要是一个合法的基因串，即该结果属于一个基因库。</p> \n<p>现在给定3个参数 — start, end, bank，分别代表起始基因序列，目标基因序列及基因库，请找出能够使起始基因序列变化为目标基因序列所需的最少变化次数。如果无法实现目标变化，请返回 -1。</p> \n<p><strong>注意：</strong></p> \n<ol> \n <li>起始基因序列默认是合法的，但是它并不一定会出现在基因库中。</li> \n <li>如果一个起始基因序列需要多次变化，那么它每一次变化之后的基因序列都必须是合法的。</li> \n <li>假定起始基因序列与目标基因序列是不一样的。</li> \n</ol> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre>start: \"AACCGGTT\"\nend:   \"AACCGGTA\"\nbank: [\"AACCGGTA\"]\n\n返回值: 1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre>start: \"AACCGGTT\"\nend:   \"AAACGGTA\"\nbank: [\"AACCGGTA\", \"AACCGCTA\", \"AAACGGTA\"]\n\n返回值: 2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre>start: \"AAAAACCC\"\nend:   \"AACCCCCC\"\nbank: [\"AAAACCCC\", \"AAACCCCC\", \"AACCCCCC\"]\n\n返回值: 3\n</pre>');
INSERT INTO `leecode` VALUES ('434. 字符串中的单词数', '<p>统计字符串中的单词个数，这里的单词指的是连续的不是空格的字符。</p> \n<p>请注意，你可以假定字符串里不包括任何不可打印的字符。</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> \"Hello, my name is John\"\n<strong>输出:</strong> 5\n<strong>解释: </strong>这里的单词是指连续的不是空格的字符，所以 \"Hello,\" 算作 1 个单词。\n</pre>');
INSERT INTO `leecode` VALUES ('435. 无重叠区间', '<p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p> \n<p><strong>注意:</strong></p> \n<ol> \n <li>可以认为区间的终点总是大于它的起点。</li> \n <li>区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</li> \n</ol> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [ [1,2], [2,3], [3,4], [1,3] ]\n\n<strong>输出:</strong> 1\n\n<strong>解释:</strong> 移除 [1,3] 后，剩下的区间没有重叠。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> [ [1,2], [1,2], [1,2] ]\n\n<strong>输出:</strong> 2\n\n<strong>解释:</strong> 你需要移除两个 [1,2] 来使剩下的区间没有重叠。\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> [ [1,2], [2,3] ]\n\n<strong>输出:</strong> 0\n\n<strong>解释:</strong> 你不需要移除任何区间，因为它们已经是无重叠的了。\n</pre>');
INSERT INTO `leecode` VALUES ('436. 寻找右区间', '<p>给你一个区间数组 <code>intervals</code> ，其中&nbsp;<code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> ，且每个&nbsp;<code>start<sub>i</sub></code> 都 <strong>不同</strong> 。</p> \n<p>区间 <code>i</code> 的 <strong>右侧区间</strong> 可以记作区间 <code>j</code> ，并满足 <code>start<sub>j</sub></code><code>&nbsp;&gt;= end<sub>i</sub></code> ，且 <code>start<sub>j</sub></code> <strong>最小化 </strong>。</p> \n<p>返回一个由每个区间 <code>i</code> 的 <strong>右侧区间</strong> 的最小起始位置组成的数组。如果某个区间 <code>i</code> 不存在对应的 <strong>右侧区间</strong> ，则下标 <code>i</code> 处的值设为 <code>-1</code> 。</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>intervals = [[1,2]]\n<strong>输出：</strong>[-1]\n<strong>解释：</strong>集合中只有一个区间，所以输出-1。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>intervals = [[3,4],[2,3],[1,2]]\n<strong>输出：</strong>[-1, 0, 1]\n<strong>解释：</strong>对于 [3,4] ，没有满足条件的“右侧”区间。\n对于 [2,3] ，区间[3,4]具有最小的“右”起点;\n对于 [1,2] ，区间[2,3]具有最小的“右”起点。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>intervals = [[1,4],[2,3],[3,4]]\n<strong>输出：</strong>[-1, 2, -1]\n<strong>解释：</strong>对于区间 [1,4] 和 [3,4] ，没有满足条件的“右侧”区间。\n对于 [2,3] ，区间 [3,4] 有最小的“右”起点。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;intervals.length &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>intervals[i].length == 2</code></li> \n <li><code>-10<sup>6</sup> &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>6</sup></code></li> \n <li>每个间隔的起点都 <strong>不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('437. 路径总和 III', '<p>给定一个二叉树的根节点 <code>root</code>&nbsp;，和一个整数 <code>targetSum</code> ，求该二叉树里节点值之和等于 <code>targetSum</code> 的 <strong>路径</strong> 的数目。</p> \n<p><strong>路径</strong> 不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 452px;\" src=\"https://assets.leetcode.com/uploads/2021/04/09/pathsum3-1-tree.jpg\"></p> \n<pre><strong>输入：</strong>root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\n<strong>输出：</strong>3\n<strong>解释：</strong>和等于 8 的路径有 3 条，如图所示。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li>二叉树的节点个数的范围是 <code>[0,1000]</code></li> \n <li><code>-10<sup>9</sup>&nbsp;&lt;= Node.val &lt;= 10<sup>9</sup></code>&nbsp;</li> \n <li><code>-1000&nbsp;&lt;= targetSum&nbsp;&lt;= 1000</code>&nbsp;</li> \n</ul>');
INSERT INTO `leecode` VALUES ('438. 找到字符串中所有字母异位词', '<p>给定两个字符串&nbsp;<code>s</code>&nbsp;和 <code>p</code>，找到&nbsp;<code>s</code><strong>&nbsp;</strong>中所有&nbsp;<code>p</code><strong>&nbsp;</strong>的&nbsp;<strong>异位词&nbsp;</strong>的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p> \n<p><strong>异位词 </strong>指字母相同，但排列不同的字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入: </strong>s = \"cbaebabacd\", p = \"abc\"\n<strong>输出: </strong>[0,6]\n<strong>解释:</strong>\n起始索引等于 0 的子串是 \"cba\", 它是 \"abc\" 的异位词。\n起始索引等于 6 的子串是 \"bac\", 它是 \"abc\" 的异位词。\n</pre> \n<p><strong>&nbsp;示例 2:</strong></p> \n<pre><strong>输入: </strong>s = \"abab\", p = \"ab\"\n<strong>输出: </strong>[0,1,2]\n<strong>解释:</strong>\n起始索引等于 0 的子串是 \"ab\", 它是 \"ab\" 的异位词。\n起始索引等于 1 的子串是 \"ba\", 它是 \"ab\" 的异位词。\n起始索引等于 2 的子串是 \"ab\", 它是 \"ab\" 的异位词。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= s.length, p.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>s</code>&nbsp;和&nbsp;<code>p</code>&nbsp;仅包含小写字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('44. 通配符匹配', '<p>给定一个字符串&nbsp;(<code>s</code>) 和一个字符模式&nbsp;(<code>p</code>) ，实现一个支持&nbsp;<code>\'?\'</code>&nbsp;和&nbsp;<code>\'*\'</code>&nbsp;的通配符匹配。</p> \n<pre>\'?\' 可以匹配任何单个字符。\n\'*\' 可以匹配任意字符串（包括空字符串）。\n</pre> \n<p>两个字符串<strong>完全匹配</strong>才算匹配成功。</p> \n<p><strong>说明:</strong></p> \n<ul> \n <li><code>s</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母。</li> \n <li><code>p</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母，以及字符&nbsp;<code>?</code>&nbsp;和&nbsp;<code>*</code>。</li> \n</ul> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong>\ns = \"aa\"\np = \"a\"\n<strong>输出:</strong> false\n<strong>解释:</strong> \"a\" 无法匹配 \"aa\" 整个字符串。</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong>\ns = \"aa\"\np = \"*\"\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;\'*\' 可以匹配任意字符串。\n</pre> \n<p><strong>示例&nbsp;3:</strong></p> \n<pre><strong>输入:</strong>\ns = \"cb\"\np = \"?a\"\n<strong>输出:</strong> false\n<strong>解释:</strong>&nbsp;\'?\' 可以匹配 \'c\', 但第二个 \'a\' 无法匹配 \'b\'。\n</pre> \n<p><strong>示例&nbsp;4:</strong></p> \n<pre><strong>输入:</strong>\ns = \"adceb\"\np = \"*a*b\"\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;第一个 \'*\' 可以匹配空字符串, 第二个 \'*\' 可以匹配字符串 \"dce\".\n</pre> \n<p><strong>示例&nbsp;5:</strong></p> \n<pre><strong>输入:</strong>\ns = \"acdcb\"\np = \"a*c?b\"\n<strong>输出:</strong> false</pre>');
INSERT INTO `leecode` VALUES ('440. 字典序的第K小数字', '<p>给定整数&nbsp;<code>n</code>&nbsp;和&nbsp;<code>k</code>，找到&nbsp;<code>1</code>&nbsp;到&nbsp;<code>n</code>&nbsp;中字典序第&nbsp;<code>k</code>&nbsp;小的数字。</p> \n<p>注意：1 ≤ k ≤ n ≤ 10<sup>9</sup>。</p> \n<p><strong>示例 :</strong></p> \n<pre><strong>输入:</strong>\nn: 13   k: 2\n\n<strong>输出:</strong>\n10\n\n<strong>解释:</strong>\n字典序的排列是 [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9]，所以第二小的数字是 10。\n</pre>');
INSERT INTO `leecode` VALUES ('441. 排列硬币', '<p>你总共有&nbsp;<em>n&nbsp;</em>枚硬币，你需要将它们摆成一个阶梯形状，第&nbsp;<em>k&nbsp;</em>行就必须正好有&nbsp;<em>k&nbsp;</em>枚硬币。</p> \n<p>给定一个数字&nbsp;<em>n</em>，找出可形成完整阶梯行的总行数。</p> \n<p><em>n&nbsp;</em>是一个非负整数，并且在32位有符号整型的范围内。</p> \n<p><strong>示例 1:</strong></p> \n<pre>n = 5\n\n硬币可排列成以下几行:\n¤\n¤ ¤\n¤ ¤\n\n因为第三行不完整，所以返回2.\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre>n = 8\n\n硬币可排列成以下几行:\n¤\n¤ ¤\n¤ ¤ ¤\n¤ ¤\n\n因为第四行不完整，所以返回3.\n</pre>');
INSERT INTO `leecode` VALUES ('442. 数组中重复的数据', '<p>给定一个整数数组 a，其中1 ≤ a[i] ≤ <em>n</em> （<em>n</em>为数组长度）, 其中有些元素出现<strong>两次</strong>而其他元素出现<strong>一次</strong>。</p> \n<p>找到所有出现<strong>两次</strong>的元素。</p> \n<p>你可以不用到任何额外空间并在O(<em>n</em>)时间复杂度内解决这个问题吗？</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入:</strong>\n[4,3,2,7,8,2,3,1]\n\n<strong>输出:</strong>\n[2,3]\n</pre>');
INSERT INTO `leecode` VALUES ('443. 压缩字符串', '<p>给你一个字符数组 <code>chars</code> ，请使用下述算法压缩：</p> \n<p>从一个空字符串 <code>s</code> 开始。对于 <code>chars</code> 中的每组 <strong>连续重复字符</strong> ：</p> \n<ul> \n <li>如果这一组长度为 <code>1</code> ，则将字符追加到 <code>s</code> 中。</li> \n <li>否则，需要向 <code>s</code> 追加字符，后跟这一组的长度。</li> \n</ul> \n<p>压缩后得到的字符串 <code>s</code> <strong>不应该直接返回</strong> ，需要转储到字符数组 <code>chars</code> 中。需要注意的是，如果组长度为 <code>10</code> 或 <code>10</code> 以上，则在 <code>chars</code> 数组中会被拆分为多个字符。</p> \n<p>请在 <strong>修改完输入数组后</strong> ，返回该数组的新长度。</p> \n<p>你必须设计并实现一个只使用常量额外空间的算法来解决此问题。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\n<strong>输出：</strong>返回 6 ，输入数组的前 6 个字符应该是：[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\n<strong>解释：</strong>\n\"aa\" 被 \"a2\" 替代。\"bb\" 被 \"b2\" 替代。\"ccc\" 被 \"c3\" 替代。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>chars = [\"a\"]\n<strong>输出：</strong>返回 1 ，输入数组的前 1 个字符应该是：[\"a\"]\n<strong>解释：</strong>\n没有任何字符串被替代。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\n<strong>输出：</strong>返回 4 ，输入数组的前 4 个字符应该是：[\"a\",\"b\",\"1\",\"2\"]。\n<strong>解释：</strong>\n由于字符 \"a\" 不重复，所以不会被压缩。\"bbbbbbbbbbbb\" 被 “b12” 替代。\n注意每个数字在数组中都有它自己的位置。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= chars.length &lt;= 2000</code></li> \n <li><code>chars[i]</code> 可以是小写英文字母、大写英文字母、数字或符号</li> \n</ul>');
INSERT INTO `leecode` VALUES ('445. 两数相加 II', '<p>给你两个 <strong>非空 </strong>链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。</p> \n<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p> \n<p>&nbsp;</p> \n<p><strong>示例1：</strong></p> \n<p><img style=\"width: 302px;\" src=\"https://pic.leetcode-cn.com/1626420025-fZfzMX-image.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>l1 = [7,2,4,3], l2 = [5,6,4]\n<strong>输出：</strong>[7,8,0,7]\n</pre> \n<p><strong>示例2：</strong></p> \n<pre><strong>输入：</strong>l1 = [2,4,3], l2 = [5,6,4]\n<strong>输出：</strong>[8,0,7]\n</pre> \n<p><strong>示例3：</strong></p> \n<pre><strong>输入：</strong>l1 = [0], l2 = [0]\n<strong>输出：</strong>[0]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表的长度范围为<code> [1, 100]</code></li> \n <li><code>0 &lt;= node.val &lt;= 9</code></li> \n <li>输入数据保证链表代表的数字无前导 0</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>如果输入链表不能修改该如何处理？换句话说，不能对列表中的节点进行翻转。</p>');
INSERT INTO `leecode` VALUES ('446. 等差数列划分 II - 子序列', '<p>给你一个整数数组 <code>nums</code> ，返回 <code>nums</code> 中所有 <strong>等差子序列</strong> 的数目。</p> \n<p>如果一个序列中 <strong>至少有三个元素</strong> ，并且任意两个相邻元素之差相同，则称该序列为等差序列。</p> \n<ul> \n <li>例如，<code>[1, 3, 5, 7, 9]</code>、<code>[7, 7, 7, 7]</code> 和 <code>[3, -1, -5, -9]</code> 都是等差序列。</li> \n <li>再例如，<code>[1, 1, 2, 5, 7]</code> 不是等差序列。</li> \n</ul> \n<p>数组中的子序列是从数组中删除一些元素（也可能不删除）得到的一个序列。</p> \n<ul> \n <li>例如，<code>[2,5,10]</code> 是 <code>[1,2,1,<em><strong>2</strong></em>,4,1,<strong><em>5</em></strong>,<em><strong>10</strong></em>]</code> 的一个子序列。</li> \n</ul> \n<p>题目数据保证答案是一个 <strong>32-bit</strong> 整数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [2,4,6,8,10]\n<strong>输出：</strong>7\n<strong>解释：</strong>所有的等差子序列为：\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [7,7,7,7,7]\n<strong>输出：</strong>16\n<strong>解释：</strong>数组中的任意子序列都是等差子序列。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1&nbsp; &lt;= nums.length &lt;= 1000</code></li> \n <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('447. 回旋镖的数量', '<p>给定平面上<em>&nbsp;</em><code>n</code><em> </em>对 <strong>互不相同</strong> 的点&nbsp;<code>points</code> ，其中 <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> 。<strong>回旋镖</strong> 是由点&nbsp;<code>(i, j, k)</code> 表示的元组 ，其中&nbsp;<code>i</code>&nbsp;和&nbsp;<code>j</code>&nbsp;之间的距离和&nbsp;<code>i</code>&nbsp;和&nbsp;<code>k</code>&nbsp;之间的距离相等（<strong>需要考虑元组的顺序</strong>）。</p> \n<p>返回平面上所有回旋镖的数量。</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>points = [[0,0],[1,0],[2,0]]\n<strong>输出：</strong>2\n<strong>解释：</strong>两个回旋镖为 <strong>[[1,0],[0,0],[2,0]]</strong> 和 <strong>[[1,0],[2,0],[0,0]]</strong>\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>points = [[1,1],[2,2],[3,3]]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>points = [[1,1]]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n ==&nbsp;points.length</code></li> \n <li><code>1 &lt;= n &lt;= 500</code></li> \n <li><code>points[i].length == 2</code></li> \n <li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li> \n <li>所有点都 <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('448. 找到所有数组中消失的数字', '<p>给你一个含 <code>n</code> 个整数的数组 <code>nums</code> ，其中 <code>nums[i]</code> 在区间 <code>[1, n]</code> 内。请你找出所有在 <code>[1, n]</code> 范围内但没有出现在 <code>nums</code> 中的数字，并以数组的形式返回结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [4,3,2,7,8,2,3,1]\n<strong>输出：</strong>[5,6]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1]\n<strong>输出：</strong>[2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= n</code></li> \n</ul> \n<p><strong>进阶：</strong>你能在不使用额外空间且时间复杂度为<em> </em><code>O(n)</code><em> </em>的情况下解决这个问题吗? 你可以假定返回的数组不算在额外空间内。</p>');
INSERT INTO `leecode` VALUES ('449. 序列化和反序列化二叉搜索树', '<p>序列化是将数据结构或对象转换为一系列位的过程，以便它可以存储在文件或内存缓冲区中，或通过网络连接链路传输，以便稍后在同一个或另一个计算机环境中重建。</p> \n<p>设计一个算法来序列化和反序列化<strong> 二叉搜索树</strong> 。 对序列化/反序列化算法的工作方式没有限制。 您只需确保二叉搜索树可以序列化为字符串，并且可以将该字符串反序列化为最初的二叉搜索树。</p> \n<p><strong>编码的字符串应尽可能紧凑。</strong></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>root = [2,1,3]\n<strong>输出：</strong>[2,1,3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = []\n<strong>输出：</strong>[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点数范围是 <code>[0, 10<sup>4</sup>]</code></li> \n <li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> \n <li>题目数据 <strong>保证</strong> 输入的树是一棵二叉搜索树。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>注意</strong>：不要使用类成员/全局/静态变量来存储状态。 你的序列化和反序列化算法应该是无状态的。</p>');
INSERT INTO `leecode` VALUES ('45. 跳跃游戏 II', '<p>给你一个非负整数数组&nbsp;<code>nums</code> ，你最初位于数组的第一个位置。</p> \n<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p> \n<p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p> \n<p>假设你总是可以到达数组的最后一个位置。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums = [2,3,1,1,4]\n<strong>输出:</strong> 2\n<strong>解释:</strong> 跳到最后一个位置的最小跳跃数是 <code>2</code>。\n&nbsp;    从下标为 0 跳到下标为 1 的位置，跳&nbsp;<code>1</code>&nbsp;步，然后跳&nbsp;<code>3</code>&nbsp;步到达数组的最后一个位置。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> nums = [2,3,0,1,4]\n<strong>输出:</strong> 2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('450. 删除二叉搜索树中的节点', '<p>给定一个二叉搜索树的根节点 <strong>root </strong>和一个值 <strong>key</strong>，删除二叉搜索树中的&nbsp;<strong>key&nbsp;</strong>对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p> \n<p>一般来说，删除节点可分为两个步骤：</p> \n<ol> \n <li>首先找到需要删除的节点；</li> \n <li>如果找到了，删除它。</li> \n</ol> \n<p><strong>说明：</strong> 要求算法时间复杂度为&nbsp;O(h)，h 为树的高度。</p> \n<p><strong>示例:</strong></p> \n<pre>root = [5,3,6,2,4,null,7]\nkey = 3\n\n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\n给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。\n\n一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。\n\n    5\n   / \\\n  4   6\n /     \\\n2       7\n\n另一个正确答案是 [5,2,6,null,4,null,7]。\n\n    5\n   / \\\n  2   6\n   \\   \\\n    4   7\n</pre>');
INSERT INTO `leecode` VALUES ('451. 根据字符出现频率排序', '<p>给定一个字符串，请将字符串里的字符按照出现的频率降序排列。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong>\n\"tree\"\n\n<strong>输出:</strong>\n\"eert\"\n\n<strong>解释:\n</strong>\'e\'出现两次，\'r\'和\'t\'都只出现一次。\n因此\'e\'必须出现在\'r\'和\'t\'之前。此外，\"eetr\"也是一个有效的答案。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong>\n\"cccaaa\"\n\n<strong>输出:</strong>\n\"cccaaa\"\n\n<strong>解释:\n</strong>\'c\'和\'a\'都出现三次。此外，\"aaaccc\"也是有效的答案。\n注意\"cacaca\"是不正确的，因为相同的字母必须放在一起。\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong>\n\"Aabb\"\n\n<strong>输出:</strong>\n\"bbAa\"\n\n<strong>解释:\n</strong>此外，\"bbaA\"也是一个有效的答案，但\"Aabb\"是不正确的。\n注意\'A\'和\'a\'被认为是两种不同的字符。\n</pre>');
INSERT INTO `leecode` VALUES ('452. 用最少数量的箭引爆气球', '<p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。</p> \n<p>一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 <code>x</code><sub><code>start</code>，</sub><code>x</code><sub><code>end</code>，</sub> 且满足 &nbsp;<code>x<sub>start</sub>&nbsp;≤ x ≤ x</code><sub><code>end</code>，</sub>则该气球会被引爆<sub>。</sub>可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p> \n<p>给你一个数组 <code>points</code> ，其中 <code>points [i] = [x<sub>start</sub>,x<sub>end</sub>]</code> ，返回引爆所有气球所必须射出的最小弓箭数。</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>points = [[10,16],[2,8],[1,6],[7,12]]\n<strong>输出：</strong>2\n<strong>解释：</strong>对于该样例，x = 6 可以射爆 [2,8],[1,6] 两个气球，以及 x = 11 射爆另外两个气球</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>points = [[1,2],[3,4],[5,6],[7,8]]\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>points = [[1,2],[2,3],[3,4],[4,5]]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>points = [[1,2]]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>points = [[2,3],[2,3]]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= points.length &lt;= 10<sup>4</sup></code></li> \n <li><code>points[i].length == 2</code></li> \n <li><code>-2<sup>31</sup> &lt;= x<sub>start</sub> &lt;&nbsp;x<sub>end</sub> &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('453. 最小操作次数使数组元素相等', '<p>给定一个长度为 <em>n</em> 的 <strong>非空 </strong>整数数组，每次操作将会使 <em>n</em> - 1 个元素增加 1。找出让数组所有元素相等的最小操作次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[1,2,3]\n<strong>输出：</strong>\n3\n<strong>解释：</strong>\n只需要3次操作（注意每次操作会增加两个元素的值）：\n[1,2,3]  =&gt;  [2,3,3]  =&gt;  [3,4,3]  =&gt;  [4,4,4]\n</pre>');
INSERT INTO `leecode` VALUES ('454. 四数相加 II', '<p>给定四个包含整数的数组列表&nbsp;A , B , C , D ,计算有多少个元组 <code>(i, j, k, l)</code>&nbsp;，使得&nbsp;<code>A[i] + B[j] + C[k] + D[l] = 0</code>。</p> \n<p>为了使问题简单化，所有的 A, B, C, D 具有相同的长度&nbsp;N，且 0 ≤ N ≤ 500 。所有整数的范围在 -2<sup>28</sup> 到 2<sup>28</sup> - 1 之间，最终结果不会超过&nbsp;2<sup>31</sup> - 1 。</p> \n<p><strong>例如:</strong></p> \n<pre><strong>输入:</strong>\nA = [ 1, 2]\nB = [-2,-1]\nC = [-1, 2]\nD = [ 0, 2]\n\n<strong>输出:</strong>\n2\n\n<strong>解释:</strong>\n两个元组如下:\n1. (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\n</pre>');
INSERT INTO `leecode` VALUES ('455. 分发饼干', '<p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p> \n<p>对每个孩子 <code>i</code>，都有一个胃口值&nbsp;<code>g[i]</code><sub>，</sub>这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 <code>j</code>，都有一个尺寸 <code>s[j]</code><sub>&nbsp;</sub>。如果 <code>s[j]&nbsp;&gt;= g[i]</code>，我们可以将这个饼干 <code>j</code> 分配给孩子 <code>i</code> ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p> &nbsp; \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> g = [1,2,3], s = [1,1]\n<strong>输出:</strong> 1\n<strong>解释:</strong> \n你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。\n虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。\n所以你应该输出1。\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> g = [1,2], s = [1,2,3]\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。\n你拥有的饼干数量和尺寸都足以让所有孩子满足。\n所以你应该输出2.\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= g.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= g[i], s[j] &lt;=&nbsp;2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('456. 132 模式', '<p>给你一个整数数组 <code>nums</code> ，数组中共有 <code>n</code> 个整数。<strong>132 模式的子序列</strong> 由三个整数 <code>nums[i]</code>、<code>nums[j]</code> 和 <code>nums[k]</code> 组成，并同时满足：<code>i &lt; j &lt; k</code> 和 <code>nums[i] &lt; nums[k] &lt; nums[j]</code> 。</p> \n<p>如果 <code>nums</code> 中存在 <strong>132 模式的子序列</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4]\n<strong>输出：</strong>false\n<strong>解释：</strong>序列中不存在 132 模式的子序列。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [3,1,4,2]\n<strong>输出：</strong>true\n<strong>解释：</strong>序列中有 1 个 132 模式的子序列： [1, 4, 2] 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [-1,3,2,0]\n<strong>输出：</strong>true\n<strong>解释：</strong>序列中有 3 个 132 模式的的子序列：[-1, 3, 2]、[-1, 3, 0] 和 [-1, 2, 0] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>1 &lt;= n &lt;= 2 * 10<sup>5</sup></code></li> \n <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('457. 环形数组是否存在循环', '<p>存在一个不含 <code>0</code> 的<strong> 环形 </strong>数组&nbsp;<code>nums</code> ，每个 <code>nums[i]</code> 都表示位于下标 <code>i</code> 的角色应该向前或向后移动的下标个数：</p> \n<ul> \n <li>如果 <code>nums[i]</code> 是正数，<strong>向前</strong>（下标递增方向）移动 <code>|nums[i]|</code> 步</li> \n <li>如果&nbsp;<code>nums[i]</code> 是负数，<strong>向后</strong>（下标递减方向）移动 <code>|nums[i]|</code> 步</li> \n</ul> \n<p>因为数组是 <strong>环形</strong> 的，所以可以假设从最后一个元素向前移动一步会到达第一个元素，而第一个元素向后移动一步会到达最后一个元素。</p> \n<p>数组中的 <strong>循环</strong> 由长度为 <code>k</code> 的下标序列 <code>seq</code> 标识：</p> \n<ul> \n <li>遵循上述移动规则将导致一组重复下标序列 <code>seq[0] -&gt; seq[1] -&gt; ... -&gt; seq[k - 1] -&gt; seq[0] -&gt; ...</code></li> \n <li>所有 <code>nums[seq[j]]</code> 应当不是 <strong>全正</strong> 就是 <strong>全负</strong></li> \n <li><code>k &gt; 1</code></li> \n</ul> \n<p>如果 <code>nums</code> 中存在循环，返回 <code>true</code> ；否则，返回<em> </em><code>false</code><em> </em>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [2,-1,1,2,2]\n<strong>输出：</strong>true\n<strong>解释：</strong>存在循环，按下标 0 -&gt; 2 -&gt; 3 -&gt; 0 。循环长度为 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [-1,2]\n<strong>输出：</strong>false\n<strong>解释：</strong>按下标 1 -&gt; 1 -&gt; 1 ... 的运动无法构成循环，因为循环的长度为 1 。根据定义，循环的长度必须大于 1 。\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入：</strong>nums = [-2,1,-1,-2,-2]\n<strong>输出：</strong>false\n<strong>解释：</strong>按下标 1 -&gt; 2 -&gt; 1 -&gt; ... 的运动无法构成循环，因为 nums[1] 是正数，而 nums[2] 是负数。\n所有 nums[seq[j]] 应当不是全正就是全负。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 5000</code></li> \n <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> \n <li><code>nums[i] != 0</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你能设计一个时间复杂度为 <code>O(n)</code> 且额外空间复杂度为 <code>O(1)</code> 的算法吗？</p>');
INSERT INTO `leecode` VALUES ('458. 可怜的小猪', '<p>有<code> buckets</code> 桶液体，其中 <strong>正好</strong> 有一桶含有毒药，其余装的都是水。它们从外观看起来都一样。为了弄清楚哪只水桶含有毒药，你可以喂一些猪喝，通过观察猪是否会死进行判断。不幸的是，你只有&nbsp;<code>minutesToTest</code> 分钟时间来确定哪桶液体是有毒的。</p> \n<p>喂猪的规则如下：</p> \n<ol> \n <li>选择若干活猪进行喂养</li> \n <li>可以允许小猪同时饮用任意数量的桶中的水，并且该过程不需要时间。</li> \n <li>小猪喝完水后，必须有 <code>minutesToDie</code> 分钟的冷却时间。在这段时间里，你只能观察，而不允许继续喂猪。</li> \n <li>过了 <code>minutesToDie</code> 分钟后，所有喝到毒药的猪都会死去，其他所有猪都会活下来。</li> \n <li>重复这一过程，直到时间用完。</li> \n</ol> \n<p>给你桶的数目 <code>buckets</code> ，<code>minutesToDie</code> 和 <code>minutesToTest</code> ，返回在规定时间内判断哪个桶有毒所需的 <strong>最小</strong> 猪数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>buckets = 1000, minutesToDie = 15, minutesToTest = 60\n<strong>输出：</strong>5\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>buckets = 4, minutesToDie = 15, minutesToTest = 15\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>buckets = 4, minutesToDie = 15, minutesToTest = 30\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= buckets &lt;= 1000</code></li> \n <li><code>1 &lt;=&nbsp;minutesToDie &lt;=&nbsp;minutesToTest &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('459. 重复的子字符串', '<p>给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过10000。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> \"abab\"\n\n<strong>输出:</strong> True\n\n<strong>解释:</strong> 可由子字符串 \"ab\" 重复两次构成。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> \"aba\"\n\n<strong>输出:</strong> False\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> \"abcabcabcabc\"\n\n<strong>输出:</strong> True\n\n<strong>解释:</strong> 可由子字符串 \"abc\" 重复四次构成。 (或者子字符串 \"abcabc\" 重复两次构成。)\n</pre>');
INSERT INTO `leecode` VALUES ('46. 全排列', '<p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <strong>所有可能的全排列</strong> 。你可以 <strong>按任意顺序</strong> 返回答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3]\n<strong>输出：</strong>[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,1]\n<strong>输出：</strong>[[0,1],[1,0]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1]\n<strong>输出：</strong>[[1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 6</code></li> \n <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> \n <li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('460. LFU 缓存', '<p>请你为 <a href=\"https://baike.baidu.com/item/%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95\">最不经常使用（LFU）</a>缓存算法设计并实现数据结构。</p> \n<p>实现 <code>LFUCache</code> 类：</p> \n<ul> \n <li><code>LFUCache(int capacity)</code> - 用数据结构的容量&nbsp;<code>capacity</code> 初始化对象</li> \n <li><code>int get(int key)</code>&nbsp;- 如果键存在于缓存中，则获取键的值，否则返回 -1。</li> \n <li><code>void put(int key, int value)</code>&nbsp;- 如果键已存在，则变更其值；如果键不存在，请插入键值对。当缓存达到其容量时，则应该在插入新项之前，使最不经常使用的项无效。在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，应该去除 <strong>最近最久未使用</strong> 的键。</li> \n</ul> \n<p><strong>注意</strong>「项的使用次数」就是自插入该项以来对其调用 <code>get</code> 和 <code>put</code> 函数的次数之和。使用次数会在对应项被移除后置为 0 。</p> \n<p>为了确定最不常使用的键，可以为缓存中的每个键维护一个 <strong>使用计数器</strong> 。使用计数最小的键是最久未使用的键。</p> \n<p>当一个键首次插入到缓存中时，它的使用计数器被设置为 <code>1</code> (由于 put 操作)。对缓存中的键执行 <code>get</code> 或 <code>put</code> 操作，使用计数器的值将会递增。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\n<strong>输出：</strong>\n[null, null, null, 1, null, -1, 3, null, -1, 3, 4]\n\n<strong>解释：</strong>\n// cnt(x) = 键 x 的使用计数\n// cache=[] 将显示最后一次使用的顺序（最左边的元素是最近的）\nLFUCache lFUCache = new LFUCache(2);\nlFUCache.put(1, 1);   // cache=[1,_], cnt(1)=1\nlFUCache.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\nlFUCache.get(1);      // 返回 1\n                      // cache=[1,2], cnt(2)=1, cnt(1)=2\nlFUCache.put(3, 3);   // 去除键 2 ，因为 cnt(2)=1 ，使用计数最小\n                      // cache=[3,1], cnt(3)=1, cnt(1)=2\nlFUCache.get(2);      // 返回 -1（未找到）\nlFUCache.get(3);      // 返回 3\n                      // cache=[3,1], cnt(3)=2, cnt(1)=2\nlFUCache.put(4, 4);   // 去除键 1 ，1 和 3 的 cnt 相同，但 1 最久未使用\n                      // cache=[4,3], cnt(4)=1, cnt(3)=2\nlFUCache.get(1);      // 返回 -1（未找到）\nlFUCache.get(3);      // 返回 3\n                      // cache=[3,4], cnt(4)=1, cnt(3)=3\nlFUCache.get(4);      // 返回 4\n                      // cache=[3,4], cnt(4)=2, cnt(3)=3</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;=&nbsp;capacity, key, value &lt;= 10<sup>4</sup></code></li> \n <li>最多调用 <code>10<sup>5</sup></code> 次 <code>get</code> 和 <code>put</code> 方法</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你可以为这两种操作设计时间复杂度为 <code>O(1)</code> 的实现吗？</p>');
INSERT INTO `leecode` VALUES ('461. 汉明距离', '<p>两个整数之间的 <a href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB\">汉明距离</a> 指的是这两个数字对应二进制位不同的位置的数目。</p> \n<p>给你两个整数 <code>x</code> 和 <code>y</code>，计算并返回它们之间的汉明距离。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>x = 1, y = 4\n<strong>输出：</strong>2\n<strong>解释：</strong>\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\n上面的箭头指出了对应二进制位不同的位置。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>x = 3, y = 1\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;=&nbsp;x, y &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('462. 最少移动次数使数组元素相等 II', '<p>给定一个非空整数数组，找到使所有数组元素相等所需的最小移动数，其中每次移动可将选定的一个元素加1或减1。 您可以假设数组的长度最多为10000。</p> \n<p><strong>例如:</strong></p> \n<pre><strong>输入:</strong>\n[1,2,3]\n\n<strong>输出:</strong>\n2\n\n<strong>说明：\n</strong>只有两个动作是必要的（记得每一步仅可使其中一个元素加1或减1）： \n\n[1,2,3]  =&gt;  [2,2,3]  =&gt;  [2,2,2]\n</pre>');
INSERT INTO `leecode` VALUES ('463. 岛屿的周长', '<p>给定一个 <code>row x col</code> 的二维网格地图 <code>grid</code> ，其中：<code>grid[i][j] = 1</code> 表示陆地， <code>grid[i][j] = 0</code> 表示水域。</p> \n<p>网格中的格子 <strong>水平和垂直</strong> 方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。</p> \n<p>岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/island.png\"></p> \n<pre><strong>输入：</strong>grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\n<strong>输出：</strong>16\n<strong>解释：</strong>它的周长是上面图片中的 16 个黄色的边</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>grid = [[1]]\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,0]]\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>row == grid.length</code></li> \n <li><code>col == grid[i].length</code></li> \n <li><code>1 &lt;= row, col &lt;= 100</code></li> \n <li><code>grid[i][j]</code> 为 <code>0</code> 或 <code>1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('464. 我能赢吗', '<p>在 \"100 game\" 这个游戏中，两名玩家轮流选择从 1 到 10 的任意整数，累计整数和，先使得累计整数和达到或超过 100 的玩家，即为胜者。</p> \n<p>如果我们将游戏规则改为 “玩家不能重复使用整数” 呢？</p> \n<p>例如，两个玩家可以轮流从公共整数池中抽取从 1 到 15 的整数（不放回），直到累计整数和 &gt;= 100。</p> \n<p>给定一个整数&nbsp;<code>maxChoosableInteger</code>&nbsp;（整数池中可选择的最大数）和另一个整数&nbsp;<code>desiredTotal</code>（累计和），判断先出手的玩家是否能稳赢（假设两位玩家游戏时都表现最佳）？</p> \n<p>你可以假设&nbsp;<code>maxChoosableInteger</code>&nbsp;不会大于 20，&nbsp;<code>desiredTotal</code>&nbsp;不会大于 300。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\nmaxChoosableInteger = 10\ndesiredTotal = 11\n\n<strong>输出：</strong>\nfalse\n\n<strong>解释：\n</strong>无论第一个玩家选择哪个整数，他都会失败。\n第一个玩家可以选择从 1 到 10 的整数。\n如果第一个玩家选择 1，那么第二个玩家只能选择从 2 到 10 的整数。\n第二个玩家可以通过选择整数 10（那么累积和为 11 &gt;= desiredTotal），从而取得胜利.\n同样地，第一个玩家选择任意其他整数，第二个玩家都会赢。\n</pre>');
INSERT INTO `leecode` VALUES ('466. 统计重复个数', '<p>定义 <code>str = [s, n]</code> 表示 <code>str</code> 由 <code>n</code> 个字符串 <code>s</code> 连接构成。</p> \n<ul> \n <li>例如，<code>str == [\"abc\", 3] ==\"abcabcabc\"</code> 。</li> \n</ul> \n<p>如果可以从 <code>s2</code><sub>&nbsp;</sub>中删除某些字符使其变为 <code>s1</code>，则称字符串 <code>s1</code><sub>&nbsp;</sub>可以从字符串 <code>s2</code> 获得。</p> \n<ul> \n <li>例如，根据定义，<code>s1 = \"abc\"</code> 可以从 <code>s2 = \"ab<em><strong>dbe</strong></em>c\"</code> 获得，仅需要删除加粗且用斜体标识的字符。</li> \n</ul> \n<p>现在给你两个字符串 <code>s1</code>&nbsp;和 <code>s2</code> 和两个整数 <code>n1</code> 和 <code>n2</code> 。由此构造得到两个字符串，其中 <code>str1 = [s1, n1]</code>、<code>str2 = [s2, n2]</code> 。</p> \n<p>请你找出一个最大整数 <code>m</code> ，以满足 <code>str = [str2, m]</code> 可以从 <code>str1</code>&nbsp;获得。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s1.length, s2.length &lt;= 100</code></li> \n <li><code>s1</code> 和 <code>s2</code> 由小写英文字母组成</li> \n <li><code>1 &lt;= n1, n2 &lt;= 10<sup>6</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('467. 环绕字符串中唯一的子字符串', '<p>把字符串 <code>s</code> 看作是“abcdefghijklmnopqrstuvwxyz”的无限环绕字符串，所以&nbsp;<code>s</code> 看起来是这样的：\"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".&nbsp;</p> \n<p>现在我们有了另一个字符串 <code>p</code> 。你需要的是找出 <code>s</code> 中有多少个唯一的 <code>p</code> 的非空子串，尤其是当你的输入是字符串 <code>p</code> ，你需要输出字符串&nbsp;<code>s</code> 中 <code>p</code> 的不同的非空子串的数目。&nbsp;</p> \n<p><strong>注意:</strong> <code>p</code>&nbsp;仅由小写的英文字母组成，p 的大小可能超过 10000。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> \"a\"\n<strong>输出:</strong> 1\n<strong>解释:</strong> 字符串 S 中只有一个\"a\"子字符。\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> \"cac\"\n<strong>输出:</strong> 2\n<strong>解释:</strong> 字符串 S 中的字符串“cac”只有两个子串“a”、“c”。.\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> \"zab\"\n<strong>输出:</strong> 6\n<strong>解释:</strong> 在字符串 S 中有六个子串“z”、“a”、“b”、“za”、“ab”、“zab”。.\n</pre> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('468. 验证IP地址', '<p>编写一个函数来验证输入的字符串是否是有效的 IPv4 或&nbsp;IPv6 地址。</p> \n<ul> \n <li>如果是有效的 IPv4 地址，返回 <code>\"IPv4\"</code> ；</li> \n <li>如果是有效的 IPv6 地址，返回 <code>\"IPv6\"</code> ；</li> \n <li>如果不是上述类型的 IP 地址，返回 <code>\"Neither\"</code> 。</li> \n</ul> \n<p><strong>IPv4</strong>&nbsp;地址由十进制数和点来表示，每个地址包含 4 个十进制数，其范围为&nbsp;0 -&nbsp;255，&nbsp;用(\".\")分割。比如，<code>172.16.254.1</code>；</p> \n<p>同时，IPv4 地址内的数不会以 0 开头。比如，地址&nbsp;<code>172.16.254.01</code> 是不合法的。</p> \n<p><strong>IPv6</strong>&nbsp;地址由 8 组 16 进制的数字来表示，每组表示&nbsp;16 比特。这些组数字通过 (\":\")分割。比如,&nbsp;&nbsp;<code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code> 是一个有效的地址。而且，我们可以加入一些以 0 开头的数字，字母可以使用大写，也可以是小写。所以，&nbsp;<code>2001:db8:85a3:0:0:8A2E:0370:7334</code> 也是一个有效的 IPv6 address地址 (即，忽略 0 开头，忽略大小写)。</p> \n<p>然而，我们不能因为某个组的值为 0，而使用一个空的组，以至于出现 (::) 的情况。&nbsp;比如，&nbsp;<code>2001:0db8:85a3::8A2E:0370:7334</code> 是无效的 IPv6 地址。</p> \n<p>同时，在 IPv6 地址中，多余的 0 也是不被允许的。比如，&nbsp;<code>02001:0db8:85a3:0000:0000:8a2e:0370:7334</code> 是无效的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>IP = \"172.16.254.1\"\n<strong>输出：</strong>\"IPv4\"\n<strong>解释：</strong>有效的 IPv4 地址，返回 \"IPv4\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>IP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\n<strong>输出：</strong>\"IPv6\"\n<strong>解释：</strong>有效的 IPv6 地址，返回 \"IPv6\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>IP = \"256.256.256.256\"\n<strong>输出：</strong>\"Neither\"\n<strong>解释：</strong>既不是 IPv4 地址，又不是 IPv6 地址\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>IP = \"2001:0db8:85a3:0:0:8A2E:0370:7334:\"\n<strong>输出：</strong>\"Neither\"\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>IP = \"1e1.4.5.6\"\n<strong>输出：</strong>\"Neither\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>IP</code> 仅由英文字母，数字，字符 <code>\'.\'</code> 和 <code>\':\'</code> 组成。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('47. 全排列 II', '<p>给定一个可包含重复数字的序列 <code>nums</code> ，<strong>按任意顺序</strong> 返回所有不重复的全排列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,2]\n<strong>输出：</strong>\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3]\n<strong>输出：</strong>[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 8</code></li> \n <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('470. 用 Rand7() 实现 Rand10()', '<p>已有方法&nbsp;<code>rand7</code>&nbsp;可生成 1 到 7 范围内的均匀随机整数，试写一个方法&nbsp;<code>rand10</code>&nbsp;生成 1 到 10 范围内的均匀随机整数。</p> \n<p>不要使用系统的&nbsp;<code>Math.random()</code>&nbsp;方法。</p> \n<ol> \n</ol> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>1\n<strong>输出: </strong>[7]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>2\n<strong>输出: </strong>[8,4]\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入: </strong>3\n<strong>输出: </strong>[8,1,10]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ol> \n <li><code>rand7</code>&nbsp;已定义。</li> \n <li>传入参数:&nbsp;<code>n</code>&nbsp;表示&nbsp;<code>rand10</code>&nbsp;的调用次数。</li> \n</ol> \n<p>&nbsp;</p> \n<p><strong>进阶:</strong></p> \n<ol> \n <li><code>rand7()</code>调用次数的&nbsp;<a href=\"https://en.wikipedia.org/wiki/Expected_value\">期望值</a>&nbsp;是多少&nbsp;?</li> \n <li>你能否尽量少调用 <code>rand7()</code> ?</li> \n</ol>');
INSERT INTO `leecode` VALUES ('472. 连接词', '<p>给定一个 <strong>不含重复 </strong>单词的字符串数组 <code>words</code> ，编写一个程序，返回&nbsp;<code>words</code> 中的所有 <strong>连接词</strong> 。</p> \n<p><strong>连接词</strong> 的定义为：一个字符串完全是由至少两个给定数组中的单词组成的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\n<strong>输出：</strong>[\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\n<strong>解释：</strong>\"catsdogcats\"由\"cats\", \"dog\" 和 \"cats\"组成; \n     \"dogcatsdog\"由\"dog\", \"cats\"和\"dog\"组成; \n     \"ratcatdogcat\"由\"rat\", \"cat\", \"dog\"和\"cat\"组成。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>words = [\"cat\",\"dog\",\"catdog\"]\n<strong>输出：</strong>[\"catdog\"]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= words[i].length &lt;= 1000</code></li> \n <li><code>words[i]</code> 仅由小写字母组成</li> \n <li><code>0 &lt;= sum(words[i].length) &lt;= 6 * 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('473. 火柴拼正方形', '<p>还记得童话《卖火柴的小女孩》吗？现在，你知道小女孩有多少根火柴，请找出一种能使用所有火柴拼成一个正方形的方法。不能折断火柴，可以把火柴连接起来，并且每根火柴都要用到。</p> \n<p>输入为小女孩拥有火柴的数目，每根火柴用其长度表示。输出即为是否能用所有的火柴拼成正方形。</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> [1,1,2,2,2]\n<strong>输出:</strong> true\n\n<strong>解释:</strong> 能拼成一个边长为2的正方形，每边两根火柴。\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> [3,3,3,3,4]\n<strong>输出:</strong> false\n\n<strong>解释:</strong> 不能用所有火柴拼成一个正方形。\n</pre> \n<p><strong>注意:</strong></p> \n<ol> \n <li>给定的火柴长度和在&nbsp;<code>0</code>&nbsp;到&nbsp;<code>10^9</code>之间。</li> \n <li>火柴数组的长度不超过15。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('474. 一和零', '<p>给你一个二进制字符串数组 <code>strs</code> 和两个整数 <code>m</code> 和 <code>n</code> 。</p> \n<div class=\"MachineTrans-Lines\"> \n <p class=\"MachineTrans-lang-zh-CN\">请你找出并返回 <code>strs</code> 的最大子集的大小，该子集中 <strong>最多</strong> 有 <code>m</code> 个 <code>0</code> 和 <code>n</code> 个 <code>1</code> 。</p> \n <p class=\"MachineTrans-lang-zh-CN\">如果 <code>x</code> 的所有元素也是 <code>y</code> 的元素，集合 <code>x</code> 是集合 <code>y</code> 的 <strong>子集</strong> 。</p> \n</div> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>strs = [\"10\", \"0001\", \"111001\", \"1\", \"0\"], m = 5, n = 3\n<strong>输出：</strong>4\n<strong>解释：</strong>最多有 5 个 0 和 3 个 1 的最大子集是 {\"10\",\"0001\",\"1\",\"0\"} ，因此答案是 4 。\n其他满足题意但较小的子集包括 {\"0001\",\"1\"} 和 {\"10\",\"1\",\"0\"} 。{\"111001\"} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>strs = [\"10\", \"0\", \"1\"], m = 1, n = 1\n<strong>输出：</strong>2\n<strong>解释：</strong>最大的子集是 {\"0\", \"1\"} ，所以答案是 2 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= strs.length &lt;= 600</code></li> \n <li><code>1 &lt;= strs[i].length &lt;= 100</code></li> \n <li><code>strs[i]</code>&nbsp;仅由&nbsp;<code>\'0\'</code> 和&nbsp;<code>\'1\'</code> 组成</li> \n <li><code>1 &lt;= m, n &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('475. 供暖器', '<p>冬季已经来临。&nbsp;你的任务是设计一个有固定加热半径的供暖器向所有房屋供暖。</p> \n<p>在加热器的加热半径范围内的每个房屋都可以获得供暖。</p> \n<p>现在，给出位于一条水平线上的房屋&nbsp;<code>houses</code> 和供暖器&nbsp;<code>heaters</code> 的位置，请你找出并返回可以覆盖所有房屋的最小加热半径。</p> \n<p><strong>说明</strong>：所有供暖器都遵循你的半径标准，加热的半径也一样。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> houses = [1,2,3], heaters = [2]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 仅在位置2上有一个供暖器。如果我们将加热半径设为1，那么所有房屋就都能得到供暖。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> houses = [1,2,3,4], heaters = [1,4]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 在位置1, 4上有两个供暖器。我们需要将加热半径设为1，这样所有房屋就都能得到供暖。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>houses = [1,5], heaters = [2]\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= houses.length, heaters.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= houses[i], heaters[i] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('476. 数字的补数', '<p>给你一个 <strong>正</strong> 整数 <code>num</code> ，输出它的补数。补数是对该数的二进制表示取反。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>num = 5\n<strong>输出：</strong>2\n<strong>解释：</strong>5 的二进制表示为 101（没有前导零位），其补数为 010。所以你需要输出 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>num = 1\n<strong>输出：</strong>0\n<strong>解释：</strong>1 的二进制表示为 1（没有前导零位），其补数为 0。所以你需要输出 0 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>给定的整数 <code>num</code> 保证在 32 位带符号整数的范围内。</li> \n <li><code>num &gt;= 1</code></li> \n <li>你可以假定二进制数不包含前导零位。</li> \n <li>本题与 1009 <a href=\"https://leetcode-cn.com/problems/complement-of-base-10-integer/\">https://leetcode-cn.com/problems/complement-of-base-10-integer/</a> 相同</li> \n</ul>');
INSERT INTO `leecode` VALUES ('477. 汉明距离总和', '<p>两个整数的&nbsp;<a href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/475174?fr=aladdin\">汉明距离</a> 指的是这两个数字的二进制数对应位不同的数量。</p> \n<p>给你一个整数数组 <code>nums</code>，请你计算并返回 <code>nums</code> 中任意两个数之间汉明距离的总和。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [4,14,2]\n<strong>输出：</strong>6\n<strong>解释：</strong>在二进制表示中，4 表示为 0100 ，14 表示为 1110 ，2表示为 0010 。（这样表示是为了体现后四位之间关系）\n所以答案为：\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [4,14,4]\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('478. 在圆内随机生成点', '<p>给定圆的半径和圆心的 x、y 坐标，写一个在圆中产生均匀随机点的函数&nbsp;<code>randPoint</code>&nbsp;。</p> \n<p>说明:</p> \n<ol> \n <li>输入值和输出值都将是<a href=\"https://baike.baidu.com/item/%E6%B5%AE%E7%82%B9%E6%95%B0/6162520\">浮点数</a>。</li> \n <li>圆的半径和圆心的 x、y 坐标将作为参数传递给类的构造函数。</li> \n <li>圆周上的点也认为是在圆中。</li> \n <li><code>randPoint</code>&nbsp;返回一个包含随机点的x坐标和y坐标的大小为2的数组。</li> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: \n</strong>[\"Solution\",\"randPoint\",\"randPoint\",\"randPoint\"]\n[[1,0,0],[],[],[]]\n<strong>输出: </strong>[null,[-0.72939,-0.65505],[-0.78502,-0.28626],[-0.83119,-0.19803]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入: \n</strong>[\"Solution\",\"randPoint\",\"randPoint\",\"randPoint\"]\n[[10,5,-7.5],[],[],[]]\n<strong>输出: </strong>[null,[11.52438,-8.33273],[2.46992,-16.21705],[11.13430,-12.42337]]</pre> \n<p><strong>输入语法说明：</strong></p> \n<p>输入是两个列表：调用成员函数名和调用的参数。<code>Solution</code>&nbsp;的构造函数有三个参数，圆的半径、圆心的 x 坐标、圆心的 y 坐标。<code>randPoint</code>&nbsp;没有参数。输入参数是一个列表，即使参数为空，也会输入一个 [] 空列表。</p>');
INSERT INTO `leecode` VALUES ('479. 最大回文数乘积', '<p>你需要找到由两个 n 位数的乘积组成的最大回文数。</p> \n<p>由于结果会很大，你只需返回最大回文数 mod 1337得到的结果。</p> \n<p><strong>示例:</strong></p> \n<p>输入: 2</p> \n<p>输出: 987</p> \n<p>解释: 99 x 91 = 9009, 9009 % 1337 = 987</p> \n<p><strong>说明:</strong></p> \n<p>n 的取值范围为&nbsp;[1,8]。</p>');
INSERT INTO `leecode` VALUES ('48. 旋转图像', '<p>给定一个 <em>n&nbsp;</em>×&nbsp;<em>n</em> 的二维矩阵&nbsp;<code>matrix</code> 表示一个图像。请你将图像顺时针旋转 90 度。</p> \n<p>你必须在<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\"> 原地</a></strong> 旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要 </strong>使用另一个矩阵来旋转图像。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 642px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>输出：</strong>[[7,4,1],[8,5,2],[9,6,3]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 800px; height: 321px;\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n<strong>输出：</strong>[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>matrix = [[1]]\n<strong>输出：</strong>[[1]]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>matrix = [[1,2],[3,4]]\n<strong>输出：</strong>[[3,1],[4,2]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>matrix.length == n</code></li> \n <li><code>matrix[i].length == n</code></li> \n <li><code>1 &lt;= n &lt;= 20</code></li> \n <li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('480. 滑动窗口中位数', '<p>中位数是有序序列最中间的那个数。如果序列的长度是偶数，则没有最中间的数；此时中位数是最中间的两个数的平均数。</p> \n<p>例如：</p> \n<ul> \n <li><code>[2,3,4]</code>，中位数是&nbsp;<code>3</code></li> \n <li><code>[2,3]</code>，中位数是 <code>(2 + 3) / 2 = 2.5</code></li> \n</ul> \n<p>给你一个数组 <em>nums</em>，有一个长度为 <em>k</em> 的窗口从最左端滑动到最右端。窗口中有 <em>k</em> 个数，每次窗口向右移动 <em>1</em> 位。你的任务是找出每次窗口移动后得到的新窗口中元素的中位数，并输出由它们组成的数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<p>给出&nbsp;<em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>，以及&nbsp;<em>k</em> = 3。</p> \n<pre>窗口位置                      中位数\n---------------               -----\n[1  3  -1] -3  5  3  6  7       1\n 1 [3  -1  -3] 5  3  6  7      -1\n 1  3 [-1  -3  5] 3  6  7      -1\n 1  3  -1 [-3  5  3] 6  7       3\n 1  3  -1  -3 [5  3  6] 7       5\n 1  3  -1  -3  5 [3  6  7]      6\n</pre> \n<p>&nbsp;因此，返回该滑动窗口的中位数数组&nbsp;<code>[1,-1,-1,3,5,6]</code>。</p> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>你可以假设&nbsp;<code>k</code>&nbsp;始终有效，即：<code>k</code> 始终小于等于输入的非空数组的元素个数。</li> \n <li>与真实值误差在 <code>10 ^ -5</code> 以内的答案将被视作正确答案。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('481. 神奇字符串', '<p>神奇字符串 <code>s</code> 仅由 <code>\'1\'</code> 和 <code>\'2\'</code> 组成，并需要遵守下面的规则：</p> \n<ul> \n <li>神奇字符串 s 的神奇之处在于，串联字符串中 <code>\'1\'</code> 和 <code>\'2\'</code> 的连续出现次数可以生成该字符串。</li> \n</ul> \n<p><code>s</code> 的前几个元素是 <code>s = \"1221121221221121122……\"</code> 。如果将 <code>s</code> 中连续的若干 <code>1</code> 和 <code>2</code> 进行分组，可以得到 <code>\"1 22 11 2 1 22 1 22 11 2 11 22 ......\"</code> 。每组中 <code>1</code> 或者 <code>2</code> 的出现次数分别是 <code>\"1 2 2 1 1 2 1 2 2 1 2 2 ......\"</code> 。上面的出现次数正是 <code>s</code> 自身。</p> \n<p>给你一个整数 <code>n</code> ，返回在神奇字符串 <code>s</code> 的前 <code>n</code> 个数字中 <code>1</code> 的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 6\n<strong>输出：</strong>3\n<strong>解释：</strong>神奇字符串 s 的前 6 个元素是 “<code>122112</code>”，它包含三个 1，因此返回 3 。 \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('482. 密钥格式化', '<p>有一个密钥字符串 S ，只包含字母，数字以及 \'-\'（破折号）。其中， N 个 \'-\' 将字符串分成了 N+1 组。</p> \n<p>给你一个数字 K，请你重新格式化字符串，使每个分组恰好包含 K 个字符。特别地，第一个分组包含的字符个数必须小于等于 K，但至少要包含 1 个字符。两个分组之间需要用 \'-\'（破折号）隔开，并且将所有的小写字母转换为大写字母。</p> \n<p>给定非空字符串 S 和数字 K，按照上面描述的规则进行格式化。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>S = \"5F3Z-2e-9-w\", K = 4\n<strong>输出：</strong>\"5F3Z-2E9W\"\n<strong>解释：</strong>字符串 S 被分成了两个部分，每部分 4 个字符；\n&nbsp;    注意，两个额外的破折号需要删掉。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>S = \"2-5g-3-J\", K = 2\n<strong>输出：</strong>\"2-5G-3J\"\n<strong>解释：</strong>字符串 S 被分成了 3 个部分，按照前面的规则描述，第一部分的字符可以少于给定的数量，其余部分皆为 2 个字符。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ol> \n <li>S 的长度可能很长，请按需分配大小。K 为正整数。</li> \n <li>S 只包含字母数字（a-z，A-Z，0-9）以及破折号\'-\'</li> \n <li>S 非空</li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('483. 最小好进制', '<p>对于给定的整数 n, 如果n的k（k&gt;=2）进制数的所有数位全为1，则称&nbsp;k（k&gt;=2）是 n 的一个<em><strong>好进制</strong></em>。</p> \n<p>以字符串的形式给出 n, 以字符串的形式返回 n 的最小好进制。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\"13\"\n<strong>输出：</strong>\"3\"\n<strong>解释：</strong>13 的 3 进制是 111。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\"4681\"\n<strong>输出：</strong>\"8\"\n<strong>解释：</strong>4681 的 8 进制是 11111。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>\"1000000000000000000\"\n<strong>输出：</strong>\"999999999999999999\"\n<strong>解释：</strong>1000000000000000000 的 999999999999999999 进制是 11。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>n的取值范围是&nbsp;[3, 10^18]。</li> \n <li>输入总是有效且没有前导 0。</li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('485. 最大连续 1 的个数', '<p>给定一个二进制数组， 计算其中最大连续 1 的个数。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[1,1,0,1,1,1]\n<strong>输出：</strong>3\n<strong>解释：</strong>开头的两位和最后的三位都是连续 1 ，所以最大连续 1 的个数是 3.\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>输入的数组只包含&nbsp;<code>0</code> 和 <code>1</code> 。</li> \n <li>输入数组的长度是正整数，且不超过 10,000。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('486. 预测赢家', '<p>给定一个表示分数的非负整数数组。 玩家 1 从数组任意一端拿取一个分数，随后玩家 2 继续从剩余数组任意一端拿取分数，然后玩家 1 拿，…… 。每次一个玩家只能拿取一个分数，分数被拿取之后不再可取。直到没有剩余分数可取时游戏结束。最终获得分数总和最多的玩家获胜。</p> \n<p>给定一个表示分数的数组，预测玩家1是否会成为赢家。你可以假设每个玩家的玩法都会使他的分数最大化。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1, 5, 2]\n<strong>输出：</strong>False\n<strong>解释：</strong>一开始，玩家1可以从1和2中进行选择。\n如果他选择 2（或者 1 ），那么玩家 2 可以从 1（或者 2 ）和 5 中进行选择。如果玩家 2 选择了 5 ，那么玩家 1 则只剩下 1（或者 2 ）可选。\n所以，玩家 1 的最终分数为 1 + 2 = 3，而玩家 2 为 5 。\n因此，玩家 1 永远不会成为赢家，返回 False 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[1, 5, 233, 7]\n<strong>输出：</strong>True\n<strong>解释：</strong>玩家 1 一开始选择 1 。然后玩家 2 必须从 5 和 7 中进行选择。无论玩家 2 选择了哪个，玩家 1 都可以选择 233 。\n     最终，玩家 1（234 分）比玩家 2（12 分）获得更多的分数，所以返回 True，表示玩家 1 可以成为赢家。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>1 &lt;= 给定的数组长度&nbsp;&lt;= 20.</li> \n <li>数组里所有分数都为非负数且不会大于 10000000 。</li> \n <li>如果最终两个玩家的分数相等，那么玩家 1 仍为赢家。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('488. 祖玛游戏', '<p>回忆一下祖玛游戏。现在桌上有一串球，颜色有红色(R)，黄色(Y)，蓝色(B)，绿色(G)，还有白色(W)。 现在你手里也有几个球。</p> \n<p>每一次，你可以从手里的球选一个，然后把这个球插入到一串球中的某个位置上（包括最左端，最右端）。接着，如果有出现三个或者三个以上颜色相同的球相连的话，就把它们移除掉。重复这一步骤直到桌上所有的球都被移除。</p> \n<p>找到插入并可以移除掉桌上所有球所需的最少的球数。如果不能移除桌上所有的球，输出 -1 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>board = \"WRRBBW\", hand = \"RB\"\n<strong>输出：</strong>-1\n<strong>解释：</strong>WRRBBW -&gt; WRR[R]BBW -&gt; WBBW -&gt; WBB[B]W -&gt; WW\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>board = \"WWRRBBWW\", hand = \"WRBRW\"\n<strong>输出：</strong>2\n<strong>解释：</strong>WWRRBBWW -&gt; WWRR[R]BBWW -&gt; WWBBWW -&gt; WWBB[B]WW -&gt; WWWW -&gt; empty\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>board = \"G\", hand = \"GGGGG\"\n<strong>输出：</strong>2\n<strong>解释：</strong>G -&gt; G[G] -&gt; GG[G] -&gt; empty \n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>board = \"RBYYBBRRB\", hand = \"YRBGB\"\n<strong>输出：</strong>3\n<strong>解释：</strong>RBYYBBRRB -&gt; RBYY[Y]BBRRB -&gt; RBBBRRB -&gt; RRRB -&gt; B -&gt; B[B] -&gt; BB[B] -&gt; empty \n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>你可以假设桌上一开始的球中，不会有三个及三个以上颜色相同且连着的球。</li> \n <li><code>1 &lt;= board.length &lt;= 16</code></li> \n <li><code>1 &lt;= hand.length &lt;= 5</code></li> \n <li>输入的两个字符串均为非空字符串，且只包含字符 \'R\',\'Y\',\'B\',\'G\',\'W\'。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('491. 递增子序列', '<p>给你一个整数数组 <code>nums</code> ，找出并返回所有该数组中不同的递增子序列，递增子序列中 <strong>至少有两个元素</strong> 。你可以按 <strong>任意顺序</strong> 返回答案。</p> \n<p>数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [4,6,7,7]\n<strong>输出：</strong>[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [4,4,3,2,1]\n<strong>输出：</strong>[[4,4]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 15</code></li> \n <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('492. 构造矩形', '<p>作为一位web开发者， 懂得怎样去规划一个页面的尺寸是很重要的。 现给定一个具体的矩形页面面积，你的任务是设计一个长度为 L 和宽度为 W 且满足以下要求的矩形的页面。要求：</p> \n<pre>1. 你设计的矩形页面必须等于给定的目标面积。\n\n2. 宽度 W 不应大于长度 L，换言之，要求 L &gt;= W 。\n\n3. 长度 L 和宽度 W 之间的差距应当尽可能小。\n</pre> \n<p>你需要按顺序输出你设计的页面的长度 L 和宽度 W。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入:</strong> 4\n<strong>输出:</strong> [2, 2]\n<strong>解释:</strong> 目标面积是 4， 所有可能的构造方案有 [1,4], [2,2], [4,1]。\n但是根据要求2，[1,4] 不符合要求; 根据要求3，[2,2] 比 [4,1] 更能符合要求. 所以输出长度 L 为 2， 宽度 W 为 2。\n</pre> \n<p><strong>说明:</strong></p> \n<ol> \n <li>给定的面积不大于 10,000,000 且为正整数。</li> \n <li>你设计的页面的长度和宽度必须都是正整数。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('493. 翻转对', '<p>给定一个数组&nbsp;<code>nums</code>&nbsp;，如果&nbsp;<code>i &lt; j</code>&nbsp;且&nbsp;<code>nums[i] &gt; 2*nums[j]</code>&nbsp;我们就将&nbsp;<code>(i, j)</code>&nbsp;称作一个<strong><em>重要翻转对</em></strong>。</p> \n<p>你需要返回给定数组中的重要翻转对的数量。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入</strong>: [1,3,2,3,1]\n<strong>输出</strong>: 2\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入</strong>: [2,4,3,5,1]\n<strong>输出</strong>: 3\n</pre> \n<p><strong>注意:</strong></p> \n<ol> \n <li>给定数组的长度不会超过<code>50000</code>。</li> \n <li>输入数组中的所有数字都在32位整数的表示范围内。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('494. 目标和', '<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>target</code> 。</p> \n<p>向数组中的每个整数前添加&nbsp;<code>\'+\'</code> 或 <code>\'-\'</code> ，然后串联起所有整数，可以构造一个 <strong>表达式</strong> ：</p> \n<ul> \n <li>例如，<code>nums = [2, 1]</code> ，可以在 <code>2</code> 之前添加 <code>\'+\'</code> ，在 <code>1</code> 之前添加 <code>\'-\'</code> ，然后串联起来得到表达式 <code>\"+2-1\"</code> 。</li> \n</ul> \n<p>返回可以通过上述方法构造的、运算结果等于 <code>target</code> 的不同 <strong>表达式</strong> 的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,1,1,1], target = 3\n<strong>输出：</strong>5\n<strong>解释：</strong>一共有 5 种方法让最终目标和为 3 。\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1], target = 1\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 20</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> \n <li><code>0 &lt;= sum(nums[i]) &lt;= 1000</code></li> \n <li><code>-1000 &lt;= target &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('495. 提莫攻击', '<p>在《英雄联盟》的世界中，有一个叫 “提莫” 的英雄，他的攻击可以让敌方英雄艾希（编者注：寒冰射手）进入中毒状态。现在，给出提莫对艾希的攻击时间序列和提莫攻击的中毒持续时间，你需要输出艾希的中毒状态总时长。</p> \n<p>你可以认为提莫在给定的时间点进行攻击，并立即使艾希处于中毒状态。</p> \n<p>&nbsp;</p> \n<p><strong>示例1:</strong></p> \n<pre><strong>输入:</strong> [1,4], 2\n<strong>输出:</strong> 4\n<strong>原因:</strong> 第 1 秒初，提莫开始对艾希进行攻击并使其立即中毒。中毒状态会维持 2 秒钟，直到第 2 秒末结束。\n第 4 秒初，提莫再次攻击艾希，使得艾希获得另外 2 秒中毒时间。\n所以最终输出 4 秒。\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong>输入:</strong> [1,2], 2\n<strong>输出:</strong> 3\n<strong>原因:</strong> 第 1 秒初，提莫开始对艾希进行攻击并使其立即中毒。中毒状态会维持 2 秒钟，直到第 2 秒末结束。\n但是第 2 秒初，提莫再次攻击了已经处于中毒状态的艾希。\n由于中毒状态不可叠加，提莫在第 2 秒初的这次攻击会在第 3 秒末结束。\n所以最终输出 3 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>你可以假定时间序列数组的总长度不超过 10000。</li> \n <li>你可以假定提莫攻击时间序列中的数字和提莫攻击的中毒持续时间都是非负整数，并且不超过 10,000,000。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('496. 下一个更大元素 I', '<p>给你两个<strong> 没有重复元素</strong> 的数组&nbsp;<code>nums1</code> 和&nbsp;<code>nums2</code>&nbsp;，其中<code>nums1</code>&nbsp;是&nbsp;<code>nums2</code>&nbsp;的子集。</p> \n<p>请你找出 <code>nums1</code>&nbsp;中每个元素在&nbsp;<code>nums2</code>&nbsp;中的下一个比其大的值。</p> \n<p><code>nums1</code>&nbsp;中数字&nbsp;<code>x</code>&nbsp;的下一个更大元素是指&nbsp;<code>x</code>&nbsp;在&nbsp;<code>nums2</code>&nbsp;中对应位置的右边的第一个比&nbsp;<code>x</code><strong>&nbsp;</strong>大的元素。如果不存在，对应位置输出 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums1 = [4,1,2], nums2 = [1,3,4,2].\n<strong>输出:</strong> [-1,3,-1]\n<strong>解释:</strong>\n    对于 num1 中的数字 4 ，你无法在第二个数组中找到下一个更大的数字，因此输出 -1 。\n    对于 num1 中的数字 1 ，第二个数组中数字1右边的下一个较大数字是 3 。\n    对于 num1 中的数字 2 ，第二个数组中没有下一个更大的数字，因此输出 -1 。</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> nums1 = [2,4], nums2 = [1,2,3,4].\n<strong>输出:</strong> [3,-1]\n<strong>解释:</strong>\n&nbsp;   对于 num1 中的数字 2 ，第二个数组中的下一个较大数字是 3 。\n    对于 num1 中的数字 4 ，第二个数组中没有下一个更大的数字，因此输出 -1 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000</code></li> \n <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10<sup>4</sup></code></li> \n <li><code>nums1</code>和<code>nums2</code>中所有整数 <strong>互不相同</strong></li> \n <li><code>nums1</code> 中的所有整数同样出现在 <code>nums2</code> 中</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你可以设计一个时间复杂度为 <code>O(nums1.length + nums2.length)</code> 的解决方案吗？</p>');
INSERT INTO `leecode` VALUES ('497. 非重叠矩形中的随机点', '<p>给定一个非重叠轴对齐矩形的列表 <code>rects</code>，写一个函数 <code>pick</code> 随机均匀地选取矩形覆盖的空间中的整数点。</p> \n<p>提示：</p> \n<ol> \n <li><strong>整数点</strong>是具有整数坐标的点。</li> \n <li>矩形周边上的点包含在矩形覆盖的空间中。</li> \n <li>第 <code>i</code> 个矩形 <code>rects [i] = [x1，y1，x2，y2]</code>，其中&nbsp;<code>[x1，y1]</code> 是左下角的整数坐标，<code>[x2，y2]</code> 是右上角的整数坐标。</li> \n <li>每个矩形的长度和宽度不超过 2000。</li> \n <li><code>1 &lt;= rects.length&nbsp;&lt;= 100</code></li> \n <li><code>pick</code> 以整数坐标数组&nbsp;<code>[p_x, p_y]</code>&nbsp;的形式返回一个点。</li> \n <li><code>pick</code> 最多被调用10000次。</li> \n</ol> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: \n</strong>[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[[[1,1,5,5]]],[],[],[]]\n<strong>输出: \n</strong>[null,[4,1],[4,1],[3,3]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入: \n</strong>[\"Solution\",\"pick\",\"pick\",\"pick\",\"pick\",\"pick\"]\n[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]\n<strong>输出: \n</strong>[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]</pre> \n<p>&nbsp;</p> \n<p><strong>输入语法的说明：</strong></p> \n<p>输入是两个列表：调用的子例程及其参数。<code>Solution</code> 的构造函数有一个参数，即矩形数组 <code>rects</code>。<code>pick</code> 没有参数。参数总是用列表包装的，即使没有也是如此。</p> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('498. 对角线遍历', '<p>给定一个含有 M x N 个元素的矩阵（M 行，N 列），请以对角线遍历的顺序返回这个矩阵中的所有元素，对角线遍历如下图所示。</p> \n<p>&nbsp;</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong>\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n\n<strong>输出:</strong>  [1,2,4,7,5,3,6,8,9]\n\n<strong>解释:</strong>\n<img style=\"width: 220px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/diagonal_traverse.png\">\n</pre> \n<p>&nbsp;</p> \n<p><strong>说明:</strong></p> \n<ol> \n <li>给定矩阵中的元素总数不会超过 100000 。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('5. 最长回文子串', '<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"babad\"\n<strong>输出：</strong>\"bab\"\n<strong>解释：</strong>\"aba\" 同样是符合题意的答案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"cbbd\"\n<strong>输出：</strong>\"bb\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"a\"\n<strong>输出：</strong>\"a\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"ac\"\n<strong>输出：</strong>\"a\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 1000</code></li> \n <li><code>s</code> 仅由数字和英文字母（大写和/或小写）组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('50. Pow(x, n)', '<p>实现&nbsp;<a href=\"https://www.cplusplus.com/reference/valarray/pow/\">pow(<em>x</em>, <em>n</em>)</a>&nbsp;，即计算 x 的 n 次幂函数（即，x<sup><span style=\"font-size:10.8333px\">n</span></sup>）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>x = 2.00000, n = 10\n<strong>输出：</strong>1024.00000\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>x = 2.10000, n = 3\n<strong>输出：</strong>9.26100\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>x = 2.00000, n = -2\n<strong>输出：</strong>0.25000\n<strong>解释：</strong>2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>-100.0 &lt;&nbsp;x&nbsp;&lt; 100.0</code></li> \n <li><code>-2<sup>31</sup>&nbsp;&lt;= n &lt;=&nbsp;2<sup>31</sup>-1</code></li> \n <li><code>-10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('500. 键盘行', '<p>给你一个字符串数组 <code>words</code> ，只返回可以使用在 <strong>美式键盘</strong> 同一行的字母打印出来的单词。键盘如下图所示。</p> \n<p><strong>美式键盘</strong> 中：</p> \n<ul> \n <li>第一行由字符 <code>\"qwertyuiop\"</code> 组成。</li> \n <li>第二行由字符 <code>\"asdfghjkl\"</code> 组成。</li> \n <li>第三行由字符 <code>\"zxcvbnm\"</code> 组成。</li> \n</ul> \n<p><img style=\"width: 100%; max-width: 600px\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/keyboard.png\" alt=\"American keyboard\"></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\n<strong>输出：</strong>[\"Alaska\",\"Dad\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>words = [\"omk\"]\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>words = [\"adsdf\",\"sfd\"]\n<strong>输出：</strong>[\"adsdf\",\"sfd\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 20</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 100</code></li> \n <li><code>words[i]</code> 由英文字母（小写和大写字母）组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('501. 二叉搜索树中的众数', '<p>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</p> \n<p>假定 BST 有如下定义：</p> \n<ul> \n <li>结点左子树中所含结点的值小于等于当前结点的值</li> \n <li>结点右子树中所含结点的值大于等于当前结点的值</li> \n <li>左子树和右子树都是二叉搜索树</li> \n</ul> \n<p>例如：<br> 给定 BST <code>[1,null,2,2]</code>,</p> \n<pre>   1\n    \\\n     2\n    /\n   2\n</pre> \n<p><code>返回[2]</code>.</p> \n<p><strong>提示</strong>：如果众数超过1个，不需考虑输出顺序</p> \n<p><strong>进阶：</strong>你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）</p>');
INSERT INTO `leecode` VALUES ('502. IPO', '<p>假设 力扣（LeetCode）即将开始其 IPO。为了以更高的价格将股票卖给风险投资公司，力扣 希望在 IPO 之前开展一些项目以增加其资本。 由于资源有限，它只能在 IPO 之前完成最多 <strong>k</strong> 个不同的项目。帮助 力扣 设计完成最多 <strong>k</strong> 个不同项目后得到最大总资本的方式。</p> \n<p>给定若干个项目。对于每个项目 <strong>i</strong>，它都有一个纯利润 <strong>P<sub>i</sub></strong>，并且需要最小的资本 <strong>C<sub>i</sub></strong> 来启动相应的项目。最初，你有 <strong>W</strong> 资本。当你完成一个项目时，你将获得纯利润，且利润将被添加到你的总资本中。</p> \n<p>总而言之，从给定项目中选择最多 <strong>k</strong> 个不同项目的列表，以最大化最终资本，并输出最终可获得的最多资本。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].\n<strong>输出：</strong>4\n<strong>解释：\n</strong>由于你的初始资本为 0，你仅可以从 0 号项目开始。\n在完成后，你将获得 1 的利润，你的总资本将变为 1。\n此时你可以选择开始 1 号或 2 号项目。\n由于你最多可以选择两个项目，所以你需要完成 2 号项目以获得最大的资本。\n因此，输出最后最大化的资本，为 0 + 1 + 3 = 4。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>假设所有输入数字都是非负整数。</li> \n <li>表示利润和资本的数组的长度不超过 50000。</li> \n <li>答案保证在 32 位有符号整数范围内。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('503. 下一个更大元素 II', '<p>给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [1,2,1]\n<strong>输出:</strong> [2,-1,2]\n<strong>解释:</strong> 第一个 1 的下一个更大的数是 2；\n数字 2 找不到下一个更大的数； \n第二个 1 的下一个最大的数需要循环搜索，结果也是 2。\n</pre> \n<p><strong>注意:</strong> 输入数组的长度不会超过 10000。</p>');
INSERT INTO `leecode` VALUES ('504. 七进制数', '<p>给定一个整数 <code>num</code>，将其转化为 <strong>7 进制</strong>，并以字符串形式输出。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> num = 100\n<strong>输出:</strong> \"202\"\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> num = -7\n<strong>输出:</strong> \"-10\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>-10<sup>7</sup>&nbsp;&lt;= num &lt;= 10<sup>7</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('506. 相对名次', '<p>给出&nbsp;<strong>N</strong> 名运动员的成绩，找出他们的相对名次并授予前三名对应的奖牌。前三名运动员将会被分别授予 “金牌”，“银牌” 和“ 铜牌”（\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\"）。</p> \n<p>(注：分数越高的选手，排名越靠前。)</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [5, 4, 3, 2, 1]\n<strong>输出:</strong> [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\"]\n<strong>解释:</strong> 前三名运动员的成绩为前三高的，因此将会分别被授予 “金牌”，“银牌”和“铜牌” (\"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\").\n余下的两名运动员，我们只需要通过他们的成绩计算将其相对名次即可。</pre> \n<p><strong>提示:</strong></p> \n<ol> \n <li>N 是一个正整数并且不会超过&nbsp;10000。</li> \n <li>所有运动员的成绩都不相同。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('507. 完美数', '<p>对于一个&nbsp;<strong>正整数</strong>，如果它和除了它自身以外的所有 <strong>正因子</strong> 之和相等，我们称它为 「完美数」。</p> \n<p>给定一个&nbsp;<strong>整数&nbsp;</strong><code>n</code>，&nbsp;如果是完美数，返回 <code>true</code>，否则返回 <code>false</code></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>28\n<strong>输出：</strong>True\n<strong>解释：</strong>28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, 和 14 是 28 的所有正因子。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>num = 6\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>num = 496\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>num = 8128\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>num = 2\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= num &lt;= 10<sup>8</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('508. 出现次数最多的子树元素和', '<p>给你一个二叉树的根结点，请你找出出现次数最多的子树元素和。一个结点的「子树元素和」定义为以该结点为根的二叉树上所有结点的元素之和（包括结点本身）。</p> \n<p>你需要返回出现次数最多的子树元素和。如果有多个元素出现的次数相同，返回所有出现次数最多的子树元素和（不限顺序）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong><br> 输入:</p> \n<pre>  5\n /  \\\n2   -3\n</pre> \n<p>返回&nbsp;[2, -3, 4]，所有的值均只出现一次，以任意顺序返回所有值。</p> \n<p><strong>示例&nbsp;2：</strong><br> 输入：</p> \n<pre>  5\n /  \\\n2   -5\n</pre> \n<p>返回&nbsp;[2]，只有 2 出现两次，-5 只出现 1 次。</p> \n<p>&nbsp;</p> \n<p><strong>提示：</strong>&nbsp;假设任意子树元素和均可以用 32 位有符号整数表示。</p>');
INSERT INTO `leecode` VALUES ('509. 斐波那契数', '<p><strong>斐波那契数</strong>，通常用&nbsp;<code>F(n)</code> 表示，形成的序列称为 <strong>斐波那契数列</strong> 。该数列由&nbsp;<code>0</code> 和 <code>1</code> 开始，后面的每一项数字都是前面两项数字的和。也就是：</p> \n<pre>F(0) = 0，F(1)&nbsp;= 1\nF(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1\n</pre> \n<p>给你 <code>n</code> ，请计算 <code>F(n)</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>2\n<strong>输出：</strong>1\n<strong>解释：</strong>F(2) = F(1) + F(0) = 1 + 0 = 1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>3\n<strong>输出：</strong>2\n<strong>解释：</strong>F(3) = F(2) + F(1) = 1 + 1 = 2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>4\n<strong>输出：</strong>3\n<strong>解释：</strong>F(4) = F(3) + F(2) = 2 + 1 = 3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= n &lt;= 30</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('51. N 皇后', '<p><strong>n&nbsp;皇后问题</strong> 研究的是如何将 <code>n</code>&nbsp;个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p> \n<p>给你一个整数 <code>n</code> ，返回所有不同的&nbsp;<strong>n<em>&nbsp;</em>皇后问题</strong> 的解决方案。</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p>每一种解法包含一个不同的&nbsp;<strong>n 皇后问题</strong> 的棋子放置方案，该方案中 <code>\'Q\'</code> 和 <code>\'.\'</code> 分别代表了皇后和空位。</p> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <img style=\"width: 600px; height: 268px;\" src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>n = 4\n<strong>输出：</strong>[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n<strong>解释：</strong>如上图所示，4 皇后问题存在两个不同的解法。\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>[[\"Q\"]]\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>1 &lt;= n &lt;= 9</code></li> \n   <li>皇后彼此不能相互攻击，也就是说：任何两个皇后都不能处于同一条横行、纵行或斜线上。</li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('513. 找树左下角的值', '<p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，请找出该二叉树的&nbsp;<strong>最底层&nbsp;最左边&nbsp;</strong>节点的值。</p> \n<p>假设二叉树中至少有一个节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<p><img style=\"width: 182px;\" src=\"https://assets.leetcode.com/uploads/2020/12/14/tree1.jpg\"></p> \n<pre><strong>输入: </strong>root = [2,1,3]\n<strong>输出: </strong>1\n</pre> \n<p><strong>示例 2:</strong></p> \n<p><img style=\"width: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/12/14/tree2.jpg\"><strong> </strong></p> \n<pre><strong>输入: </strong>[1,2,3,4,null,5,6,null,null,7]\n<strong>输出: </strong>7\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li>二叉树的节点个数的范围是 <code>[1,10<sup>4</sup>]</code></li> \n <li><code>-2<sup>31</sup>&nbsp;&lt;= Node.val &lt;= 2<sup>31</sup>&nbsp;- 1</code>&nbsp;</li> \n</ul>');
INSERT INTO `leecode` VALUES ('514. 自由之路', '<p>电子游戏“辐射4”中，任务“通向自由”要求玩家到达名为“Freedom Trail Ring”的金属表盘，并使用表盘拼写特定关键词才能开门。</p> \n<p>给定一个字符串&nbsp;<strong>ring</strong>，表示刻在外环上的编码；给定另一个字符串&nbsp;<strong>key</strong>，表示需要拼写的关键词。您需要算出能够拼写关键词中所有字符的<strong>最少</strong>步数。</p> \n<p>最初，<strong>ring&nbsp;</strong>的第一个字符与12:00方向对齐。您需要顺时针或逆时针旋转 ring 以使&nbsp;<strong>key&nbsp;</strong>的一个字符在 12:00 方向对齐，然后按下中心按钮，以此逐个拼写完&nbsp;<strong>key&nbsp;</strong>中的所有字符。</p> \n<p>旋转&nbsp;<strong>ring&nbsp;</strong>拼出 key 字符&nbsp;<strong>key[i]&nbsp;</strong>的阶段中：</p> \n<ol> \n <li>您可以将&nbsp;<strong>ring&nbsp;</strong>顺时针或逆时针旋转<strong>一个位置</strong>，计为1步。旋转的最终目的是将字符串&nbsp;<strong>ring&nbsp;</strong>的一个字符与 12:00 方向对齐，并且这个字符必须等于字符&nbsp;<strong>key[i] 。</strong></li> \n <li>如果字符&nbsp;<strong>key[i]&nbsp;</strong>已经对齐到12:00方向，您需要按下中心按钮进行拼写，这也将算作&nbsp;<strong>1 步</strong>。按完之后，您可以开始拼写&nbsp;<strong>key&nbsp;</strong>的下一个字符（下一阶段）, 直至完成所有拼写。</li> \n</ol> \n<p><strong>示例：</strong></p> \n<p>&nbsp;</p> \n<center>\n <img style=\"width: 26%;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/ring.jpg\">\n</center> &nbsp; \n<pre><strong>输入:</strong> ring = \"godding\", key = \"gd\"\n<strong>输出:</strong> 4\n<strong>解释:</strong>\n 对于 key 的第一个字符 \'g\'，已经在正确的位置, 我们只需要1步来拼写这个字符。 \n 对于 key 的第二个字符 \'d\'，我们需要逆时针旋转 ring \"godding\" 2步使它变成 \"ddinggo\"。\n 当然, 我们还需要1步进行拼写。\n 因此最终的输出是 4。\n</pre> \n<p><strong>提示：</strong></p> \n<ol> \n <li><strong>ring</strong> 和&nbsp;<strong>key</strong>&nbsp;的字符串长度取值范围均为&nbsp;1 至&nbsp;100；</li> \n <li>两个字符串中都只有小写字符，并且均可能存在重复字符；</li> \n <li>字符串&nbsp;<strong>key</strong>&nbsp;一定可以由字符串 <strong>ring</strong>&nbsp;旋转拼出。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('515. 在每个树行中找最大值', '<p>给定一棵二叉树的根节点&nbsp;<code>root</code> ，请找出该二叉树中每一层的最大值。</p> \n<p>&nbsp;</p> \n<p><strong>示例1：</strong></p> \n<pre><strong>输入: </strong>root = [1,3,2,5,3,null,9]\n<strong>输出: </strong>[1,3,9]\n<strong>解释:</strong>\n          1\n         / \\\n        3   2\n       / \\   \\  \n      5   3   9 \n</pre> \n<p><strong>示例2：</strong></p> \n<pre><strong>输入: </strong>root = [1,2,3]\n<strong>输出: </strong>[1,3]\n<strong>解释:</strong>\n          1\n         / \\\n        2   3\n</pre> \n<p><strong>示例3：</strong></p> \n<pre><strong>输入: </strong>root = [1]\n<strong>输出: </strong>[1]\n</pre> \n<p><strong>示例4：</strong></p> \n<pre><strong>输入: </strong>root = [1,null,2]\n<strong>输出: </strong>[1,2]\n<strong>解释:</strong>      \n&nbsp;          1 \n&nbsp;           \\\n&nbsp;            2     \n</pre> \n<p><strong>示例5：</strong></p> \n<pre><strong>输入: </strong>root = []\n<strong>输出: </strong>[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>二叉树的节点个数的范围是 <code>[0,10<sup>4</sup>]</code></li> \n <li><code>-2<sup>31</sup>&nbsp;&lt;= Node.val &lt;= 2<sup>31</sup>&nbsp;- 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('516. 最长回文子序列', '<p>给你一个字符串 <code>s</code> ，找出其中最长的回文子序列，并返回该序列的长度。</p> \n<p>子序列定义为：不改变剩余字符顺序的情况下，删除某些字符或者不删除任何字符形成的一个序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"bbbab\"\n<strong>输出：</strong>4\n<strong>解释：</strong>一个可能的最长回文子序列为 \"bbbb\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"cbbd\"\n<strong>输出：</strong>2\n<strong>解释：</strong>一个可能的最长回文子序列为 \"bb\" 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 1000</code></li> \n <li><code>s</code> 仅由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('517. 超级洗衣机', '<p>假设有 <strong>n&nbsp;</strong>台超级洗衣机放在同一排上。开始的时候，每台洗衣机内可能有一定量的衣服，也可能是空的。</p> \n<p>在<strong>每一步操作</strong>中，你可以选择<strong>任意 m&nbsp;</strong>（1 ≤ m ≤ n）&nbsp;台洗衣机，与此<strong>同时</strong>将每台洗衣机的<strong>一件衣服</strong>送到相邻的一台洗衣机。</p> \n<p>给定一个非负整数数组代表从左至右每台洗衣机中的衣物数量，请给出能让所有洗衣机中剩下的衣物的数量相等的<strong>最少的操作步数</strong>。如果不能使每台洗衣机中衣物的数量相等，则返回 -1。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> [1,0,5]\n\n<strong>输出:</strong> 3\n\n<strong>解释:</strong> \n第一步:    1     0 &lt;-- 5    =&gt;    1     1     4\n第二步:    1 &lt;-- 1 &lt;-- 4    =&gt;    2     1     3    \n第三步:    2     1 &lt;-- 3    =&gt;    2     2     2   \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> [0,3,0]\n\n<strong>输出:</strong> 2\n\n<strong>解释:</strong> \n第一步:    0 &lt;-- 3     0    =&gt;    1     2     0    \n第二步:    1     2 --&gt; 0    =&gt;    1     1     1     \n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> [0,2,0]\n\n<strong>输出:</strong> -1\n\n<strong>解释:</strong> \n不可能让所有三个洗衣机同时剩下相同数量的衣物。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>n 的范围是 [1, 10000]。</li> \n <li>在每台超级洗衣机中，衣物数量的范围是 [0, 1e5]。</li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('518. 零钱兑换 II', '<p>给你一个整数数组 <code>coins</code> 表示不同面额的硬币，另给一个整数 <code>amount</code> 表示总金额。</p> \n<p>请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 <code>0</code> 。</p> \n<p>假设每一种面额的硬币有无限个。&nbsp;</p> \n<p>题目数据保证结果符合 32 位带符号整数。</p> \n<p>&nbsp;</p> \n<ul> \n</ul> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>amount = 5, coins = [1, 2, 5]\n<strong>输出：</strong>4\n<strong>解释：</strong>有四种方式可以凑成总金额：\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>amount = 3, coins = [2]\n<strong>输出：</strong>0\n<strong>解释：</strong>只用面额 2 的硬币不能凑成总金额 3 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>amount = 10, coins = [10] \n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= coins.length &lt;= 300</code></li> \n <li><code>1 &lt;= coins[i] &lt;= 5000</code></li> \n <li><code>coins</code> 中的所有值 <strong>互不相同</strong></li> \n <li><code>0 &lt;= amount &lt;= 5000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('519. 随机翻转矩阵', '<p>题中给出一个 <code>n_rows</code> 行 <code>n_cols</code> 列的二维矩阵，且所有值被初始化为 0。要求编写一个 <code>flip</code> 函数，<a href=\"https://en.wikipedia.org/wiki/Discrete_uniform_distribution\">均匀随机</a>的将矩阵中的 0 变为 1，并返回该值的位置下标 <code>[row_id,col_id]</code>；同样编写一个 <code>reset</code> 函数，将所有的值都重新置为 0。<strong>尽量最少调用随机函数 Math.random()</strong>，并且优化时间和空间复杂度。</p> \n<p><strong>注意:</strong></p> \n<ol> \n <li>1 &lt;= n_rows, n_cols &lt;= 10000</li> \n <li>0 &lt;= row.id &lt; n_rows 并且 0 &lt;= col.id &lt; n_cols</li> \n <li>当矩阵中没有值为 0 时，不可以调用 flip 函数</li> \n <li>调用 flip 和 reset 函数的次数加起来不会超过 1000 次</li> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: \n</strong>[\"Solution\",\"flip\",\"flip\",\"flip\",\"flip\"]\n[[2,3],[],[],[],[]]\n<strong>输出: </strong>[null,[0,1],[1,2],[1,0],[1,1]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入: \n</strong>[\"Solution\",\"flip\",\"flip\",\"reset\",\"flip\"]\n[[1,2],[],[],[],[]]\n<strong>输出: </strong>[null,[0,0],[0,1],null,[0,0]]</pre> \n<p><strong>输入语法解释：</strong></p> \n<p>输入包含两个列表：被调用的子程序和他们的参数。<code>Solution</code> 的构造函数有两个参数，分别为 <code>n_rows</code> 和 <code>n_cols</code>。<code>flip</code>&nbsp;和 <code>reset</code> 没有参数，参数总会以列表形式给出，哪怕该列表为空</p>');
INSERT INTO `leecode` VALUES ('52. N皇后 II', '<p><strong>n&nbsp;皇后问题</strong> 研究的是如何将 <code>n</code>&nbsp;个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p> \n<p>给你一个整数 <code>n</code> ，返回 <strong>n 皇后问题</strong> 不同的解决方案的数量。</p> \n<p>&nbsp;</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p><strong>示例 1：</strong></p> \n  <img style=\"width: 600px; height: 268px;\" src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>n = 4\n<strong>输出：</strong>2\n<strong>解释：</strong>如上图所示，4 皇后问题存在两个不同的解法。\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>1\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>1 &lt;= n &lt;= 9</code></li> \n   <li>皇后彼此不能相互攻击，也就是说：任何两个皇后都不能处于同一条横行、纵行或斜线上。</li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('520. 检测大写字母', '<p>给定一个单词，你需要判断单词的大写使用是否正确。</p> \n<p>我们定义，在以下情况时，单词的大写用法是正确的：</p> \n<ol> \n <li>全部字母都是大写，比如\"USA\"。</li> \n <li>单词中所有字母都不是大写，比如\"leetcode\"。</li> \n <li>如果单词不只含有一个字母，只有首字母大写，&nbsp;比如&nbsp;\"Google\"。</li> \n</ol> \n<p>否则，我们定义这个单词没有正确使用大写字母。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> \"USA\"\n<strong>输出:</strong> True\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> \"FlaG\"\n<strong>输出:</strong> False\n</pre> \n<p><strong>注意:</strong> 输入是由大写和小写拉丁字母组成的非空单词。</p>');
INSERT INTO `leecode` VALUES ('521. 最长特殊序列 Ⅰ', '<p>给你两个字符串，请你从这两个字符串中找出最长的特殊序列。</p> \n<p>「最长特殊序列」定义如下：该序列为某字符串独有的最长子序列（即不能是其他字符串的子序列）。</p> \n<p><strong>子序列</strong> 可以通过删去字符串中的某些字符实现，但不能改变剩余字符的相对顺序。空序列为所有字符串的子序列，任何字符串为其自身的子序列。</p> \n<p>输入为两个字符串，输出最长特殊序列的长度。如果不存在，则返回 -1。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> \"aba\", \"cdc\"\n<strong>输出:</strong> 3\n<strong>解释:</strong> 最长特殊序列可为 \"aba\" (或 \"cdc\")，两者均为自身的子序列且不是对方的子序列。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>a = \"aaa\", b = \"bbb\"\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>a = \"aaa\", b = \"aaa\"\n<strong>输出：</strong>-1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>两个字符串长度均处于区间&nbsp;<code>[1 - 100]</code> 。</li> \n <li>字符串中的字符仅含有&nbsp;<code>\'a\'~\'z\'</code> 。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('522. 最长特殊序列 II', '<p>给定字符串列表，你需要从它们中找出最长的特殊序列。最长特殊序列定义如下：该序列为某字符串独有的最长子序列（即不能是其他字符串的子序列）。</p> \n<p><strong>子序列</strong>可以通过删去字符串中的某些字符实现，但不能改变剩余字符的相对顺序。空序列为所有字符串的子序列，任何字符串为其自身的子序列。</p> \n<p>输入将是一个字符串列表，输出是最长特殊序列的长度。如果最长特殊序列不存在，返回 -1 。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入:</strong> \"aba\", \"cdc\", \"eae\"\n<strong>输出:</strong> 3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>所有给定的字符串长度不会超过 10 。</li> \n <li>给定字符串列表的长度将在 [2, 50 ] 之间。</li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('523. 连续的子数组和', '<p>给你一个整数数组 <code>nums</code> 和一个整数&nbsp;<code>k</code> ，编写一个函数来判断该数组是否含有同时满足下述条件的连续子数组：</p> \n<ul> \n <li>子数组大小 <strong>至少为 2</strong> ，且</li> \n <li>子数组元素总和为 <code>k</code> 的倍数。</li> \n</ul> \n<p>如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>如果存在一个整数 <code>n</code> ，令整数 <code>x</code> 符合 <code>x = n * k</code> ，则称 <code>x</code> 是 <code>k</code> 的一个倍数。<code>0</code> 始终视为 <code>k</code> 的一个倍数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [23<u>,2,4</u>,6,7], k = 6\n<strong>输出：</strong>true\n<strong>解释：</strong>[2,4] 是一个大小为 2 的子数组，并且和为 6 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [<u>23,2,6,4,7</u>], k = 6\n<strong>输出：</strong>true\n<strong>解释：</strong>[23, 2, 6, 4, 7] 是大小为 5 的子数组，并且和为 42 。 \n42 是 6 的倍数，因为 42 = 7 * 6 且 7 是一个整数。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [23,2,6,4,7], k = 13\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>0 &lt;= sum(nums[i]) &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>1 &lt;= k &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('524. 通过删除字母匹配到字典里最长单词', '<p>给你一个字符串 <code>s</code> 和一个字符串数组 <code>dictionary</code> 作为字典，找出并返回字典中最长的字符串，该字符串可以通过删除 <code>s</code> 中的某些字符得到。</p> \n<p>如果答案不止一个，返回长度最长且字典序最小的字符串。如果答案不存在，则返回空字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]\n<strong>输出：</strong>\"apple\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]\n<strong>输出：</strong>\"a\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 1000</code></li> \n <li><code>1 &lt;= dictionary.length &lt;= 1000</code></li> \n <li><code>1 &lt;= dictionary[i].length &lt;= 1000</code></li> \n <li><code>s</code> 和 <code>dictionary[i]</code> 仅由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('525. 连续数组', '<p>给定一个二进制数组 <code>nums</code> , 找到含有相同数量的 <code>0</code> 和 <code>1</code> 的最长连续子数组，并返回该子数组的长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums = [0,1]\n<strong>输出:</strong> 2\n<strong>说明:</strong> [0, 1] 是具有相同数量 0 和 1 的最长连续子数组。</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> nums = [0,1,0]\n<strong>输出:</strong> 2\n<strong>说明:</strong> [0, 1] (或 [1, 0]) 是具有相同数量0和1的最长连续子数组。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>nums[i]</code> 不是 <code>0</code> 就是 <code>1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('526. 优美的排列', '<p>假设有从 1 到 n 的 n 个整数。用这些整数构造一个数组 <code>perm</code>（<strong>下标从 1 开始</strong>），只要满足下述条件 <strong>之一</strong> ，该数组就是一个 <strong>优美的排列</strong> ：</p> \n<ul> \n <li><code>perm[i]</code> 能够被 <code>i</code> 整除</li> \n <li><code>i</code> 能够被 <code>perm[i]</code> 整除</li> \n</ul> \n<p>给你一个整数 <code>n</code> ，返回可以构造的 <strong>优美排列 </strong>的 <strong>数量</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>2\n<b>解释：</b>\n第 1 个优美的排列是 [1,2]：\n    - perm[1] = 1 能被 i = 1 整除\n    - perm[2] = 2 能被 i = 2 整除\n第 2 个优美的排列是 [2,1]:\n    - perm[1] = 2 能被 i = 1 整除\n    - i = 2 能被 perm[2] = 1 整除\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 15</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('528. 按权重随机选择', '<p>给定一个正整数数组&nbsp;<code>w</code> ，其中&nbsp;<code>w[i]</code>&nbsp;代表下标 <code>i</code>&nbsp;的权重（下标从 <code>0</code> 开始），请写一个函数&nbsp;<code>pickIndex</code>&nbsp;，它可以随机地获取下标 <code>i</code>，选取下标 <code>i</code>&nbsp;的概率与&nbsp;<code>w[i]</code>&nbsp;成正比。</p> \n<ol> \n</ol> \n<p>例如，对于 <code>w = [1, 3]</code>，挑选下标 <code>0</code> 的概率为 <code>1 / (1 + 3)&nbsp;= 0.25</code> （即，25%），而选取下标 <code>1</code> 的概率为 <code>3 / (1 + 3)&nbsp;= 0.75</code>（即，75%）。</p> \n<p>也就是说，选取下标 <code>i</code> 的概率为 <code>w[i] / sum(w)</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\n[\"Solution\",\"pickIndex\"]\n[[[1]],[]]\n<strong>输出：</strong>\n[null,0]\n<strong>解释：</strong>\nSolution solution = new Solution([1]);\nsolution.pickIndex(); // 返回 0，因为数组中只有一个元素，所以唯一的选择是返回下标 0。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\n[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\n[[[1,3]],[],[],[],[],[]]\n<strong>输出：</strong>\n[null,1,1,1,1,0]\n<strong>解释：</strong>\nSolution solution = new Solution([1, 3]);\nsolution.pickIndex(); // 返回 1，返回下标 1，返回该下标概率为 3/4 。\nsolution.pickIndex(); // 返回 1\nsolution.pickIndex(); // 返回 1\nsolution.pickIndex(); // 返回 1\nsolution.pickIndex(); // 返回 0，返回下标 0，返回该下标概率为 1/4 。\n\n由于这是一个随机问题，允许多个答案，因此下列输出都可以被认为是正确的:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\n诸若此类。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= w.length &lt;= 10000</code></li> \n <li><code>1 &lt;= w[i] &lt;= 10^5</code></li> \n <li><code>pickIndex</code>&nbsp;将被调用不超过&nbsp;<code>10000</code>&nbsp;次</li> \n</ul>');
INSERT INTO `leecode` VALUES ('529. 扫雷游戏', '<p>让我们一起来玩扫雷游戏！</p> \n<p>给定一个代表游戏板的二维字符矩阵。&nbsp;<strong>\'M\'</strong>&nbsp;代表一个<strong>未挖出的</strong>地雷，<strong>\'E\'</strong>&nbsp;代表一个<strong>未挖出的</strong>空方块，<strong>\'B\'&nbsp;</strong>代表没有相邻（上，下，左，右，和所有4个对角线）地雷的<strong>已挖出的</strong>空白方块，<strong>数字</strong>（\'1\' 到 \'8\'）表示有多少地雷与这块<strong>已挖出的</strong>方块相邻，<strong>\'X\'</strong>&nbsp;则表示一个<strong>已挖出的</strong>地雷。</p> \n<p>现在给出在所有<strong>未挖出的</strong>方块中（\'M\'或者\'E\'）的下一个点击位置（行和列索引），根据以下规则，返回相应位置被点击后对应的面板：</p> \n<ol> \n <li>如果一个地雷（\'M\'）被挖出，游戏就结束了- 把它改为&nbsp;<strong>\'X\'</strong>。</li> \n <li>如果一个<strong>没有相邻地雷</strong>的空方块（\'E\'）被挖出，修改它为（\'B\'），并且所有和其相邻的<strong>未挖出</strong>方块都应该被递归地揭露。</li> \n <li>如果一个<strong>至少与一个地雷相邻</strong>的空方块（\'E\'）被挖出，修改它为数字（\'1\'到\'8\'），表示相邻地雷的数量。</li> \n <li>如果在此次点击中，若无更多方块可被揭露，则返回面板。</li> \n</ol> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> \n\n[[\'E\', \'E\', \'E\', \'E\', \'E\'],\n [\'E\', \'E\', \'M\', \'E\', \'E\'],\n [\'E\', \'E\', \'E\', \'E\', \'E\'],\n [\'E\', \'E\', \'E\', \'E\', \'E\']]\n\nClick : [3,0]\n\n<strong>输出:</strong> \n\n[[\'B\', \'1\', \'E\', \'1\', \'B\'],\n [\'B\', \'1\', \'M\', \'1\', \'B\'],\n [\'B\', \'1\', \'1\', \'1\', \'B\'],\n [\'B\', \'B\', \'B\', \'B\', \'B\']]\n\n<strong>解释:</strong>\n<img style=\"width: 100%;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/minesweeper_example_1.png\">\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> \n\n[[\'B\', \'1\', \'E\', \'1\', \'B\'],\n [\'B\', \'1\', \'M\', \'1\', \'B\'],\n [\'B\', \'1\', \'1\', \'1\', \'B\'],\n [\'B\', \'B\', \'B\', \'B\', \'B\']]\n\nClick : [1,2]\n\n<strong>输出:</strong> \n\n[[\'B\', \'1\', \'E\', \'1\', \'B\'],\n [\'B\', \'1\', \'X\', \'1\', \'B\'],\n [\'B\', \'1\', \'1\', \'1\', \'B\'],\n [\'B\', \'B\', \'B\', \'B\', \'B\']]\n\n<strong>解释:</strong>\n<img style=\"width: 100%;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/minesweeper_example_2.png\">\n</pre> \n<p>&nbsp;</p> \n<p><strong>注意：</strong></p> \n<ol> \n <li>输入矩阵的宽和高的范围为 [1,50]。</li> \n <li>点击的位置只能是未被挖出的方块 (\'M\' 或者 \'E\')，这也意味着面板至少包含一个可点击的方块。</li> \n <li>输入面板不会是游戏结束的状态（即有地雷已被挖出）。</li> \n <li>简单起见，未提及的规则在这个问题中可被忽略。例如，当游戏结束时你不需要挖出所有地雷，考虑所有你可能赢得游戏或标记方块的情况。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('53. 最大子序和', '<p>给定一个整数数组 <code>nums</code>&nbsp;，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [-2,1,-3,4,-1,2,1,-5,4]\n<strong>输出：</strong>6\n<strong>解释：</strong>连续子数组&nbsp;[4,-1,2,1] 的和最大，为&nbsp;6 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [0]\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [-1]\n<strong>输出：</strong>-1\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>nums = [-100000]\n<strong>输出：</strong>-100000\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>如果你已经实现复杂度为 <code>O(n)</code> 的解法，尝试使用更为精妙的 <strong>分治法</strong> 求解。</p>');
INSERT INTO `leecode` VALUES ('530. 二叉搜索树的最小绝对差', '<p>给你一棵所有节点为非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n\n   1\n    \\\n     3\n    /\n   2\n\n<strong>输出：</strong>\n1\n\n<strong>解释：\n</strong>最小绝对差为 1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中至少有 2 个节点。</li> \n <li>本题与 783 <a href=\"https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/\">https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/</a> 相同</li> \n</ul>');
INSERT INTO `leecode` VALUES ('532. 数组中的 k-diff 数对', '<p>给定一个整数数组和一个整数&nbsp;<code><strong>k</strong></code>，你需要在数组里找到<strong> 不同的&nbsp;</strong>k-diff 数对，并返回不同的 <strong>k-diff 数对</strong> 的数目。</p> \n<p>这里将&nbsp;<strong>k-diff</strong>&nbsp;数对定义为一个整数对 <code>(nums[i], nums[j])</code>，并满足下述全部条件：</p> \n<ul> \n <li><code>0 &lt;= i &lt; j &lt; nums.length</code></li> \n <li><code>|nums[i] - nums[j]| == k</code></li> \n</ul> \n<p><strong>注意</strong>，<code>|val|</code> 表示 <code>val</code> 的绝对值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [3, 1, 4, 1, 5], k = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>数组中有两个 2-diff 数对, (1, 3) 和 (3, 5)。\n尽管数组中有两个1，但我们只应返回不同的数对的数量。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1, 2, 3, 4, 5], k = 1\n<strong>输出：</strong>4\n<strong>解释：</strong>数组中有四个 1-diff 数对, (1, 2), (2, 3), (3, 4) 和 (4, 5)。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1, 3, 1, 5, 4], k = 0\n<strong>输出：</strong>1\n<strong>解释：</strong>数组中只有一个 0-diff 数对，(1, 1)。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,4,4,3,3,0,9,2,3], k = 3\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>nums = [-1,-2,-3], k = 1\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-10<sup>7</sup> &lt;= nums[i] &lt;= 10<sup>7</sup></code></li> \n <li><code>0 &lt;= k &lt;= 10<sup>7</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('535. TinyURL 的加密与解密', '<p>TinyURL是一种URL简化服务， 比如：当你输入一个URL&nbsp;<code>https://leetcode.com/problems/design-tinyurl</code>&nbsp;时，它将返回一个简化的URL&nbsp;<code>http://tinyurl.com/4e9iAk</code>.</p> \n<p>要求：设计一个 TinyURL 的加密&nbsp;<code>encode</code>&nbsp;和解密&nbsp;<code>decode</code>&nbsp;的方法。你的加密和解密算法如何设计和运作是没有限制的，你只需要保证一个URL可以被加密成一个TinyURL，并且这个TinyURL可以用解密方法恢复成原本的URL。</p>');
INSERT INTO `leecode` VALUES ('537. 复数乘法', '<p><a href=\"https://baike.baidu.com/item/%E5%A4%8D%E6%95%B0/254365?fr=aladdin\">复数</a> 可以用字符串表示，遵循 <code>\"<strong>实部</strong>+<strong>虚部</strong>i\"</code> 的形式，并满足下述条件：</p> \n<ul> \n <li><code>实部</code> 是一个整数，取值范围是 <code>[-100, 100]</code></li> \n <li><code>虚部</code> 也是一个整数，取值范围是 <code>[-100, 100]</code></li> \n <li><code>i<sup>2</sup> == -1</code></li> \n</ul> \n<p>给你两个字符串表示的复数 <code>num1</code> 和 <code>num2</code> ，请你遵循复数表示形式，返回表示它们乘积的字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>num1 = \"1+1i\", num2 = \"1+1i\"\n<strong>输出：</strong>\"0+2i\"\n<strong>解释：</strong>(1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i ，你需要将它转换为 0+2i 的形式。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>num1 = \"1+-1i\", num2 = \"1+-1i\"\n<strong>输出：</strong>\"0+-2i\"\n<strong>解释：</strong>(1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i ，你需要将它转换为 0+-2i 的形式。 \n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>num1</code> 和 <code>num2</code> 都是有效的复数表示。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('538. 把二叉搜索树转换为累加树', '<p>给出二叉<strong> 搜索 </strong>树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 <code>node</code>&nbsp;的新值等于原树中大于或等于&nbsp;<code>node.val</code>&nbsp;的值之和。</p> \n<p>提醒一下，二叉搜索树满足下列约束条件：</p> \n<ul> \n <li>节点的左子树仅包含键<strong> 小于 </strong>节点键的节点。</li> \n <li>节点的右子树仅包含键<strong> 大于</strong> 节点键的节点。</li> \n <li>左右子树也必须是二叉搜索树。</li> \n</ul> \n<p><strong>注意：</strong>本题和 1038:&nbsp;<a href=\"https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree/\">https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree/</a> 相同</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 364px; width: 534px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/05/03/tree.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\n<strong>输出：</strong>[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = [0,null,1]\n<strong>输出：</strong>[1,null,1]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [1,0,2]\n<strong>输出：</strong>[3,3,2]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>root = [3,2,4,1]\n<strong>输出：</strong>[7,9,4,10]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中的节点数介于 <code>0</code>&nbsp;和 <code>10<sup>4</sup></code><sup>&nbsp;</sup>之间。</li> \n <li>每个节点的值介于 <code>-10<sup>4</sup></code>&nbsp;和&nbsp;<code>10<sup>4</sup></code>&nbsp;之间。</li> \n <li>树中的所有值 <strong>互不相同</strong> 。</li> \n <li>给定的树为二叉搜索树。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('539. 最小时间差', '<p>给定一个 24 小时制（小时:分钟 <strong>\"HH:MM\"</strong>）的时间列表，找出列表中任意两个时间的最小时间差并以分钟数表示。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>timePoints = [\"23:59\",\"00:00\"]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>timePoints = [\"00:00\",\"23:59\",\"00:00\"]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= timePoints &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>timePoints[i]</code> 格式为 <strong>\"HH:MM\"</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('54. 螺旋矩阵', '<p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵&nbsp;<code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 242px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>输出：</strong>[1,2,3,6,9,8,7,4,5]\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 322px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n<strong>输出：</strong>[1,2,3,4,8,12,11,10,9,5,6,7]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 10</code></li> \n <li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('540. 有序数组中的单一元素', '<p>给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums = [1,1,2,3,3,4,4,8,8]\n<strong>输出:</strong> 2\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> nums =  [3,3,7,7,10,11,11]\n<strong>输出:</strong> 10\n</pre> \n<p>&nbsp;</p> \n<p></p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= nums[i]&nbsp;&lt;= 10<sup>5</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶:</strong>&nbsp;采用的方案可以在 <code>O(log n)</code> 时间复杂度和 <code>O(1)</code> 空间复杂度中运行吗？</p>');
INSERT INTO `leecode` VALUES ('541. 反转字符串 II', '<p>给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每 <code>2k</code> 个字符反转前 <code>k</code> 个字符。</p> \n<ul> \n <li>如果剩余字符少于 <code>k</code> 个，则将剩余字符全部反转。</li> \n <li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"abcdefg\", k = 2\n<strong>输出：</strong>\"bacdfeg\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abcd\", k = 2\n<strong>输出：</strong>\"bacd\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> \n <li><code>s</code> 仅由小写英文组成</li> \n <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('542. 01 矩阵', '<p>给定一个由 <code>0</code> 和 <code>1</code> 组成的矩阵 <code>mat</code>&nbsp;，请输出一个大小相同的矩阵，其中每一个格子是 <code>mat</code> 中对应位置元素到最近的 <code>0</code> 的距离。</p> \n<p>两个相邻元素间的距离为 <code>1</code> 。</p> \n<p>&nbsp;</p> \n<p><b>示例 1：</b></p> \n<p><img style=\"width: 150px;\" src=\"https://pic.leetcode-cn.com/1626667201-NCWmuP-image.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>mat =<strong> </strong>[[0,0,0],[0,1,0],[0,0,0]]\n<strong>输出：</strong>[[0,0,0],[0,1,0],[0,0,0]]\n</pre> \n<p><b>示例 2：</b></p> \n<p><img style=\"width: 150px;\" src=\"https://pic.leetcode-cn.com/1626667205-xFxIeK-image.png\" alt=\"\"></p> \n<pre><b>输入：</b>mat =<b> </b>[[0,0,0],[0,1,0],[1,1,1]]\n<strong>输出：</strong>[[0,0,0],[0,1,0],[1,2,1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == mat.length</code></li> \n <li><code>n == mat[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= m * n &lt;= 10<sup>4</sup></code></li> \n <li><code>mat[i][j] is either 0 or 1.</code></li> \n <li><code>mat</code> 中至少有一个 <code>0&nbsp;</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('543. 二叉树的直径', '<p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 :</strong><br> 给定二叉树</p> \n<pre>          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n</pre> \n<p>返回&nbsp;<strong>3</strong>, 它的长度是路径 [4,2,1,3] 或者&nbsp;[5,2,1,3]。</p> \n<p>&nbsp;</p> \n<p><strong>注意：</strong>两结点之间的路径长度是以它们之间边的数目表示。</p>');
INSERT INTO `leecode` VALUES ('546. 移除盒子', '<p>给出一些不同颜色的盒子，盒子的颜色由数字表示，即不同的数字表示不同的颜色。</p> \n<p>你将经过若干轮操作去去掉盒子，直到所有的盒子都去掉为止。每一轮你可以移除具有相同颜色的连续 <code>k</code> 个盒子（<code>k&nbsp;&gt;= 1</code>），这样一轮之后你将得到 <code>k * k</code> 个积分。</p> \n<p>当你将所有盒子都去掉之后，求你能获得的最大积分和。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>boxes = [1,3,2,2,2,3,4,3,1]\n<strong>输出：</strong>23\n<strong>解释：</strong>\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \n----&gt; [1, 3, 3, 4, 3, 1] (3*3=9 分) \n----&gt; [1, 3, 3, 3, 1] (1*1=1 分) \n----&gt; [1, 1] (3*3=9 分) \n----&gt; [] (2*2=4 分)\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>boxes = [1,1,1]\n<strong>输出：</strong>9\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>boxes = [1]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= boxes.length &lt;= 100</code></li> \n <li><code>1 &lt;= boxes[i]&nbsp;&lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('547. 省份数量', '<div class=\"original__bRMd\"> \n <div> \n  <p>有 <code>n</code> 个城市，其中一些彼此相连，另一些没有相连。如果城市 <code>a</code> 与城市 <code>b</code> 直接相连，且城市 <code>b</code> 与城市 <code>c</code> 直接相连，那么城市 <code>a</code> 与城市 <code>c</code> 间接相连。</p> \n  <p><strong>省份</strong> 是一组直接或间接相连的城市，组内不含其他没有相连的城市。</p> \n  <p>给你一个 <code>n x n</code> 的矩阵 <code>isConnected</code> ，其中 <code>isConnected[i][j] = 1</code> 表示第 <code>i</code> 个城市和第 <code>j</code> 个城市直接相连，而 <code>isConnected[i][j] = 0</code> 表示二者不直接相连。</p> \n  <p>返回矩阵中 <strong>省份</strong> 的数量。</p> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <img style=\"width: 222px; height: 142px;\" src=\"https://assets.leetcode.com/uploads/2020/12/24/graph1.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>isConnected = [[1,1,0],[1,1,0],[0,0,1]]\n<strong>输出：</strong>2\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <img style=\"width: 222px; height: 142px;\" src=\"https://assets.leetcode.com/uploads/2020/12/24/graph2.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>isConnected = [[1,0,0],[0,1,0],[0,0,1]]\n<strong>输出：</strong>3\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>1 &lt;= n &lt;= 200</code></li> \n   <li><code>n == isConnected.length</code></li> \n   <li><code>n == isConnected[i].length</code></li> \n   <li><code>isConnected[i][j]</code> 为 <code>1</code> 或 <code>0</code></li> \n   <li><code>isConnected[i][i] == 1</code></li> \n   <li><code>isConnected[i][j] == isConnected[j][i]</code></li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('55. 跳跃游戏', '<p>给定一个非负整数数组&nbsp;<code>nums</code> ，你最初位于数组的 <strong>第一个下标</strong> 。</p> \n<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p> \n<p>判断你是否能够到达最后一个下标。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>nums = [2,3,1,1,4]\n<strong>输出：</strong>true\n<strong>解释：</strong>可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>nums = [3,2,1,0,4]\n<strong>输出：</strong>false\n<strong>解释：</strong>无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('551. 学生出勤记录 I', '<p>给你一个字符串 <code>s</code> 表示一个学生的出勤记录，其中的每个字符用来标记当天的出勤情况（缺勤、迟到、到场）。记录中只含下面三种字符：</p> \n<ul> \n <li><code>\'A\'</code>：Absent，缺勤</li> \n <li><code>\'L\'</code>：Late，迟到</li> \n <li><code>\'P\'</code>：Present，到场</li> \n</ul> \n<p>如果学生能够 <strong>同时</strong> 满足下面两个条件，则可以获得出勤奖励：</p> \n<ul> \n <li>按 <strong>总出勤</strong> 计，学生缺勤（<code>\'A\'</code>）<strong>严格</strong> 少于两天。</li> \n <li>学生 <strong>不会</strong> 存在 <strong>连续</strong> 3 天或 <strong>连续</strong> 3 天以上的迟到（<code>\'L\'</code>）记录。</li> \n</ul> \n<p>如果学生可以获得出勤奖励，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"PPALLP\"\n<strong>输出：</strong>true\n<strong>解释：</strong>学生缺勤次数少于 2 次，且不存在 3 天或以上的连续迟到记录。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"PPALLL\"\n<strong>输出：</strong>false\n<strong>解释：</strong>学生最后三天连续迟到，所以不满足出勤奖励的条件。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 1000</code></li> \n <li><code>s[i]</code> 为 <code>\'A\'</code>、<code>\'L\'</code> 或 <code>\'P\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('552. 学生出勤记录 II', '可以用字符串表示一个学生的出勤记录，其中的每个字符用来标记当天的出勤情况（缺勤、迟到、到场）。记录中只含下面三种字符： \n<ul> \n <li><code>\'A\'</code>：Absent，缺勤</li> \n <li><code>\'L\'</code>：Late，迟到</li> \n <li><code>\'P\'</code>：Present，到场</li> \n</ul> \n<p>如果学生能够 <strong>同时</strong> 满足下面两个条件，则可以获得出勤奖励：</p> \n<ul> \n <li>按 <strong>总出勤</strong> 计，学生缺勤（<code>\'A\'</code>）<strong>严格</strong> 少于两天。</li> \n <li>学生 <strong>不会</strong> 存在 <strong>连续</strong> 3 天或 <strong>连续</strong> 3 天以上的迟到（<code>\'L\'</code>）记录。</li> \n</ul> \n<p>给你一个整数 <code>n</code> ，表示出勤记录的长度（次数）。请你返回记录长度为 <code>n</code> 时，可能获得出勤奖励的记录情况 <strong>数量</strong> 。答案可能很大，所以返回对 <code>10<sup>9</sup> + 7</code> <strong>取余</strong> 的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>8\n<strong>解释：\n</strong>有 8 种长度为 2 的记录将被视为可奖励：\n\"PP\" , \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\" \n只有\"AA\"不会被视为可奖励，因为缺勤次数为 2 次（需要少于 2 次）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 10101\n<strong>输出：</strong>183236316\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('553. 最优除法', '<p>给定一组<strong>正整数，</strong>相邻的整数之间将会进行浮点除法操作。例如，&nbsp;[2,3,4] -&gt; 2 / 3 / 4 。</p> \n<p>但是，你可以在任意位置添加任意数目的括号，来改变算数的优先级。你需要找出怎么添加括号，才能得到<strong>最大的</strong>结果，并且返回相应的字符串格式的表达式。<strong>你的表达式不应该含有冗余的括号。</strong></p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入:</strong> [1000,100,10,2]\n<strong>输出:</strong> \"1000/(100/10/2)\"\n<strong>解释:</strong>\n1000/(100/10/2) = 1000/((100/10)/2) = 200\n但是，以下加粗的括号 \"1000/(<strong>(</strong>100/10<strong>)</strong>/2)\" 是冗余的，\n因为他们并不影响操作的优先级，所以你需要返回 \"1000/(100/10/2)\"。\n\n其他用例:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\n</pre> \n<p><strong>说明:</strong></p> \n<ol> \n <li>输入数组的长度在 [1, 10] 之间。</li> \n <li>数组中每个元素的大小都在 [2, 1000] 之间。</li> \n <li>每个测试用例只有一个最优除法解。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('554. 砖墙', '<p>你的面前有一堵矩形的、由 <code>n</code> 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和相等。</p> \n<p>你现在要画一条 <strong>自顶向下 </strong>的、穿过 <strong>最少 </strong>砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。<strong>你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。</strong></p> \n<p>给你一个二维数组 <code>wall</code> ，该数组包含这堵墙的相关信息。其中，<code>wall[i]</code> 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 <strong>穿过的砖块数量最少</strong> ，并且返回 <strong>穿过的砖块数量</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 493px; height: 577px;\" src=\"https://assets.leetcode.com/uploads/2021/04/24/cutwall-grid.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>wall = [[1],[1],[1]]\n<strong>输出：</strong>3\n</pre> &nbsp; \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == wall.length</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= wall[i].length &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= sum(wall[i].length) &lt;= 2 * 10<sup>4</sup></code></li> \n <li>对于每一行 <code>i</code> ，<code>sum(wall[i])</code> 是相同的</li> \n <li><code>1 &lt;= wall[i][j] &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('556. 下一个更大元素 III', '<p>给你一个正整数&nbsp;<code>n</code> ，请你找出符合条件的最小整数，其由重新排列 <code>n</code><strong>&nbsp;</strong>中存在的每位数字组成，并且其值大于 <code>n</code> 。如果不存在这样的正整数，则返回 <code>-1</code> 。</p> \n<p><strong>注意</strong> ，返回的整数应当是一个 <strong>32 位整数</strong> ，如果存在满足题意的答案，但不是 <strong>32 位整数</strong> ，同样返回 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 12\n<strong>输出：</strong>21\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 21\n<strong>输出：</strong>-1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('557. 反转字符串中的单词 III', '<p>给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\"Let\'s take LeetCode contest\"\n<strong>输出：</strong>\"s\'teL ekat edoCteeL tsetnoc\"\n</pre> \n<p>&nbsp;</p> \n<p><strong><strong><strong><strong>提示：</strong></strong></strong></strong></p> \n<ul> \n <li>在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('558. 四叉树交集', '<p>二进制矩阵中的所有元素不是 <strong>0</strong> 就是 <strong>1 </strong>。</p> \n<p>给你两个四叉树，<code>quadTree1</code> 和 <code>quadTree2</code>。其中 <code>quadTree1</code> 表示一个 <code>n * n</code> 二进制矩阵，而 <code>quadTree2</code> 表示另一个 <code>n * n</code> 二进制矩阵。</p> \n<p>请你返回一个表示 <code>n * n</code> 二进制矩阵的四叉树，它是 <code>quadTree1</code> 和 <code>quadTree2</code> 所表示的两个二进制矩阵进行 <strong>按位逻辑或运算</strong> 的结果。</p> \n<p>注意，当 <code>isLeaf</code> 为 <strong>False </strong>时，你可以把 <strong>True</strong> 或者 <strong>False</strong> 赋值给节点，两种值都会被判题机制 <strong>接受</strong> 。</p> \n<p>四叉树数据结构中，每个内部节点只有四个子节点。此外，每个节点都有两个属性：</p> \n<ul> \n <li><code>val</code>：储存叶子结点所代表的区域的值。1 对应 <strong>True</strong>，0 对应 <strong>False</strong>；</li> \n <li><code>isLeaf</code>: 当这个节点是一个叶子结点时为 <strong>True</strong>，如果它有 4 个子节点则为 <strong>False</strong> 。</li> \n</ul> \n<pre>class Node {\n    public boolean val;\n&nbsp; &nbsp; public boolean isLeaf;\n&nbsp; &nbsp; public Node topLeft;\n&nbsp; &nbsp; public Node topRight;\n&nbsp; &nbsp; public Node bottomLeft;\n&nbsp; &nbsp; public Node bottomRight;\n}</pre> \n<p>我们可以按以下步骤为二维区域构建四叉树：</p> \n<ol> \n <li>如果当前网格的值相同（即，全为 <code>0</code> 或者全为 <code>1</code>），将 <code>isLeaf</code> 设为 True ，将 <code>val</code> 设为网格相应的值，并将四个子节点都设为 Null 然后停止。</li> \n <li>如果当前网格的值不同，将 <code>isLeaf</code> 设为 False， 将 <code>val</code> 设为任意值，然后如下图所示，将当前网格划分为四个子网格。</li> \n <li>使用适当的子网格递归每个子节点。</li> \n</ol> \n<p><img style=\"height: 181px; width: 777px;\" src=\"https://assets.leetcode.com/uploads/2020/02/11/new_top.png\" alt=\"\"></p> \n<p>如果你想了解更多关于四叉树的内容，可以参考 <a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a> 。</p> \n<p><strong>四叉树格式：</strong></p> \n<p>输出为使用层序遍历后四叉树的序列化形式，其中 <code>null</code> 表示路径终止符，其下面不存在节点。</p> \n<p>它与二叉树的序列化非常相似。唯一的区别是节点以列表形式表示 <code>[isLeaf, val]</code> 。</p> \n<p>如果 <code>isLeaf</code> 或者 <code>val</code> 的值为 True ，则表示它在列表&nbsp;<code>[isLeaf, val]</code> 中的值为 <strong>1</strong> ；如果 <code>isLeaf</code> 或者 <code>val</code> 的值为 False ，则表示值为 <strong>0 </strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 196px; width: 550px;\" src=\"https://assets.leetcode.com/uploads/2020/02/11/qt1.png\" alt=\"\"> <img style=\"height: 278px; width: 550px;\" src=\"https://assets.leetcode.com/uploads/2020/02/11/qt2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n<strong>输出：</strong>[[0,0],[1,1],[1,1],[1,1],[1,0]]\n<strong>解释：</strong>quadTree1 和 quadTree2 如上所示。由四叉树所表示的二进制矩阵也已经给出。\n如果我们对这两个矩阵进行按位逻辑或运算，则可以得到下面的二进制矩阵，由一个作为结果的四叉树表示。\n注意，我们展示的二进制矩阵仅仅是为了更好地说明题意，你无需构造二进制矩阵来获得结果四叉树。\n<img style=\"height: 222px; width: 777px;\" src=\"https://assets.leetcode.com/uploads/2020/02/11/qtr.png\" alt=\"\">\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>quadTree1 = [[1,0]]\n, quadTree2 = [[1,0]]\n<strong>输出：</strong>[[1,0]]\n<strong>解释：</strong>两个数所表示的矩阵大小都为 1*1，值全为 0 \n结果矩阵大小为 1*1，值全为 0 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>quadTree1 = [[0,0],[1,0],[1,0],[1,1],[1,1]]\n, quadTree2 = [[0,0],[1,1],[1,1],[1,0],[1,1]]\n<strong>输出：</strong>[[1,1]]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>quadTree1 = [[0,0],[1,1],[1,0],[1,1],[1,1]]\n, quadTree2 = [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]\n<strong>输出：</strong>[[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>quadTree1 = [[0,1],[1,0],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n, quadTree2 = [[0,1],[0,1],[1,0],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1]]\n<strong>输出：</strong>[[0,0],[0,1],[0,1],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1],[1,0],[1,0],[1,1],[1,1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>quadTree1</code> 和 <code>quadTree2</code> 都是符合题目要求的四叉树，每个都代表一个 <code>n * n</code> 的矩阵。</li> \n <li><code>n == 2^x</code> ，其中 <code>0 &lt;= x &lt;= 9</code>.</li> \n</ul>');
INSERT INTO `leecode` VALUES ('559. N 叉树的最大深度', '<p>给定一个 N 叉树，找到其最大深度。</p> \n<p class=\"MachineTrans-lang-zh-CN\">最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。</p> \n<p class=\"MachineTrans-lang-zh-CN\">N 叉树输入按层序遍历序列化表示，每组子节点由空值分隔（请参见示例）。</p> \n<p class=\"MachineTrans-lang-zh-CN\">&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 100%; max-width: 300px;\" src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\"></p> \n<pre><strong>输入：</strong>root = [1,null,3,2,4,null,5,6]\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 296px; height: 241px;\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>输出：</strong>5\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树的深度不会超过&nbsp;<code>1000</code> 。</li> \n <li>树的节点数目位于 <code>[0,&nbsp;10<sup>4</sup>]</code> 之间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('56. 合并区间', '<p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>intervals = [[1,3],[2,6],[8,10],[15,18]]\n<strong>输出：</strong>[[1,6],[8,10],[15,18]]\n<strong>解释：</strong>区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>intervals = [[1,4],[4,5]]\n<strong>输出：</strong>[[1,5]]\n<strong>解释：</strong>区间 [1,4] 和 [4,5] 可被视为重叠区间。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li> \n <li><code>intervals[i].length == 2</code></li> \n <li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('560. 和为K的子数组', '<p>给定一个整数数组和一个整数&nbsp;<strong>k，</strong>你需要找到该数组中和为&nbsp;<strong>k&nbsp;</strong>的连续的子数组的个数。</p> \n<p><strong>示例 1 :</strong></p> \n<pre><strong>输入:</strong>nums = [1,1,1], k = 2\n<strong>输出:</strong> 2 , [1,1] 与 [1,1] 为两种不同的情况。\n</pre> \n<p><strong>说明 :</strong></p> \n<ol> \n <li>数组的长度为 [1, 20,000]。</li> \n <li>数组中元素的范围是 [-1000, 1000] ，且整数&nbsp;<strong>k&nbsp;</strong>的范围是&nbsp;[-1e7, 1e7]。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('561. 数组拆分 I', '<p>给定长度为&nbsp;<code>2n</code><strong>&nbsp;</strong>的整数数组 <code>nums</code> ，你的任务是将这些数分成&nbsp;<code>n</code><strong> </strong>对, 例如 <code>(a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), ..., (a<sub>n</sub>, b<sub>n</sub>)</code> ，使得从 <code>1</code> 到&nbsp;<code>n</code> 的 <code>min(a<sub>i</sub>, b<sub>i</sub>)</code> 总和最大。</p> \n<p>返回该 <strong>最大总和</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,4,3,2]\n<strong>输出：</strong>4\n<strong>解释：</strong>所有可能的分法（忽略元素顺序）为：\n1. (1, 4), (2, 3) -&gt; min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -&gt; min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -&gt; min(1, 2) + min(3, 4) = 1 + 3 = 4\n所以最大总和为 4</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [6,2,6,5,1,2]\n<strong>输出：</strong>9\n<strong>解释：</strong>最优的分法为 (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> \n <li><code>nums.length == 2 * n</code></li> \n <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('563. 二叉树的坡度', '<p>给定一个二叉树，计算 <strong>整个树 </strong>的坡度 。</p> \n<p>一个树的<strong> 节点的坡度 </strong>定义即为，该节点左子树的节点之和和右子树节点之和的 <strong>差的绝对值 </strong>。如果没有左子树的话，左子树的节点之和为 0 ；没有右子树的话也是一样。空结点的坡度是 0 。</p> \n<p><strong>整个树</strong> 的坡度就是其所有节点的坡度之和。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 712px; height: 182px;\" src=\"https://assets.leetcode.com/uploads/2020/10/20/tilt1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,2,3]\n<strong>输出：</strong>1\n<strong>解释：</strong>\n节点 2 的坡度：|0-0| = 0（没有子节点）\n节点 3 的坡度：|0-0| = 0（没有子节点）\n节点 1 的坡度：|2-3| = 1（左子树就是左子节点，所以和是 2 ；右子树就是右子节点，所以和是 3 ）\n坡度总和：0 + 0 + 1 = 1\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 800px; height: 203px;\" src=\"https://assets.leetcode.com/uploads/2020/10/20/tilt2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [4,2,9,3,5,null,7]\n<strong>输出：</strong>15\n<strong>解释：</strong>\n节点 3 的坡度：|0-0| = 0（没有子节点）\n节点 5 的坡度：|0-0| = 0（没有子节点）\n节点 7 的坡度：|0-0| = 0（没有子节点）\n节点 2 的坡度：|3-5| = 2（左子树就是左子节点，所以和是 3 ；右子树就是右子节点，所以和是 5 ）\n节点 9 的坡度：|0-7| = 7（没有左子树，所以和是 0 ；右子树正好是右子节点，所以和是 7 ）\n节点 4 的坡度：|(3+5+2)-(9+7)| = |10-16| = 6（左子树值为 3、5 和 2 ，和是 10 ；右子树值为 9 和 7 ，和是 16 ）\n坡度总和：0 + 0 + 0 + 2 + 7 + 6 = 15\n</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 800px; height: 293px;\" src=\"https://assets.leetcode.com/uploads/2020/10/20/tilt3.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [21,7,14,1,1,2,2,3,3]\n<strong>输出：</strong>9\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点数目的范围在 <code>[0, 10<sup>4</sup>]</code> 内</li> \n <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('564. 寻找最近的回文数', '<p>给定一个整数 n ，你需要找到与它最近的回文数（不包括自身）。</p> \n<p>“最近的”定义为两个整数<strong>差的绝对值</strong>最小。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> \"123\"\n<strong>输出:</strong> \"121\"\n</pre> \n<p><strong>注意:</strong></p> \n<ol> \n <li><strong>n </strong>是由字符串表示的正整数，其长度不超过18。</li> \n <li>如果有多个结果，返回最小的那个。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('565. 数组嵌套', '<p>索引从<code>0</code>开始长度为<code>N</code>的数组<code>A</code>，包含<code>0</code>到<code>N - 1</code>的所有整数。找到最大的集合<code>S</code>并返回其大小，其中 <code>S[i] = {A[i], A[A[i]], A[A[A[i]]], ... }</code>且遵守以下的规则。</p> \n<p>假设选择索引为<code>i</code>的元素<code>A[i]</code>为<code>S</code>的第一个元素，<code>S</code>的下一个元素应该是<code>A[A[i]]</code>，之后是<code>A[A[A[i]]]...</code> 以此类推，不断添加直到<code>S</code>出现重复的元素。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> A = [5,4,0,3,1,6,2]\n<strong>输出:</strong> 4\n<strong>解释:</strong> \nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\n\n其中一种最长的 S[K]:\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>N</code>是<code>[1, 20,000]</code>之间的整数。</li> \n <li><code>A</code>中不含有重复的元素。</li> \n <li><code>A</code>中的元素大小在<code>[0, N-1]</code>之间。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('566. 重塑矩阵', '<p>在 MATLAB 中，有一个非常有用的函数 <code>reshape</code> ，它可以将一个&nbsp;<code>m x n</code> 矩阵重塑为另一个大小不同（<code>r x c</code>）的新矩阵，但保留其原始数据。</p> \n<p>给你一个由二维数组 <code>mat</code> 表示的&nbsp;<code>m x n</code> 矩阵，以及两个正整数 <code>r</code> 和 <code>c</code> ，分别表示想要的重构的矩阵的行数和列数。</p> \n<p>重构后的矩阵需要将原始矩阵的所有元素以相同的<strong> 行遍历顺序 </strong>填充。</p> \n<p>如果具有给定参数的 <code>reshape</code> 操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 613px; height: 173px;\" src=\"https://assets.leetcode.com/uploads/2021/04/24/reshape1-grid.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>mat = [[1,2],[3,4]], r = 1, c = 4\n<strong>输出：</strong>[[1,2,3,4]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 453px; height: 173px;\" src=\"https://assets.leetcode.com/uploads/2021/04/24/reshape2-grid.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>mat = [[1,2],[3,4]], r = 2, c = 4\n<strong>输出：</strong>[[1,2],[3,4]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == mat.length</code></li> \n <li><code>n == mat[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 100</code></li> \n <li><code>-1000 &lt;= mat[i][j] &lt;= 1000</code></li> \n <li><code>1 &lt;= r, c &lt;= 300</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('567. 字符串的排列', '<p>给你两个字符串&nbsp;<code>s1</code>&nbsp;和&nbsp;<code>s2</code> ，写一个函数来判断 <code>s2</code> 是否包含 <code>s1</code><strong>&nbsp;</strong>的排列。</p> \n<p>换句话说，<code>s1</code> 的排列之一是 <code>s2</code> 的 <strong>子串</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s1 = \"ab\" s2 = \"eidbaooo\"\n<strong>输出：</strong>true\n<strong>解释：</strong>s2 包含 s1 的排列之一 (\"ba\").\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s1= \"ab\" s2 = \"eidboaoo\"\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s1.length, s2.length &lt;= 10<sup>4</sup></code></li> \n <li><code>s1</code> 和 <code>s2</code> 仅包含小写字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('57. 插入区间', '<p>给你一个<strong> 无重叠的</strong><em> ，</em>按照区间起始端点排序的区间列表。</p> \n<p>在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>intervals = [[1,3],[6,9]], newInterval = [2,5]\n<strong>输出：</strong>[[1,5],[6,9]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n<strong>输出：</strong>[[1,2],[3,10],[12,16]]\n<strong>解释：</strong>这是因为新的区间 <code>[4,8]</code> 与 <code>[3,5],[6,7],[8,10]</code>&nbsp;重叠。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>intervals = [], newInterval = [5,7]\n<strong>输出：</strong>[[5,7]]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>intervals = [[1,5]], newInterval = [2,3]\n<strong>输出：</strong>[[1,5]]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>intervals = [[1,5]], newInterval = [2,7]\n<strong>输出：</strong>[[1,7]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li> \n <li><code>intervals[i].length == 2</code></li> \n <li><code>0 &lt;=&nbsp;intervals[i][0] &lt;=&nbsp;intervals[i][1] &lt;= 10<sup>5</sup></code></li> \n <li><code>intervals</code> 根据 <code>intervals[i][0]</code> 按 <strong>升序</strong> 排列</li> \n <li><code>newInterval.length == 2</code></li> \n <li><code>0 &lt;=&nbsp;newInterval[0] &lt;=&nbsp;newInterval[1] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('572. 另一棵树的子树', '<div class=\"original__bRMd\"> \n <div> \n  <p>给你两棵二叉树 <code>root</code> 和 <code>subRoot</code> 。检验 <code>root</code> 中是否包含和 <code>subRoot</code> 具有相同结构和节点值的子树。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n  <p>二叉树 <code>tree</code> 的一棵子树包括 <code>tree</code> 的某个节点和这个节点的所有后代节点。<code>tree</code> 也可以看做它自身的一棵子树。</p> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <img style=\"width: 532px; height: 400px;\" src=\"https://assets.leetcode.com/uploads/2021/04/28/subtree1-tree.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>root = [3,4,5,1,2], subRoot = [4,1,2]\n<strong>输出：</strong>true\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <img style=\"width: 502px; height: 458px;\" src=\"https://assets.leetcode.com/uploads/2021/04/28/subtree2-tree.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]\n<strong>输出：</strong>false\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>root</code> 树上的节点数量范围是 <code>[1, 2000]</code></li> \n   <li><code>subRoot</code> 树上的节点数量范围是 <code>[1, 1000]</code></li> \n   <li><code>-10<sup>4</sup> &lt;= root.val &lt;= 10<sup>4</sup></code></li> \n   <li><code>-10<sup>4</sup> &lt;= subRoot.val &lt;= 10<sup>4</sup></code></li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('575. 分糖果', '<p>给定一个<strong>偶数</strong>长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果。你需要把这些糖果<strong>平均</strong>分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> candies = [1,1,2,2,3,3]\n<strong>输出:</strong> 3\n<strong>解析: </strong>一共有三种种类的糖果，每一种都有两个。\n     最优分配方案：妹妹获得[1,2,3],弟弟也获得[1,2,3]。这样使妹妹获得糖果的种类数最多。\n</pre> \n<p><strong>示例 2 :</strong></p> \n<pre><strong>输入:</strong> candies = [1,1,2,3]\n<strong>输出:</strong> 2\n<strong>解析:</strong> 妹妹获得糖果[2,3],弟弟获得糖果[1,1]，妹妹有两种不同的糖果，弟弟只有一种。这样使得妹妹可以获得的糖果种类数最多。\n</pre> \n<p><strong>注意:</strong></p> \n<ol> \n <li>数组的长度为[2, 10,000]，并且确定为偶数。</li> \n <li>数组中数字的大小在范围[-100,000, 100,000]内。 \n  <ol> \n  </ol> </li> \n</ol>');
INSERT INTO `leecode` VALUES ('576. 出界的路径数', '<p>给你一个大小为 <code>m x n</code> 的网格和一个球。球的起始坐标为 <code>[startRow, startColumn]</code> 。你可以将球移到在四个方向上相邻的单元格内（可以穿过网格边界到达网格之外）。你 <strong>最多</strong> 可以移动 <code>maxMove</code> 次球。</p> \n<p>给你五个整数 <code>m</code>、<code>n</code>、<code>maxMove</code>、<code>startRow</code> 以及 <code>startColumn</code> ，找出并返回可以将球移出边界的路径数量。因为答案可能非常大，返回对 <code>10<sup>9</sup> + 7</code> <strong>取余</strong> 后的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 500px; height: 296px;\" src=\"https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_1.png\" alt=\"\"> \n<pre><strong>输入：</strong>m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0\n<strong>输出：</strong>6\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 500px; height: 293px;\" src=\"https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_2.png\" alt=\"\"> \n<pre><strong>输入：</strong>m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1\n<strong>输出：</strong>12\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= m, n &lt;= 50</code></li> \n <li><code>0 &lt;= maxMove &lt;= 50</code></li> \n <li><code>0 &lt;= startRow &lt; m</code></li> \n <li><code>0 &lt;= startColumn &lt; n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('58. 最后一个单词的长度', '<p>给你一个字符串 <code>s</code>，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中最后一个单词的长度。</p> \n<p><strong>单词</strong> 是指仅由字母组成、不包含任何空格字符的最大子字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"Hello World\"\n<strong>输出：</strong>5\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"   fly me   to   the moon  \"\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"luffy is still joyboy\"\n<strong>输出：</strong>6\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> \n <li><code>s</code> 仅有英文字母和空格 <code>\' \'</code> 组成</li> \n <li><code>s</code> 中至少存在一个单词</li> \n</ul>');
INSERT INTO `leecode` VALUES ('581. 最短无序连续子数组', '<p>给你一个整数数组 <code>nums</code> ，你需要找出一个 <strong>连续子数组</strong> ，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。</p> \n<p>请你找出符合题意的 <strong>最短</strong> 子数组，并输出它的长度。</p> \n<p>&nbsp;</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p><strong>示例 1：</strong></p> \n  <pre><strong>输入：</strong>nums = [2,6,4,8,10,9,15]\n<strong>输出：</strong>5\n<strong>解释：</strong>你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>nums = [1,2,3,4]\n<strong>输出：</strong>0\n</pre> \n  <p><strong>示例 3：</strong></p> \n  <pre><strong>输入：</strong>nums = [1]\n<strong>输出：</strong>0\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n   <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> \n  </ul> \n  <p>&nbsp;</p> \n  <p><strong>进阶：</strong>你可以设计一个时间复杂度为 <code>O(n)</code> 的解决方案吗？</p> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('583. 两个字符串的删除操作', '<p>给定两个单词&nbsp;<em>word1&nbsp;</em>和&nbsp;<em>word2</em>，找到使得&nbsp;<em>word1&nbsp;</em>和&nbsp;<em>word2&nbsp;</em>相同所需的最小步数，每步可以删除任意一个字符串中的一个字符。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入:</strong> \"sea\", \"eat\"\n<strong>输出:</strong> 2\n<strong>解释:</strong> 第一步将\"sea\"变为\"ea\"，第二步将\"eat\"变为\"ea\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>给定单词的长度不超过500。</li> \n <li>给定单词中的字符只含有小写字母。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('587. 安装栅栏', '<p>在一个二维的花园中，有一些用 (x, y) 坐标表示的树。由于安装费用十分昂贵，你的任务是先用<strong>最短</strong>的绳子围起所有的树。只有当所有的树都被绳子包围时，花园才能围好栅栏。你需要找到正好位于栅栏边界上的树的坐标。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\n<strong>输出:</strong> [[1,1],[2,0],[4,2],[3,3],[2,4]]\n<strong>解释:</strong>\n<img style=\"width: 100%; max-width: 320px\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/erect_the_fence_1.png\">\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> [[1,2],[2,2],[4,2]]\n<strong>输出:</strong> [[1,2],[2,2],[4,2]]\n<strong>解释:</strong>\n<img style=\"width: 100%; max-width: 320px\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/erect_the_fence_2.png\">\n即使树都在一条直线上，你也需要先用绳子包围它们。\n</pre> \n<p>&nbsp;</p> \n<p><strong>注意:</strong></p> \n<ol> \n <li>所有的树应当被围在一起。你不能剪断绳子来包围树或者把树分成一组以上。</li> \n <li>输入的整数在 0 到 100 之间。</li> \n <li>花园至少有一棵树。</li> \n <li>所有树的坐标都是不同的。</li> \n <li>输入的点<strong>没有</strong>顺序。输出顺序也没有要求。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('589. N 叉树的前序遍历', '<p>给定一个 N 叉树，返回其节点值的<strong> 前序遍历</strong> 。</p> \n<p>N 叉树 在输入中按层序遍历进行序列化表示，每组子节点由空值 <code>null</code> 分隔（请参见示例）。</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p>&nbsp;</p> \n  <p><strong>进阶：</strong></p> \n  <p>递归法很简单，你可以使用迭代法完成此题吗?</p> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <p><img style=\"width: 100%; max-width: 300px;\" src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\"></p> \n  <pre><strong>输入：</strong>root = [1,null,3,2,4,null,5,6]\n<strong>输出：</strong>[1,3,5,6,2,4]\n</pre> \n  <strong>示例 2：</strong> \n  <p><img style=\"width: 296px; height: 241px;\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" alt=\"\"></p> \n  <pre><strong>输入：</strong>root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>输出：</strong>[1,2,3,6,7,11,14,4,8,12,5,9,13,10]\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li>N 叉树的高度小于或等于 <code>1000</code></li> \n   <li>节点总数在范围 <code>[0,&nbsp;10^4]</code> 内</li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('59. 螺旋矩阵 II', '<p>给你一个正整数&nbsp;<code>n</code> ，生成一个包含 <code>1</code> 到&nbsp;<code>n<sup>2</sup></code>&nbsp;所有元素，且元素按顺时针顺序螺旋排列的&nbsp;<code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 242px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>[[1,2,3],[8,9,4],[7,6,5]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>[[1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 20</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('590. N 叉树的后序遍历', '<p>给定一个 N 叉树，返回其节点值的<strong> 后序遍历</strong> 。</p> \n<p>N 叉树 在输入中按层序遍历进行序列化表示，每组子节点由空值 <code>null</code> 分隔（请参见示例）。</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p>&nbsp;</p> \n  <p><strong>进阶：</strong></p> \n  <p>递归法很简单，你可以使用迭代法完成此题吗?</p> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <p><img style=\"width: 100%; max-width: 300px;\" src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\"></p> \n  <pre><strong>输入：</strong>root = [1,null,3,2,4,null,5,6]\n<strong>输出：</strong>[5,6,3,2,4,1]\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <p><img style=\"width: 296px; height: 241px;\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" alt=\"\"></p> \n  <pre><strong>输入：</strong>root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>输出：</strong>[2,6,14,11,7,3,12,8,4,13,9,10,5,1]\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li>N 叉树的高度小于或等于 <code>1000</code></li> \n   <li>节点总数在范围 <code>[0,&nbsp;10^4]</code> 内</li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('591. 标签验证器', '<p>给定一个表示代码片段的字符串，你需要实现一个验证器来解析这段代码，并返回它是否合法。合法的代码片段需要遵守以下的所有规则：</p> \n<ol> \n <li>代码必须被<strong>合法的闭合标签</strong>包围。否则，代码是无效的。</li> \n <li><strong>闭合标签</strong>（不一定合法）要严格符合格式：<code>&lt;TAG_NAME&gt;TAG_CONTENT&lt;/TAG_NAME&gt;</code>。其中，<code>&lt;TAG_NAME&gt;</code>是起始标签，<code>&lt;/TAG_NAME&gt;</code>是结束标签。起始和结束标签中的 TAG_NAME 应当相同。当且仅当&nbsp;TAG_NAME 和 TAG_CONTENT 都是合法的，闭合标签才是<strong>合法的</strong>。</li> \n <li><strong>合法的</strong>&nbsp;<code>TAG_NAME</code>&nbsp;仅含有<strong>大写字母</strong>，长度在范围 [1,9] 之间。否则，该&nbsp;<code>TAG_NAME</code>&nbsp;是<strong>不合法的</strong>。</li> \n <li><strong>合法的</strong>&nbsp;<code>TAG_CONTENT</code>&nbsp;可以包含其他<strong>合法的闭合标签</strong>，<strong>cdata</strong>&nbsp;（请参考规则7）和任意字符（注意参考规则1）<strong>除了</strong>不匹配的<code>&lt;</code>、不匹配的起始和结束标签、不匹配的或带有不合法 TAG_NAME 的闭合标签。否则，<code>TAG_CONTENT</code>&nbsp;是<strong>不合法的</strong>。</li> \n <li>一个起始标签，如果没有具有相同&nbsp;TAG_NAME 的结束标签与之匹配，是不合法的。反之亦然。不过，你也需要考虑标签嵌套的问题。</li> \n <li>一个<code>&lt;</code>，如果你找不到一个后续的<code>&gt;</code>与之匹配，是不合法的。并且当你找到一个<code>&lt;</code>或<code>&lt;/</code>时，所有直到下一个<code>&gt;</code>的前的字符，都应当被解析为&nbsp;TAG_NAME（不一定合法）。</li> \n <li>cdata 有如下格式：<code>&lt;![CDATA[CDATA_CONTENT]]&gt;</code>。<code>CDATA_CONTENT</code>&nbsp;的范围被定义成&nbsp;<code>&lt;![CDATA[</code>&nbsp;和<strong>后续的第一个</strong>&nbsp;<code>]]&gt;</code>之间的字符。</li> \n <li><code>CDATA_CONTENT</code>&nbsp;可以包含<strong>任意字符</strong>。cdata 的功能是阻止验证器解析<code>CDATA_CONTENT</code>，所以即使其中有一些字符可以被解析为标签（无论合法还是不合法），也应该将它们视为<strong>常规字符</strong>。</li> \n</ol> \n<p><strong>合法代码的例子:</strong></p> \n<pre><strong>输入:</strong> \"&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;\"\n\n<strong>输出:</strong> True\n\n<strong>解释:</strong> \n\n代码被包含在了闭合的标签内： &lt;DIV&gt; 和 &lt;/DIV&gt; 。\n\nTAG_NAME 是合法的，TAG_CONTENT 包含了一些字符和 cdata 。 \n\n即使 CDATA_CONTENT 含有不匹配的起始标签和不合法的 TAG_NAME，它应该被视为普通的文本，而不是标签。\n\n所以 TAG_CONTENT 是合法的，因此代码是合法的。最终返回True。\n\n\n<strong>输入:</strong> \"&lt;DIV&gt;&gt;&gt;  ![cdata[]] &lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&gt;]&lt;/DIV&gt;\"\n\n<strong>输出:</strong> True\n\n<strong>解释:</strong>\n\n我们首先将代码分割为： start_tag|tag_content|end_tag 。\n\nstart_tag -&gt; <strong>\"&lt;DIV&gt;\"</strong>\n\nend_tag -&gt; <strong>\"&lt;/DIV&gt;\"</strong>\n\ntag_content 也可被分割为： text1|cdata|text2 。\n\ntext1 -&gt; <strong>\"&gt;&gt;  ![cdata[]] \"</strong>\n\ncdata -&gt; <strong>\"&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;\"</strong> ，其中 CDATA_CONTENT 为 <strong>\"&lt;div&gt;]&gt;\"</strong>\n\ntext2 -&gt; <strong>\"]]&gt;&gt;]\"</strong>\n\n\nstart_tag <strong>不</strong>是 <strong>\"&lt;DIV&gt;&gt;&gt;\"</strong> 的原因参照规则 6 。\ncdata <strong>不</strong>是 <strong>\"&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;\"</strong> 的原因参照规则 7 。\n</pre> \n<p><strong>不合法代码的例子:</strong></p> \n<pre><strong>输入:</strong> \"&lt;A&gt;  &lt;B&gt; &lt;/A&gt;   &lt;/B&gt;\"\n<strong>输出:</strong> False\n<strong>解释:</strong> 不合法。如果 \"&lt;A&gt;\" 是闭合的，那么 \"&lt;B&gt;\" 一定是不匹配的，反之亦然。\n\n<strong>输入:</strong> \"&lt;DIV&gt;  div tag is not closed  &lt;DIV&gt;\"\n<strong>输出:</strong> False\n\n<strong>输入:</strong> \"&lt;DIV&gt;  unmatched &lt;  &lt;/DIV&gt;\"\n<strong>输出:</strong> False\n\n<strong>输入:</strong> \"&lt;DIV&gt; closed tags with invalid tag name  &lt;b&gt;123&lt;/b&gt; &lt;/DIV&gt;\"\n<strong>输出:</strong> False\n\n<strong>输入:</strong> \"&lt;DIV&gt; unmatched tags with invalid tag name  &lt;/1234567890&gt; and &lt;CDATA[[]]&gt;  &lt;/DIV&gt;\"\n<strong>输出:</strong> False\n\n<strong>输入:</strong> \"&lt;DIV&gt;  unmatched start tag &lt;B&gt;  and unmatched end tag &lt;/C&gt;  &lt;/DIV&gt;\"\n<strong>输出:</strong> False\n</pre> \n<p><strong>注意:</strong></p> \n<ol> \n <li>为简明起见，你可以假设输入的代码（包括提到的<strong>任意字符</strong>）只包含<code>数字</code>, <font face=\"Menlo, Monaco, Consolas, Courier New, monospace\" color=\"#c7254e\"><span style=\"background-color:#f9f2f4; font-size:12.6px\">字母</span></font>, <code>\'&lt;\'</code>,<code>\'&gt;\'</code>,<code>\'/\'</code>,<code>\'!\'</code>,<code>\'[\'</code>,<code>\']\'</code>和<code>\' \'</code>。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('592. 分数加减运算', '<p>给定一个表示分数加减运算表达式的字符串，你需要返回一个字符串形式的计算结果。&nbsp;这个结果应该是不可约分的分数，即<a href=\"https://baike.baidu.com/item/%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0\">最简分数</a>。&nbsp;如果最终结果是一个整数，例如&nbsp;<code>2</code>，你需要将它转换成分数形式，其分母为&nbsp;<code>1</code>。所以在上述例子中, <code>2</code>&nbsp;应该被转换为&nbsp;<code>2/1</code>。</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong>\"-1/2+1/2\"\n<strong>输出:</strong> \"0/1\"\n</pre> \n<p><strong>&nbsp;示例 2:</strong></p> \n<pre><strong>输入:</strong>\"-1/2+1/2+1/3\"\n<strong>输出:</strong> \"1/3\"\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong>\"1/3-1/2\"\n<strong>输出:</strong> \"-1/6\"\n</pre> \n<p><strong>示例 4:</strong></p> \n<pre><strong>输入:</strong>\"5/3+1/3\"\n<strong>输出:</strong> \"2/1\"\n</pre> \n<p><strong>说明:</strong></p> \n<ol> \n <li>输入和输出字符串只包含&nbsp;<code>\'0\'</code> 到&nbsp;<code>\'9\'</code>&nbsp;的数字，以及&nbsp;<code>\'/\'</code>, <code>\'+\'</code> 和&nbsp;<code>\'-\'</code>。&nbsp;</li> \n <li>输入和输出分数格式均为&nbsp;<code>±分子/分母</code>。如果输入的第一个分数或者输出的分数是正数，则&nbsp;<code>\'+\'</code>&nbsp;会被省略掉。</li> \n <li>输入只包含合法的<strong>最简分数</strong>，每个分数的<strong>分子</strong>与<strong>分母</strong>的范围是&nbsp;&nbsp;[1,10]。&nbsp;如果分母是1，意味着这个分数实际上是一个整数。</li> \n <li>输入的分数个数范围是 [1,10]。</li> \n <li><strong>最终结果</strong>的分子与分母保证是 32 位整数范围内的有效整数。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('593. 有效的正方形', '<p>给定二维空间中四点的坐标，返回四点是否可以构造一个正方形。</p> \n<p>一个点的坐标（x，y）由一个有两个整数的整数数组表示。</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\n<strong>输出:</strong> True\n</pre> \n<p>&nbsp;</p> \n<p><strong>注意:</strong></p> \n<ol> \n <li>所有输入整数都在 [-10000，10000] 范围内。</li> \n <li>一个有效的正方形有四个等长的正长和四个等角（90度角）。</li> \n <li>输入点没有顺序。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('594. 最长和谐子序列', '<p>和谐数组是指一个数组里元素的最大值和最小值之间的差别 <strong>正好是 <code>1</code></strong> 。</p> \n<p>现在，给你一个整数数组 <code>nums</code> ，请你在所有可能的子序列中找到最长的和谐子序列的长度。</p> \n<p>数组的子序列是一个由数组派生出来的序列，它可以通过删除一些元素或不删除元素、且不改变其余元素的顺序而得到。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,3,2,2,5,2,3,7]\n<strong>输出：</strong>5\n<strong>解释：</strong>最长的和谐子序列是 [3,2,2,2,3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,1,1]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('595. 大的国家', '<p>这里有张&nbsp;<code>World</code> 表</p> \n<pre>+-----------------+------------+------------+--------------+---------------+\n| name            | continent  | area       | population   | gdp           |\n+-----------------+------------+------------+--------------+---------------+\n| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |\n| Albania         | Europe     | 28748      | 2831741      | 12960000      |\n| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |\n| Andorra         | Europe     | 468        | 78115        | 3712000       |\n| Angola          | Africa     | 1246700    | 20609294     | 100990000     |\n+-----------------+------------+------------+--------------+---------------+\n</pre> \n<p>如果一个国家的面积超过 300 万平方公里，或者人口超过 2500 万，那么这个国家就是大国家。</p> \n<p>编写一个 SQL 查询，输出表中所有大国家的名称、人口和面积。</p> \n<p>例如，根据上表，我们应该输出:</p> \n<pre>+--------------+-------------+--------------+\n| name         | population  | area         |\n+--------------+-------------+--------------+\n| Afghanistan  | 25500100    | 652230       |\n| Algeria      | 37100000    | 2381741      |\n+--------------+-------------+--------------+\n</pre>');
INSERT INTO `leecode` VALUES ('596. 超过5名学生的课', '<p>有一个<code>courses</code> 表 ，有: <strong>student&nbsp;(学生) </strong>和 <strong>class (课程)</strong>。</p> \n<p>请列出所有超过或等于5名学生的课。</p> \n<p>例如，表：</p> \n<pre>+---------+------------+\n| student | class      |\n+---------+------------+\n| A       | Math       |\n| B       | English    |\n| C       | Math       |\n| D       | Biology    |\n| E       | Math       |\n| F       | Computer   |\n| G       | Math       |\n| H       | Math       |\n| I       | Math       |\n+---------+------------+\n</pre> \n<p>应该输出:</p> \n<pre>+---------+\n| class   |\n+---------+\n| Math    |\n+---------+\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>学生在每个课中不应被重复计算。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('598. 范围求和 II', '<p>给定一个初始元素全部为&nbsp;<strong>0</strong>，大小为 m*n 的矩阵&nbsp;<strong>M&nbsp;</strong>以及在&nbsp;<strong>M&nbsp;</strong>上的一系列更新操作。</p> \n<p>操作用二维数组表示，其中的每个操作用一个含有两个<strong>正整数&nbsp;a</strong> 和 <strong>b</strong> 的数组表示，含义是将所有符合&nbsp;<strong>0 &lt;= i &lt; a</strong> 以及 <strong>0 &lt;= j &lt; b</strong> 的元素&nbsp;<strong>M[i][j]&nbsp;</strong>的值都<strong>增加 1</strong>。</p> \n<p>在执行给定的一系列操作后，你需要返回矩阵中含有最大整数的元素个数。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> \nm = 3, n = 3\noperations = [[2,2],[3,3]]\n<strong>输出:</strong> 4\n<strong>解释:</strong> \n初始状态, M = \n[[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]]\n\n执行完操作 [2,2] 后, M = \n[[1, 1, 0],\n [1, 1, 0],\n [0, 0, 0]]\n\n执行完操作 [3,3] 后, M = \n[[2, 2, 1],\n [2, 2, 1],\n [1, 1, 1]]\n\nM 中最大的整数是 2, 而且 M 中有4个值为2的元素。因此返回 4。\n</pre> \n<p><strong>注意:</strong></p> \n<ol> \n <li>m 和 n 的范围是&nbsp;[1,40000]。</li> \n <li>a 的范围是 [1,m]，b 的范围是 [1,n]。</li> \n <li>操作数目不超过 10000。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('599. 两个列表的最小索引总和', '<p>假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</p> \n<p>你需要帮助他们用<strong>最少的索引和</strong>找出他们<strong>共同喜爱的餐厅</strong>。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设总是存在一个答案。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong>\n[\"Shogun\", \"Tapioca Express\", \"Burger King\", \"KFC\"]\n[\"Piatti\", \"The Grill at Torrey Pines\", \"Hungry Hunter Steakhouse\", \"Shogun\"]\n<strong>输出:</strong> [\"Shogun\"]\n<strong>解释:</strong> 他们唯一共同喜爱的餐厅是“Shogun”。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong>\n[\"Shogun\", \"Tapioca Express\", \"Burger King\", \"KFC\"]\n[\"KFC\", \"Shogun\", \"Burger King\"]\n<strong>输出:</strong> [\"Shogun\"]\n<strong>解释:</strong> 他们共同喜爱且具有最小索引和的餐厅是“Shogun”，它有最小的索引和1(0+1)。\n</pre> \n<p><strong>提示:</strong></p> \n<ol> \n <li>两个列表的长度范围都在&nbsp;[1, 1000]内。</li> \n <li>两个列表中的字符串的长度将在[1，30]的范围内。</li> \n <li>下标从0开始，到列表的长度减1。</li> \n <li>两个列表都没有重复的元素。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('6. Z 字形变换', '<p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行&nbsp;Z 字形排列。</p> \n<p>比如输入字符串为 <code>\"PAYPALISHIRING\"</code>&nbsp;行数为 <code>3</code> 时，排列如下：</p> \n<pre>P   A   H   N\nA P L S I I G\nY   I   R</pre> \n<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>\"PAHNAPLSIIGYIR\"</code>。</p> \n<p>请你实现这个将字符串进行指定行数变换的函数：</p> \n<pre>string convert(string s, int numRows);</pre> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"PAYPALISHIRING\", numRows = 3\n<strong>输出：</strong>\"PAHNAPLSIIGYIR\"\n</pre> \n<strong>示例 2：</strong> \n<pre><strong>输入：</strong>s = \"PAYPALISHIRING\", numRows = 4\n<strong>输出：</strong>\"PINALSIGYAHRPI\"\n<strong>解释：</strong>\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"A\", numRows = 1\n<strong>输出：</strong>\"A\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 1000</code></li> \n <li><code>s</code> 由英文字母（小写和大写）、<code>\',\'</code> 和 <code>\'.\'</code> 组成</li> \n <li><code>1 &lt;= numRows &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('60. 排列序列', '<p>给出集合&nbsp;<code>[1,2,3,...,n]</code>，其所有元素共有&nbsp;<code>n!</code> 种排列。</p> \n<p>按大小顺序列出所有排列情况，并一一标记，当&nbsp;<code>n = 3</code> 时, 所有排列如下：</p> \n<ol> \n <li><code>\"123\"</code></li> \n <li><code>\"132\"</code></li> \n <li><code>\"213\"</code></li> \n <li><code>\"231\"</code></li> \n <li><code>\"312\"</code></li> \n <li><code>\"321\"</code></li> \n</ol> \n<p>给定&nbsp;<code>n</code> 和&nbsp;<code>k</code>，返回第&nbsp;<code>k</code>&nbsp;个排列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 3, k = 3\n<strong>输出：</strong>\"213\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 4, k = 9\n<strong>输出：</strong>\"2314\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 3, k = 1\n<strong>输出：</strong>\"123\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 9</code></li> \n <li><code>1 &lt;= k &lt;= n!</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('600. 不含连续1的非负整数', '<p>给定一个正整数 n，找出小于或等于 n 的非负整数中，其二进制表示不包含&nbsp;<strong>连续的1&nbsp;</strong>的个数。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> 5\n<strong>输出:</strong> 5\n<strong>解释:</strong> \n下面是带有相应二进制表示的非负整数&lt;= 5：\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\n其中，只有整数3违反规则（有两个连续的1），其他5个满足规则。</pre> \n<p><strong>说明:</strong> 1 &lt;= n &lt;= 10<sup>9</sup></p>');
INSERT INTO `leecode` VALUES ('601. 体育馆的人流量', '表：\n<code>Stadium</code> \n<div class=\"original__bRMd\"> \n <div> \n  <pre>+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| visit_date    | date    |\n| people        | int     |\n+---------------+---------+\nvisit_date 是表的主键\n每日人流量信息被记录在这三列信息中：<strong>序号</strong> (id)、<strong>日期</strong> (visit_date)、&nbsp;<strong>人流量</strong> (people)\n每天只有一行记录，日期随着 id 的增加而增加\n</pre> \n  <p>&nbsp;</p> \n  <p class=\"MachineTrans-lang-zh-CN\">编写一个 SQL 查询以找出每行的人数大于或等于 <code>100</code> 且 <code>id</code> 连续的三行或更多行记录。</p> \n  <p class=\"MachineTrans-lang-zh-CN\">返回按 <code>visit_date</code> 升序排列的结果表。</p> \n  <p class=\"MachineTrans-lang-zh-CN\">查询结果格式如下所示。</p> \n  <pre><code>Stadium</code> table:\n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 1    | 2017-01-01 | 10        |\n| 2    | 2017-01-02 | 109       |\n| 3    | 2017-01-03 | 150       |\n| 4    | 2017-01-04 | 99        |\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\n\nResult table:\n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\n<strong>id</strong> 为 5、6、7、8 的四行 id 连续，并且每行都有 &gt;= 100 的人数记录。\n请注意，即使第 7 行和第 8 行的 visit_date 不是连续的，输出也应当包含第 8 行，因为我们只需要考虑 id 连续的记录。\n不输出 id 为 2 和 3 的行，因为至少需要三条 id 连续的记录。\n</pre> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('605. 种花问题', '<p>假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p> \n<p>给你一个整数数组&nbsp;&nbsp;<code>flowerbed</code> 表示花坛，由若干 <code>0</code> 和 <code>1</code> 组成，其中 <code>0</code> 表示没种植花，<code>1</code> 表示种植了花。另有一个数&nbsp;<code>n</code><strong> </strong>，能否在不打破种植规则的情况下种入&nbsp;<code>n</code><strong>&nbsp;</strong>朵花？能则返回 <code>true</code> ，不能则返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>flowerbed = [1,0,0,0,1], n = 1\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>flowerbed = [1,0,0,0,1], n = 2\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= flowerbed.length &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>flowerbed[i]</code> 为 <code>0</code> 或 <code>1</code></li> \n <li><code>flowerbed</code> 中不存在相邻的两朵花</li> \n <li><code>0 &lt;= n &lt;= flowerbed.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('606. 根据二叉树创建字符串', '<p>你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。</p> \n<p>空节点则用一对空括号 \"()\" 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> 二叉树: [1,2,3,4]\n       1\n     /   \\\n    2     3\n   /    \n  4     \n\n<strong>输出:</strong> \"1(2(4))(3)\"\n\n<strong>解释:</strong> 原本将是“1(2(4)())(3())”，\n在你省略所有不必要的空括号对之后，\n它将是“1(2(4))(3)”。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> 二叉树: [1,2,3,null,4]\n       1\n     /   \\\n    2     3\n     \\  \n      4 \n\n<strong>输出:</strong> \"1(2()(4))(3)\"\n\n<strong>解释:</strong> 和第一个示例相似，\n除了我们不能省略第一个对括号来中断输入和输出之间的一对一映射关系。\n</pre>');
INSERT INTO `leecode` VALUES ('609. 在系统中查找重复文件', '<p>给定一个目录信息列表，包括目录路径，以及该目录中的所有包含内容的文件，您需要找到文件系统中的所有重复文件组的路径。一组重复的文件至少包括<strong>二个</strong>具有完全相同内容的文件。</p> \n<p><strong>输入</strong>列表中的单个目录信息字符串的格式如下：</p> \n<p><code>\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"</code></p> \n<p>这意味着有 n 个文件（<code>f1.txt</code>,&nbsp;<code>f2.txt</code>&nbsp;...&nbsp;<code>fn.txt</code> 的内容分别是 <code>f1_content</code>,&nbsp;<code>f2_content</code>&nbsp;...&nbsp;<code>fn_content</code>）在目录&nbsp;<code>root/d1/d2/.../dm</code>&nbsp;下。注意：n&gt;=1 且 m&gt;=0。如果 m=0，则表示该目录是根目录。</p> \n<p>该<strong>输出</strong>是重复文件路径组的列表。对于每个组，它包含具有相同内容的文件的所有文件路径。文件路径是具有下列格式的字符串：</p> \n<p><code>\"directory_path/file_name.txt\"</code></p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\n[\"root/a 1.txt(abcd) 2.txt(efgh)\", \"root/c 3.txt(abcd)\", \"root/c/d 4.txt(efgh)\", \"root 4.txt(efgh)\"]\n<strong>输出：</strong>  \n[[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>注：</strong></p> \n<ol> \n <li>最终输出不需要顺序。</li> \n <li>您可以假设目录名、文件名和文件内容只有字母和数字，并且文件内容的长度在 [1，50] 的范围内。</li> \n <li>给定的文件数量在 [1，20000] 个范围内。</li> \n <li>您可以假设在同一目录中没有任何文件或目录共享相同的名称。</li> \n <li>您可以假设每个给定的目录信息代表一个唯一的目录。目录路径和文件信息用一个空格分隔。</li> \n</ol> \n<p>&nbsp;</p> \n<p><strong>超越竞赛的后续行动：</strong></p> \n<ol> \n <li>假设您有一个真正的文件系统，您将如何搜索文件？广度搜索还是宽度搜索？</li> \n <li>如果文件内容非常大（GB级别），您将如何修改您的解决方案？</li> \n <li>如果每次只能读取 1 kb 的文件，您将如何修改解决方案？</li> \n <li>修改后的解决方案的时间复杂度是多少？其中最耗时的部分和消耗内存的部分是什么？如何优化？</li> \n <li>如何确保您发现的重复文件不是误报？</li> \n</ol>');
INSERT INTO `leecode` VALUES ('61. 旋转链表', '<p>给你一个链表的头节点 <code>head</code> ，旋转链表，将链表每个节点向右移动&nbsp;<code>k</code><em>&nbsp;</em>个位置。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 600px; height: 254px;\" src=\"https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,2,3,4,5], k = 2\n<strong>输出：</strong>[4,5,1,2,3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 472px; height: 542px;\" src=\"https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [0,1,2], k = 4\n<strong>输出：</strong>[2,0,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表中节点的数目在范围 <code>[0, 500]</code> 内</li> \n <li><code>-100 &lt;= Node.val &lt;= 100</code></li> \n <li><code>0 &lt;= k &lt;= 2 * 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('611. 有效三角形的个数', '<p>给定一个包含非负整数的数组，你的任务是统计其中可以组成三角形三条边的三元组个数。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [2,2,3,4]\n<strong>输出:</strong> 3\n<strong>解释:</strong>\n有效的组合是: \n2,3,4 (使用第一个 2)\n2,3,4 (使用第二个 2)\n2,2,3\n</pre> \n<p><strong>注意:</strong></p> \n<ol> \n <li>数组长度不超过1000。</li> \n <li>数组里整数的范围为 [0, 1000]。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('617. 合并二叉树', '<p>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</p> \n<p>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则<strong>不为&nbsp;</strong>NULL 的节点将直接作为新二叉树的节点。</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> \n	Tree 1                     Tree 2                  \n          1                         2                             \n         / \\                       / \\                            \n        3   2                     1   3                        \n       /                           \\   \\                      \n      5                             4   7                  \n<strong>输出:</strong> \n合并后的树:\n	     3\n	    / \\\n	   4   5\n	  / \\   \\ \n	 5   4   7\n</pre> \n<p><strong>注意:</strong>&nbsp;合并必须从两个树的根节点开始。</p>');
INSERT INTO `leecode` VALUES ('62. 不同路径', '<p>一个机器人位于一个 <code>m x n</code><em>&nbsp;</em>网格的左上角 （起始点在下图中标记为 “Start” ）。</p> \n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p> \n<p>问总共有多少条不同的路径？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png\"> \n<pre><strong>输入：</strong>m = 3, n = 7\n<strong>输出：</strong>28</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>m = 3, n = 2\n<strong>输出：</strong>3\n<strong>解释：</strong>\n从左上角开始，总共有 3 条路径可以到达右下角。\n1. 向右 -&gt; 向下 -&gt; 向下\n2. 向下 -&gt; 向下 -&gt; 向右\n3. 向下 -&gt; 向右 -&gt; 向下\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>m = 7, n = 3\n<strong>输出：</strong>28\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>m = 3, n = 3\n<strong>输出：</strong>6</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= m, n &lt;= 100</code></li> \n <li>题目数据保证答案小于等于 <code>2 * 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('620. 有趣的电影', '<p>某城市开了一家新的电影院，吸引了很多人过来看电影。该电影院特别注意用户体验，专门有个 LED显示板做电影推荐，上面公布着影评和相关电影描述。</p> \n<p>作为该电影院的信息部主管，您需要编写一个 SQL查询，找出所有影片描述为<strong>非</strong>&nbsp;<code>boring</code>&nbsp;(不无聊)&nbsp;的并且<strong> id 为奇数&nbsp;</strong>的影片，结果请按等级 <code>rating</code> 排列。</p> \n<p>&nbsp;</p> \n<p>例如，下表 <code>cinema</code>:</p> \n<pre>+---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   1     | War       |   great 3D   |   8.9     |\n|   2     | Science   |   fiction    |   8.5     |\n|   3     | irish     |   boring     |   6.2     |\n|   4     | Ice song  |   Fantacy    |   8.6     |\n|   5     | House card|   Interesting|   9.1     |\n+---------+-----------+--------------+-----------+\n</pre> \n<p>对于上面的例子，则正确的输出是为：</p> \n<pre>+---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   5     | House card|   Interesting|   9.1     |\n|   1     | War       |   great 3D   |   8.9     |\n+---------+-----------+--------------+-----------+\n</pre> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('621. 任务调度器', '<p>给你一个用字符数组&nbsp;<code>tasks</code> 表示的 CPU 需要执行的任务列表。其中每个字母表示一种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。在任何一个单位时间，CPU 可以完成一个任务，或者处于待命状态。</p> \n<p>然而，两个<strong> 相同种类</strong> 的任务之间必须有长度为整数<strong> </strong><code>n</code><strong> </strong>的冷却时间，因此至少有连续 <code>n</code> 个单位时间内 CPU 在执行不同的任务，或者在待命状态。</p> \n<p>你需要计算完成所有任务所需要的<strong> 最短时间</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\n<strong>输出：</strong>8\n<strong>解释：</strong>A -&gt; B -&gt; (待命) -&gt; A -&gt; B -&gt; (待命) -&gt; A -&gt; B\n     在本示例中，两个相同类型任务之间必须间隔长度为 n = 2 的冷却时间，而执行一个任务只需要一个单位时间，所以中间出现了（待命）状态。 </pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0\n<strong>输出：</strong>6\n<strong>解释：</strong>在这种情况下，任何大小为 6 的排列都可以满足要求，因为 n = 0\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n[\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\n[\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]\n...\n诸如此类\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\n<strong>输出：</strong>16\n<strong>解释：</strong>一种可能的解决方案是：\n     A -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; (待命) -&gt; (待命) -&gt; A -&gt; (待命) -&gt; (待命) -&gt; A\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= task.length &lt;= 10<sup>4</sup></code></li> \n <li><code>tasks[i]</code> 是大写英文字母</li> \n <li><code>n</code> 的取值范围为 <code>[0, 100]</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('622. 设计循环队列', '<p>设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。</p> \n<p>循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。</p> \n<p>你的实现应该支持如下操作：</p> \n<ul> \n <li><code>MyCircularQueue(k)</code>: 构造器，设置队列长度为 k 。</li> \n <li><code>Front</code>: 从队首获取元素。如果队列为空，返回 -1 。</li> \n <li><code>Rear</code>: 获取队尾元素。如果队列为空，返回 -1 。</li> \n <li><code>enQueue(value)</code>: 向循环队列插入一个元素。如果成功插入则返回真。</li> \n <li><code>deQueue()</code>: 从循环队列中删除一个元素。如果成功删除则返回真。</li> \n <li><code>isEmpty()</code>: 检查循环队列是否为空。</li> \n <li><code>isFull()</code>: 检查循环队列是否已满。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre>MyCircularQueue circularQueue = new MyCircularQueue(3); // 设置长度为 3\ncircularQueue.enQueue(1); &nbsp;// 返回 true\ncircularQueue.enQueue(2); &nbsp;// 返回 true\ncircularQueue.enQueue(3); &nbsp;// 返回 true\ncircularQueue.enQueue(4); &nbsp;// 返回 false，队列已满\ncircularQueue.Rear(); &nbsp;// 返回 3\ncircularQueue.isFull(); &nbsp;// 返回 true\ncircularQueue.deQueue(); &nbsp;// 返回 true\ncircularQueue.enQueue(4); &nbsp;// 返回 true\ncircularQueue.Rear(); &nbsp;// 返回 4</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>所有的值都在 0&nbsp;至 1000 的范围内；</li> \n <li>操作数将在 1 至 1000 的范围内；</li> \n <li>请不要使用内置的队列库。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('623. 在二叉树中增加一行', '<p>给定一个二叉树，根节点为第1层，深度为 1。在其第&nbsp;<code>d</code>&nbsp;层追加一行值为&nbsp;<code>v</code>&nbsp;的节点。</p> \n<p>添加规则：给定一个深度值 <code>d</code> （正整数），针对深度为 <code>d-1</code> 层的每一<strong>非空</strong>节点 <code>N</code>，为 <code>N</code> 创建两个值为&nbsp;<code>v</code>&nbsp;的左子树和右子树。</p> \n<p>将&nbsp;<code>N</code> 原先的左子树，连接为新节点&nbsp;<code>v</code> 的左子树；将&nbsp;<code>N</code> 原先的右子树，连接为新节点&nbsp;<code>v</code> 的右子树。</p> \n<p>如果 <code>d</code> 的值为 1，深度 d - 1 不存在，则创建一个新的根节点 <code>v</code>，原先的整棵树将作为 <code>v</code> 的左子树。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> \n二叉树如下所示:\n       4\n     /   \\\n    2     6\n   / \\   / \n  3   1 5   \n\n<strong>v = 1</strong>\n\n<strong>d = 2</strong>\n\n<strong>输出:</strong> \n       4\n      / \\\n     1   1\n    /     \\\n   2       6\n  / \\     / \n 3   1   5   \n\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> \n二叉树如下所示:\n      4\n     /   \n    2    \n   / \\   \n  3   1    \n\n<strong>v = 1</strong>\n\n<strong>d = 3</strong>\n\n<strong>输出:</strong> \n      4\n     /   \n    2\n   / \\    \n  1   1\n /     \\  \n3       1\n</pre> \n<p><strong>注意:</strong></p> \n<ol> \n <li>输入的深度值 d 的范围是：[1，二叉树最大深度 + 1]。</li> \n <li>输入的二叉树至少有一个节点。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('626. 换座位', '<p>小美是一所中学的信息科技老师，她有一张 <code>seat</code>&nbsp;座位表，平时用来储存学生名字和与他们相对应的座位 id。</p> \n<p>其中纵列的&nbsp;<strong>id&nbsp;</strong>是连续递增的</p> \n<p>小美想改变相邻俩学生的座位。</p> \n<p>你能不能帮她写一个 SQL query&nbsp;来输出小美想要的结果呢？</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre>+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Abbot   |\n|    2    | Doris   |\n|    3    | Emerson |\n|    4    | Green   |\n|    5    | Jeames  |\n+---------+---------+\n</pre> \n<p>假如数据输入的是上表，则输出结果如下：</p> \n<pre>+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Doris   |\n|    2    | Abbot   |\n|    3    | Green   |\n|    4    | Emerson |\n|    5    | Jeames  |\n+---------+---------+</pre> \n<p><strong>注意：</strong></p> \n<p>如果学生人数是奇数，则不需要改变最后一个同学的座位。</p>');
INSERT INTO `leecode` VALUES ('627. 变更性别', '<p>给定一个&nbsp;<code>salary</code>&nbsp;表，如下所示，有 m = 男性 和 f = 女性 的值。交换所有的 f 和 m 值（例如，将所有 f 值更改为 m，反之亦然）。要求只使用一个更新（Update）语句，并且没有中间的临时表。</p> \n<p>注意，您必只能写一个 Update 语句，请不要编写任何 Select 语句。</p> \n<p><strong>例如：</strong></p> \n<pre>| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | m   | 2500   |\n| 2  | B    | f   | 1500   |\n| 3  | C    | m   | 5500   |\n| 4  | D    | f   | 500    |\n</pre> \n<p>运行你所编写的更新语句之后，将会得到以下表:</p> \n<pre>| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | f   | 2500   |\n| 2  | B    | m   | 1500   |\n| 3  | C    | f   | 5500   |\n| 4  | D    | m   | 500    |\n</pre>');
INSERT INTO `leecode` VALUES ('628. 三个数的最大乘积', '<p>给你一个整型数组 <code>nums</code> ，在数组中找出由三个数组成的最大乘积，并输出这个乘积。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3]\n<strong>输出：</strong>6\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4]\n<strong>输出：</strong>24\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [-1,-2,-3]\n<strong>输出：</strong>-6\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= nums.length &lt;=&nbsp;10<sup>4</sup></code></li> \n <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('629. K个逆序对数组', '<p>给出两个整数&nbsp;<code>n</code>&nbsp;和&nbsp;<code>k</code>，找出所有包含从&nbsp;<code>1</code>&nbsp;到&nbsp;<code>n</code>&nbsp;的数字，且恰好拥有&nbsp;<code>k</code>&nbsp;个逆序对的不同的数组的个数。</p> \n<p>逆序对的定义如下：对于数组的第<code>i</code>个和第&nbsp;<code>j</code>个元素，如果满<code>i</code>&nbsp;&lt;&nbsp;<code>j</code>且&nbsp;<code>a[i]</code>&nbsp;&gt;&nbsp;<code>a[j]</code>，则其为一个逆序对；否则不是。</p> \n<p>由于答案可能很大，只需要返回 答案 mod 10<sup>9</sup>&nbsp;+ 7 的值。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> n = 3, k = 0\n<strong>输出:</strong> 1\n<strong>解释:</strong> \n只有数组 [1,2,3] 包含了从1到3的整数并且正好拥有 0 个逆序对。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> n = 3, k = 1\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n数组 [1,3,2] 和 [2,1,3] 都有 1 个逆序对。\n</pre> \n<p><strong>说明:</strong></p> \n<ol> \n <li>&nbsp;<code>n</code>&nbsp;的范围是 [1, 1000] 并且 <code>k</code> 的范围是 [0, 1000]。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('63. 不同路径 II', '<p>一个机器人位于一个 <em>m x n </em>网格的左上角 （起始点在下图中标记为“Start” ）。</p> \n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p> \n<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p> \n<p><img style=\"height: 183px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\"></p> \n<p>网格中的障碍物和空位置分别用 <code>1</code> 和 <code>0</code> 来表示。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 242px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n<strong>输出：</strong>2\n<strong>解释：</strong>\n3x3 网格的正中间有一个障碍物。\n从左上角到右下角一共有 <code>2</code> 条不同的路径：\n1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下\n2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 162px; height: 162px;\" src=\"https://assets.leetcode.com/uploads/2020/11/04/robot2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>obstacleGrid = [[0,1],[0,0]]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m ==&nbsp;obstacleGrid.length</code></li> \n <li><code>n ==&nbsp;obstacleGrid[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 100</code></li> \n <li><code>obstacleGrid[i][j]</code> 为 <code>0</code> 或 <code>1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('630. 课程表 III', '<p>这里有 <code>n</code> 门不同的在线课程，他们按从 <code>1</code> 到 <code>n</code>&nbsp;编号。每一门课程有一定的持续上课时间（课程时间）<code>t</code> 以及关闭时间第 d<sub>&nbsp;</sub>天。一门课要持续学习 <code>t</code> 天直到第 d<span style=\"font-size:10.5px\"> </span>天时要完成，你将会从第 1 天开始。</p> \n<p>给出 <code>n</code> 个在线课程用 <code>(t, d)</code> 对表示。你的任务是找出最多可以修几门课。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入:</strong> [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]\n<strong>输出:</strong> 3\n<strong>解释:</strong> \n这里一共有 4 门课程, 但是你最多可以修 3 门:\n首先, 修第一门课时, 它要耗费 100 天，你会在第 100 天完成, 在第 101 天准备下门课。\n第二, 修第三门课时, 它会耗费 1000 天，所以你将在第 1100 天的时候完成它, 以及在第 1101 天开始准备下门课程。\n第三, 修第二门课时, 它会耗时 200 天，所以你将会在第 1300 天时完成它。\n第四门课现在不能修，因为你将会在第 3300 天完成它，这已经超出了关闭日期。</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ol> \n <li>整数 1 &lt;= d, t, n &lt;= 10,000 。</li> \n <li>你不能同时修两门课程。</li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('632. 最小区间', '<p>你有&nbsp;<code>k</code>&nbsp;个 <strong>非递减排列</strong> 的整数列表。找到一个 <strong>最小 </strong>区间，使得&nbsp;<code>k</code>&nbsp;个列表中的每个列表至少有一个数包含在其中。</p> \n<p>我们定义如果&nbsp;<code>b-a &lt; d-c</code>&nbsp;或者在&nbsp;<code>b-a == d-c</code>&nbsp;时&nbsp;<code>a &lt; c</code>，则区间 <code>[a,b]</code> 比 <code>[c,d]</code> 小。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]\n<strong>输出：</strong>[20,24]\n<strong>解释：</strong> \n列表 1：[4, 10, 15, 24, 26]，24 在区间 [20,24] 中。\n列表 2：[0, 9, 12, 20]，20 在区间 [20,24] 中。\n列表 3：[5, 18, 22, 30]，22 在区间 [20,24] 中。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [[1,2,3],[1,2,3],[1,2,3]]\n<strong>输出：</strong>[1,1]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [[10,10],[11,11]]\n<strong>输出：</strong>[10,11]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [[10],[11]]\n<strong>输出：</strong>[10,11]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>nums = [[1],[2],[3],[4],[5],[6],[7]]\n<strong>输出：</strong>[1,7]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>nums.length == k</code></li> \n <li><code>1 &lt;= k &lt;= 3500</code></li> \n <li><code>1 &lt;= nums[i].length &lt;= 50</code></li> \n <li><code>-10<sup>5</sup> &lt;= nums[i][j] &lt;= 10<sup>5</sup></code></li> \n <li><code>nums[i]</code> 按非递减顺序排列</li> \n</ul>');
INSERT INTO `leecode` VALUES ('633. 平方数之和', '<p>给定一个非负整数&nbsp;<code>c</code>&nbsp;，你要判断是否存在两个整数 <code>a</code> 和 <code>b</code>，使得&nbsp;<code>a<sup>2</sup> + b<sup>2</sup> = c</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>c = 5\n<strong>输出：</strong>true\n<strong>解释：</strong>1 * 1 + 2 * 2 = 5\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>c = 3\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>c = 4\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>c = 2\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>c = 1\n<strong>输出：</strong>true</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= c &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('636. 函数的独占时间', '<p>有一个 <strong>单线程</strong> CPU 正在运行一个含有 <code>n</code> 道函数的程序。每道函数都有一个位于&nbsp; <code>0</code> 和 <code>n-1</code> 之间的唯一标识符。</p> \n<p>函数调用 <strong>存储在一个 <a href=\"https://baike.baidu.com/item/%E8%B0%83%E7%94%A8%E6%A0%88/22718047?fr=aladdin\">调用栈</a> 上</strong> ：当一个函数调用开始时，它的标识符将会推入栈中。而当一个函数调用结束时，它的标识符将会从栈中弹出。标识符位于栈顶的函数是 <strong>当前正在执行的函数</strong> 。每当一个函数开始或者结束时，将会记录一条日志，包括函数标识符、是开始还是结束、以及相应的时间戳。</p> \n<p>给你一个由日志组成的列表 <code>logs</code> ，其中 <code>logs[i]</code> 表示第 <code>i</code> 条日志消息，该消息是一个按 <code>\"{function_id}:{\"start\" | \"end\"}:{timestamp}\"</code> 进行格式化的字符串。例如，<code>\"0:start:3\"</code> 意味着标识符为 <code>0</code> 的函数调用在时间戳 <code>3</code> 的 <strong>起始开始执行</strong> ；而 <code>\"1:end:2\"</code> 意味着标识符为 <code>1</code> 的函数调用在时间戳 <code>2</code> 的 <strong>末尾结束执行</strong>。注意，函数可以 <strong>调用多次，可能存在递归调用 </strong>。</p> \n<p>函数的 <strong>独占时间</strong> 定义是在这个函数在程序所有函数调用中执行时间的总和，调用其他函数花费的时间不算该函数的独占时间。例如，如果一个函数被调用两次，一次调用执行 <code>2</code> 单位时间，另一次调用执行 <code>1</code> 单位时间，那么该函数的 <strong>独占时间</strong> 为 <code>2 + 1 = 3</code> 。</p> \n<p>以数组形式返回每个函数的 <strong>独占时间</strong> ，其中第 <code>i</code> 个下标对应的值表示标识符 <code>i</code> 的函数的独占时间。</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 550px; height: 239px;\" src=\"https://assets.leetcode.com/uploads/2019/04/05/diag1b.png\" alt=\"\"> \n<pre><strong>输入：</strong>n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]\n<strong>输出：</strong>[3,4]\n<strong>解释：</strong>\n函数 0 在时间戳 0 的起始开始执行，执行 2 个单位时间，于时间戳 1 的末尾结束执行。 \n函数 1 在时间戳 2 的起始开始执行，执行 4 个单位时间，于时间戳 5 的末尾结束执行。 \n函数 0 在时间戳 6 的开始恢复执行，执行 1 个单位时间。 \n所以函数 0 总共执行 2 + 1 = 3 个单位时间，函数 1 总共执行 4 个单位时间。 \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"]\n<strong>输出：</strong>[8]\n<strong>解释：</strong>\n函数 0 在时间戳 0 的起始开始执行，执行 2 个单位时间，并递归调用它自身。\n函数 0（递归调用）在时间戳 2 的起始开始执行，执行 4 个单位时间。\n函数 0（初始调用）恢复执行，并立刻再次调用它自身。\n函数 0（第二次递归调用）在时间戳 6 的起始开始执行，执行 1 个单位时间。\n函数 0（初始调用）在时间戳 7 的起始恢复执行，执行 1 个单位时间。\n所以函数 0 总共执行 2 + 4 + 1 + 1 = 8 个单位时间。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"]\n<strong>输出：</strong>[7,1]\n<strong>解释：</strong>\n函数 0 在时间戳 0 的起始开始执行，执行 2 个单位时间，并递归调用它自身。\n函数 0（递归调用）在时间戳 2 的起始开始执行，执行 4 个单位时间。\n函数 0（初始调用）恢复执行，并立刻调用函数 1 。\n函数 1在时间戳 6 的起始开始执行，执行 1 个单位时间，于时间戳 6 的末尾结束执行。\n函数 0（初始调用）在时间戳 7 的起始恢复执行，执行 1 个单位时间，于时间戳 7 的末尾结束执行。\n所以函数 0 总共执行 2 + 4 + 1 = 7 个单位时间，函数 1 总共执行 1 个单位时间。 </pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:7\",\"1:end:7\",\"0:end:8\"]\n<strong>输出：</strong>[8,1]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 1, logs = [\"0:start:0\",\"0:end:0\"]\n<strong>输出：</strong>[1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>1 &lt;= logs.length &lt;= 500</code></li> \n <li><code>0 &lt;= function_id &lt; n</code></li> \n <li><code>0 &lt;= timestamp &lt;= 10<sup>9</sup></code></li> \n <li>两个开始事件不会在同一时间戳发生</li> \n <li>两个结束事件不会在同一时间戳发生</li> \n <li>每道函数都有一个对应&nbsp;<code>\"start\"</code> 日志的 <code>\"end\"</code> 日志</li> \n</ul>');
INSERT INTO `leecode` VALUES ('637. 二叉树的层平均值', '<p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n<strong>输出：</strong>[3, 14.5, 11]\n<strong>解释：</strong>\n第 0 层的平均值是 3 ,  第1层是 14.5 , 第2层是 11 。因此返回 [3, 14.5, 11] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>节点值的范围在32位有符号整数范围内。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('638. 大礼包', '<p>在 LeetCode 商店中， 有 <code>n</code> 件在售的物品。每件物品都有对应的价格。然而，也有一些大礼包，每个大礼包以优惠的价格捆绑销售一组物品。</p> \n<p>给你一个整数数组 <code>price</code> 表示物品价格，其中 <code>price[i]</code> 是第 <code>i</code> 件物品的价格。另有一个整数数组 <code>needs</code> 表示购物清单，其中 <code>needs[i]</code> 是需要购买第 <code>i</code> 件物品的数量。</p> \n<p>还有一个数组 <code>special</code> 表示大礼包，<code>special[i]</code> 的长度为 <code>n + 1</code> ，其中 <code>special[i][j]</code> 表示第 <code>i</code> 个大礼包中内含第 <code>j</code> 件物品的数量，且 <code>special[i][n]</code> （也就是数组中的最后一个整数）为第 <code>i</code> 个大礼包的价格。</p> \n<p>返回<strong> 确切 </strong>满足购物清单所需花费的最低价格，你可以充分利用大礼包的优惠活动。你不能购买超出购物清单指定数量的物品，即使那样会降低整体价格。任意大礼包可无限次购买。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]\n<strong>输出：</strong>14\n<strong>解释：</strong>有 A 和 B 两种物品，价格分别为 ¥2 和 ¥5 。 \n大礼包 1 ，你可以以 ¥5 的价格购买 3A 和 0B 。 \n大礼包 2 ，你可以以 ¥10 的价格购买 1A 和 2B 。 \n需要购买 3 个 A 和 2 个 B ， 所以付 ¥10 购买 1A 和 2B（大礼包 2），以及 ¥4 购买 2A 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]\n<strong>输出：</strong>11\n<strong>解释：</strong>A ，B ，C 的价格分别为 ¥2 ，¥3 ，¥4 。\n可以用 ¥4 购买 1A 和 1B ，也可以用 ¥9 购买 2A ，2B 和 1C 。 \n需要买 1A ，2B 和 1C ，所以付 ¥4 买 1A 和 1B（大礼包 1），以及 ¥3 购买 1B ， ¥4 购买 1C 。 \n不可以购买超出待购清单的物品，尽管购买大礼包 2 更加便宜。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == price.length</code></li> \n <li><code>n == needs.length</code></li> \n <li><code>1 &lt;= n &lt;= 6</code></li> \n <li><code>0 &lt;= price[i] &lt;= 10</code></li> \n <li><code>0 &lt;= needs[i] &lt;= 10</code></li> \n <li><code>1 &lt;= special.length &lt;= 100</code></li> \n <li><code>special[i].length == n + 1</code></li> \n <li><code>0 &lt;= special[i][j] &lt;= 50</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('639. 解码方法 II', '<p>一条包含字母&nbsp;<code>A-Z</code> 的消息通过以下的方式进行了编码：</p> \n<pre>\'A\' -&gt; 1\n\'B\' -&gt; 2\n...\n\'Z\' -&gt; 26\n</pre> \n<p>除了上述的条件以外，现在加密字符串可以包含字符 \'*\'了，字符\'*\'可以被当做1到9当中的任意一个数字。</p> \n<p>给定一条包含数字和字符\'*\'的加密信息，请确定解码方法的总数。</p> \n<p>同时，由于结果值可能会相当的大，所以你应当对10<sup>9</sup>&nbsp;+ 7取模。（翻译者标注：此处取模主要是为了防止溢出）</p> \n<p><strong>示例 1 :</strong></p> \n<pre><strong>输入:</strong> \"*\"\n<strong>输出:</strong> 9\n<strong>解释:</strong> 加密的信息可以被解密为: \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\".\n</pre> \n<p><strong>示例 2 :</strong></p> \n<pre><strong>输入:</strong> \"1*\"\n<strong>输出:</strong> 9 + 9 = 18（翻译者标注：这里1*可以分解为1,* 或者当做1*来处理，所以结果是9+9=18）\n</pre> \n<p><strong>说明 :</strong></p> \n<ol> \n <li>输入的字符串长度范围是 [1, 10<sup>5</sup>]。</li> \n <li>输入的字符串只会包含字符 \'*\' 和 数字\'0\' - \'9\'。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('64. 最小路径和', '<p>给定一个包含非负整数的 <code><em>m</em>&nbsp;x&nbsp;<em>n</em></code>&nbsp;网格&nbsp;<code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p> \n<p><strong>说明：</strong>每次只能向下或者向右移动一步。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 242px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>grid = [[1,3,1],[1,5,1],[4,2,1]]\n<strong>输出：</strong>7\n<strong>解释：</strong>因为路径 1→3→1→1→1 的总和最小。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,2,3],[4,5,6]]\n<strong>输出：</strong>12\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 200</code></li> \n <li><code>0 &lt;= grid[i][j] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('640. 求解方程', '<p>求解一个给定的方程，将<code>x</code>以字符串\"x=#value\"的形式返回。该方程仅包含\'+\'，\' - \'操作，变量&nbsp;<code>x</code>&nbsp;和其对应系数。</p> \n<p>如果方程没有解，请返回“No solution”。</p> \n<p>如果方程有无限解，则返回“Infinite solutions”。</p> \n<p>如果方程中只有一个解，要保证返回值&nbsp;<code>x</code>&nbsp;是一个整数。</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> \"x+5-3+x=6+x-2\"\n<strong>输出:</strong> \"x=2\"\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> \"x=x\"\n<strong>输出:</strong> \"Infinite solutions\"\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> \"2x=x\"\n<strong>输出:</strong> \"x=0\"\n</pre> \n<p><strong>示例 4:</strong></p> \n<pre><strong>输入:</strong> \"2x+3x-6x=x+2\"\n<strong>输出:</strong> \"x=-1\"\n</pre> \n<p><strong>示例 5:</strong></p> \n<pre><strong>输入:</strong> \"x=x+2\"\n<strong>输出:</strong> \"No solution\"\n</pre>');
INSERT INTO `leecode` VALUES ('641. 设计循环双端队列', '<p>设计实现双端队列。<br> 你的实现需要支持以下操作：</p> \n<ul> \n <li>MyCircularDeque(k)：构造函数,双端队列的大小为k。</li> \n <li>insertFront()：将一个元素添加到双端队列头部。 如果操作成功返回 true。</li> \n <li>insertLast()：将一个元素添加到双端队列尾部。如果操作成功返回 true。</li> \n <li>deleteFront()：从双端队列头部删除一个元素。 如果操作成功返回 true。</li> \n <li>deleteLast()：从双端队列尾部删除一个元素。如果操作成功返回 true。</li> \n <li>getFront()：从双端队列头部获得一个元素。如果双端队列为空，返回 -1。</li> \n <li>getRear()：获得双端队列的最后一个元素。&nbsp;如果双端队列为空，返回 -1。</li> \n <li>isEmpty()：检查双端队列是否为空。</li> \n <li>isFull()：检查双端队列是否满了。</li> \n</ul> \n<p><strong>示例：</strong></p> \n<pre>MyCircularDeque circularDeque = new MycircularDeque(3); // 设置容量大小为3\ncircularDeque.insertLast(1);			        // 返回 true\ncircularDeque.insertLast(2);			        // 返回 true\ncircularDeque.insertFront(3);			        // 返回 true\ncircularDeque.insertFront(4);			        // 已经满了，返回 false\ncircularDeque.getRear();  				// 返回 2\ncircularDeque.isFull();				        // 返回 true\ncircularDeque.deleteLast();			        // 返回 true\ncircularDeque.insertFront(4);			        // 返回 true\ncircularDeque.getFront();				// 返回 4\n&nbsp;</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>所有值的范围为 [1, 1000]</li> \n <li>操作次数的范围为 [1, 1000]</li> \n <li>请不要使用内置的双端队列库。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('643. 子数组最大平均数 I', '<p>给定 <code>n</code> 个整数，找出平均数最大且长度为 <code>k</code> 的连续子数组，并输出该最大平均数。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[1,12,-5,-6,50,3], k = 4\n<strong>输出：</strong>12.75\n<strong>解释：</strong>最大平均数 (12-5-6+50)/4 = 51/4 = 12.75\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>1 &lt;= <code>k</code> &lt;= <code>n</code> &lt;= 30,000。</li> \n <li>所给数据范围 [-10,000，10,000]。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('645. 错误的集合', '<p>集合 <code>s</code> 包含从 <code>1</code> 到&nbsp;<code>n</code>&nbsp;的整数。不幸的是，因为数据错误，导致集合里面某一个数字复制了成了集合里面的另外一个数字的值，导致集合 <strong>丢失了一个数字</strong> 并且 <strong>有一个数字重复</strong> 。</p> \n<p>给定一个数组 <code>nums</code> 代表了集合 <code>S</code> 发生错误后的结果。</p> \n<p>请你找出重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,2,4]\n<strong>输出：</strong>[2,3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1]\n<strong>输出：</strong>[1,2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('646. 最长数对链', '<p>给出&nbsp;<code>n</code>&nbsp;个数对。&nbsp;在每一个数对中，第一个数字总是比第二个数字小。</p> \n<p>现在，我们定义一种跟随关系，当且仅当&nbsp;<code>b &lt; c</code>&nbsp;时，数对<code>(c, d)</code>&nbsp;才可以跟在&nbsp;<code>(a, b)</code>&nbsp;后面。我们用这种形式来构造一个数对链。</p> \n<p>给定一个数对集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[[1,2], [2,3], [3,4]]\n<strong>输出：</strong>2\n<strong>解释：</strong>最长的数对链是 [1,2] -&gt; [3,4]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>给出数对的个数在&nbsp;<code>[1, 1000]</code> 范围内。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('647. 回文子串', '<p>给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。</p> \n<p>具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\"abc\"\n<strong>输出：</strong>3\n<strong>解释：</strong>三个回文子串: \"a\", \"b\", \"c\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\"aaa\"\n<strong>输出：</strong>6\n<strong>解释：</strong>6个回文子串: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>输入的字符串长度不会超过 1000 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('648. 单词替换', '<p>在英语中，我们有一个叫做&nbsp;<code>词根</code>(root)的概念，它可以跟着其他一些词组成另一个较长的单词——我们称这个词为&nbsp;<code>继承词</code>(successor)。例如，词根<code>an</code>，跟随着单词&nbsp;<code>other</code>(其他)，可以形成新的单词&nbsp;<code>another</code>(另一个)。</p> \n<p>现在，给定一个由许多词根组成的词典和一个句子。你需要将句子中的所有<code>继承词</code>用<code>词根</code>替换掉。如果<code>继承词</code>有许多可以形成它的<code>词根</code>，则用最短的词根替换它。</p> \n<p>你需要输出替换之后的句子。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\n<strong>输出：</strong>\"the cat was rat by the bat\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"\n<strong>输出：</strong>\"a a b c\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>dictionary = [\"a\", \"aa\", \"aaa\", \"aaaa\"], sentence = \"a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa\"\n<strong>输出：</strong>\"a a a a a a a a bbb baba a\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>dictionary = [\"catt\",\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\n<strong>输出：</strong>\"the cat was rat by the bat\"\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>dictionary = [\"ac\",\"ab\"], sentence = \"it is abnormal that this solution is accepted\"\n<strong>输出：</strong>\"it is ab that this solution is ac\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= dictionary.length&nbsp;&lt;= 1000</code></li> \n <li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li> \n <li><code>dictionary[i]</code>&nbsp;仅由小写字母组成。</li> \n <li><code>1 &lt;= sentence.length &lt;= 10^6</code></li> \n <li><code>sentence</code>&nbsp;仅由小写字母和空格组成。</li> \n <li><code>sentence</code> 中单词的总量在范围 <code>[1, 1000]</code> 内。</li> \n <li><code>sentence</code> 中每个单词的长度在范围 <code>[1, 1000]</code> 内。</li> \n <li><code>sentence</code> 中单词之间由一个空格隔开。</li> \n <li><code>sentence</code>&nbsp;没有前导或尾随空格。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('649. Dota2 参议院', '<p>Dota2 的世界里有两个阵营：<code>Radiant</code>(天辉)和&nbsp;<code>Dire</code>(夜魇)</p> \n<p>Dota2 参议院由来自两派的参议员组成。现在参议院希望对一个 Dota2 游戏里的改变作出决定。他们以一个基于轮为过程的投票进行。在每一轮中，每一位参议员都可以行使两项权利中的<code><strong>一</strong></code>项：</p> \n<ol> \n <li> <p><code>禁止一名参议员的权利</code>：</p> <p>参议员可以让另一位参议员在这一轮和随后的几轮中丧失<strong>所有的权利</strong>。</p> </li> \n <li> <p><code>宣布胜利</code>：</p> </li> \n</ol> \n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 如果参议员发现有权利投票的参议员都是<strong>同一个阵营的</strong>，他可以宣布胜利并决定在游戏中的有关变化。</p> \n<p>&nbsp;</p> \n<p>给定一个字符串代表每个参议员的阵营。字母 “R” 和 “D” 分别代表了&nbsp;<code>Radiant</code>（天辉）和&nbsp;<code>Dire</code>（夜魇）。然后，如果有 <code>n</code> 个参议员，给定字符串的大小将是&nbsp;<code>n</code>。</p> \n<p>以轮为基础的过程从给定顺序的第一个参议员开始到最后一个参议员结束。这一过程将持续到投票结束。所有失去权利的参议员将在过程中被跳过。</p> \n<p>假设每一位参议员都足够聪明，会为自己的政党做出最好的策略，你需要预测哪一方最终会宣布胜利并在 Dota2 游戏中决定改变。输出应该是&nbsp;<code>Radiant</code>&nbsp;或&nbsp;<code>Dire</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\"RD\"\n<strong>输出：</strong>\"Radiant\"\n<strong>解释：</strong><code>第一个参议员来自 Radiant 阵营并且他可以使用第一项权利让第二个参议员失去权力，因此第二个参议员将被跳过因为他没有任何权利。然后在第二轮的时候，第一个参议员可以宣布胜利，因为他是唯一一个有投票权的人</code>\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\"RDD\"\n<strong>输出：</strong>\"Dire\"\n<strong>解释：</strong>\n第一轮中,第一个<code>来自 Radiant 阵营的</code>参议员可以使用第一项权利禁止第二个参议员的权利\n第二个<code>来自 Dire 阵营的</code>参议员会被跳过因为他的权利被禁止\n第三个<code>来自 Dire 阵营的</code>参议员可以使用他的第一项权利禁止第一个参议员的权利\n因此在第二轮只剩下第三个参议员拥有投票的权利,于是他可以宣布胜利\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>给定字符串的长度在 <code>[1, 10,000]</code> 之间.</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('65. 有效数字', '<p><strong>有效数字</strong>（按顺序）可以分成以下几个部分：</p> \n<ol> \n <li>一个 <strong>小数</strong> 或者 <strong>整数</strong></li> \n <li>（可选）一个 <code>\'e\'</code> 或 <code>\'E\'</code> ，后面跟着一个 <strong>整数</strong></li> \n</ol> \n<p><strong>小数</strong>（按顺序）可以分成以下几个部分：</p> \n<ol> \n <li>（可选）一个符号字符（<code>\'+\'</code> 或 <code>\'-\'</code>）</li> \n <li>下述格式之一： \n  <ol> \n   <li>至少一位数字，后面跟着一个点 <code>\'.\'</code></li> \n   <li>至少一位数字，后面跟着一个点 <code>\'.\'</code> ，后面再跟着至少一位数字</li> \n   <li>一个点 <code>\'.\'</code> ，后面跟着至少一位数字</li> \n  </ol> </li> \n</ol> \n<p><strong>整数</strong>（按顺序）可以分成以下几个部分：</p> \n<ol> \n <li>（可选）一个符号字符（<code>\'+\'</code> 或 <code>\'-\'</code>）</li> \n <li>至少一位数字</li> \n</ol> \n<p>部分有效数字列举如下：</p> \n<ul> \n <li><code>[\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"]</code></li> \n</ul> \n<p>部分无效数字列举如下：</p> \n<ul> \n <li><code>[\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]</code></li> \n</ul> \n<p>给你一个字符串 <code>s</code> ，如果 <code>s</code> 是一个 <strong>有效数字</strong> ，请返回 <code>true</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"0\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"e\"\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \".\"\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \".1\"\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 20</code></li> \n <li><code>s</code> 仅含英文字母（大写和小写），数字（<code>0-9</code>），加号 <code>\'+\'</code> ，减号 <code>\'-\'</code> ，或者点 <code>\'.\'</code> 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('650. 只有两个键的键盘', '<p>最初记事本上只有一个字符 <code>\'A\'</code> 。你每次可以对这个记事本进行两种操作：</p> \n<ul> \n <li><code>Copy All</code>（复制全部）：复制这个记事本中的所有字符（不允许仅复制部分字符）。</li> \n <li><code>Paste</code>（粘贴）：粘贴<strong> 上一次 </strong>复制的字符。</li> \n</ul> \n<p>给你一个数字&nbsp;<code>n</code> ，你需要使用最少的操作次数，在记事本上输出 <strong>恰好</strong>&nbsp;<code>n</code>&nbsp;个 <code>\'A\'</code> 。返回能够打印出&nbsp;<code>n</code>&nbsp;个 <code>\'A\'</code> 的最少操作次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>3\n<strong>输出：</strong>3\n<strong>解释：</strong>\n最初, 只有一个字符 \'A\'。\n第 1 步, 使用 <strong>Copy All</strong> 操作。\n第 2 步, 使用 <strong>Paste </strong>操作来获得 \'AA\'。\n第 3 步, 使用 <strong>Paste</strong> 操作来获得 \'AAA\'。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('652. 寻找重复的子树', '<p>给定一棵二叉树，返回所有重复的子树。对于同一类的重复子树，你只需要返回其中任意<strong>一棵</strong>的根结点即可。</p> \n<p>两棵树重复是指它们具有相同的结构以及相同的结点值。</p> \n<p><strong>示例 1：</strong></p> \n<pre>        1\n       / \\\n      2   3\n     /   / \\\n    4   2   4\n       /\n      4\n</pre> \n<p>下面是两个重复的子树：</p> \n<pre>      2\n     /\n    4\n</pre> \n<p>和</p> \n<pre>    4\n</pre> \n<p>因此，你需要以列表的形式返回上述重复子树的根结点。</p>');
INSERT INTO `leecode` VALUES ('653. 两数之和 IV - 输入 BST', '<p>给定一个二叉搜索树 <code>root</code> 和一个目标结果 <code>k</code>，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 <code>true</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img src=\"https://assets.leetcode.com/uploads/2020/09/21/sum_tree_1.jpg\" alt=\"\"> \n<pre><strong>输入:</strong> root = [5,3,6,2,4,null,7], k = 9\n<strong>输出:</strong> true\n</pre> \n<p><strong>示例 2：</strong></p> \n<img src=\"https://assets.leetcode.com/uploads/2020/09/21/sum_tree_2.jpg\" alt=\"\"> \n<pre><strong>输入:</strong> root = [5,3,6,2,4,null,7], k = 28\n<strong>输出:</strong> false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入:</strong> root = [2,1,3], k = 4\n<strong>输出:</strong> true\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入:</strong> root = [2,1,3], k = 1\n<strong>输出:</strong> false\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入:</strong> root = [2,1,3], k = 3\n<strong>输出:</strong> true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li>二叉树的节点个数的范围是&nbsp;&nbsp;<code>[1, 10<sup>4</sup>]</code>.</li> \n <li><code>-10<sup>4</sup>&nbsp;&lt;= Node.val &lt;= 10<sup>4</sup></code></li> \n <li><code>root</code>&nbsp;为二叉搜索树</li> \n <li><code>-10<sup>5</sup>&nbsp;&lt;= k &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('654. 最大二叉树', '<p>给定一个不含重复元素的整数数组 <code>nums</code> 。一个以此数组直接递归构建的 <strong>最大二叉树</strong> 定义如下：</p> \n<ol> \n <li>二叉树的根是数组 <code>nums</code> 中的最大元素。</li> \n <li>左子树是通过数组中 <strong>最大值左边部分</strong> 递归构造出的最大二叉树。</li> \n <li>右子树是通过数组中 <strong>最大值右边部分</strong> 递归构造出的最大二叉树。</li> \n</ol> \n<p>返回有给定数组 <code>nums</code> 构建的 <strong>最大二叉树 </strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 302px; height: 421px;\" src=\"https://assets.leetcode.com/uploads/2020/12/24/tree1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>nums = [3,2,1,6,0,5]\n<strong>输出：</strong>[6,3,5,null,2,0,null,null,1]\n<strong>解释：</strong>递归调用如下所示：\n- [3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。\n    - [3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。\n        - 空数组，无子节点。\n        - [2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。\n            - 空数组，无子节点。\n            - 只有一个元素，所以子节点是一个值为 1 的节点。\n    - [0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。\n        - 只有一个元素，所以子节点是一个值为 0 的节点。\n        - 空数组，无子节点。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 182px; height: 301px;\" src=\"https://assets.leetcode.com/uploads/2020/12/24/tree2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>nums = [3,2,1]\n<strong>输出：</strong>[3,null,2,null,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 1000</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> \n <li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('655. 输出二叉树', '<p>在一个 m*n 的二维字符串数组中输出二叉树，并遵守以下规则：</p> \n<ol> \n <li>行数&nbsp;<code>m</code>&nbsp;应当等于给定二叉树的高度。</li> \n <li>列数&nbsp;<code>n</code>&nbsp;应当总是奇数。</li> \n <li>根节点的值（以字符串格式给出）应当放在可放置的第一行正中间。根节点所在的行与列会将剩余空间划分为两部分（<strong>左下部分和右下部分</strong>）。你应该将左子树输出在左下部分，右子树输出在右下部分。左下和右下部分应当有相同的大小。即使一个子树为空而另一个非空，你不需要为空的子树输出任何东西，但仍需要为另一个子树留出足够的空间。然而，如果两个子树都为空则不需要为它们留出任何空间。</li> \n <li>每个未使用的空间应包含一个空的字符串<code>\"\"</code>。</li> \n <li>使用相同的规则输出子树。</li> \n</ol> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong>\n     1\n    /\n   2\n<strong>输出:</strong>\n[[\"\", \"1\", \"\"],\n [\"2\", \"\", \"\"]]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong>\n     1\n    / \\\n   2   3\n    \\\n     4\n<strong>输出:</strong>\n[[\"\", \"\", \"\", \"1\", \"\", \"\", \"\"],\n [\"\", \"2\", \"\", \"\", \"\", \"3\", \"\"],\n [\"\", \"\", \"4\", \"\", \"\", \"\", \"\"]]\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong>\n      1\n     / \\\n    2   5\n   / \n  3 \n / \n4 \n<strong>输出:</strong>\n[[\"\",  \"\",  \"\", \"\",  \"\", \"\", \"\", \"1\", \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]\n [\"\",  \"\",  \"\", \"2\", \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"5\", \"\", \"\", \"\"]\n [\"\",  \"3\", \"\", \"\",  \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]\n [\"4\", \"\",  \"\", \"\",  \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]]\n</pre> \n<p><strong>注意:</strong> 二叉树的高度在范围 [1, 10] 中。</p>');
INSERT INTO `leecode` VALUES ('657. 机器人能否返回原点', '<p>在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在<strong>&nbsp;(0, 0) 处结束</strong>。</p> \n<p>移动顺序由字符串表示。字符 move[i] 表示其第 i 次移动。机器人的有效动作有&nbsp;<code>R</code>（右），<code>L</code>（左），<code>U</code>（上）和 <code>D</code>（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。</p> \n<p><strong>注意：</strong>机器人“面朝”的方向无关紧要。 “R” 将始终使机器人向右移动一次，“L” 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> \"UD\"\n<strong>输出:</strong> true\n<strong>解释：</strong>机器人向上移动一次，然后向下移动一次。所有动作都具有相同的幅度，因此它最终回到它开始的原点。因此，我们返回 true。</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> \"LL\"\n<strong>输出:</strong> false\n<strong>解释：</strong>机器人向左移动两次。它最终位于原点的左侧，距原点有两次 “移动” 的距离。我们返回 false，因为它在移动结束时没有返回原点。</pre>');
INSERT INTO `leecode` VALUES ('658. 找到 K 个最接近的元素', '<p>给定一个排序好的数组&nbsp;<code>arr</code> ，两个整数 <code>k</code> 和 <code>x</code> ，从数组中找到最靠近 <code>x</code>（两数之差最小）的 <code>k</code> 个数。返回的结果必须要是按升序排好的。</p> \n<p>整数 <code>a</code> 比整数 <code>b</code> 更接近 <code>x</code> 需要满足：</p> \n<ul> \n <li><code>|a - x| &lt; |b - x|</code> 或者</li> \n <li><code>|a - x| == |b - x|</code> 且 <code>a &lt; b</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,3,4,5], k = 4, x = 3\n<strong>输出：</strong>[1,2,3,4]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,3,4,5], k = 4, x = -1\n<strong>输出：</strong>[1,2,3,4]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= arr.length</code></li> \n <li><code>1 &lt;= arr.length&nbsp;&lt;= 10<sup>4</sup></code></li> \n <li>数组里的每个元素与&nbsp;<code>x</code> 的绝对值不超过 <code>10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('659. 分割数组为连续子序列', '<p>给你一个按升序排序的整数数组 <code>num</code>（可能包含重复数字），请你将它们分割成一个或多个长度至少为 3 的子序列，其中每个子序列都由连续整数组成。</p> \n<p>如果可以完成上述分割，则返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> [1,2,3,3,4,5]\n<strong>输出:</strong> True\n<strong>解释:</strong>\n你可以分割出这样两个连续子序列 : \n1, 2, 3\n3, 4, 5\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> [1,2,3,3,4,4,5,5]\n<strong>输出:</strong> True\n<strong>解释:</strong>\n你可以分割出这样两个连续子序列 : \n1, 2, 3, 4, 5\n3, 4, 5\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入:</strong> [1,2,3,4,4,5]\n<strong>输出:</strong> False\n</pre> \n<p>&nbsp;</p> \n<p><b>提示：</b></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('66. 加一', '<p>给定一个由 <strong>整数 </strong>组成的<strong> 非空</strong> 数组所表示的非负整数，在该数的基础上加一。</p> \n<p>最高位数字存放在数组的首位， 数组中每个元素只存储<strong>单个</strong>数字。</p> \n<p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>digits = [1,2,3]\n<strong>输出：</strong>[1,2,4]\n<strong>解释：</strong>输入数组表示数字 123。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>digits = [4,3,2,1]\n<strong>输出：</strong>[4,3,2,2]\n<strong>解释：</strong>输入数组表示数字 4321。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>digits = [0]\n<strong>输出：</strong>[1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= digits.length &lt;= 100</code></li> \n <li><code>0 &lt;= digits[i] &lt;= 9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('661. 图片平滑器', '<p>包含整数的二维矩阵 M 表示一个图片的灰度。你需要设计一个平滑器来让每一个单元的灰度成为平均灰度&nbsp;(向下舍入) ，平均灰度的计算是周围的8个单元和它本身的值求平均，如果周围的单元格不足八个，则尽可能多的利用它们。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong>\n[[1,1,1],\n [1,0,1],\n [1,1,1]]\n<strong>输出:</strong>\n[[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]]\n<strong>解释:</strong>\n对于点 (0,0), (0,2), (2,0), (2,2): 平均(3/4) = 平均(0.75) = 0\n对于点 (0,1), (1,0), (1,2), (2,1): 平均(5/6) = 平均(0.83333333) = 0\n对于点 (1,1): 平均(8/9) = 平均(0.88888889) = 0\n</pre> \n<p><strong>注意:</strong></p> \n<ol> \n <li>给定矩阵中的整数范围为 [0, 255]。</li> \n <li>矩阵的长和宽的范围均为&nbsp;[1, 150]。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('662. 二叉树最大宽度', '<p>给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与<strong>满二叉树（full binary tree）</strong>结构相同，但一些节点为空。</p> \n<p>每一层的宽度被定义为两个端点（该层最左和最右的非空节点，两端点间的<code>null</code>节点也计入长度）之间的长度。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> \n\n           1\n         /   \\\n        3     2\n       / \\     \\  \n      5   3     9 \n\n<strong>输出:</strong> 4\n<strong>解释:</strong> 最大值出现在树的第 3 层，宽度为 4 (5,3,null,9)。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> \n\n          1\n         /  \n        3    \n       / \\       \n      5   3     \n\n<strong>输出:</strong> 2\n<strong>解释:</strong> 最大值出现在树的第 3 层，宽度为 2 (5,3)。\n</pre> \n<p><strong>示例&nbsp;3:</strong></p> \n<pre><strong>输入:</strong> \n\n          1\n         / \\\n        3   2 \n       /        \n      5      \n\n<strong>输出:</strong> 2\n<strong>解释:</strong> 最大值出现在树的第 2 层，宽度为 2 (3,2)。\n</pre> \n<p><strong>示例 4:</strong></p> \n<pre><strong>输入:</strong> \n\n          1\n         / \\\n        3   2\n       /     \\  \n      5       9 \n     /         \\\n    6           7\n<strong>输出:</strong> 8\n<strong>解释:</strong> 最大值出现在树的第 4 层，宽度为 8 (6,null,null,null,null,null,null,7)。\n</pre> \n<p><strong>注意:</strong> 答案在32位有符号整数的表示范围内。</p>');
INSERT INTO `leecode` VALUES ('664. 奇怪的打印机', '<p>有台奇怪的打印机有以下两个特殊要求：</p> \n<ul> \n <li>打印机每次只能打印由 <strong>同一个字符</strong> 组成的序列。</li> \n <li>每次可以在任意起始和结束位置打印新字符，并且会覆盖掉原来已有的字符。</li> \n</ul> \n<p>给你一个字符串 <code>s</code> ，你的任务是计算这个打印机打印它需要的最少打印次数。</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"aaabbb\"\n<strong>输出：</strong>2\n<strong>解释：</strong>首先打印 \"aaa\" 然后打印 \"bbb\"。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"aba\"\n<strong>输出：</strong>2\n<strong>解释：</strong>首先打印 \"aaa\" 然后在第二个位置打印 \"b\" 覆盖掉原来的字符 \'a\'。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 100</code></li> \n <li><code>s</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('665. 非递减数列', '<p>给你一个长度为&nbsp;<code>n</code>&nbsp;的整数数组，请你判断在 <strong>最多 </strong>改变&nbsp;<code>1</code> 个元素的情况下，该数组能否变成一个非递减数列。</p> \n<p>我们是这样定义一个非递减数列的：&nbsp;对于数组中任意的&nbsp;<code>i</code> <code>(0 &lt;= i &lt;= n-2)</code>，总满足 <code>nums[i] &lt;= nums[i + 1]</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums = [4,2,3]\n<strong>输出:</strong> true\n<strong>解释:</strong> 你可以通过把第一个4变成1来使得它成为一个非递减数列。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> nums = [4,2,1]\n<strong>输出:</strong> false\n<strong>解释:</strong> 你不能在只改变一个元素的情况下将其变为非递减数列。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10 ^ 4</code></li> \n <li><code>- 10 ^ 5&nbsp;&lt;= nums[i] &lt;= 10 ^ 5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('667. 优美的排列 II', '<p>给你两个整数 <code>n</code> 和 <code>k</code> ，请你构造一个答案列表 <code>answer</code> ，该列表应当包含从 <code>1</code> 到 <code>n</code> 的 <code>n</code> 个不同正整数，并同时满足下述条件：</p> \n<ul> \n <li>假设该列表是 <code>answer =&nbsp;[a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, ... , a<sub>n</sub>]</code> ，那么列表 <code>[|a<sub>1</sub> - a<sub>2</sub>|, |a<sub>2</sub> - a<sub>3</sub>|, |a<sub>3</sub> - a<sub>4</sub>|, ... , |a<sub>n-1</sub> - a<sub>n</sub>|]</code> 中应该有且仅有 <code>k</code> 个不同整数。</li> \n</ul> \n<p>返回列表 <code>answer</code> 。如果存在多种答案，只需返回其中 <strong>任意一种</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 3, k = 1\n<strong>输出：</strong>[1, 2, 3]\n<strong>解释：</strong>[1, 2, 3] 包含 3 个范围在 1-3 的不同整数，并且 [1, 1] 中有且仅有 1 个不同整数：1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 3, k = 2\n<strong>输出：</strong>[1, 3, 2]\n<strong>解释：</strong>[1, 3, 2] 包含 3 个范围在 1-3 的不同整数，并且 [2, 1] 中有且仅有 2 个不同整数：1 和 2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt; n &lt;= 10<sup>4</sup></code></li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('668. 乘法表中第k小的数', '<p>几乎每一个人都用&nbsp;<a href=\"https://baike.baidu.com/item/%E4%B9%98%E6%B3%95%E8%A1%A8\">乘法表</a>。但是你能在乘法表中快速找到第<code>k</code>小的数字吗？</p> \n<p>给定高度<code>m</code>&nbsp;、宽度<code>n</code> 的一张&nbsp;<code>m * n</code>的乘法表，以及正整数<code>k</code>，你需要返回表中第<code>k</code>&nbsp;小的数字。</p> \n<p><strong>例&nbsp;1：</strong></p> \n<pre><strong>输入:</strong> m = 3, n = 3, k = 5\n<strong>输出:</strong> 3\n<strong>解释:</strong> \n乘法表:\n1	2	3\n2	4	6\n3	6	9\n\n第5小的数字是 3 (1, 2, 2, 3, 3).\n</pre> \n<p><strong>例 2：</strong></p> \n<pre><strong>输入:</strong> m = 2, n = 3, k = 6\n<strong>输出:</strong> 6\n<strong>解释:</strong> \n乘法表:\n1	2	3\n2	4	6\n\n第6小的数字是 6 (1, 2, 2, 3, 4, 6).\n</pre> \n<p><strong>注意：</strong></p> \n<ol> \n <li><code>m</code> 和&nbsp;<code>n</code>&nbsp;的范围在 [1, 30000] 之间。</li> \n <li><code>k</code> 的范围在 [1, m * n] 之间。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('669. 修剪二叉搜索树', '<p>给你二叉搜索树的根节点 <code>root</code> ，同时给定最小边界<code>low</code> 和最大边界 <code>high</code>。通过修剪二叉搜索树，使得所有节点的值在<code>[low, high]</code>中。修剪树不应该改变保留在树中的元素的相对结构（即，如果没有被移除，原有的父代子代关系都应当保留）。 可以证明，存在唯一的答案。</p> \n<p>所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 450px; height: 126px;\" src=\"https://assets.leetcode.com/uploads/2020/09/09/trim1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,0,2], low = 1, high = 2\n<strong>输出：</strong>[1,null,2]\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 450px; height: 277px;\" src=\"https://assets.leetcode.com/uploads/2020/09/09/trim2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [3,0,4,null,2,null,null,1], low = 1, high = 3\n<strong>输出：</strong>[3,2,null,1]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [1], low = 1, high = 2\n<strong>输出：</strong>[1]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>root = [1,null,2], low = 1, high = 3\n<strong>输出：</strong>[1,null,2]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>root = [1,null,2], low = 2, high = 4\n<strong>输出：</strong>[2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点数在范围 <code>[1, 10<sup>4</sup>]</code> 内</li> \n <li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> \n <li>树中每个节点的值都是唯一的</li> \n <li>题目数据保证输入是一棵有效的二叉搜索树</li> \n <li><code>0 &lt;= low &lt;= high &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('67. 二进制求和', '<p>给你两个二进制字符串，返回它们的和（用二进制表示）。</p> \n<p>输入为 <strong>非空 </strong>字符串且只包含数字&nbsp;<code>1</code>&nbsp;和&nbsp;<code>0</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> a = \"11\", b = \"1\"\n<strong>输出:</strong> \"100\"</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> a = \"1010\", b = \"1011\"\n<strong>输出:</strong> \"10101\"</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>每个字符串仅由字符 <code>\'0\'</code> 或 <code>\'1\'</code> 组成。</li> \n <li><code>1 &lt;= a.length, b.length &lt;= 10^4</code></li> \n <li>字符串如果不是 <code>\"0\"</code> ，就都不含前导零。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('670. 最大交换', '<p>给定一个非负整数，你<strong>至多</strong>可以交换一次数字中的任意两位。返回你能得到的最大值。</p> \n<p><strong>示例 1 :</strong></p> \n<pre><strong>输入:</strong> 2736\n<strong>输出:</strong> 7236\n<strong>解释:</strong> 交换数字2和数字7。\n</pre> \n<p><strong>示例 2 :</strong></p> \n<pre><strong>输入:</strong> 9973\n<strong>输出:</strong> 9973\n<strong>解释:</strong> 不需要交换。\n</pre> \n<p><strong>注意:</strong></p> \n<ol> \n <li>给定数字的范围是&nbsp;[0, 10<sup>8</sup>]</li> \n</ol>');
INSERT INTO `leecode` VALUES ('671. 二叉树中第二小的节点', '<p>给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为&nbsp;<code>2</code>&nbsp;或&nbsp;<code>0</code>。如果一个节点有两个子节点的话，那么该节点的值等于两个子节点中较小的一个。</p> \n<p>更正式地说，<code>root.val = min(root.left.val, root.right.val)</code> 总成立。</p> \n<p>给出这样的一个二叉树，你需要输出所有节点中的<strong>第二小的值。</strong>如果第二小的值不存在的话，输出 -1 <strong>。</strong></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 431px; height: 302px;\" src=\"https://assets.leetcode.com/uploads/2020/10/15/smbt1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [2,2,5,null,null,5,7]\n<strong>输出：</strong>5\n<strong>解释：</strong>最小的值是 2 ，第二小的值是 5 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 321px; height: 182px;\" src=\"https://assets.leetcode.com/uploads/2020/10/15/smbt2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [2,2,2]\n<strong>输出：</strong>-1\n<strong>解释：</strong>最小的值是 2, 但是不存在第二小的值。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点数目在范围 <code>[1, 25]</code> 内</li> \n <li><code>1 &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li> \n <li>对于树中每个节点 <code>root.val == min(root.left.val, root.right.val)</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('672. 灯泡开关 Ⅱ', '<p>现有一个房间，墙上挂有&nbsp;<code>n</code>&nbsp;只已经打开的灯泡和 4 个按钮。在进行了&nbsp;<code>m</code>&nbsp;次未知操作后，你需要返回这&nbsp;<code>n</code>&nbsp;只灯泡可能有多少种不同的状态。</p> \n<p>假设这 <code>n</code> 只灯泡被编号为 [1, 2, 3 ..., n]，这 4 个按钮的功能如下：</p> \n<ol> \n <li>将所有灯泡的状态反转（即开变为关，关变为开）</li> \n <li>将编号为偶数的灯泡的状态反转</li> \n <li>将编号为奇数的灯泡的状态反转</li> \n <li>将编号为 <code>3k+1</code> 的灯泡的状态反转（k = 0, 1, 2, ...)</li> \n</ol> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> n = 1, m = 1.\n<strong>输出:</strong> 2\n<strong>说明:</strong> 状态为: [开], [关]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> n = 2, m = 1.\n<strong>输出:</strong> 3\n<strong>说明:</strong> 状态为: [开, 关], [关, 开], [关, 关]\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> n = 3, m = 1.\n<strong>输出:</strong> 4\n<strong>说明:</strong> 状态为: [关, 开, 关], [开, 关, 开], [关, 关, 关], [关, 开, 开].\n</pre> \n<p><strong>注意：</strong>&nbsp;<code>n</code>&nbsp;和&nbsp;<code>m</code> 都属于 [0, 1000].</p>');
INSERT INTO `leecode` VALUES ('673. 最长递增子序列的个数', '<p>给定一个未排序的整数数组，找到最长递增子序列的个数。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [1,3,5,4,7]\n<strong>输出:</strong> 2\n<strong>解释:</strong> 有两个最长递增子序列，分别是 [1, 3, 4, 7] 和[1, 3, 5, 7]。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> [2,2,2,2,2]\n<strong>输出:</strong> 5\n<strong>解释:</strong> 最长递增子序列的长度是1，并且存在5个子序列的长度为1，因此输出5。\n</pre> \n<p><strong>注意:</strong>&nbsp;给定的数组长度不超过 2000 并且结果一定是32位有符号整数。</p>');
INSERT INTO `leecode` VALUES ('674. 最长连续递增序列', '<p>给定一个未经排序的整数数组，找到最长且<strong> 连续递增的子序列</strong>，并返回该序列的长度。</p> \n<p><strong>连续递增的子序列</strong> 可以由两个下标 <code>l</code> 和 <code>r</code>（<code>l &lt; r</code>）确定，如果对于每个 <code>l &lt;= i &lt; r</code>，都有 <code>nums[i] &lt; nums[i + 1]</code> ，那么子序列 <code>[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]</code> 就是连续递增子序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,3,5,4,7]\n<strong>输出：</strong>3\n<strong>解释：</strong>最长连续递增序列是 [1,3,5], 长度为3。\n尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为 5 和 7 在原数组里被 4 隔开。 \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [2,2,2,2,2]\n<strong>输出：</strong>1\n<strong>解释：</strong>最长连续递增序列是 [2], 长度为1。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('675. 为高尔夫比赛砍树', '<p>你被请来给一个要举办高尔夫比赛的树林砍树。树林由一个&nbsp;<code>m x n</code> 的矩阵表示， 在这个矩阵中：</p> \n<ul> \n <li><code>0</code> 表示障碍，无法触碰</li> \n <li><code>1</code>&nbsp;表示地面，可以行走</li> \n <li><code>比 1 大的数</code>&nbsp;表示有树的单元格，可以行走，数值表示树的高度</li> \n</ul> \n<p>每一步，你都可以向上、下、左、右四个方向之一移动一个单位，如果你站的地方有一棵树，那么你可以决定是否要砍倒它。</p> \n<p>你需要按照树的高度从低向高砍掉所有的树，每砍过一颗树，该单元格的值变为 <code>1</code>（即变为地面）。</p> \n<p>你将从 <code>(0, 0)</code> 点开始工作，返回你砍完所有树需要走的最小步数。 如果你无法砍完所有的树，返回 <code>-1</code> 。</p> \n<p>可以保证的是，没有两棵树的高度是相同的，并且你至少需要砍倒一棵树。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 242px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/11/26/trees1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>forest = [[1,2,3],[0,0,4],[7,6,5]]\n<strong>输出：</strong>6\n<strong>解释：</strong>沿着上面的路径，你可以用 6 步，按从最矮到最高的顺序砍掉这些树。</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 242px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/11/26/trees2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>forest = [[1,2,3],[0,0,0],[7,6,5]]\n<strong>输出：</strong>-1\n<strong>解释：</strong>由于中间一行被障碍阻塞，无法访问最下面一行中的树。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>forest = [[2,3,4],[0,0,5],[8,7,6]]\n<strong>输出：</strong>6\n<strong>解释：</strong>可以按与示例 1 相同的路径来砍掉所有的树。\n(0,0) 位置的树，可以直接砍去，不用算步数。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == forest.length</code></li> \n <li><code>n == forest[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 50</code></li> \n <li><code>0 &lt;= forest[i][j] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('676. 实现一个魔法字典', '<p>设计一个使用单词列表进行初始化的数据结构，单词列表中的单词 <strong>互不相同</strong> 。 如果给出一个单词，请判定能否只将这个单词中<strong>一个</strong>字母换成另一个字母，使得所形成的新单词存在于你构建的字典中。</p> \n<p>实现 <code>MagicDictionary</code> 类：</p> \n<ul> \n <li><code>MagicDictionary()</code> 初始化对象</li> \n <li><code>void buildDict(String[]&nbsp;dictionary)</code> 使用字符串数组&nbsp;<code>dictionary</code> 设定该数据结构，<code>dictionary</code> 中的字符串互不相同</li> \n <li><code>bool search(String searchWord)</code> 给定一个字符串 <code>searchWord</code> ，判定能否只将字符串中<strong> 一个 </strong>字母换成另一个字母，使得所形成的新字符串能够与字典中的任一字符串匹配。如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li> \n</ul> \n<p>&nbsp;</p> \n<div class=\"top-view__1vxA\"> \n <div class=\"original__bRMd\"> \n  <div> \n   <p><strong>示例：</strong></p> \n   <pre><strong>输入</strong>\n[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\n[[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]\n<strong>输出</strong>\n[null, null, false, true, false, false]\n\n<strong>解释</strong>\nMagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict([\"hello\", \"leetcode\"]);\nmagicDictionary.search(\"hello\"); // 返回 False\nmagicDictionary.search(\"hhllo\"); // 将第二个 \'h\' 替换为 \'e\' 可以匹配 \"hello\" ，所以返回 True\nmagicDictionary.search(\"hell\"); // 返回 False\nmagicDictionary.search(\"leetcoded\"); // 返回 False\n</pre> \n   <p>&nbsp;</p> \n   <p><strong>提示：</strong></p> \n   <ul> \n    <li><code>1 &lt;=&nbsp;dictionary.length &lt;= 100</code></li> \n    <li><code>1 &lt;=&nbsp;dictionary[i].length &lt;= 100</code></li> \n    <li><code>dictionary[i]</code> 仅由小写英文字母组成</li> \n    <li><code>dictionary</code> 中的所有字符串 <strong>互不相同</strong></li> \n    <li><code>1 &lt;=&nbsp;searchWord.length &lt;= 100</code></li> \n    <li><code>searchWord</code> 仅由小写英文字母组成</li> \n    <li><code>buildDict</code> 仅在 <code>search</code> 之前调用一次</li> \n    <li>最多调用 <code>100</code> 次 <code>search</code></li> \n   </ul> \n  </div> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('677. 键值映射', '<p>实现一个 <code>MapSum</code> 类，支持两个方法，<code>insert</code>&nbsp;和&nbsp;<code>sum</code>：</p> \n<ul> \n <li><code>MapSum()</code> 初始化 <code>MapSum</code> 对象</li> \n <li><code>void insert(String key, int val)</code> 插入 <code>key-val</code> 键值对，字符串表示键 <code>key</code> ，整数表示值 <code>val</code> 。如果键 <code>key</code> 已经存在，那么原来的键值对将被替代成新的键值对。</li> \n <li><code>int sum(string prefix)</code> 返回所有以该前缀 <code>prefix</code> 开头的键 <code>key</code> 的值的总和。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n[[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]\n<strong>输出：</strong>\n[null, null, 3, null, 5]\n\n<strong>解释：</strong>\nMapSum mapSum = new MapSum();\nmapSum.insert(\"apple\", 3);  \nmapSum.sum(\"ap\");           // return 3 (<u>ap</u>ple = 3)\nmapSum.insert(\"app\", 2);    \nmapSum.sum(\"ap\");           // return 5 (<u>ap</u>ple + <u>ap</u>p = 3 + 2 = 5)\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= key.length, prefix.length &lt;= 50</code></li> \n <li><code>key</code> 和 <code>prefix</code> 仅由小写英文字母组成</li> \n <li><code>1 &lt;= val &lt;= 1000</code></li> \n <li>最多调用 <code>50</code> 次 <code>insert</code> 和 <code>sum</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('678. 有效的括号字符串', '<p>给定一个只包含三种字符的字符串：<code>（&nbsp;</code>，<code>）</code>&nbsp;和 <code>*</code>，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：</p> \n<ol> \n <li>任何左括号 <code>(</code>&nbsp;必须有相应的右括号 <code>)</code>。</li> \n <li>任何右括号 <code>)</code>&nbsp;必须有相应的左括号 <code>(</code>&nbsp;。</li> \n <li>左括号 <code>(</code> 必须在对应的右括号之前 <code>)</code>。</li> \n <li><code>*</code>&nbsp;可以被视为单个右括号 <code>)</code>&nbsp;，或单个左括号 <code>(</code>&nbsp;，或一个空字符串。</li> \n <li>一个空字符串也被视为有效字符串。</li> \n</ol> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> \"()\"\n<strong>输出:</strong> True\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> \"(*)\"\n<strong>输出:</strong> True\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> \"(*))\"\n<strong>输出:</strong> True\n</pre> \n<p><strong>注意:</strong></p> \n<ol> \n <li>字符串大小将在 [1，100] 范围内。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('679. 24 点游戏', '<p>你有 4 张写有 1 到 9 数字的牌。你需要判断是否能通过&nbsp;<code>*</code>，<code>/</code>，<code>+</code>，<code>-</code>，<code>(</code>，<code>)</code>&nbsp;的运算得到 24。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [4, 1, 8, 7]\n<strong>输出:</strong> True\n<strong>解释:</strong> (8-4) * (7-1) = 24\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> [1, 2, 1, 2]\n<strong>输出:</strong> False\n</pre> \n<p><strong>注意:</strong></p> \n<ol> \n <li>除法运算符&nbsp;<code>/</code>&nbsp;表示实数除法，而不是整数除法。例如 4 / (1 - 2/3) = 12 。</li> \n <li>每个运算符对两个数进行运算。特别是我们不能用&nbsp;<code>-</code>&nbsp;作为一元运算符。例如，<code>[1, 1, 1, 1]</code>&nbsp;作为输入时，表达式&nbsp;<code>-1 - 1 - 1 - 1</code>&nbsp;是不允许的。</li> \n <li>你不能将数字连接在一起。例如，输入为&nbsp;<code>[1, 2, 1, 2]</code>&nbsp;时，不能写成 12 + 12 。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('68. 文本左右对齐', '<p>给定一个单词数组和一个长度&nbsp;<em>maxWidth</em>，重新排版单词，使其成为每行恰好有&nbsp;<em>maxWidth</em>&nbsp;个字符，且左右两端对齐的文本。</p> \n<p>你应该使用“贪心算法”来放置给定的单词；也就是说，尽可能多地往每行中放置单词。必要时可用空格&nbsp;<code>\' \'</code>&nbsp;填充，使得每行恰好有 <em>maxWidth</em>&nbsp;个字符。</p> \n<p>要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。</p> \n<p>文本的最后一行应为左对齐，且单词之间不插入<strong>额外的</strong>空格。</p> \n<p><strong>说明:</strong></p> \n<ul> \n <li>单词是指由非空格字符组成的字符序列。</li> \n <li>每个单词的长度大于 0，小于等于&nbsp;<em>maxWidth</em>。</li> \n <li>输入单词数组 <code>words</code>&nbsp;至少包含一个单词。</li> \n</ul> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong>\nwords = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\nmaxWidth = 16\n<strong>输出:</strong>\n[\n&nbsp; &nbsp;\"This &nbsp; &nbsp;is &nbsp; &nbsp;an\",\n&nbsp; &nbsp;\"example &nbsp;of text\",\n&nbsp; &nbsp;\"justification. &nbsp;\"\n]\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong>\nwords = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]\nmaxWidth = 16\n<strong>输出:</strong>\n[\n&nbsp; \"What &nbsp; must &nbsp; be\",\n&nbsp; \"acknowledgment &nbsp;\",\n&nbsp; \"shall be &nbsp; &nbsp; &nbsp; &nbsp;\"\n]\n<strong>解释: </strong>注意最后一行的格式应为 \"shall be    \" 而不是 \"shall     be\",\n&nbsp;    因为最后一行应为左对齐，而不是左右两端对齐。       \n     第二行同样为左对齐，这是因为这行只包含一个单词。\n</pre> \n<p><strong>示例&nbsp;3:</strong></p> \n<pre><strong>输入:</strong>\nwords = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\n&nbsp;        \"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"]\nmaxWidth = 20\n<strong>输出:</strong>\n[\n&nbsp; \"Science &nbsp;is &nbsp;what we\",\n  \"understand &nbsp; &nbsp; &nbsp;well\",\n&nbsp; \"enough to explain to\",\n&nbsp; \"a &nbsp;computer. &nbsp;Art is\",\n&nbsp; \"everything &nbsp;else &nbsp;we\",\n&nbsp; \"do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"\n]\n</pre>');
INSERT INTO `leecode` VALUES ('680. 验证回文字符串 Ⅱ', '<p>给定一个非空字符串&nbsp;<code>s</code>，<strong>最多</strong>删除一个字符。判断是否能成为回文字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> s = \"aba\"\n<strong>输出:</strong> true\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> s = \"abca\"\n<strong>输出:</strong> true\n<strong>解释:</strong> 你可以删除c字符。\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> s = \"abc\"\n<strong>输出:</strong> false</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('682. 棒球比赛', '<p>你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。</p> \n<p>比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 <code>ops</code>，其中 <code>ops[i]</code> 是你需要记录的第 <code>i</code> 项操作，<code>ops</code> 遵循下述规则：</p> \n<ol> \n <li>整数 <code>x</code> - 表示本回合新获得分数 <code>x</code></li> \n <li><code>\"+\"</code> - 表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。</li> \n <li><code>\"D\"</code> - 表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。</li> \n <li><code>\"C\"</code> - 表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。</li> \n</ol> \n<p>请你返回记录中所有得分的总和。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]\n<strong>输出：</strong>30\n<strong>解释：</strong>\n\"5\" - 记录加 5 ，记录现在是 [5]\n\"2\" - 记录加 2 ，记录现在是 [5, 2]\n\"C\" - 使前一次得分的记录无效并将其移除，记录现在是 [5].\n\"D\" - 记录加 2 * 5 = 10 ，记录现在是 [5, 10].\n\"+\" - 记录加 5 + 10 = 15 ，记录现在是 [5, 10, 15].\n所有得分的总和 5 + 10 + 15 = 30\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\n<strong>输出：</strong>27\n<strong>解释：</strong>\n\"5\" - 记录加 5 ，记录现在是 [5]\n\"-2\" - 记录加 -2 ，记录现在是 [5, -2]\n\"4\" - 记录加 4 ，记录现在是 [5, -2, 4]\n\"C\" - 使前一次得分的记录无效并将其移除，记录现在是 [5, -2]\n\"D\" - 记录加 2 * -2 = -4 ，记录现在是 [5, -2, -4]\n\"9\" - 记录加 9 ，记录现在是 [5, -2, -4, 9]\n\"+\" - 记录加 -4 + 9 = 5 ，记录现在是 [5, -2, -4, 9, 5]\n\"+\" - 记录加 9 + 5 = 14 ，记录现在是 [5, -2, -4, 9, 5, 14]\n所有得分的总和 5 + -2 + -4 + 9 + 5 + 14 = 27\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>ops = [\"1\"]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= ops.length &lt;= 1000</code></li> \n <li><code>ops[i]</code> 为 <code>\"C\"</code>、<code>\"D\"</code>、<code>\"+\"</code>，或者一个表示整数的字符串。整数范围是 <code>[-3 * 10<sup>4</sup>, 3 * 10<sup>4</sup>]</code></li> \n <li>对于 <code>\"+\"</code> 操作，题目数据保证记录此操作时前面总是存在两个有效的分数</li> \n <li>对于 <code>\"C\"</code> 和 <code>\"D\"</code> 操作，题目数据保证记录此操作时前面总是存在一个有效的分数</li> \n</ul>');
INSERT INTO `leecode` VALUES ('684. 冗余连接', '<p>树可以看成是一个连通且 <strong>无环&nbsp;</strong>的&nbsp;<strong>无向&nbsp;</strong>图。</p> \n<p>给定往一棵&nbsp;<code>n</code> 个节点 (节点值&nbsp;<code>1～n</code>) 的树中添加一条边后的图。添加的边的两个顶点包含在 <code>1</code> 到 <code>n</code>&nbsp;中间，且这条附加的边不属于树中已存在的边。图的信息记录于长度为 <code>n</code> 的二维数组 <code>edges</code>&nbsp;，<code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>&nbsp;表示图中在 <code>ai</code> 和 <code>bi</code> 之间存在一条边。</p> \n<p>请找出一条可以删去的边，删除后可使得剩余部分是一个有着 <code>n</code> 个节点的树。如果有多个答案，则返回数组&nbsp;<code>edges</code>&nbsp;中最后出现的边。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 152px;\" src=\"https://pic.leetcode-cn.com/1626676174-hOEVUL-image.png\" alt=\"\"></p> \n<pre><strong>输入:</strong> edges = [[1,2], [1,3], [2,3]]\n<strong>输出:</strong> [2,3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 250px;\" src=\"https://pic.leetcode-cn.com/1626676179-kGxcmu-image.png\" alt=\"\"></p> \n<pre><strong>输入:</strong> edges = [[1,2], [2,3], [3,4], [1,4], [1,5]]\n<strong>输出:</strong> [1,4]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>n == edges.length</code></li> \n <li><code>3 &lt;= n &lt;= 1000</code></li> \n <li><code>edges[i].length == 2</code></li> \n <li><code>1 &lt;= ai&nbsp;&lt; bi&nbsp;&lt;= edges.length</code></li> \n <li><code>ai != bi</code></li> \n <li><code>edges</code> 中无重复元素</li> \n <li>给定的图是连通的&nbsp;</li> \n</ul>');
INSERT INTO `leecode` VALUES ('685. 冗余连接 II', '<p>在本问题中，有根树指满足以下条件的 <strong>有向</strong> 图。该树只有一个根节点，所有其他节点都是该根节点的后继。该树除了根节点之外的每一个节点都有且只有一个父节点，而根节点没有父节点。</p> \n<p>输入一个有向图，该图由一个有着 <code>n</code> 个节点（节点值不重复，从 <code>1</code> 到 <code>n</code>）的树及一条附加的有向边构成。附加的边包含在 <code>1</code> 到 <code>n</code> 中的两个不同顶点间，这条附加的边不属于树中已存在的边。</p> \n<p>结果图是一个以边组成的二维数组&nbsp;<code>edges</code> 。 每个元素是一对 <code>[u<sub>i</sub>, v<sub>i</sub>]</code>，用以表示 <strong>有向 </strong>图中连接顶点 <code>u<sub>i</sub></code> 和顶点 <code>v<sub>i</sub></code> 的边，其中 <code>u<sub>i</sub></code> 是 <code>v<sub>i</sub></code> 的一个父节点。</p> \n<p>返回一条能删除的边，使得剩下的图是有 <code>n</code> 个节点的有根树。若有多个答案，返回最后出现在给定二维数组的答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 222px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2020/12/20/graph1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>edges = [[1,2],[1,3],[2,3]]\n<strong>输出：</strong>[2,3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 222px; height: 382px;\" src=\"https://assets.leetcode.com/uploads/2020/12/20/graph2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]\n<strong>输出：</strong>[4,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == edges.length</code></li> \n <li><code>3 &lt;= n &lt;= 1000</code></li> \n <li><code>edges[i].length == 2</code></li> \n <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('686. 重复叠加字符串匹配', '<p>给定两个字符串&nbsp;<code>a</code> 和 <code>b</code>，寻找重复叠加字符串 <code>a</code> 的最小次数，使得字符串 <code>b</code> 成为叠加后的字符串 <code>a</code> 的子串，如果不存在则返回 <code>-1</code>。</p> \n<p><strong>注意：</strong>字符串 <code>\"abc\"</code>&nbsp;重复叠加 0 次是 <code>\"\"</code>，重复叠加 1 次是&nbsp;<code>\"abc\"</code>，重复叠加 2 次是&nbsp;<code>\"abcabc\"</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>a = \"abcd\", b = \"cdabcdab\"\n<strong>输出：</strong>3\n<strong>解释：</strong>a 重复叠加三遍后为 \"ab<strong>cdabcdab</strong>cd\", 此时 b 是其子串。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>a = \"a\", b = \"aa\"\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>a = \"a\", b = \"a\"\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>a = \"abc\", b = \"wxyz\"\n<strong>输出：</strong>-1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= a.length &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= b.length &lt;= 10<sup>4</sup></code></li> \n <li><code>a</code> 和 <code>b</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('687. 最长同值路径', '<p>给定一个二叉树，找到最长的路径，这个路径中的每个节点具有相同值。 这条路径可以经过也可以不经过根节点。</p> \n<p><strong>注意</strong>：两个节点之间的路径长度由它们之间的边数表示。</p> \n<p><strong>示例 1:</strong></p> \n<p>输入:</p> \n<pre>              5\n             / \\\n            4   5\n           / \\   \\\n          1   1   5\n</pre> \n<p>输出:</p> \n<pre>2\n</pre> \n<p><strong>示例 2:</strong></p> \n<p>输入:</p> \n<pre>              1\n             / \\\n            4   5\n           / \\   \\\n          4   4   5\n</pre> \n<p>输出:</p> \n<pre>2\n</pre> \n<p><strong>注意:</strong> 给定的二叉树不超过10000个结点。&nbsp;树的高度不超过1000。</p>');
INSERT INTO `leecode` VALUES ('688. “马”在棋盘上的概率', '<p>已知一个&nbsp;<code>N</code>x<code>N</code>&nbsp;的国际象棋棋盘，棋盘的行号和列号都是从 0 开始。即最左上角的格子记为&nbsp;<code>(0, 0)</code>，最右下角的记为&nbsp;<code>(N-1, N-1)</code>。&nbsp;</p> \n<p>现有一个 “马”（也译作 “骑士”）位于&nbsp;<code>(r, c)</code>&nbsp;，并打算进行&nbsp;<code>K</code> 次移动。&nbsp;</p> \n<p>如下图所示，国际象棋的 “马” 每一步先沿水平或垂直方向移动 2 个格子，然后向与之相垂直的方向再移动 1 个格子，共有 8 个可选的位置。</p> \n<p>&nbsp;</p> \n<p><img style=\"height: 200px; width: 200px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/knight.png\"></p> \n<p>&nbsp;</p> \n<p>现在 “马” 每一步都从可选的位置（包括棋盘外部的）中独立随机地选择一个进行移动，直到移动了&nbsp;<code>K</code>&nbsp;次或跳到了棋盘外面。</p> \n<p>求移动结束后，“马” 仍留在棋盘上的概率。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入:</strong> 3, 2, 0, 0\n<strong>输出:</strong> 0.0625\n<strong>解释:</strong> \n输入的数据依次为 N, K, r, c\n第 1 步时，有且只有 2 种走法令 “马” 可以留在棋盘上（跳到（1,2）或（2,1））。对于以上的两种情况，各自在第2步均有且只有2种走法令 “马” 仍然留在棋盘上。\n所以 “马” 在结束后仍在棋盘上的概率为 0.0625。\n</pre> \n<p>&nbsp;</p> \n<p><strong>注意：</strong></p> \n<ul> \n <li><code>N</code> 的取值范围为 [1, 25]</li> \n <li><code>K</code>&nbsp;的取值范围为 [0, 100]</li> \n <li>开始时，“马” 总是位于棋盘上</li> \n</ul>');
INSERT INTO `leecode` VALUES ('689. 三个无重叠子数组的最大和', '<p>给定数组&nbsp;<code>nums</code>&nbsp;由正整数组成，找到三个互不重叠的子数组的最大和。</p> \n<p>每个子数组的长度为<code>k</code>，我们要使这<code>3*k</code>个项的和最大化。</p> \n<p>返回每个区间起始索引的列表（索引从 0 开始）。如果有多个结果，返回字典序最小的一个。</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> [1,2,1,2,6,7,5,1], 2\n<strong>输出:</strong> [0, 3, 5]\n<strong>解释:</strong> 子数组 [1, 2], [2, 6], [7, 5] 对应的起始索引为 [0, 3, 5]。\n我们也可以取 [2, 1], 但是结果 [1, 3, 5] 在字典序上更大。\n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>nums.length</code>的范围在<code>[1, 20000]</code>之间。</li> \n <li><code>nums[i]</code>的范围在<code>[1, 65535]</code>之间。</li> \n <li><code>k</code>的范围在<code>[1, floor(nums.length / 3)]</code>之间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('69. x 的平方根', '<p>实现&nbsp;<code>int sqrt(int x)</code>&nbsp;函数。</p> \n<p>计算并返回&nbsp;<em>x</em>&nbsp;的平方根，其中&nbsp;<em>x </em>是非负整数。</p> \n<p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> 4\n<strong>输出:</strong> 2\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> 8\n<strong>输出:</strong> 2\n<strong>说明:</strong> 8 的平方根是 2.82842..., \n&nbsp;    由于返回类型是整数，小数部分将被舍去。\n</pre>');
INSERT INTO `leecode` VALUES ('690. 员工的重要性', '<p>给定一个保存员工信息的数据结构，它包含了员工 <strong>唯一的 id </strong>，<strong>重要度&nbsp;</strong>和 <strong>直系下属的 id </strong>。</p> \n<p>比如，员工 1 是员工 2 的领导，员工 2 是员工 3 的领导。他们相应的重要度为 15 , 10 , 5 。那么员工 1 的数据结构是 [1, 15, [2]] ，员工 2的 数据结构是 [2, 10, [3]] ，员工 3 的数据结构是 [3, 5, []] 。注意虽然员工 3 也是员工 1 的一个下属，但是由于 <strong>并不是直系</strong> 下属，因此没有体现在员工 1 的数据结构中。</p> \n<p>现在输入一个公司的所有员工信息，以及单个员工 id ，返回这个员工和他所有下属的重要度之和。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\n<strong>输出：</strong>11\n<strong>解释：</strong>\n员工 1 自身的重要度是 5 ，他有两个直系下属 2 和 3 ，而且 2 和 3 的重要度均为 3 。因此员工 1 的总重要度是 5 + 3 + 3 = 11 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>一个员工最多有一个<strong> 直系 </strong>领导，但是可以有多个 <strong>直系 </strong>下属</li> \n <li>员工数量不超过 2000 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('691. 贴纸拼词', '<p>我们给出了 N 种不同类型的贴纸。每个贴纸上都有一个小写的英文单词。</p> \n<p>你希望从自己的贴纸集合中裁剪单个字母并重新排列它们，从而拼写出给定的目标字符串 <code>target</code>。</p> \n<p>如果你愿意的话，你可以不止一次地使用每一张贴纸，而且每一张贴纸的数量都是无限的。</p> \n<p>拼出目标&nbsp;<code>target</code> 所需的最小贴纸数量是多少？如果任务不可能，则返回 -1。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p>输入：</p> \n<pre>[\"with\", \"example\", \"science\"], \"thehat\"\n</pre> \n<p>输出：</p> \n<pre>3\n</pre> \n<p>解释：</p> \n<pre>我们可以使用 2 个 \"with\" 贴纸，和 1 个 \"example\" 贴纸。\n把贴纸上的字母剪下来并重新排列后，就可以形成目标 “thehat“ 了。\n此外，这是形成目标字符串所需的最小贴纸数量。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p>输入：</p> \n<pre>[\"notice\", \"possible\"], \"basicbasic\"\n</pre> \n<p>输出：</p> \n<pre>-1\n</pre> \n<p>解释：</p> \n<pre>我们不能通过剪切给定贴纸的字母来形成目标“basicbasic”。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>stickers</code> 长度范围是&nbsp;<code>[1, 50]</code>。</li> \n <li><code>stickers</code> 由小写英文单词组成（不带撇号）。</li> \n <li><code>target</code> 的长度在&nbsp;<code>[1, 15]</code>&nbsp;范围内，由小写字母组成。</li> \n <li>在所有的测试案例中，所有的单词都是从 1000 个最常见的美国英语单词中随机选取的，目标是两个随机单词的串联。</li> \n <li>时间限制可能比平时更具挑战性。预计 50 个贴纸的测试案例平均可在35ms内解决。</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('692. 前K个高频单词', '<p>给一非空的单词列表，返回前&nbsp;<em>k&nbsp;</em>个出现次数最多的单词。</p> \n<p>返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率，按字母顺序排序。</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> [\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], k = 2\n<strong>输出:</strong> [\"i\", \"love\"]\n<strong>解析:</strong> \"i\" 和 \"love\" 为出现次数最多的两个单词，均为2次。\n    注意，按字母顺序 \"i\" 在 \"love\" 之前。\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> [\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], k = 4\n<strong>输出:</strong> [\"the\", \"is\", \"sunny\", \"day\"]\n<strong>解析:</strong> \"the\", \"is\", \"sunny\" 和 \"day\" 是出现次数最多的四个单词，\n    出现次数依次为 4, 3, 2 和 1 次。\n</pre> \n<p>&nbsp;</p> \n<p><strong>注意：</strong></p> \n<ol> \n <li>假定 <em>k</em> 总为有效值， 1 ≤ <em>k</em> ≤ 集合元素数。</li> \n <li>输入的单词均由小写字母组成。</li> \n</ol> \n<p>&nbsp;</p> \n<p><strong>扩展练习：</strong></p> \n<ol> \n <li>尝试以&nbsp;<em>O</em>(<em>n</em> log <em>k</em>) 时间复杂度和&nbsp;<em>O</em>(<em>n</em>) 空间复杂度解决。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('693. 交替位二进制数', '<p>给定一个正整数，检查它的二进制表示是否总是 0、1 交替出现：换句话说，就是二进制表示中相邻两位的数字永不相同。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 5\n<strong>输出：</strong>true\n<strong>解释：</strong>5 的二进制表示是：101\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 7\n<strong>输出：</strong>false\n<strong>解释：</strong>7 的二进制表示是：111.</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 11\n<strong>输出：</strong>false\n<strong>解释：</strong>11 的二进制表示是：1011.</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 10\n<strong>输出：</strong>true\n<strong>解释：</strong>10 的二进制表示是：1010.</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('695. 岛屿的最大面积', '<p>给定一个包含了一些 <code>0</code> 和 <code>1</code> 的非空二维数组&nbsp;<code>grid</code> 。</p> \n<p>一个&nbsp;<strong>岛屿</strong>&nbsp;是由一些相邻的&nbsp;<code>1</code>&nbsp;(代表土地) 构成的组合，这里的「相邻」要求两个 <code>1</code> 必须在水平或者竖直方向上相邻。你可以假设&nbsp;<code>grid</code> 的四个边缘都被 <code>0</code>（代表水）包围着。</p> \n<p>找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 <code>0</code> 。)</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre>[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\n [0,1,0,0,1,1,0,0,<strong>1</strong>,0,<strong>1</strong>,0,0],\n [0,1,0,0,1,1,0,0,<strong>1</strong>,<strong>1</strong>,<strong>1</strong>,0,0],\n [0,0,0,0,0,0,0,0,0,0,<strong>1</strong>,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\n</pre> \n<p>对于上面这个给定矩阵应返回&nbsp;<code>6</code>。注意答案不应该是 <code>11</code> ，因为岛屿只能包含水平或垂直的四个方向的 <code>1</code> 。</p> \n<p><strong>示例 2:</strong></p> \n<pre>[[0,0,0,0,0,0,0,0]]</pre> \n<p>对于上面这个给定的矩阵, 返回&nbsp;<code>0</code>。</p> \n<p>&nbsp;</p> \n<p><strong>注意:&nbsp;</strong>给定的矩阵<code>grid</code>&nbsp;的长度和宽度都不超过 50。</p>');
INSERT INTO `leecode` VALUES ('696. 计数二进制子串', '<p>给定一个字符串&nbsp;<code>s</code>，计算具有相同数量 0 和 1 的非空（连续）子字符串的数量，并且这些子字符串中的所有 0 和所有 1 都是连续的。</p> \n<p>重复出现的子串要计算它们出现的次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1 :</strong></p> \n<pre><strong>输入:</strong> \"00110011\"\n<strong>输出:</strong> 6\n<strong>解释:</strong> 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。\n\n请注意，一些重复出现的子串要计算它们出现的次数。\n\n另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。\n</pre> \n<p><strong>示例 2 :</strong></p> \n<pre><strong>输入:</strong> \"10101\"\n<strong>输出:</strong> 4\n<strong>解释:</strong> 有4个子串：“10”，“01”，“10”，“01”，它们具有相同数量的连续1和0。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>s.length</code>&nbsp;在1到50,000之间。</li> \n <li><code>s</code>&nbsp;只包含“0”或“1”字符。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('697. 数组的度', '<p>给定一个非空且只包含非负数的整数数组&nbsp;<code>nums</code>，数组的度的定义是指数组里任一元素出现频数的最大值。</p> \n<p>你的任务是在 <code>nums</code> 中找到与&nbsp;<code>nums</code>&nbsp;拥有相同大小的度的最短连续子数组，返回其长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1, 2, 2, 3, 1]\n<strong>输出：</strong>2\n<strong>解释：</strong>\n输入数组的度是2，因为元素1和2的出现频数最大，均为2.\n连续子数组里面拥有相同度的有如下所示:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\n最短连续子数组[2, 2]的长度为2，所以返回2.\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[1,2,2,3,1,4,2]\n<strong>输出：</strong>6\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>nums.length</code>&nbsp;在1到 50,000 区间范围内。</li> \n <li><code>nums[i]</code>&nbsp;是一个在 0 到 49,999 范围内的整数。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('698. 划分为k个相等的子集', '<p>给定一个整数数组&nbsp;&nbsp;<code>nums</code> 和一个正整数 <code>k</code>，找出是否有可能把这个数组分成 <code>k</code> 个非空子集，其总和都相等。</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong> nums = [4, 3, 2, 3, 5, 2, 1], k = 4\n<strong>输出：</strong> True\n<strong>说明：</strong> 有可能将其分成 4 个子集（5），（1,4），（2,3），（2,3）等于总和。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= len(nums) &lt;= 16</code></li> \n <li><code>0 &lt; nums[i] &lt; 10000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('699. 掉落的方块', '<p>在无限长的数轴（即 x 轴）上，我们根据给定的顺序放置对应的正方形方块。</p> \n<p>第 <code>i</code> 个掉落的方块（<code>positions[i] = (left, side_length)</code>）是正方形，其中&nbsp;<code>left 表示该方块最左边的点位置(positions[i][0])，side_length 表示该方块的边长(positions[i][1])。</code></p> \n<p>每个方块的底部边缘平行于数轴（即 x 轴），并且从一个比目前所有的落地方块更高的高度掉落而下。在上一个方块结束掉落，并保持静止后，才开始掉落新方块。</p> \n<p>方块的底边具有非常大的粘性，并将保持固定在它们所接触的任何长度表面上（无论是数轴还是其他方块）。邻接掉落的边不会过早地粘合在一起，<code>因为只有底边才具有粘性。</code></p> \n<p>&nbsp;</p> \n<p>返回一个堆叠高度列表&nbsp;<code>ans</code> 。每一个堆叠高度&nbsp;<code>ans[i]</code>&nbsp;表示在通过&nbsp;<code>positions[0], positions[1], ..., positions[i]</code>&nbsp;表示的方块掉落结束后，目前所有已经落稳的方块堆叠的最高高度。</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [[1, 2], [2, 3], [6, 1]]\n<strong>输出:</strong> [2, 5, 5]\n<strong>解释:\n\n</strong>第一个方块 <code>positions[0] = [1, 2] </code>掉落：\n<code>_aa\n_aa\n-------\n</code>方块最大高度为 2 。\n\n第二个方块 <code>positions[1] = [2, 3] </code>掉落：\n<code>__aaa\n__aaa\n__aaa\n_aa__\n_aa__\n--------------\n</code>方块最大高度为5。\n大的方块保持在较小的方块的顶部，不论它的重心在哪里，因为方块的底部边缘有非常大的粘性。\n\n第三个方块 <code>positions[1] = [6, 1] </code>掉落：\n<code>__aaa\n__aaa\n__aaa\n_aa\n_aa___a\n-------------- \n</code>方块最大高度为5。\n\n因此，我们返回结果<code>[2, 5, 5]。</code>\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> [[100, 100], [200, 100]]\n<strong>输出:</strong> [100, 100]\n<strong>解释:</strong> 相邻的方块不会过早地卡住，只有它们的底部边缘才能粘在表面上。\n</pre> \n<p>&nbsp;</p> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>1 &lt;= positions.length &lt;= 1000</code>.</li> \n <li><code>1 &lt;= positions[i][0] &lt;= 10^8</code>.</li> \n <li><code>1 &lt;= positions[i][1] &lt;= 10^6</code>.</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('7. 整数反转', '<p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。</p> \n<p>如果反转后整数超过 32 位的有符号整数的范围&nbsp;<code>[−2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>− 1]</code> ，就返回 0。</p> \n<strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>x = 123\n<strong>输出：</strong>321\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>x = -123\n<strong>输出：</strong>-321\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>x = 120\n<strong>输出：</strong>21\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>x = 0\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('70. 爬楼梯', '<p>假设你正在爬楼梯。需要 <em>n</em>&nbsp;阶你才能到达楼顶。</p> \n<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p> \n<p><strong>注意：</strong>给定 <em>n</em> 是一个正整数。</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong> 2\n<strong>输出：</strong> 2\n<strong>解释：</strong> 有两种方法可以爬到楼顶。\n1.  1 阶 + 1 阶\n2.  2 阶</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong> 3\n<strong>输出：</strong> 3\n<strong>解释：</strong> 有三种方法可以爬到楼顶。\n1.  1 阶 + 1 阶 + 1 阶\n2.  1 阶 + 2 阶\n3.  2 阶 + 1 阶\n</pre>');
INSERT INTO `leecode` VALUES ('700. 二叉搜索树中的搜索', '<p>给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。</p> \n<p>例如，</p> \n<pre>给定二叉搜索树:\n\n        4\n       / \\\n      2   7\n     / \\\n    1   3\n\n和值: 2\n</pre> \n<p>你应该返回如下子树:</p> \n<pre>      2     \n     / \\   \n    1   3\n</pre> \n<p>在上述示例中，如果要找的值是 <code>5</code>，但因为没有节点值为 <code>5</code>，我们应该返回 <code>NULL</code>。</p>');
INSERT INTO `leecode` VALUES ('701. 二叉搜索树中的插入操作', '<p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 <strong>保证</strong> ，新值和原始二叉搜索树中的任意节点值都不同。</p> \n<p><strong>注意</strong>，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 <strong>任意有效的结果</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 752px; height: 221px;\" src=\"https://assets.leetcode.com/uploads/2020/10/05/insertbst.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [4,2,7,1,3], val = 5\n<strong>输出：</strong>[4,2,7,1,3,5]\n<strong>解释：</strong>另一个满足题目要求可以通过的树是：\n<img style=\"width: 352px; height: 301px;\" src=\"https://assets.leetcode.com/uploads/2020/10/05/bst.jpg\" alt=\"\">\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = [40,20,60,10,30,50,70], val = 25\n<strong>输出：</strong>[40,20,60,10,30,50,70,null,null,25]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\n<strong>输出：</strong>[4,2,7,1,3,5]\n</pre> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>给定的树上的节点数介于 <code>0</code> 和 <code>10^4</code> 之间</li> \n <li>每个节点都有一个唯一整数值，取值范围从 <code>0</code> 到 <code>10^8</code></li> \n <li><code>-10^8 &lt;= val &lt;= 10^8</code></li> \n <li>新值和原始二叉搜索树中的任意节点值都不同</li> \n</ul>');
INSERT INTO `leecode` VALUES ('703. 数据流中的第 K 大元素', '<p>设计一个找到数据流中第 <code>k</code> 大元素的类（class）。注意是排序后的第 <code>k</code> 大元素，不是第 <code>k</code> 个不同的元素。</p> \n<p>请实现 <code>KthLargest</code>&nbsp;类：</p> \n<ul> \n <li><code>KthLargest(int k, int[] nums)</code> 使用整数 <code>k</code> 和整数流 <code>nums</code> 初始化对象。</li> \n <li><code>int add(int val)</code> 将 <code>val</code> 插入数据流 <code>nums</code> 后，返回当前数据流中第 <code>k</code> 大的元素。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\n<strong>输出：</strong>\n[null, 4, 5, 5, 8, 8]\n\n<strong>解释：</strong>\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8\n</pre> \n<p>&nbsp;</p> \n<strong>提示：</strong> \n<ul> \n <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n <li><code>-10<sup>4</sup> &lt;= val &lt;= 10<sup>4</sup></code></li> \n <li>最多调用 <code>add</code> 方法 <code>10<sup>4</sup></code> 次</li> \n <li>题目数据保证，在查找第 <code>k</code> 大元素时，数组中至少有 <code>k</code> 个元素</li> \n</ul>');
INSERT INTO `leecode` VALUES ('704. 二分查找', '<p>给定一个&nbsp;<code>n</code>&nbsp;个元素有序的（升序）整型数组&nbsp;<code>nums</code> 和一个目标值&nbsp;<code>target</code> &nbsp;，写一个函数搜索&nbsp;<code>nums</code>&nbsp;中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。</p> \n<p><br> <strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 9\n<strong>输出:</strong> 4\n<strong>解释:</strong> 9 出现在 <code>nums</code> 中并且下标为 4\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 2\n<strong>输出:</strong> -1\n<strong>解释:</strong> 2 不存在 <code>nums</code> 中因此返回 -1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>你可以假设 <code>nums</code>&nbsp;中的所有元素是不重复的。</li> \n <li><code>n</code>&nbsp;将在&nbsp;<code>[1, 10000]</code>之间。</li> \n <li><code>nums</code>&nbsp;的每个元素都将在&nbsp;<code>[-9999, 9999]</code>之间。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('705. 设计哈希集合', '<p>不使用任何内建的哈希表库设计一个哈希集合（HashSet）。</p> \n<p>实现 <code>MyHashSet</code> 类：</p> \n<ul> \n <li><code>void add(key)</code> 向哈希集合中插入值 <code>key</code> 。</li> \n <li><code>bool contains(key)</code> 返回哈希集合中是否存在这个值 <code>key</code> 。</li> \n <li><code>void remove(key)</code> 将给定值 <code>key</code> 从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。</li> \n</ul> &nbsp; \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]\n<strong>输出：</strong>\n[null, null, null, true, false, null, true, null, false]\n\n<strong>解释：</strong>\nMyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1);      // set = [1]\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(1); // 返回 True\nmyHashSet.contains(3); // 返回 False ，（未找到）\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(2); // 返回 True\nmyHashSet.remove(2);   // set = [1]\nmyHashSet.contains(2); // 返回 False ，（已移除）</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= key &lt;= 10<sup>6</sup></code></li> \n <li>最多调用 <code>10<sup>4</sup></code> 次 <code>add</code>、<code>remove</code> 和 <code>contains</code> 。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你可以不使用内建的哈希集合库解决此问题吗？</p>');
INSERT INTO `leecode` VALUES ('706. 设计哈希映射', '<p>不使用任何内建的哈希表库设计一个哈希映射（HashMap）。</p> \n<p>实现 <code>MyHashMap</code> 类：</p> \n<ul> \n <li><code>MyHashMap()</code> 用空映射初始化对象</li> \n <li><code>void put(int key, int value)</code> 向 HashMap 插入一个键值对 <code>(key, value)</code> 。如果 <code>key</code> 已经存在于映射中，则更新其对应的值 <code>value</code> 。</li> \n <li><code>int get(int key)</code> 返回特定的 <code>key</code> 所映射的 <code>value</code> ；如果映射中不包含 <code>key</code> 的映射，返回 <code>-1</code> 。</li> \n <li><code>void remove(key)</code> 如果映射中存在 <code>key</code> 的映射，则移除 <code>key</code> 和它所对应的 <code>value</code> 。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入</strong>：\n[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\n<strong>输出</strong>：\n[null, null, null, 1, -1, null, 1, null, -1]\n\n<strong>解释</strong>：\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // myHashMap 现在为 [[1,1]]\nmyHashMap.put(2, 2); // myHashMap 现在为 [[1,1], [2,2]]\nmyHashMap.get(1);    // 返回 1 ，myHashMap 现在为 [[1,1], [2,2]]\nmyHashMap.get(3);    // 返回 -1（未找到），myHashMap 现在为 [[1,1], [2,2]]\nmyHashMap.put(2, 1); // myHashMap 现在为 [[1,1], [2,1]]（更新已有的值）\nmyHashMap.get(2);    // 返回 1 ，myHashMap 现在为 [[1,1], [2,1]]\nmyHashMap.remove(2); // 删除键为 2 的数据，myHashMap 现在为 [[1,1]]\nmyHashMap.get(2);    // 返回 -1（未找到），myHashMap 现在为 [[1,1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= key, value &lt;= 10<sup>6</sup></code></li> \n <li>最多调用 <code>10<sup>4</sup></code> 次 <code>put</code>、<code>get</code> 和 <code>remove</code> 方法</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你能否不使用内置的 HashMap 库解决此问题？</p>');
INSERT INTO `leecode` VALUES ('707. 设计链表', '<p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：<code>val</code>&nbsp;和&nbsp;<code>next</code>。<code>val</code>&nbsp;是当前节点的值，<code>next</code>&nbsp;是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性&nbsp;<code>prev</code>&nbsp;以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。</p> \n<p>在链表类中实现这些功能：</p> \n<ul> \n <li>get(index)：获取链表中第&nbsp;<code>index</code>&nbsp;个节点的值。如果索引无效，则返回<code>-1</code>。</li> \n <li>addAtHead(val)：在链表的第一个元素之前添加一个值为&nbsp;<code>val</code>&nbsp;的节点。插入后，新节点将成为链表的第一个节点。</li> \n <li>addAtTail(val)：将值为&nbsp;<code>val</code> 的节点追加到链表的最后一个元素。</li> \n <li>addAtIndex(index,val)：在链表中的第&nbsp;<code>index</code>&nbsp;个节点之前添加值为&nbsp;<code>val</code>&nbsp; 的节点。如果&nbsp;<code>index</code>&nbsp;等于链表的长度，则该节点将附加到链表的末尾。如果 <code>index</code> 大于链表长度，则不会插入节点。如果<code>index</code>小于0，则在头部插入节点。</li> \n <li>deleteAtIndex(index)：如果索引&nbsp;<code>index</code> 有效，则删除链表中的第&nbsp;<code>index</code> 个节点。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre>MyLinkedList linkedList = new MyLinkedList();\nlinkedList.addAtHead(1);\nlinkedList.addAtTail(3);\nlinkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3\nlinkedList.get(1);            //返回2\nlinkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3\nlinkedList.get(1);            //返回3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>所有<code>val</code>值都在&nbsp;<code>[1, 1000]</code>&nbsp;之内。</li> \n <li>操作次数将在&nbsp;&nbsp;<code>[1, 1000]</code>&nbsp;之内。</li> \n <li>请不要使用内置的 LinkedList 库。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('709. 转换成小写字母', '<p>给你一个字符串 <code>s</code> ，将该字符串中的大写字母转换成相同的小写字母，返回新的字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"Hello\"\n<strong>输出：</strong>\"hello\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"here\"\n<strong>输出：</strong>\"here\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"LOVELY\"\n<strong>输出：</strong>\"lovely\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 100</code></li> \n <li><code>s</code> 由 ASCII 字符集中的可打印字符组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('71. 简化路径', '<p>给你一个字符串 <code>path</code> ，表示指向某一文件或目录的&nbsp;Unix 风格 <strong>绝对路径 </strong>（以 <code>\'/\'</code> 开头），请你将其转化为更加简洁的规范路径。</p> \n<p class=\"MachineTrans-lang-zh-CN\">在 Unix 风格的文件系统中，一个点（<code>.</code>）表示当前目录本身；此外，两个点 （<code>..</code>）&nbsp;表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，<code>\'//\'</code>）都被视为单个斜杠 <code>\'/\'</code> 。 对于此问题，任何其他格式的点（例如，<code>\'...\'</code>）均被视为文件/目录名称。</p> \n<p>请注意，返回的 <strong>规范路径</strong> 必须遵循下述格式：</p> \n<ul> \n <li>始终以斜杠 <code>\'/\'</code> 开头。</li> \n <li>两个目录名之间必须只有一个斜杠 <code>\'/\'</code> 。</li> \n <li>最后一个目录名（如果存在）<strong>不能 </strong>以 <code>\'/\'</code> 结尾。</li> \n <li>此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 <code>\'.\'</code> 或 <code>\'..\'</code>）。</li> \n</ul> \n<p>返回简化后得到的 <strong>规范路径</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>path = \"/home/\"\n<strong>输出：</strong>\"/home\"\n<strong>解释：</strong>注意，最后一个目录名后面没有斜杠。 </pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>path = \"/../\"\n<strong>输出：</strong>\"/\"\n<strong>解释：</strong>从根目录向上一级是不可行的，因为根目录是你可以到达的最高级。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>path = \"/home//foo/\"\n<strong>输出：</strong>\"/home/foo\"\n<strong>解释：</strong>在规范路径中，多个连续斜杠需要用一个斜杠替换。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>path = \"/a/./b/../../c/\"\n<strong>输出：</strong>\"/c\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= path.length &lt;= 3000</code></li> \n <li><code>path</code> 由英文字母，数字，<code>\'.\'</code>，<code>\'/\'</code> 或 <code>\'_\'</code> 组成。</li> \n <li><code>path</code> 是一个有效的 Unix 风格绝对路径。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('710. 黑名单中的随机数', '<p>给定一个包含 <code>[0，n)</code> 中不重复整数的黑名单 <code>blacklist</code> ，写一个函数从 <code>[0, n)</code> 中返回一个<strong>不在</strong> <code>blacklist</code> 中的随机整数。</p> \n<p>对它进行优化使其尽量少调用系统方法 <code>Math.random()</code> 。</p> \n<p><strong>提示:</strong></p> \n<ol> \n <li><code>1 &lt;= n &lt;= 1000000000</code></li> \n <li><code>0 &lt;= blacklist.length &lt; min(100000, N)</code></li> \n <li><code>[0, n)</code>&nbsp;不包含 <code>n</code> ，详细参见&nbsp;<a href=\"https://en.wikipedia.org/wiki/Interval_(mathematics)\">interval notation</a>&nbsp;。</li> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：\n</strong>[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[1,[]],[],[],[]]\n<strong>输出：</strong>[null,0,0,0]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：\n</strong>[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[2,[]],[],[],[]]\n<strong>输出：</strong>[null,1,1,1]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：\n</strong>[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[3,[1]],[],[],[]]\n<strong>输出：</strong>[null,0,0,2]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入： \n</strong>[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[4,[2]],[],[],[]]\n<strong>输出：</strong>[null,1,3,1]\n</pre> \n<p><strong>输入语法说明：</strong></p> \n<p>输入是两个列表：调用成员函数名和调用的参数。<code>Solution</code>的构造函数有两个参数，<code>n</code> 和黑名单&nbsp;<code>blacklist</code>。<code>pick</code>&nbsp;没有参数，输入参数是一个列表，即使参数为空，也会输入一个 <code>[]</code> 空列表。</p>');
INSERT INTO `leecode` VALUES ('712. 两个字符串的最小ASCII删除和', '<p>给定两个字符串<code>s1, s2</code>，找到使两个字符串相等所需删除字符的ASCII值的最小和。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> s1 = \"sea\", s2 = \"eat\"\n<strong>输出:</strong> 231\n<strong>解释:</strong> 在 \"sea\" 中删除 \"s\" 并将 \"s\" 的值(115)加入总和。\n在 \"eat\" 中删除 \"t\" 并将 116 加入总和。\n结束时，两个字符串相等，115 + 116 = 231 就是符合条件的最小和。\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> s1 = \"delete\", s2 = \"leet\"\n<strong>输出:</strong> 403\n<strong>解释:</strong> 在 \"delete\" 中删除 \"dee\" 字符串变成 \"let\"，\n将 100[d]+101[e]+101[e] 加入总和。在 \"leet\" 中删除 \"e\" 将 101[e] 加入总和。\n结束时，两个字符串都等于 \"let\"，结果即为 100+101+101+101 = 403 。\n如果改为将两个字符串转换为 \"lee\" 或 \"eet\"，我们会得到 433 或 417 的结果，比答案更大。\n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>0 &lt; s1.length, s2.length &lt;= 1000</code>。</li> \n <li>所有字符串中的字符ASCII值在<code>[97, 122]</code>之间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('713. 乘积小于K的子数组', '<p>给定一个正整数数组&nbsp;<code>nums</code>和整数 <code>k</code> 。</p> \n<p>请找出该数组内乘积小于&nbsp;<code>k</code>&nbsp;的连续的子数组的个数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums = [10,5,2,6], k = 100\n<strong>输出:</strong> 8\n<strong>解释:</strong> 8个乘积小于100的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。\n需要注意的是 [10,5,2] 并不是乘积小于100的子数组。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> nums = [1,2,3], k = 0\n<strong>输出:</strong> 0</pre> \n<p>&nbsp;</p> \n<p><strong>提示:&nbsp;</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> \n <li><code>0 &lt;= k &lt;= 10<sup>6</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('714. 买卖股票的最佳时机含手续费', '<p>给定一个整数数组&nbsp;<code>prices</code>，其中第&nbsp;<code>i</code>&nbsp;个元素代表了第&nbsp;<code>i</code>&nbsp;天的股票价格 ；整数&nbsp;<code>fee</code> 代表了交易股票的手续费用。</p> \n<p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p> \n<p>返回获得利润的最大值。</p> \n<p><strong>注意：</strong>这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>prices = [1, 3, 2, 8, 4, 9], fee = 2\n<strong>输出：</strong>8\n<strong>解释：</strong>能够达到的最大利润:  \n在此处买入&nbsp;prices[0] = 1\n在此处卖出 prices[3] = 8\n在此处买入 prices[4] = 4\n在此处卖出 prices[5] = 9\n总利润:&nbsp;((8 - 1) - 2) + ((9 - 4) - 2) = 8</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>prices = [1,3,7,5,10,3], fee = 3\n<strong>输出：</strong>6\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= prices.length &lt;= 5 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= prices[i] &lt; 5 * 10<sup>4</sup></code></li> \n <li><code>0 &lt;= fee &lt; 5 * 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('715. Range 模块', '<p>Range 模块是跟踪数字范围的模块。你的任务是以一种有效的方式设计和实现以下接口。</p> \n<ul> \n <li><code>addRange(int left, int right)</code> 添加半开区间&nbsp;<code>[left, right)</code>，跟踪该区间中的每个实数。添加与当前跟踪的数字部分重叠的区间时，应当添加在区间&nbsp;<code>[left, right)</code>&nbsp;中尚未跟踪的任何数字到该区间中。</li> \n <li><code>queryRange(int left, int right)</code>&nbsp;只有在当前正在跟踪区间&nbsp;<code>[left, right)</code>&nbsp;中的每一个实数时，才返回 true。</li> \n <li><code>removeRange(int left, int right)</code>&nbsp;停止跟踪区间&nbsp;<code>[left, right)</code>&nbsp;中当前正在跟踪的每个实数。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>addRange(10, 20)</strong>: null\n<strong>removeRange(14, 16)</strong>: null\n<strong>queryRange(10, 14)</strong>: true （区间 [10, 14) 中的每个数都正在被跟踪）\n<strong>queryRange(13, 15)</strong>: false （未跟踪区间 [13, 15) 中像 14, 14.03, 14.17 这样的数字）\n<strong>queryRange(16, 17)</strong>: true （尽管执行了删除操作，区间 [16, 17) 中的数字 16 仍然会被跟踪）\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>半开区间&nbsp;<code>[left, right)</code>&nbsp;表示所有满足&nbsp;<code>left &lt;= x &lt; right</code>&nbsp;的实数。</li> \n <li>对&nbsp;<code>addRange, queryRange, removeRange</code>&nbsp;的所有调用中&nbsp;<code>0 &lt; left &lt; right &lt; 10^9</code>。</li> \n <li>在单个测试用例中，对&nbsp;<code>addRange</code>&nbsp;的调用总数不超过&nbsp;<code>1000</code>&nbsp;次。</li> \n <li>在单个测试用例中，对&nbsp; <code>queryRange</code> 的调用总数不超过 <code>5000</code> 次。</li> \n <li>在单个测试用例中，对 <code>removeRange</code> 的调用总数不超过&nbsp;<code>1000</code>&nbsp;次。</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('717. 1比特与2比特字符', '<p>有两种特殊字符。第一种字符可以用一比特<code>0</code>来表示。第二种字符可以用两比特(<code>10</code>&nbsp;或&nbsp;<code>11</code>)来表示。</p> \n<p>现给一个由若干比特组成的字符串。问最后一个字符是否必定为一个一比特字符。给定的字符串总是由0结束。</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> \nbits = [1, 0, 0]\n<strong>输出:</strong> True\n<strong>解释:</strong> \n唯一的编码方式是一个两比特字符和一个一比特字符。所以最后一个字符是一比特字符。\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> \nbits = [1, 1, 1, 0]\n<strong>输出:</strong> False\n<strong>解释:</strong> \n唯一的编码方式是两比特字符和两比特字符。所以最后一个字符不是一比特字符。\n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>1 &lt;= len(bits) &lt;= 1000</code>.</li> \n <li><code>bits[i]</code> 总是<code>0</code> 或&nbsp;<code>1</code>.</li> \n</ul>');
INSERT INTO `leecode` VALUES ('718. 最长重复子数组', '<p>给两个整数数组&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;，返回两个数组中公共的、长度最长的子数组的长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\nA: [1,2,3,2,1]\nB: [3,2,1,4,7]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n长度最长的公共子数组是 [3, 2, 1] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= len(A), len(B) &lt;= 1000</code></li> \n <li><code>0 &lt;= A[i], B[i] &lt; 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('719. 找出第 k 小的距离对', '<p>给定一个整数数组，返回所有数对之间的第 k 个最小<strong>距离</strong>。一对 (A, B) 的距离被定义为 A 和 B 之间的绝对差值。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入：</strong>\nnums = [1,3,1]\nk = 1\n<strong>输出：0</strong> \n<strong>解释：</strong>\n所有数对如下：\n(1,3) -&gt; 2\n(1,1) -&gt; 0\n(3,1) -&gt; 2\n因此第 1 个最小距离的数对是 (1,1)，它们之间的距离为 0。\n</pre> \n<p><strong>提示:</strong></p> \n<ol> \n <li><code>2 &lt;= len(nums) &lt;= 10000</code>.</li> \n <li><code>0 &lt;= nums[i] &lt; 1000000</code>.</li> \n <li><code>1 &lt;= k &lt;= len(nums) * (len(nums) - 1) / 2</code>.</li> \n</ol>');
INSERT INTO `leecode` VALUES ('72. 编辑距离', '<p>给你两个单词&nbsp;<code>word1</code> 和&nbsp;<code>word2</code>，请你计算出将&nbsp;<code>word1</code>&nbsp;转换成&nbsp;<code>word2</code><em> </em>所使用的最少操作数&nbsp;。</p> \n<p>你可以对一个单词进行如下三种操作：</p> \n<ul> \n <li>插入一个字符</li> \n <li>删除一个字符</li> \n <li>替换一个字符</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>word1 = \"horse\", word2 = \"ros\"\n<strong>输出：</strong>3\n<strong>解释：</strong>\nhorse -&gt; rorse (将 \'h\' 替换为 \'r\')\nrorse -&gt; rose (删除 \'r\')\nrose -&gt; ros (删除 \'e\')\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>word1 = \"intention\", word2 = \"execution\"\n<strong>输出：</strong>5\n<strong>解释：</strong>\nintention -&gt; inention (删除 \'t\')\ninention -&gt; enention (将 \'i\' 替换为 \'e\')\nenention -&gt; exention (将 \'n\' 替换为 \'x\')\nexention -&gt; exection (将 \'n\' 替换为 \'c\')\nexection -&gt; execution (插入 \'u\')\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li> \n <li><code>word1</code> 和 <code>word2</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('720. 词典中最长的单词', '<p>给出一个字符串数组<code>words</code>组成的一本英语词典。从中找出最长的一个单词，该单词是由<code>words</code>词典中其他单词逐步添加一个字母组成。若其中有多个可行的答案，则返回答案中字典序最小的单词。</p> \n<p>若无答案，则返回空字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\nwords = [\"w\",\"wo\",\"wor\",\"worl\", \"world\"]\n<strong>输出：</strong>\"world\"\n<strong>解释：</strong> \n单词\"world\"可由\"w\", \"wo\", \"wor\", 和 \"worl\"添加一个字母组成。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\nwords = [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]\n<strong>输出：</strong>\"apple\"\n<strong>解释：</strong>\n\"apply\"和\"apple\"都能由词典中的单词组成。但是\"apple\"的字典序小于\"apply\"。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>所有输入的字符串都只包含小写字母。</li> \n <li><code>words</code>数组长度范围为<code>[1,1000]</code>。</li> \n <li><code>words[i]</code>的长度范围为<code>[1,30]</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('721. 账户合并', '<p>给定一个列表 <code>accounts</code>，每个元素 <code>accounts[i]</code>&nbsp;是一个字符串列表，其中第一个元素 <code>accounts[i][0]</code>&nbsp;是&nbsp;<em>名称 (name)</em>，其余元素是 <em><strong>emails</strong> </em>表示该账户的邮箱地址。</p> \n<p>现在，我们想合并这些账户。如果两个账户都有一些共同的邮箱地址，则两个账户必定属于同一个人。请注意，即使两个账户具有相同的名称，它们也可能属于不同的人，因为人们可能具有相同的名称。一个人最初可以拥有任意数量的账户，但其所有账户都具有相同的名称。</p> \n<p>合并账户后，按以下格式返回账户：每个账户的第一个元素是名称，其余元素是 <strong>按字符 ASCII 顺序排列</strong> 的邮箱地址。账户本身可以以 <strong>任意顺序</strong> 返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><b>输入：</b>accounts = [[\"John\", \"johnsmith@mail.com\", \"john00@mail.com\"], [\"John\", \"johnnybravo@mail.com\"], [\"John\", \"johnsmith@mail.com\", \"john_newyork@mail.com\"], [\"Mary\", \"mary@mail.com\"]]\n<b>输出：</b>[[\"John\", \'john00@mail.com\', \'john_newyork@mail.com\', \'johnsmith@mail.com\'],  [\"John\", \"johnnybravo@mail.com\"], [\"Mary\", \"mary@mail.com\"]]\n<b>解释：</b>\n第一个和第三个 John 是同一个人，因为他们有共同的邮箱地址 \"johnsmith@mail.com\"。 \n第二个 John 和 Mary 是不同的人，因为他们的邮箱地址没有被其他帐户使用。\n可以以任何顺序返回这些列表，例如答案 [[\'Mary\'，\'mary@mail.com\']，[\'John\'，\'johnnybravo@mail.com\']，\n[\'John\'，\'john00@mail.com\'，\'john_newyork@mail.com\'，\'johnsmith@mail.com\']] 也是正确的。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]\n<strong>输出：</strong>[[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= accounts.length &lt;= 1000</code></li> \n <li><code>2 &lt;= accounts[i].length &lt;= 10</code></li> \n <li><code>1 &lt;= accounts[i][j] &lt;= 30</code></li> \n <li><code>accounts[i][0]</code> 由英文字母组成</li> \n <li><code>accounts[i][j] (for j &gt; 0)</code> 是有效的邮箱地址</li> \n</ul>');
INSERT INTO `leecode` VALUES ('722. 删除注释', '<p>给一个 C++ 程序，删除程序中的注释。这个程序<code>source</code>是一个数组，其中<code>source[i]</code>表示第<code>i</code>行源码。&nbsp;这表示每行源码由<code>\\n</code>分隔。</p> \n<p>在 C++ 中有两种注释风格，行内注释和块注释。</p> \n<p>字符串<code>//</code> 表示行注释，表示<code>//</code>和其右侧的其余字符应该被忽略。</p> \n<p>字符串<code>/*</code> 表示一个块注释，它表示直到<code>*/</code>的下一个（非重叠）出现的所有字符都应该被忽略。（阅读顺序为从左到右）非重叠是指，字符串<code>/*/</code>并没有结束块注释，因为注释的结尾与开头相重叠。</p> \n<p>第一个有效注释优先于其他注释：如果字符串<code>//</code>出现在块注释中会被忽略。 同样，如果字符串<code>/*</code>出现在行或块注释中也会被忽略。</p> \n<p>如果一行在删除注释之后变为空字符串，那么<strong>不要</strong>输出该行。即，答案列表中的每个字符串都是非空的。</p> \n<p>样例中<strong>没有</strong>控制字符，单引号或双引号字符。比如，<code>source = \"string s = \"/* Not a comment. */\";\"</code> 不会出现在测试样例里。（此外，没有其他内容（如定义或宏）会干扰注释。）</p> \n<p>我们保证每一个块注释最终都会被闭合， 所以在行或块注释之外的<code>/*</code>总是开始新的注释。</p> \n<p>最后，隐式换行符<strong>可以</strong>通过块注释删除。 有关详细信息，请参阅下面的示例。</p> \n<p>从源代码中删除注释后，需要以相同的格式返回源代码。</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> \nsource = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\n\n示例代码可以编排成这样:\n/*Test program */\nint main()\n{ \n  // variable declaration \nint a, b, c;\n/* This is a test\n   multiline  \n   comment for \n   testing */\na = b + c;\n}\n\n<strong>输出:</strong> [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\n\n编排后:\nint main()\n{ \n  \nint a, b, c;\na = b + c;\n}\n\n<strong>解释:</strong> \n第 1 行和第 6-9 行的字符串 /* 表示块注释。第 4 行的字符串 // 表示行注释。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> \nsource = [\"a/*comment\", \"line\", \"more_comment*/b\"]\n<strong>输出:</strong> [\"ab\"]\n<strong>解释:</strong> 原始的 source 字符串是 \"a/*comment<strong>\\n</strong>line<strong>\\n</strong>more_comment*/b\", 其中我们用粗体显示了换行符。删除注释后，隐含的换行符被删除，留下字符串 \"ab\" 用换行符分隔成数组时就是 [\"ab\"].\n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>source</code>的长度范围为<code>[1, 100]</code>.</li> \n <li><code>source[i]</code>的长度范围为<code>[0, 80]</code>.</li> \n <li>每个块注释都会被闭合。</li> \n <li>给定的源码中不会有单引号、双引号或其他控制字符。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('724. 寻找数组的中心下标', '<p>给你一个整数数组&nbsp;<code>nums</code> ，请计算数组的 <strong>中心下标 </strong>。</p> \n<p>数组<strong> 中心下标</strong><strong> </strong>是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p> \n<p>如果中心下标位于数组最左端，那么左侧数之和视为 <code>0</code> ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p> \n<p>如果数组有多个中心下标，应该返回 <strong>最靠近左边</strong> 的那一个。如果数组不存在中心下标，返回 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1, 7, 3, 6, 5, 6]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n中心下标是 3 。\n左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，\n右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1, 2, 3]\n<strong>输出：</strong>-1\n<strong>解释：</strong>\n数组中不存在满足此条件的中心下标。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [2, 1, -1]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n中心下标是 0 。\n左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），\n右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('725. 分隔链表', '<p>给定一个头结点为 <code>root</code> 的链表, 编写一个函数以将链表分隔为 <code>k</code> 个连续的部分。</p> \n<p>每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过 1，也就是说可能有些部分为 null。</p> \n<p>这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。</p> \n<p>返回一个符合上述规则的链表的列表。</p> \n<p>举例： 1-&gt;2-&gt;3-&gt;4, k = 5 // 5 结果 [ [1], [2], [3], [4], null ]</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> \nroot = [1, 2, 3], k = 5\n<strong>输出:</strong> [[1],[2],[3],[],[]]\n<strong>解释:</strong>\n输入输出各部分都应该是链表，而不是数组。\n例如, 输入的结点 root 的 val= 1, root.next.val = 2, \\root.next.next.val = 3, 且 root.next.next.next = null。\n第一个输出 output[0] 是 output[0].val = 1, output[0].next = null。\n最后一个元素 output[4] 为 null, 它代表了最后一个部分为空链表。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> \nroot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\n<strong>输出:</strong> [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\n<strong>解释:</strong>\n输入被分成了几个连续的部分，并且每部分的长度相差不超过1.前面部分的长度大于等于后面部分的长度。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>root</code> 的长度范围：&nbsp;<code>[0, 1000]</code>.</li> \n <li>输入的每个节点的大小范围：<code>[0, 999]</code>.</li> \n <li><code>k</code>&nbsp;的取值范围：&nbsp;<code>[1, 50]</code>.</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('726. 原子的数量', '<p>给你一个字符串化学式 <code>formula</code> ，返回 <strong>每种原子的数量</strong> 。</p> \n<p>原子总是以一个大写字母开始，接着跟随 0 个或任意个小写字母，表示原子的名字。</p> \n<p>如果数量大于 1，原子后会跟着数字表示原子的数量。如果数量等于 1 则不会跟数字。</p> \n<ul> \n <li>例如，<code>\"H2O\"</code> 和 <code>\"H2O2\"</code> 是可行的，但 <code>\"H1O2\"</code> 这个表达是不可行的。</li> \n</ul> \n<p>两个化学式连在一起可以构成新的化学式。</p> \n<ul> \n <li>例如 <code>\"H2O2He3Mg4\"</code> 也是化学式。</li> \n</ul> \n<p>由括号括起的化学式并佐以数字（可选择性添加）也是化学式。</p> \n<ul> \n <li>例如 <code>\"(H2O2)\"</code> 和 <code>\"(H2O2)3\"</code> 是化学式。</li> \n</ul> \n<p>返回所有原子的数量，格式为：第一个（按字典序）原子的名字，跟着它的数量（如果数量大于 1），然后是第二个原子的名字（按字典序），跟着它的数量（如果数量大于 1），以此类推。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>formula = \"H2O\"\n<strong>输出：</strong>\"H2O\"\n<strong>解释：</strong>原子的数量是 {\'H\': 2, \'O\': 1}。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>formula = \"Mg(OH)2\"\n<strong>输出：</strong>\"H2MgO2\"\n<strong>解释：</strong>原子的数量是 {\'H\': 2, \'Mg\': 1, \'O\': 2}。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>formula = \"K4(ON(SO3)2)2\"\n<strong>输出：</strong>\"K4N2O14S4\"\n<strong>解释：</strong>原子的数量是 {\'K\': 4, \'N\': 2, \'O\': 14, \'S\': 4}。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>formula = \"Be32\"\n<strong>输出：</strong>\"Be32\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= formula.length&nbsp;&lt;= 1000</code></li> \n <li><code>formula</code> 由英文字母、数字、<code>\'(\'</code> 和 <code>\')\'</code> 组成</li> \n <li><code>formula</code> 总是有效的化学式</li> \n <li>输出的所有值总是在 32-bit 整数范围内</li> \n</ul>');
INSERT INTO `leecode` VALUES ('728. 自除数', '<p><em>自除数&nbsp;</em>是指可以被它包含的每一位数除尽的数。</p> \n<p>例如，128 是一个自除数，因为&nbsp;<code>128 % 1 == 0</code>，<code>128 % 2 == 0</code>，<code>128 % 8 == 0</code>。</p> \n<p>还有，自除数不允许包含 0 。</p> \n<p>给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong> \n上边界left = 1, 下边界right = 22\n<strong>输出：</strong> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n</pre> \n<p><strong>注意：</strong></p> \n<ul> \n <li>每个输入参数的边界满足&nbsp;<code>1 &lt;= left &lt;= right &lt;= 10000</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('729. 我的日程安排表 I', '<p>实现一个 <code>MyCalendar</code> 类来存放你的日程安排。如果要添加的时间内没有其他安排，则可以存储这个新的日程安排。</p> \n<p><code>MyCalendar</code> 有一个 <code>book(int start, int end)</code>方法。它意味着在 start 到 end 时间内增加一个日程安排，注意，这里的时间是半开区间，即 <code>[start, end)</code>, 实数&nbsp;<code>x</code> 的范围为， &nbsp;<code>start &lt;= x &lt; end</code>。</p> \n<p>当两个日程安排有一些时间上的交叉时（例如两个日程安排都在同一时间内），就会产生重复预订。</p> \n<p>每次调用 <code>MyCalendar.book</code>方法时，如果可以将日程安排成功添加到日历中而不会导致重复预订，返回 <code>true</code>。否则，返回 <code>false</code>&nbsp;并且不要将该日程安排添加到日历中。</p> \n<p>请按照以下步骤调用 <code>MyCalendar</code> 类: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p> \n<p><strong>示例 1:</strong></p> \n<pre>MyCalendar();\nMyCalendar.book(10, 20); // returns true\nMyCalendar.book(15, 25); // returns false\nMyCalendar.book(20, 30); // returns true\n<strong>解释:</strong> \n第一个日程安排可以添加到日历中.  第二个日程安排不能添加到日历中，因为时间 15 已经被第一个日程安排预定了。\n第三个日程安排可以添加到日历中，因为第一个日程安排并不包含时间 20 。\n</pre> \n<p><strong>说明:</strong></p> \n<ul> \n <li>每个测试用例，调用&nbsp;<code>MyCalendar.book</code>&nbsp;函数最多不超过&nbsp;<code>1000</code>次。</li> \n <li>调用函数&nbsp;<code>MyCalendar.book(start, end)</code>时，&nbsp;<code>start</code> 和&nbsp;<code>end</code> 的取值范围为&nbsp;<code>[0, 10^9]</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('73. 矩阵置零', '<p>给定一个&nbsp;<code><em>m</em> x <em>n</em></code> 的矩阵，如果一个元素为 <strong>0 </strong>，则将其所在行和列的所有元素都设为 <strong>0</strong> 。请使用 <strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a></strong> 算法<strong>。</strong></p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>一个直观的解决方案是使用 &nbsp;<code>O(<em>m</em><em>n</em>)</code>&nbsp;的额外空间，但这并不是一个好的解决方案。</li> \n <li>一个简单的改进方案是使用 <code>O(<em>m</em>&nbsp;+&nbsp;<em>n</em>)</code> 的额外空间，但这仍然不是最好的解决方案。</li> \n <li>你能想出一个仅使用常量空间的解决方案吗？</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 450px; height: 169px;\" src=\"https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[1,1,1],[1,0,1],[1,1,1]]\n<strong>输出：</strong>[[1,0,1],[0,0,0],[1,0,1]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 450px; height: 137px;\" src=\"https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n<strong>输出：</strong>[[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == matrix.length</code></li> \n <li><code>n == matrix[0].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 200</code></li> \n <li><code>-2<sup>31</sup> &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('730. 统计不同回文子序列', '<p>给定一个字符串 S，找出 S 中不同的非空回文子序列个数，并<strong>返回该数字与 <code>10^9 + 7 </code>的模。</strong></p> \n<p>通过从 S 中删除 0 个或多个字符来获得子序列。</p> \n<p>如果一个字符序列与它反转后的字符序列一致，那么它是回文字符序列。</p> \n<p>如果对于某个&nbsp;&nbsp;<code>i</code>，<code>A_i != B_i</code>，那么&nbsp;<code>A_1, A_2, ...</code> 和&nbsp;<code>B_1, B_2, ...</code> 这两个字符序列是不同的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\nS = \'bccb\'\n<strong>输出：</strong>6\n<strong>解释：</strong>\n6 个不同的非空回文子字符序列分别为：\'b\', \'c\', \'bb\', \'cc\', \'bcb\', \'bccb\'。\n注意：\'bcb\' 虽然出现两次但仅计数一次。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\nS = \'abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\'\n<strong>输出：</strong>104860361\n<strong>解释：</strong>\n共有 3104860382 个不同的非空回文子序列，对 10^9 + 7 取模为 104860361。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>字符串&nbsp;<code>S</code>&nbsp;的长度将在<code>[1, 1000]</code>范围内。</li> \n <li>每个字符&nbsp;<code>S[i]</code>&nbsp;将会是集合&nbsp;<code>{\'a\', \'b\', \'c\', \'d\'}</code>&nbsp;中的某一个。</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('731. 我的日程安排表 II', '<p>实现一个 <code>MyCalendar</code> 类来存放你的日程安排。如果要添加的时间内不会导致三重预订时，则可以存储这个新的日程安排。</p> \n<p><code>MyCalendar</code> 有一个 <code>book(int start, int end)</code>方法。它意味着在 <code>start</code> 到 <code>end</code> 时间内增加一个日程安排，注意，这里的时间是半开区间，即 <code>[start, end)</code>, 实数&nbsp;<code>x</code> 的范围为， &nbsp;<code>start &lt;= x &lt; end</code>。</p> \n<p>当三个日程安排有一些时间上的交叉时（例如三个日程安排都在同一时间内），就会产生三重预订。</p> \n<p>每次调用 <code>MyCalendar.book</code>方法时，如果可以将日程安排成功添加到日历中而不会导致三重预订，返回 <code>true</code>。否则，返回 <code>false</code> 并且不要将该日程安排添加到日历中。</p> \n<p>请按照以下步骤调用<code>MyCalendar</code> 类: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre>MyCalendar();\nMyCalendar.book(10, 20); // returns true\nMyCalendar.book(50, 60); // returns true\nMyCalendar.book(10, 40); // returns true\nMyCalendar.book(5, 15); // returns false\nMyCalendar.book(5, 10); // returns true\nMyCalendar.book(25, 55); // returns true\n<strong>解释：</strong> \n前两个日程安排可以添加至日历中。 第三个日程安排会导致双重预订，但可以添加至日历中。\n第四个日程安排活动（5,15）不能添加至日历中，因为它会导致三重预订。\n第五个日程安排（5,10）可以添加至日历中，因为它未使用已经双重预订的时间10。\n第六个日程安排（25,55）可以添加至日历中，因为时间 [25,40] 将和第三个日程安排双重预订；\n时间 [40,50] 将单独预订，时间 [50,55）将和第二个日程安排双重预订。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>每个测试用例，调用&nbsp;<code>MyCalendar.book</code>&nbsp;函数最多不超过&nbsp;<code>1000</code>次。</li> \n <li>调用函数&nbsp;<code>MyCalendar.book(start, end)</code>时，&nbsp;<code>start</code> 和&nbsp;<code>end</code> 的取值范围为&nbsp;<code>[0, 10^9]</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('732. 我的日程安排表 III', '<p>当 <code>k</code> 个日程安排有一些时间上的交叉时（例如 <code>k</code> 个日程安排都在同一时间内），就会产生 <code>k</code> 次预订。</p> \n<p>给你一些日程安排 <code>[start, end)</code> ，请你在每个日程安排添加后，返回一个整数 <code>k</code> ，表示所有先前日程安排会产生的最大 <code>k</code> 次预订。</p> \n<p>实现一个 <code>MyCalendarThree</code> 类来存放你的日程安排，你可以一直添加新的日程安排。</p> \n<ul> \n <li><code>MyCalendarThree()</code> 初始化对象。</li> \n <li><code>int book(int start, int end)</code> 返回一个整数 <code>k</code> ，表示日历中存在的 <code>k</code> 次预订的最大值。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\n<strong>输出：</strong>\n[null, 1, 1, 2, 3, 3, 3]\n\n<strong>解释：</strong>\nMyCalendarThree myCalendarThree = new MyCalendarThree();\nmyCalendarThree.book(10, 20); // 返回 1 ，第一个日程安排可以预订并且不存在相交，所以最大 k 次预订是 1 次预订。\nmyCalendarThree.book(50, 60); // 返回 1 ，第二个日程安排可以预订并且不存在相交，所以最大 k 次预订是 1 次预订。\nmyCalendarThree.book(10, 40); // 返回 2 ，第三个日程安排 [10, 40) 与第一个日程安排相交，所以最大 k 次预订是 2 次预订。\nmyCalendarThree.book(5, 15); // 返回 3 ，剩下的日程安排的最大 k 次预订是 3 次预订。\nmyCalendarThree.book(5, 10); // 返回 3\nmyCalendarThree.book(25, 55); // 返回 3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= start &lt; end &lt;= 10<sup>9</sup></code></li> \n <li>每个测试用例，调用 <code>book</code>&nbsp;函数最多不超过&nbsp;<code>400</code>次</li> \n</ul>');
INSERT INTO `leecode` VALUES ('733. 图像渲染', '<p>有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。</p> \n<p>给你一个坐标&nbsp;<code>(sr, sc)</code>&nbsp;表示图像渲染开始的像素值（行 ，列）和一个新的颜色值&nbsp;<code>newColor</code>，让你重新上色这幅图像。</p> \n<p>为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点，……，重复该过程。将所有有记录的像素点的颜色值改为新的颜色值。</p> \n<p>最后返回经过上色渲染后的图像。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> \nimage = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\n<strong>输出:</strong> [[2,2,2],[2,2,0],[2,0,1]]\n<strong>解析:</strong> \n在图像的正中间，(坐标(sr,sc)=(1,1)),\n在路径上所有符合条件的像素点的颜色都被更改成2。\n注意，右下角的像素没有更改为2，\n因为它不是在上下左右四个方向上与初始点相连的像素点。\n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>image</code> 和&nbsp;<code>image[0]</code>&nbsp;的长度在范围&nbsp;<code>[1, 50]</code> 内。</li> \n <li>给出的初始点将满足&nbsp;<code>0 &lt;= sr &lt; image.length</code> 和&nbsp;<code>0 &lt;= sc &lt; image[0].length</code>。</li> \n <li><code>image[i][j]</code> 和&nbsp;<code>newColor</code>&nbsp;表示的颜色值在范围&nbsp;<code>[0, 65535]</code>内。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('735. 行星碰撞', '<p>给定一个整数数组 <code>asteroids</code>，表示在同一行的行星。</p> \n<p>对于数组中的每一个元素，其绝对值表示行星的大小，正负表示行星的移动方向（正表示向右移动，负表示向左移动）。每一颗行星以相同的速度移动。</p> \n<p>找出碰撞后剩下的所有行星。碰撞规则：两个行星相互碰撞，较小的行星会爆炸。如果两颗行星大小相同，则两颗行星都会爆炸。两颗移动方向相同的行星，永远不会发生碰撞。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>asteroids = [5,10,-5]\n<strong>输出：</strong>[5,10]\n<b>解释：</b>10 和 -5 碰撞后只剩下 10 。 5 和 10 永远不会发生碰撞。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>asteroids = [8,-8]\n<strong>输出：</strong>[]\n<b>解释：</b>8 和 -8 碰撞后，两者都发生爆炸。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>asteroids = [10,2,-5]\n<strong>输出：</strong>[10]\n<b>解释：</b>2 和 -5 发生碰撞后剩下 -5 。10 和 -5 发生碰撞后剩下 10 。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>asteroids = [-2,-1,1,2]\n<strong>输出：</strong>[-2,-1,1,2]\n<b>解释</b><strong>：</strong>-2 和 -1 向左移动，而 1 和 2 向右移动。 由于移动方向相同的行星不会发生碰撞，所以最终没有行星发生碰撞。 </pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= asteroids.length&nbsp;&lt;= 10<sup>4</sup></code></li> \n <li><code>-1000 &lt;= asteroids[i] &lt;= 1000</code></li> \n <li><code>asteroids[i] != 0</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('736. Lisp 语法解析', '<p>给定一个类似 Lisp 语句的表达式 <code>expression</code>，求出其计算结果。</p> \n<p>表达式语法如下所示:</p> \n<ul> \n <li>表达式可以为整数，let 语法，add 语法，mult 语法，或赋值的变量。表达式的结果总是一个整数。</li> \n <li>(整数可以是正整数、负整数、0)</li> \n <li><strong>let</strong> 语法表示为&nbsp;<code>(let v1 e1 v2 e2 ... vn en expr)</code>,&nbsp;其中&nbsp;<code>let</code>语法总是以字符串&nbsp;<code>\"let\"</code>来表示，接下来会跟随一个或多个交替变量或表达式，也就是说，第一个变量&nbsp;<code>v1</code>被分配为表达式&nbsp;<code>e1</code>&nbsp;的值，第二个变量&nbsp;<code>v2</code>&nbsp;被分配为表达式&nbsp;<code>e2</code>&nbsp;的值，<strong>以此类推</strong>；最终 let 语法的值为&nbsp;<code>expr</code>表达式的值。</li> \n <li><strong>add </strong>语法表示为&nbsp;<code>(add e1 e2)</code>，其中&nbsp;<code>add</code>&nbsp;语法总是以字符串&nbsp;<code>\"add\"</code>来表示，该语法总是有两个表达式<code>e1</code>、<code>e2</code>, 该语法的最终结果是&nbsp;<code>e1</code> 表达式的值与&nbsp;<code>e2</code>&nbsp;表达式的值之<strong>和</strong>。</li> \n <li><strong>mult</strong> 语法表示为&nbsp;<code>(mult e1 e2)</code>&nbsp;，其中&nbsp;<code>mult</code>&nbsp;语法总是以字符串<code>\"mult\"</code>表示， 该语法总是有两个表达式 <code>e1</code>、<code>e2</code>，该语法的最终结果是&nbsp;<code>e1</code> 表达式的值与&nbsp;<code>e2</code>&nbsp;表达式的值之<strong>积</strong>。</li> \n <li>在该题目中，变量的命名以小写字符开始，之后跟随0个或多个小写字符或数字。为了方便，\"add\"，\"let\"，\"mult\"会被定义为\"关键字\"，不会在表达式的变量命名中出现。</li> \n <li>最后，要说一下作用域的概念。计算变量名所对应的表达式时，在计算上下文中，首先检查最内层作用域（按括号计），然后按顺序依次检查外部作用域。我们将保证每一个测试的表达式都是合法的。有关作用域的更多详细信息，请参阅示例。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入:</strong> (add 1 2)\n<strong>输出:</strong> 3\n\n<strong>输入:</strong> (mult 3 (add 2 3))\n<strong>输出:</strong> 15\n\n<strong>输入:</strong> (let x 2 (mult x 5))\n<strong>输出:</strong> 10\n\n<strong>输入:</strong> (let x 2 (mult x (let x 3 y 4 (add x y))))\n<strong>输出:</strong> 14\n<strong>解释:</strong> \n表达式 (add x y), 在获取 x 值时, 我们应当由最内层依次向外计算, 首先遇到了 x=3, 所以此处的 x 值是 3.\n\n\n<strong>输入:</strong> (let x 3 x 2 x)\n<strong>输出:</strong> 2\n<strong>解释:</strong> let 语句中的赋值运算按顺序处理即可\n\n<strong>输入:</strong> (let x 1 y 2 x (add x y) (add x y))\n<strong>输出:</strong> 5\n<strong>解释:</strong> \n第一个 (add x y) 计算结果是 3，并且将此值赋给了 x 。\n第二个 (add x y) 计算结果就是 3+2 = 5 。\n\n<strong>输入:</strong> (let x 2 (add (let x 3 (let x 4 x)) x))\n<strong>输出:</strong> 6\n<strong>解释:</strong> \n(let x 4 x) 中的 x 的作用域仅在()之内。所以最终做加法操作时，x 的值是 2 。\n\n<strong>输入:</strong> (let a1 3 b2 (add a1 1) b2) \n<strong>输出: </strong>4\n<strong>解释:</strong> \n变量命名时可以在第一个小写字母后跟随数字.\n</pre> \n<p>&nbsp;</p> \n<p><strong>注意:</strong></p> \n<ul> \n <li>我们给定的&nbsp;<code>expression</code>&nbsp;表达式都是格式化后的：表达式前后没有多余的空格，表达式的不同部分(关键字、变量、表达式)之间仅使用一个空格分割，并且在相邻括号之间也没有空格。我们给定的表达式均为合法的且最终结果为整数。</li> \n <li>我们给定的表达式长度最多为 2000&nbsp;(表达式也不会为空，因为那不是一个合法的表达式)。</li> \n <li>最终的结果和中间的计算结果都将是一个 32 位整数。</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('738. 单调递增的数字', '<p>给定一个非负整数&nbsp;<code>N</code>，找出小于或等于&nbsp;<code>N</code>&nbsp;的最大的整数，同时这个整数需要满足其各个位数上的数字是单调递增。</p> \n<p>（当且仅当每个相邻位数上的数字&nbsp;<code>x</code>&nbsp;和&nbsp;<code>y</code>&nbsp;满足&nbsp;<code>x &lt;= y</code>&nbsp;时，我们称这个整数是单调递增的。）</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> N = 10\n<strong>输出:</strong> 9\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> N = 1234\n<strong>输出:</strong> 1234\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> N = 332\n<strong>输出:</strong> 299\n</pre> \n<p><strong>说明:</strong> <code>N</code>&nbsp;是在&nbsp;<code>[0, 10^9]</code>&nbsp;范围内的一个整数。</p>');
INSERT INTO `leecode` VALUES ('739. 每日温度', '<p>请根据每日 <code>气温</code> 列表 <code>temperatures</code>&nbsp;，<span style=\"font-size:10.5pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:10.5000pt\"><span style=\"font-family:宋体\"><font face=\"宋体\">请计算在每一天需要等几天才会有更高的温度</font></span></span></span></span>。如果气温在这之后都不会升高，请在该位置用&nbsp;<code>0</code> 来代替。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> <code>temperatures</code> = [73,74,75,71,69,72,76,73]\n<strong>输出:</strong>&nbsp;[1,1,4,2,1,1,0,0]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> temperatures = [30,40,50,60]\n<strong>输出:</strong>&nbsp;[1,1,1,0]\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> temperatures = [30,60,90]\n<strong>输出: </strong>[1,1,0]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;temperatures.length &lt;= 10<sup>5</sup></code></li> \n <li><code>30 &lt;=&nbsp;temperatures[i]&nbsp;&lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('74. 搜索二维矩阵', '<p>编写一个高效的算法来判断&nbsp;<code>m x n</code>&nbsp;矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p> \n<ul> \n <li>每行中的整数从左到右按升序排列。</li> \n <li>每行的第一个整数大于前一行的最后一个整数。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 322px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/10/05/mat.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 322px; height: 242px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/mat2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 100</code></li> \n <li><code>-10<sup>4</sup> &lt;= matrix[i][j], target &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('740. 删除并获得点数', '<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;，你可以对它进行一些操作。</p> \n<p>每次操作中，选择任意一个&nbsp;<code>nums[i]</code>&nbsp;，删除它并获得&nbsp;<code>nums[i]</code>&nbsp;的点数。之后，你必须删除 <strong>所有 </strong>等于&nbsp;<code>nums[i] - 1</code> 和 <code>nums[i] + 1</code>&nbsp;的元素。</p> \n<p>开始你拥有 <code>0</code> 个点数。返回你能通过这些操作获得的最大点数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [3,4,2]\n<strong>输出：</strong>6\n<strong>解释：</strong>\n删除 4 获得 4 个点数，因此 3 也被删除。\n之后，删除 2 获得 2 个点数。总共获得 6 个点数。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>nums = [2,2,3,3,3,4]\n<strong>输出：</strong>9\n<strong>解释：</strong>\n删除 3 获得 3 个点数，接着要删除两个 2 和 4 。\n之后，再次删除 3 获得 3 个点数，再次删除 3 获得 3 个点数。\n总共获得 9 个点数。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('741. 摘樱桃', '<p>一个N x N的网格<code>(grid)</code>&nbsp;代表了一块樱桃地，每个格子由以下三种数字的一种来表示：</p> \n<ul> \n <li>0 表示这个格子是空的，所以你可以穿过它。</li> \n <li>1 表示这个格子里装着一个樱桃，你可以摘到樱桃然后穿过它。</li> \n <li>-1 表示这个格子里有荆棘，挡着你的路。</li> \n</ul> \n<p>你的任务是在遵守下列规则的情况下，尽可能的摘到最多樱桃：</p> \n<ul> \n <li>从位置&nbsp;(0, 0) 出发，最后到达 (N-1, N-1) ，只能向下或向右走，并且只能穿越有效的格子（即只可以穿过值为0或者1的格子）；</li> \n <li>当到达 (N-1, N-1) 后，你要继续走，直到返回到 (0, 0) ，只能向上或向左走，并且只能穿越有效的格子；</li> \n <li>当你经过一个格子且这个格子包含一个樱桃时，你将摘到樱桃并且这个格子会变成空的（值变为0）；</li> \n <li>如果在 (0, 0) 和 (N-1, N-1) 之间不存在一条可经过的路径，则没有任何一个樱桃能被摘到。</li> \n</ul> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> grid =\n[[0, 1, -1],\n [1, 0, -1],\n [1, 1,  1]]\n<strong>输出:</strong> 5\n<strong>解释：</strong> \n玩家从（0,0）点出发，经过了向下走，向下走，向右走，向右走，到达了点(2, 2)。\n在这趟单程中，总共摘到了4颗樱桃，矩阵变成了[[0,1,-1],[0,0,-1],[0,0,0]]。\n接着，这名玩家向左走，向上走，向上走，向左走，返回了起始点，又摘到了1颗樱桃。\n在旅程中，总共摘到了5颗樱桃，这是可以摘到的最大值了。\n</pre> \n<p><strong>说明:</strong></p> \n<ul> \n <li><code>grid</code> 是一个&nbsp;<code>N</code> * <code>N</code> 的二维数组，N的取值范围是<code>1 &lt;= N &lt;= 50</code>。</li> \n <li>每一个&nbsp;<code>grid[i][j]</code> 都是集合&nbsp;<code>{-1, 0, 1}</code>其中的一个数。</li> \n <li>可以保证起点&nbsp;<code>grid[0][0]</code>&nbsp;和终点&nbsp;<code>grid[N-1][N-1]</code>&nbsp;的值都不会是 -1。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('743. 网络延迟时间', '<p>有 <code>n</code> 个网络节点，标记为&nbsp;<code>1</code>&nbsp;到 <code>n</code>。</p> \n<p>给你一个列表&nbsp;<code>times</code>，表示信号经过 <strong>有向</strong> 边的传递时间。&nbsp;<code>times[i] = (u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>)</code>，其中&nbsp;<code>u<sub>i</sub></code>&nbsp;是源节点，<code>v<sub>i</sub></code>&nbsp;是目标节点， <code>w<sub>i</sub></code>&nbsp;是一个信号从源节点传递到目标节点的时间。</p> \n<p>现在，从某个节点&nbsp;<code>K</code>&nbsp;发出一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回&nbsp;<code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 220px; width: 200px;\" src=\"https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>times = [[1,2,1]], n = 2, k = 1\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>times = [[1,2,1]], n = 2, k = 2\n<strong>输出：</strong>-1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= n &lt;= 100</code></li> \n <li><code>1 &lt;= times.length &lt;= 6000</code></li> \n <li><code>times[i].length == 3</code></li> \n <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> \n <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> \n <li><code>0 &lt;= w<sub>i</sub> &lt;= 100</code></li> \n <li>所有 <code>(u<sub>i</sub>, v<sub>i</sub>)</code> 对都 <strong>互不相同</strong>（即，不含重复边）</li> \n</ul>');
INSERT INTO `leecode` VALUES ('744. 寻找比目标字母大的最小字母', '<p>给你一个排序后的字符列表 <code>letters</code> ，列表中只包含小写英文字母。另给出一个目标字母&nbsp;<code>target</code>，请你寻找在这一有序列表里比目标字母大的最小字母。</p> \n<p>在比较时，字母是依序循环出现的。举个例子：</p> \n<ul> \n <li>如果目标字母 <code>target = \'z\'</code> 并且字符列表为&nbsp;<code>letters = [\'a\', \'b\']</code>，则答案返回&nbsp;<code>\'a\'</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入:</strong>\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"a\"\n<strong>输出:</strong> \"c\"\n\n<strong>输入:</strong>\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"c\"\n<strong>输出:</strong> \"f\"\n\n<strong>输入:</strong>\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"d\"\n<strong>输出:</strong> \"f\"\n\n<strong>输入:</strong>\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"g\"\n<strong>输出:</strong> \"j\"\n\n<strong>输入:</strong>\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"j\"\n<strong>输出:</strong> \"c\"\n\n<strong>输入:</strong>\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"k\"\n<strong>输出:</strong> \"c\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>letters</code>长度范围在<code>[2, 10000]</code>区间内。</li> \n <li><code>letters</code> 仅由小写字母组成，最少包含两个不同的字母。</li> \n <li>目标字母<code>target</code> 是一个小写字母。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('745. 前缀和后缀搜索', '<p>设计一个包含一些单词的特殊词典，并能够通过前缀和后缀来检索单词。</p> \n<p>实现 <code>WordFilter</code> 类：</p> \n<ul> \n <li><code>WordFilter(string[] words)</code> 使用词典中的单词 <code>words</code> 初始化对象。</li> \n <li><code>f(string prefix, string suffix)</code> 返回词典中具有前缀&nbsp;<code>prefix</code>&nbsp;和后缀<code>suffix</code>&nbsp;的单词的下标。如果存在不止一个满足要求的下标，返回其中 <strong>最大的下标</strong> 。如果不存在这样的单词，返回 <code>-1</code> 。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例</strong></p> \n<pre><strong>输入：</strong>\n[\"WordFilter\", \"f\"]\n[[[\"apple\"]], [\"a\", \"e\"]]\n<strong>输出：</strong>\n[null, 0]\n\n<strong>解释：</strong>\nWordFilter wordFilter = new WordFilter([\"apple\"]);\nwordFilter.f(\"a\", \"e\"); // 返回 0 ，因为下标为 0 的单词的 prefix = \"a\" 且 suffix = \'e\" 。\n</pre> &nbsp; \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 15000</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 10</code></li> \n <li><code>1 &lt;= prefix.length, suffix.length &lt;= 10</code></li> \n <li><code>words[i]</code>、<code>prefix</code> 和 <code>suffix</code> 仅由小写英文字母组成</li> \n <li>最多对函数&nbsp;<code>f</code> 进行 <code>15000</code> 次调用</li> \n</ul>');
INSERT INTO `leecode` VALUES ('746. 使用最小花费爬楼梯', '<p>数组的每个下标作为一个阶梯，第 <code>i</code> 个阶梯对应着一个非负数的体力花费值&nbsp;<code>cost[i]</code>（下标从 <code>0</code> 开始）。</p> \n<p>每当你爬上一个阶梯你都要花费对应的体力值，一旦支付了相应的体力值，你就可以选择向上爬一个阶梯或者爬两个阶梯。</p> \n<p>请你找出达到楼层顶部的最低花费。在开始时，你可以选择从下标为 0 或 1 的元素作为初始阶梯。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>cost = [10, 15, 20]\n<strong>输出：</strong>15\n<strong>解释：</strong>最低花费是从 cost[1] 开始，然后走两步即可到阶梯顶，一共花费 15 。\n</pre> \n<p><strong>&nbsp;示例 2：</strong></p> \n<pre><strong>输入：</strong>cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\n<strong>输出：</strong>6\n<strong>解释：</strong>最低花费方式是从 cost[0] 开始，逐个经过那些 1 ，跳过 cost[3] ，一共花费 6 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>cost</code>&nbsp;的长度范围是 <code>[2, 1000]</code>。</li> \n <li><code>cost[i]</code> 将会是一个整型数据，范围为&nbsp;<code>[0, 999]</code> 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('747. 至少是其他数字两倍的最大数', '<p>给你一个整数数组 <code>nums</code> ，其中总是存在 <strong>唯一的</strong> 一个最大整数 。</p> \n<p>请你找出数组中的最大元素并检查它是否 <strong>至少是数组中每个其他数字的两倍</strong> 。如果是，则返回 <strong>最大元素的下标</strong> ，否则返回 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [3,6,1,0]\n<strong>输出：</strong>1\n<strong>解释：</strong>6 是最大的整数，对于数组中的其他整数，6 大于数组中其他元素的两倍。6 的下标是 1 ，所以返回 1 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,4]\n<strong>输出：</strong>-1\n<strong>解释：</strong>4 没有超过 3 的两倍大，所以返回 -1 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1]\n<strong>输出：</strong>0\n<strong>解释：</strong>因为不存在其他数字，所以认为现有数字 1 至少是其他数字的两倍。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 50</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 100</code></li> \n <li><code>nums</code> 中的最大元素是唯一的</li> \n</ul>');
INSERT INTO `leecode` VALUES ('748. 最短补全词', '<p>给定一个字符串牌照 <code>licensePlate</code> 和一个字符串数组 <code>words</code> ，请你找出并返回 <code>words</code> 中的 <strong>最短补全词</strong> 。</p> \n<p>如果单词列表（<code>words</code>）中的一个单词包含牌照（<code>licensePlate</code>）中所有的字母，那么我们称之为 <strong>补全词</strong> 。在所有完整词中，最短的单词我们称之为 <strong>最短补全词</strong> 。</p> \n<p>单词在匹配牌照中的字母时要：</p> \n<ul> \n <li>忽略牌照中的数字和空格。</li> \n <li>不区分大小写，比如牌照中的&nbsp;<code>\"P\"</code>&nbsp;依然可以匹配单词中的&nbsp;<code>\"p\"</code>&nbsp;字母。</li> \n <li>如果某个字母在牌照中出现不止一次，那么该字母在补全词中的出现次数应当一致或者更多。</li> \n</ul> \n<p>例如：<code>licensePlate</code><code> = \"aBc 12c\"</code>，那么它由字母 <code>\'a\'</code>、<code>\'b\'</code> （忽略大写）和两个 <code>\'c\'</code> 。可能的 <strong>补全词</strong> 是 <code>\"abccdef\"</code>、<code>\"caaacab\"</code> 以及 <code>\"cbca\"</code> 。</p> \n<p>题目数据保证一定存在一个最短补全词。当有多个单词都符合最短补全词的匹配条件时取单词列表中最靠前的一个。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>licensePlate = \"1s3 PSt\", words = [\"step\", \"steps\", \"stripe\", \"stepple\"]\n<strong>输出：</strong>\"steps\"\n<strong>说明：</strong>最短补全词应该包括 \"s\"、\"p\"、\"s\" 以及 \"t\"。在匹配过程中我们忽略牌照中的大小写。\n\"step\" 包含 \"t\"、\"p\"，但只包含一个 \"s\"，所以它不符合条件。\n\"steps\" 包含 \"t\"、\"p\" 和两个 \"s\"。\n\"stripe\" 缺一个 \"s\"。\n\"stepple\" 缺一个 \"s\"。\n因此，\"steps\" 是唯一一个包含所有字母的单词，也是本样例的答案。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>licensePlate = \"1s3 456\", words = [\"looks\", \"pest\", \"stew\", \"show\"]\n<strong>输出：</strong>\"pest\"\n<strong>说明：</strong>存在 3 个包含字母 \"s\" 且有着最短长度的补全词，\"pest\"、\"stew\"、和 \"show\" 三者长度相同，但我们返回最先出现的补全词 \"pest\" 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>licensePlate = \"Ah71752\", words = [\"suggest\",\"letter\",\"of\",\"husband\",\"easy\",\"education\",\"drug\",\"prevent\",\"writer\",\"old\"]\n<strong>输出：</strong>\"husband\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>licensePlate = \"OgEu755\", words = [\"enough\",\"these\",\"play\",\"wide\",\"wonder\",\"box\",\"arrive\",\"money\",\"tax\",\"thus\"]\n<strong>输出：</strong>\"enough\"\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>licensePlate = \"iMSlpe4\", words = [\"claim\",\"consumer\",\"student\",\"camera\",\"public\",\"never\",\"wonder\",\"simple\",\"thought\",\"use\"]\n<strong>输出：</strong>\"simple\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= licensePlate.length &lt;= 7</code></li> \n <li><code>licensePlate</code> 由数字、大小写字母或空格 <code>\' \'</code> 组成</li> \n <li><code>1 &lt;= words.length &lt;= 1000</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 15</code></li> \n <li><code>words[i]</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('749. 隔离病毒', '<p>病毒扩散得很快，现在你的任务是尽可能地通过安装防火墙来隔离病毒。</p> \n<p>假设世界由二维矩阵组成，<code>0</code> 表示该区域未感染病毒，而 <code>1</code> 表示该区域已感染病毒。可以在任意 2 个四方向相邻单元之间的共享边界上安装一个防火墙（并且只有一个防火墙）。</p> \n<p>每天晚上，病毒会从被感染区域向相邻未感染区域扩散，除非被防火墙隔离。现由于资源有限，每天你只能安装一系列防火墙来隔离其中一个被病毒感染的区域（一个区域或连续的一片区域），且该感染区域对未感染区域的威胁最大且保证唯一。</p> \n<p>你需要努力使得最后有部分区域不被病毒感染，如果可以成功，那么返回需要使用的防火墙个数; 如果无法实现，则返回在世界被病毒全部感染时已安装的防火墙个数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> grid = \n[[0,1,0,0,0,0,0,1],\n [0,1,0,0,0,0,0,1],\n [0,0,0,0,0,0,0,1],\n [0,0,0,0,0,0,0,0]]\n<strong>输出:</strong> 10\n<strong>说明:</strong>\n一共有两块被病毒感染的区域: 从左往右第一块需要 5 个防火墙，同时若该区域不隔离，晚上将感染 5 个未感染区域（即被威胁的未感染区域个数为 5）;\n第二块需要 4 个防火墙，同理被威胁的未感染区域个数是 4。因此，第一天先隔离左边的感染区域，经过一晚后，病毒传播后世界如下:\n[[0,1,0,0,0,0,1,1],\n [0,1,0,0,0,0,1,1],\n [0,0,0,0,0,0,1,1],\n [0,0,0,0,0,0,0,1]]\n第二题，只剩下一块未隔离的被感染的连续区域，此时需要安装 5 个防火墙，且安装完毕后病毒隔离任务完成。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> grid = \n[[1,1,1],\n [1,0,1],\n [1,1,1]]\n<strong>输出:</strong> 4\n<strong>说明:</strong> \n此时只需要安装 4 面防火墙，就有一小区域可以幸存，不被病毒感染。\n注意不需要在世界边界建立防火墙。</pre> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;3:</strong></p> \n<pre><strong>输入:</strong> grid = \n[[1,1,1,0,0,0,0,0,0],\n [1,0,1,0,1,1,1,1,1],\n [1,1,1,0,0,0,0,0,0]]\n<strong>输出:</strong> 13\n<strong>说明:</strong> \n在隔离右边感染区域后，隔离左边病毒区域只需要 2 个防火墙了。\n</pre> \n<p>&nbsp;</p> \n<p><strong>说明:</strong></p> \n<ol> \n <li><code>grid</code> 的行数和列数范围是 [1, 50]。</li> \n <li>&nbsp;<code>grid[i][j]</code>&nbsp;只包含&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code>&nbsp;。</li> \n <li>题目保证每次选取感染区域进行隔离时，一定存在唯一一个对未感染区域的威胁最大的区域。</li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('75. 颜色分类', '<p>给定一个包含红色、白色和蓝色，一共&nbsp;<code>n</code><em> </em>个元素的数组，<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a></strong>对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p> \n<p>此题中，我们使用整数 <code>0</code>、&nbsp;<code>1</code> 和 <code>2</code> 分别表示红色、白色和蓝色。</p> \n<ul> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [2,0,2,1,1,0]\n<strong>输出：</strong>[0,0,1,1,2,2]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [2,0,1]\n<strong>输出：</strong>[0,1,2]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [0]\n<strong>输出：</strong>[0]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>nums = [1]\n<strong>输出：</strong>[1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>1 &lt;= n &lt;= 300</code></li> \n <li><code>nums[i]</code> 为 <code>0</code>、<code>1</code> 或 <code>2</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你可以不使用代码库中的排序函数来解决这道题吗？</li> \n <li>你能想出一个仅使用常数空间的一趟扫描算法吗？</li> \n</ul>');
INSERT INTO `leecode` VALUES ('752. 打开转盘锁', '<p>你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： <code>\'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\'</code> 。每个拨轮可以自由旋转：例如把 <code>\'9\'</code> 变为&nbsp;<code>\'0\'</code>，<code>\'0\'</code> 变为 <code>\'9\'</code> 。每次旋转都只能旋转一个拨轮的一位数字。</p> \n<p>锁的初始数字为 <code>\'0000\'</code> ，一个代表四个拨轮的数字的字符串。</p> \n<p>列表 <code>deadends</code> 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。</p> \n<p>字符串 <code>target</code> 代表可以解锁的数字，你需要给出解锁需要的最小旋转次数，如果无论如何不能解锁，返回 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入：</strong>deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"\n<strong>输出：</strong>6\n<strong>解释：</strong>\n可能的移动序列为 \"0000\" -&gt; \"1000\" -&gt; \"1100\" -&gt; \"1200\" -&gt; \"1201\" -&gt; \"1202\" -&gt; \"0202\"。\n注意 \"0000\" -&gt; \"0001\" -&gt; \"0002\" -&gt; \"0102\" -&gt; \"0202\" 这样的序列是不能解锁的，\n因为当拨动到 \"0102\" 时这个锁就会被锁定。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> deadends = [\"8888\"], target = \"0009\"\n<strong>输出：</strong>1\n<strong>解释：</strong>\n把最后一位反向旋转一次即可 \"0000\" -&gt; \"0009\"。\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"\n<strong>输出：</strong>-1\n<strong>解释：\n</strong>无法旋转到目标数字且不被锁定。\n</pre> \n<p><strong>示例 4:</strong></p> \n<pre><strong>输入:</strong> deadends = [\"0000\"], target = \"8888\"\n<strong>输出：</strong>-1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;deadends.length &lt;= 500</code></li> \n <li><code><font face=\"monospace\">deadends[i].length == 4</font></code></li> \n <li><code><font face=\"monospace\">target.length == 4</font></code></li> \n <li><code>target</code> <strong>不在</strong> <code>deadends</code> 之中</li> \n <li><code>target</code> 和 <code>deadends[i]</code> 仅由若干位数字组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('753. 破解保险箱', '<p>有一个需要密码才能打开的保险箱。密码是&nbsp;<code>n</code> 位数, 密码的每一位是&nbsp;<code>k</code>&nbsp;位序列&nbsp;<code>0, 1, ..., k-1</code>&nbsp;中的一个 。</p> \n<p>你可以随意输入密码，保险箱会自动记住最后&nbsp;<code>n</code>&nbsp;位输入，如果匹配，则能够打开保险箱。</p> \n<p>举个例子，假设密码是&nbsp;<code>\"345\"</code>，你可以输入&nbsp;<code>\"012345\"</code>&nbsp;来打开它，只是你输入了 6&nbsp;个字符.</p> \n<p>请返回一个能打开保险箱的最短字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例1:</strong></p> \n<pre><strong>输入:</strong> n = 1, k = 2\n<strong>输出:</strong> \"01\"\n<strong>说明:</strong> \"10\"也可以打开保险箱。\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例2:</strong></p> \n<pre><strong>输入:</strong> n = 2, k = 2\n<strong>输出:</strong> \"00110\"\n<strong>说明: </strong>\"01100\", \"10011\", \"11001\" 也能打开保险箱。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>n</code> 的范围是&nbsp;<code>[1, 4]</code>。</li> \n <li><code>k</code> 的范围是&nbsp;<code>[1, 10]</code>。</li> \n <li><code>k^n</code> 最大可能为&nbsp;<code>4096</code>。</li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('754. 到达终点数字', '<p>在一根无限长的数轴上，你站在<code>0</code>的位置。终点在<code>target</code>的位置。</p> \n<p>每次你可以选择向左或向右移动。第 n 次移动（从 1 开始），可以走 n 步。</p> \n<p>返回到达终点需要的最小移动次数。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> target = 3\n<strong>输出:</strong> 2\n<strong>解释:</strong>\n第一次移动，从 0 到 1 。\n第二次移动，从 1 到 3 。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> target = 2\n<strong>输出:</strong> 3\n<strong>解释:</strong>\n第一次移动，从 0 到 1 。\n第二次移动，从 1 到 -1 。\n第三次移动，从 -1 到 2 。\n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>target</code>是在<code>[-10^9, 10^9]</code>范围中的非零整数。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('756. 金字塔转换矩阵', '<p>现在，我们用一些方块来堆砌一个金字塔。 每个方块用仅包含一个字母的字符串表示。</p> \n<p>使用三元组表示金字塔的堆砌规则如下：</p> \n<p>对于三元组 <code>ABC</code> ，<code>C</code> 为顶层方块，方块 <code>A</code> 、<code>B</code> 分别作为方块 <code>C</code> 下一层的的左、右子块。当且仅当 <code>ABC</code> 是被允许的三元组，我们才可以将其堆砌上。</p> \n<p>初始时，给定金字塔的基层&nbsp;<code>bottom</code>，用一个字符串表示。一个允许的三元组列表&nbsp;<code>allowed</code>，每个三元组用一个长度为 3 的字符串表示。</p> \n<p>如果可以由基层一直堆到塔尖就返回 <code>true</code> ，否则返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>bottom = \"BCD\", allowed = [\"BCG\", \"CDE\", \"GEA\", \"FFF\"]\n<strong>输出：</strong>true\n<strong>解释：</strong>\n可以堆砌成这样的金字塔:\n    A\n   / \\\n  G   E\n / \\ / \\\nB   C   D\n\n因为符合 BCG、CDE 和 GEA 三种规则。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>bottom = \"AABA\", allowed = [\"AAA\", \"AAB\", \"ABA\", \"ABB\", \"BAC\"]\n<strong>输出：</strong>false\n<strong>解释：</strong>\n无法一直堆到塔尖。\n注意, 允许存在像 ABC 和 ABD 这样的三元组，其中 C != D。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>bottom</code> 的长度范围在&nbsp;<code>[2, 8]</code>。</li> \n <li><code>allowed</code> 的长度范围在<code>[0, 200]</code>。</li> \n <li>方块的标记字母范围为<code>{\'A\', \'B\', \'C\', \'D\', \'E\', \'F\', \'G\'}</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('757. 设置交集大小至少为2', '<p>一个整数区间&nbsp;<code>[a, b]</code>&nbsp;&nbsp;(&nbsp;<code>a &lt; b</code>&nbsp;) 代表着从&nbsp;<code>a</code>&nbsp;到&nbsp;<code>b</code>&nbsp;的所有连续整数，包括&nbsp;<code>a</code>&nbsp;和&nbsp;<code>b</code>。</p> \n<p>给你一组整数区间<code>intervals</code>，请找到一个最小的集合 S，使得 S 里的元素与区间<code>intervals</code>中的每一个整数区间都至少有2个元素相交。</p> \n<p>输出这个最小集合S的大小。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> intervals = [[1, 3], [1, 4], [2, 5], [3, 5]]\n<strong>输出:</strong> 3\n<strong>解释:</strong>\n考虑集合 S = {2, 3, 4}. S与intervals中的四个区间都有至少2个相交的元素。\n且这是S最小的情况，故我们输出3。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> intervals = [[1, 2], [2, 3], [2, 4], [4, 5]]\n<strong>输出:</strong> 5\n<strong>解释:</strong>\n最小的集合S = {1, 2, 3, 4, 5}.\n</pre> \n<p><strong>注意:</strong></p> \n<ol> \n <li><code>intervals</code>&nbsp;的长度范围为<code>[1, 3000]</code>。</li> \n <li><code>intervals[i]</code>&nbsp;长度为&nbsp;<code>2</code>，分别代表左、右边界。</li> \n <li><code>intervals[i][j]</code> 的值是&nbsp;<code>[0, 10^8]</code>范围内的整数。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('76. 最小覆盖子串', '<p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>\"\"</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>注意：</strong></p> \n<ul> \n <li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li> \n <li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"ADOBECODEBANC\", t = \"ABC\"\n<strong>输出：</strong>\"BANC\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"a\", t = \"a\"\n<strong>输出：</strong>\"a\"\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> s = \"a\", t = \"aa\"\n<strong>输出:</strong> \"\"\n<strong>解释:</strong> t 中两个字符 \'a\' 均应包含在 s 的子串中，\n因此没有符合条件的子字符串，返回空字符串。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length, t.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s</code> 和 <code>t</code> 由英文字母组成</li> \n</ul> \n<p>&nbsp;</p> \n<strong>进阶：</strong>你能设计一个在 \n<code>o(n)</code> 时间内解决此问题的算法吗？');
INSERT INTO `leecode` VALUES ('761. 特殊的二进制序列', '<p>特殊的二进制序列是具有以下两个性质的二进制序列：</p> \n<ul> \n <li>0 的数量与 1 的数量相等。</li> \n <li>二进制序列的每一个前缀码中 1 的数量要大于等于 0 的数量。</li> \n</ul> \n<p>给定一个特殊的二进制序列&nbsp;<code>S</code>，以字符串形式表示。定义一个<em>操作 </em>为首先选择&nbsp;<code>S</code>&nbsp;的两个连续且非空的特殊的子串，然后将它们交换。（两个子串为连续的当且仅当第一个子串的最后一个字符恰好为第二个子串的第一个字符的前一个字符。)</p> \n<p>在任意次数的操作之后，交换后的字符串按照字典序排列的最大的结果是什么？</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> S = \"11011000\"\n<strong>输出:</strong> \"11100100\"\n<strong>解释:</strong>\n将子串 \"10\" （在S[1]出现） 和 \"1100\" （在S[3]出现）进行交换。\n这是在进行若干次操作后按字典序排列最大的结果。\n</pre> \n<p><strong>说明:</strong></p> \n<ol> \n <li><code>S</code>&nbsp;的长度不超过&nbsp;<code>50</code>。</li> \n <li><code>S</code>&nbsp;保证为一个满足上述定义的<em>特殊 </em>的二进制序列。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('762. 二进制表示中质数个计算置位', '<p>给定两个整数&nbsp;<code>L</code>&nbsp;和&nbsp;<code>R</code>&nbsp;，找到闭区间&nbsp;<code>[L, R]</code>&nbsp;范围内，计算置位位数为质数的整数个数。</p> \n<p>（注意，计算置位代表二进制表示中1的个数。例如&nbsp;<code>21</code>&nbsp;的二进制表示&nbsp;<code>10101</code>&nbsp;有 3 个计算置位。还有，1 不是质数。）</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> L = 6, R = 10\n<strong>输出:</strong> 4\n<strong>解释:</strong>\n6 -&gt; 110 (2 个计算置位，2 是质数)\n7 -&gt; 111 (3 个计算置位，3 是质数)\n9 -&gt; 1001 (2 个计算置位，2 是质数)\n10-&gt; 1010 (2 个计算置位，2 是质数)\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> L = 10, R = 15\n<strong>输出:</strong> 5\n<strong>解释:</strong>\n10 -&gt; 1010 (2 个计算置位, 2 是质数)\n11 -&gt; 1011 (3 个计算置位, 3 是质数)\n12 -&gt; 1100 (2 个计算置位, 2 是质数)\n13 -&gt; 1101 (3 个计算置位, 3 是质数)\n14 -&gt; 1110 (3 个计算置位, 3 是质数)\n15 -&gt; 1111 (4 个计算置位, 4 不是质数)\n</pre> \n<p><strong>注意:</strong></p> \n<ol> \n <li><code>L, R</code>&nbsp;是&nbsp;<code>L &lt;= R</code>&nbsp;且在&nbsp;<code>[1, 10^6]</code>&nbsp;中的整数。</li> \n <li><code>R - L</code>&nbsp;的最大值为 10000。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('763. 划分字母区间', '<p>字符串 <code>S</code> 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>S = \"ababcbacadefegdehijhklij\"\n<strong>输出：</strong>[9,7,8]\n<strong>解释：</strong>\n划分结果为 \"ababcbaca\", \"defegde\", \"hijhklij\"。\n每个字母最多出现在一个片段中。\n像 \"ababcbacadefegde\", \"hijhklij\" 的划分是错误的，因为划分的片段数较少。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>S</code>的长度在<code>[1, 500]</code>之间。</li> \n <li><code>S</code>只包含小写字母 <code>\'a\'</code> 到 <code>\'z\'</code> 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('764. 最大加号标志', '<p>在一个大小在 (0, 0) 到 (N-1, N-1) 的2D网格&nbsp;<code>grid</code>&nbsp;中，除了在&nbsp;<code>mines</code>&nbsp;中给出的单元为&nbsp;<code>0</code>，其他每个单元都是&nbsp;<code>1</code>。网格中包含&nbsp;<code>1</code>&nbsp;的最大的轴对齐加号标志是多少阶？返回加号标志的阶数。如果未找到加号标志，则返回 0。</p> \n<p>一个&nbsp;<strong>k</strong>\" 阶由&nbsp;<em><code>1</code></em>&nbsp;组成的“轴对称”加号标志具有中心网格&nbsp;&nbsp;<code>grid[x][y] = 1</code>&nbsp;，以及4个从中心向上、向下、向左、向右延伸，长度为&nbsp;<code>k-1</code>，由&nbsp;<code>1</code>&nbsp;组成的臂。下面给出&nbsp;<strong>k</strong>\" 阶“轴对称”加号标志的示例。注意，只有加号标志的所有网格要求为 1，别的网格可能为 0 也可能为 1。</p> \n<p>&nbsp;</p> \n<p><strong>k 阶轴对称加号标志示例:</strong></p> \n<pre>阶 1:\n000\n0<strong>1</strong>0\n000\n\n阶 2:\n00000\n00<strong>1</strong>00\n0<strong>111</strong>0\n00<strong>1</strong>00\n00000\n\n阶 3:\n0000000\n000<strong>1</strong>000\n000<strong>1</strong>000\n0<strong>11111</strong>0\n000<strong>1</strong>000\n000<strong>1</strong>000\n0000000\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> N = 5, mines = [[4, 2]]\n<strong>输出:</strong> 2\n<strong>解释:\n</strong>\n11111\n11111\n1<em><strong>1</strong></em>111\n<em><strong>111</strong></em>11\n1<em><strong>1</strong></em>011\n\n在上面的网格中，最大加号标志的阶只能是2。一个标志已在图中标出。\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> N = 2, mines = []\n<strong>输出:</strong> 1\n<strong>解释:\n\n11\n11\n</strong>\n没有 2 阶加号标志，有 1 阶加号标志。\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入:</strong> N = 1, mines = [[0, 0]]\n<strong>输出:</strong> 0\n<strong>解释:\n\n0\n</strong>\n没有加号标志，返回 0 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>整数<code>N</code> 的范围：&nbsp;<code>[1, 500]</code>.</li> \n <li><code>mines</code> 的最大长度为&nbsp;<code>5000</code>.</li> \n <li><code>mines[i]</code> 是长度为2的由2个&nbsp;<code>[0, N-1]</code>&nbsp;中的数组成.</li> \n <li><em>(另外,使用 C, C++, 或者&nbsp;C# 编程将以稍小的时间限制进行​​判断.)</em></li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('765. 情侣牵手', '<p>N 对情侣坐在连续排列的 2N 个座位上，想要牵到对方的手。 计算最少交换座位的次数，以便每对情侣可以并肩坐在一起。 <em>一</em>次交换可选择任意两人，让他们站起来交换座位。</p> \n<p>人和座位用&nbsp;<code>0</code>&nbsp;到&nbsp;<code>2N-1</code>&nbsp;的整数表示，情侣们按顺序编号，第一对是&nbsp;<code>(0, 1)</code>，第二对是&nbsp;<code>(2, 3)</code>，以此类推，最后一对是&nbsp;<code>(2N-2, 2N-1)</code>。</p> \n<p>这些情侣的初始座位&nbsp;&nbsp;<code>row[i]</code>&nbsp;是由最初始坐在第 i 个座位上的人决定的。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> row = [0, 2, 1, 3]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 我们只需要交换row[1]和row[2]的位置即可。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> row = [3, 2, 0, 1]\n<strong>输出:</strong> 0\n<strong>解释:</strong> 无需交换座位，所有的情侣都已经可以手牵手了。\n</pre> \n<p><strong>说明:</strong></p> \n<ol> \n <li><code>len(row)</code> 是偶数且数值在&nbsp;<code>[4, 60]</code>范围内。</li> \n <li>可以保证<code>row</code> 是序列&nbsp;<code>0...len(row)-1</code>&nbsp;的一个全排列。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('766. 托普利茨矩阵', '<p>给你一个 <code>m x n</code> 的矩阵 <code>matrix</code> 。如果这个矩阵是托普利茨矩阵，返回 <code>true</code> ；否则，返回<em> </em><code>false</code><em> 。</em></p> \n<p>如果矩阵上每一条由左上到右下的对角线上的元素都相同，那么这个矩阵是<em> </em><strong>托普利茨矩阵</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 322px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/11/04/ex1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]\n<strong>输出：</strong>true\n<strong>解释：</strong>\n在上述矩阵中, 其对角线为: \n\"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\"。 \n各条对角线上的所有元素均相同, 因此答案是 True 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 162px; height: 162px;\" src=\"https://assets.leetcode.com/uploads/2020/11/04/ex2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[1,2],[2,2]]\n<strong>输出：</strong>false\n<strong>解释：</strong>\n对角线 \"[1, 2]\" 上的元素不同。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 20</code></li> \n <li><code>0 &lt;= matrix[i][j] &lt;= 99</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>如果矩阵存储在磁盘上，并且内存有限，以至于一次最多只能将矩阵的一行加载到内存中，该怎么办？</li> \n <li>如果矩阵太大，以至于一次只能将不完整的一行加载到内存中，该怎么办？</li> \n</ul>');
INSERT INTO `leecode` VALUES ('767. 重构字符串', '<p>给定一个字符串<code>S</code>，检查是否能重新排布其中的字母，使得两相邻的字符不同。</p> \n<p>若可行，输出任意可行的结果。若不可行，返回空字符串。</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> S = \"aab\"\n<strong>输出:</strong> \"aba\"\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> S = \"aaab\"\n<strong>输出:</strong> \"\"\n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>S</code> 只包含小写字母并且长度在<code>[1, 500]</code>区间内。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('768. 最多能完成排序的块 II', '<p><em>这个问题和“最多能完成排序的块”相似，但给定数组中的元素可以重复，输入数组最大长度为<code>2000</code>，其中的元素最大为<code>10**8</code>。</em></p> \n<p><code>arr</code>是一个可能包含<strong>重复元素</strong>的整数数组，我们将这个数组分割成几个“块”，并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。</p> \n<p>我们最多能将数组分成多少块？</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> arr = [5,4,3,2,1]\n<strong>输出:</strong> 1\n<strong>解释:</strong>\n将数组分成2块或者更多块，都无法得到所需的结果。\n例如，分成 [5, 4], [3, 2, 1] 的结果是 [4, 5, 1, 2, 3]，这不是有序的数组。 \n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> arr = [2,1,3,4,4]\n<strong>输出:</strong> 4\n<strong>解释:</strong>\n我们可以把它分成两块，例如 [2, 1], [3, 4, 4]。\n然而，分成 [2, 1], [3], [4], [4] 可以得到最多的块数。 \n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>arr</code>的长度在<code>[1, 2000]</code>之间。</li> \n <li><code>arr[i]</code>的大小在<code>[0, 10**8]</code>之间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('769. 最多能完成排序的块', '<p>数组<code>arr</code>是<code>[0, 1, ..., arr.length - 1]</code>的一种排列，我们将这个数组分割成几个“块”，并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。</p> \n<p>我们最多能将数组分成多少块？</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> arr = [4,3,2,1,0]\n<strong>输出:</strong> 1\n<strong>解释:</strong>\n将数组分成2块或者更多块，都无法得到所需的结果。\n例如，分成 [4, 3], [2, 1, 0] 的结果是 [3, 4, 0, 1, 2]，这不是有序的数组。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> arr = [1,0,2,3,4]\n<strong>输出:</strong> 4\n<strong>解释:</strong>\n我们可以把它分成两块，例如 [1, 0], [2, 3, 4]。\n然而，分成 [1, 0], [2], [3], [4] 可以得到最多的块数。\n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>arr</code> 的长度在 <code>[1, 10]</code> 之间。</li> \n <li><code>arr[i]</code>是 <code>[0, 1, ..., arr.length - 1]</code>的一种排列。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('77. 组合', '<p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p> \n<p>你可以按 <strong>任何顺序</strong> 返回答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 4, k = 2\n<strong>输出：</strong>\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1, k = 1\n<strong>输出：</strong>[[1]]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 20</code></li> \n <li><code>1 &lt;= k &lt;= n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('770. 基本计算器 IV', '<p>给定一个表达式&nbsp;<code>expression</code>&nbsp;如&nbsp;<code>expression = \"e + 8 - a + 5\"</code>&nbsp;和一个求值映射，如&nbsp;<code>{\"e\": 1}</code>（给定的形式为&nbsp;<code>evalvars = [\"e\"]</code> 和&nbsp;<code>evalints = [1]</code>），返回表示简化表达式的标记列表，例如 <code>[\"-1*a\",\"14\"]</code></p> \n<ul> \n <li>表达式交替使用块和符号，每个块和符号之间有一个空格。</li> \n <li>块要么是括号中的表达式，要么是变量，要么是非负整数。</li> \n <li>块是括号中的表达式，变量或非负整数。</li> \n <li>变量是一个由小写字母组成的字符串（不包括数字）。请注意，变量可以是多个字母，并注意变量从不具有像&nbsp;<code>\"2x\"</code>&nbsp;或&nbsp;<code>\"-x\"</code>&nbsp;这样的前导系数或一元运算符&nbsp;。</li> \n</ul> \n<p>表达式按通常顺序进行求值：先是括号，然后求乘法，再计算加法和减法。例如，<code>expression = \"1 + 2 * 3\"</code>&nbsp;的答案是 <code>[\"7\"]</code>。</p> \n<p>输出格式如下：</p> \n<ul> \n <li>对于系数非零的每个自变量项，我们按字典排序的顺序将自变量写在一个项中。例如，我们永远不会写像 <code>“b*a*c”</code> 这样的项，只写 <code>“a*b*c”</code>。</li> \n <li>项的次数等于被乘的自变量的数目，并计算重复项。(例如，<code>\"a*a*b*c\"</code> 的次数为 4。)。我们先写出答案的最大次数项，用字典顺序打破关系，此时忽略词的前导系数。</li> \n <li>项的前导系数直接放在左边，用星号将它与变量分隔开(如果存在的话)。前导系数 1 仍然要打印出来。</li> \n <li>格式良好的一个示例答案是&nbsp;<code>[\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"]</code>&nbsp;。</li> \n <li>系数为 0 的项（包括常数项）不包括在内。例如，“0” 的表达式输出为 []。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]\n<strong>输出：</strong>[\"-1*a\",\"14\"]\n\n<strong>输入：</strong>expression = \"e - 8 + temperature - pressure\",\nevalvars = [\"e\", \"temperature\"], evalints = [1, 12]\n<strong>输出：</strong>[\"-1*pressure\",\"5\"]\n\n<strong>输入：</strong>expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []\n<strong>输出：</strong>[\"1*e*e\",\"-64\"]\n\n<strong>输入：</strong>expression = \"7 - 7\", evalvars = [], evalints = []\n<strong>输出：</strong>[]\n\n<strong>输入：</strong>expression = \"a * b * c + b * a * c * 4\", evalvars = [], evalints = []\n<strong>输出：</strong>[\"5*a*b*c\"]\n\n<strong>输入：</strong>expression = \"((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))\",\nevalvars = [], evalints = []\n<strong>输出：</strong>[\"-1*a*a*b*b\",\"2*a*a*b*c\",\"-1*a*a*c*c\",\"1*a*b*b*b\",\"-1*a*b*b*c\",\"-1*a*b*c*c\",\"1*a*c*c*c\",\"-1*b*b*b*c\",\"2*b*b*c*c\",\"-1*b*c*c*c\",\"2*a*a*b\",\"-2*a*a*c\",\"-2*a*b*b\",\"2*a*c*c\",\"1*b*b*b\",\"-1*b*b*c\",\"1*b*c*c\",\"-1*c*c*c\",\"-1*a*a\",\"1*a*b\",\"1*a*c\",\"-1*b*c\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>expression</code> 的长度在&nbsp;<code>[1, 250]</code>&nbsp;范围内。</li> \n <li><code>evalvars, evalints</code> 在范围&nbsp;<code>[0, 100]</code>&nbsp;内，且长度相同。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('771. 宝石与石头', '<p>&nbsp;给定字符串<code>J</code>&nbsp;代表石头中宝石的类型，和字符串&nbsp;<code>S</code>代表你拥有的石头。&nbsp;<code>S</code>&nbsp;中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。</p> \n<p><code>J</code>&nbsp;中的字母不重复，<code>J</code>&nbsp;和&nbsp;<code>S</code>中的所有字符都是字母。字母区分大小写，因此<code>\"a\"</code>和<code>\"A\"</code>是不同类型的石头。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> J = \"aA\", S = \"aAAbbbb\"\n<strong>输出:</strong> 3\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> J = \"z\", S = \"ZZ\"\n<strong>输出:</strong> 0\n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>S</code>&nbsp;和&nbsp;<code>J</code>&nbsp;最多含有50个字母。</li> \n <li>&nbsp;<code>J</code>&nbsp;中的字符不重复。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('773. 滑动谜题', '<p>在一个 2 x 3 的板上（<code>board</code>）有 5 块砖瓦，用数字 <code>1~5</code> 来表示, 以及一块空缺用&nbsp;<code>0</code>&nbsp;来表示.</p> \n<p>一次移动定义为选择&nbsp;<code>0</code>&nbsp;与一个相邻的数字（上下左右）进行交换.</p> \n<p>最终当板&nbsp;<code>board</code>&nbsp;的结果是&nbsp;<code>[[1,2,3],[4,5,0]]</code>&nbsp;谜板被解开。</p> \n<p>给出一个谜板的初始状态，返回最少可以通过多少次移动解开谜板，如果不能解开谜板，则返回 -1 。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>board = [[1,2,3],[4,0,5]]\n<strong>输出：</strong>1\n<strong>解释：</strong>交换 0 和 5 ，1 步完成\n</pre> \n<pre><strong>输入：</strong>board = [[1,2,3],[5,4,0]]\n<strong>输出：</strong>-1\n<strong>解释：</strong>没有办法完成谜板\n</pre> \n<pre><strong>输入：</strong>board = [[4,1,2],[5,0,3]]\n<strong>输出：</strong>5\n<strong>解释：</strong>\n最少完成谜板的最少移动次数是 5 ，\n一种移动路径:\n尚未移动: [[4,1,2],[5,0,3]]\n移动 1 次: [[4,1,2],[0,5,3]]\n移动 2 次: [[0,1,2],[4,5,3]]\n移动 3 次: [[1,0,2],[4,5,3]]\n移动 4 次: [[1,2,0],[4,5,3]]\n移动 5 次: [[1,2,3],[4,5,0]]\n</pre> \n<pre><strong>输入：</strong>board = [[3,2,4],[1,5,0]]\n<strong>输出：</strong>14\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>board</code>&nbsp;是一个如上所述的 2 x 3 的数组.</li> \n <li><code>board[i][j]</code>&nbsp;是一个&nbsp;<code>[0, 1, 2, 3, 4, 5]</code>&nbsp;的排列.</li> \n</ul>');
INSERT INTO `leecode` VALUES ('775. 全局倒置与局部倒置', '<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> ，表示由范围 <code>[0, n - 1]</code> 内所有整数组成的一个排列。</p> \n<p><strong>全局倒置</strong> 的数目等于满足下述条件不同下标对 <code>(i, j)</code> 的数目：</p> \n<ul> \n <li><code>0 &lt;= i &lt; j &lt; n</code></li> \n <li><code>nums[i] &gt; nums[j]</code></li> \n</ul> \n<p><strong>局部倒置</strong> 的数目等于满足下述条件的下标 <code>i</code> 的数目：</p> \n<ul> \n <li><code>0 &lt;= i &lt; n - 1</code></li> \n <li><code>nums[i] &gt; nums[i + 1]</code></li> \n</ul> \n<p>当数组 <code>nums</code> 中 <strong>全局倒置</strong> 的数量等于 <strong>局部倒置</strong> 的数量时，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,0,2]\n<strong>输出：</strong>true\n<strong>解释：</strong>有 1 个全局倒置，和 1 个局部倒置。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,0]\n<strong>输出：</strong>false\n<strong>解释：</strong>有 2 个全局倒置，和 1 个局部倒置。\n</pre> &nbsp; \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == nums.length</code></li> \n <li><code>1 &lt;= n &lt;= 5000</code></li> \n <li><code>0 &lt;= nums[i] &lt; n</code></li> \n <li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li> \n <li><code>nums</code> 是范围 <code>[0, n - 1]</code> 内所有数字组成的一个排列</li> \n</ul>');
INSERT INTO `leecode` VALUES ('777. 在LR字符串中交换相邻字符', '<p>在一个由 <code>\'L\'</code> , <code>\'R\'</code> 和 <code>\'X\'</code> 三个字符组成的字符串（例如<code>\"RXXLRXRXL\"</code>）中进行移动操作。一次移动操作指用一个<code>\"LX\"</code>替换一个<code>\"XL\"</code>，或者用一个<code>\"XR\"</code>替换一个<code>\"RX\"</code>。现给定起始字符串<code>start</code>和结束字符串<code>end</code>，请编写代码，当且仅当存在一系列移动操作使得<code>start</code>可以转换成<code>end</code>时， 返回<code>True</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 :</strong></p> \n<pre><strong>输入:</strong> start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"\n<strong>输出:</strong> True\n<strong>解释:</strong>\n我们可以通过以下几步将start转换成end:\nRXXLRXRXL -&gt;\nXRXLRXRXL -&gt;\nXRLXRXRXL -&gt;\nXRLXXRRXL -&gt;\nXRLXXRRLX\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= len(start) = len(end) &lt;= 10000</code>。</li> \n <li><code>start</code>和<code>end</code>中的字符串仅限于<code>\'L\'</code>, <code>\'R\'</code>和<code>\'X\'</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('778. 水位上升的泳池中游泳', '<p>在一个 N x N 的坐标方格&nbsp;<code>grid</code> 中，每一个方格的值 <code>grid[i][j]</code> 表示在位置 <code>(i,j)</code> 的平台高度。</p> \n<p>现在开始下雨了。当时间为&nbsp;<code>t</code>&nbsp;时，此时雨水导致水池中任意位置的水位为&nbsp;<code>t</code>&nbsp;。你可以从一个平台游向四周相邻的任意一个平台，但是前提是此时水位必须同时淹没这两个平台。假定你可以瞬间移动无限距离，也就是默认在方格内部游动是不耗时的。当然，在你游泳的时候你必须待在坐标方格里面。</p> \n<p>你从坐标方格的左上平台 (0，0) 出发。最少耗时多久你才能到达坐标方格的右下平台&nbsp;<code>(N-1, N-1)</code>？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [[0,2],[1,3]]\n<strong>输出:</strong> 3\n<strong>解释:</strong>\n时间为0时，你位于坐标方格的位置为 <code>(0, 0)。</code>\n此时你不能游向任意方向，因为四个相邻方向平台的高度都大于当前时间为 0 时的水位。\n\n等时间到达 3 时，你才可以游向平台 (1, 1). 因为此时的水位是 3，坐标方格中的平台没有比水位 3 更高的，所以你可以游向坐标方格中的任意位置\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong>输入:</strong> [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\n<strong>输出:</strong> 16\n<strong>解释:</strong>\n<strong> 0  1  2  3  4</strong>\n24 23 22 21  <strong>5</strong>\n<strong>12 13 14 15 16</strong>\n<strong>11</strong> 17 18 19 20\n<strong>10  9  8  7  6</strong>\n\n最终的路线用加粗进行了标记。\n我们必须等到时间为 16，此时才能保证平台 (0, 0) 和 (4, 4) 是连通的\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ol> \n <li><code>2 &lt;= N &lt;= 50</code>.</li> \n <li><code>grid[i][j]</code> 是 <code>[0, ..., N*N - 1]</code> 的排列。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('779. 第K个语法符号', '<p>在第一行我们写上一个 <code>0</code>。接下来的每一行，将前一行中的<code>0</code>替换为<code>01</code>，<code>1</code>替换为<code>10</code>。</p> \n<p>给定行数&nbsp;<code>N</code>&nbsp;和序数 <code>K</code>，返回第 <code>N</code> 行中第 <code>K</code>个字符。（<code>K</code>从1开始）</p> \n<p><br> <strong>例子:</strong></p> \n<pre><strong>输入:</strong> N = 1, K = 1\n<strong>输出:</strong> 0\n\n<strong>输入:</strong> N = 2, K = 1\n<strong>输出:</strong> 0\n\n<strong>输入:</strong> N = 2, K = 2\n<strong>输出:</strong> 1\n\n<strong>输入:</strong> N = 4, K = 5\n<strong>输出:</strong> 1\n\n<strong>解释:</strong>\n第一行: 0\n第二行: 01\n第三行: 0110\n第四行: 01101001\n</pre> \n<p><br> <strong>注意：</strong></p> \n<ol> \n <li><code>N</code>&nbsp;的范围&nbsp;<code>[1, 30]</code>.</li> \n <li><code>K</code>&nbsp;的范围&nbsp;<code>[1, 2^(N-1)]</code>.</li> \n</ol>');
INSERT INTO `leecode` VALUES ('78. 子集', '<p>给你一个整数数组&nbsp;<code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p> \n<p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3]\n<strong>输出：</strong>[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0]\n<strong>输出：</strong>[[],[0]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10</code></li> \n <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> \n <li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('780. 到达终点', '<p>从点&nbsp;<code>(x, y)</code>&nbsp;可以<strong>转换</strong>到&nbsp;<code>(x, x+y)</code>&nbsp; 或者&nbsp;<code>(x+y, y)</code>。</p> \n<p>给定一个起点&nbsp;<code>(sx, sy)</code>&nbsp;和一个终点&nbsp;<code>(tx, ty)</code>，如果通过一系列的<strong>转换</strong>可以从起点到达终点，则返回 <code>True&nbsp;</code>，否则返回&nbsp;<code>False</code>。</p> \n<pre><strong>示例:</strong>\n<strong>输入:</strong> sx = 1, sy = 1, tx = 3, ty = 5\n<strong>输出:</strong> True\n<strong>解释:\n</strong>可以通过以下一系列<strong>转换</strong>从起点转换到终点：\n(1, 1) -&gt; (1, 2)\n(1, 2) -&gt; (3, 2)\n(3, 2) -&gt; (3, 5)\n\n<strong>输入:</strong> sx = 1, sy = 1, tx = 2, ty = 2\n<strong>输出:</strong> False\n\n<strong>输入:</strong> sx = 1, sy = 1, tx = 1, ty = 1\n<strong>输出:</strong> True\n\n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>sx, sy, tx, ty</code>&nbsp;是范围在&nbsp;<code>[1, 10^9]</code>&nbsp;的整数。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('781. 森林中的兔子', '<p>森林中，每个兔子都有颜色。其中一些兔子（可能是全部）告诉你还有多少其他的兔子和自己有相同的颜色。我们将这些回答放在&nbsp;<code>answers</code>&nbsp;数组里。</p> \n<p>返回森林中兔子的最少数量。</p> \n<pre><strong>示例:</strong>\n<strong>输入:</strong> answers = [1, 1, 2]\n<strong>输出:</strong> 5\n<strong>解释:</strong>\n两只回答了 \"1\" 的兔子可能有相同的颜色，设为红色。\n之后回答了 \"2\" 的兔子不会是红色，否则他们的回答会相互矛盾。\n设回答了 \"2\" 的兔子为蓝色。\n此外，森林中还应有另外 2 只蓝色兔子的回答没有包含在数组中。\n因此森林中兔子的最少数量是 5: 3 只回答的和 2 只没有回答的。\n\n<strong>输入:</strong> answers = [10, 10, 10]\n<strong>输出:</strong> 11\n\n<strong>输入:</strong> answers = []\n<strong>输出:</strong> 0\n</pre> \n<p><strong>说明:</strong></p> \n<ol> \n <li><code>answers</code>&nbsp;的长度最大为<code>1000</code>。</li> \n <li><code>answers[i]</code>&nbsp;是在&nbsp;<code>[0, 999]</code>&nbsp;范围内的整数。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('782. 变为棋盘', '<p>一个 N&nbsp;x N的 <code>board</code>&nbsp;仅由&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;组成&nbsp;。每次移动，你能任意交换两列或是两行的位置。</p> \n<p>输出将这个矩阵变为 “棋盘” 所需的最小移动次数。“棋盘” 是指任意一格的上下左右四个方向的值均与本身不同的矩阵。如果不存在可行的变换，输出 -1。</p> \n<pre><strong>示例:</strong>\n<strong>输入:</strong> board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\n<strong>输出:</strong> 2\n<strong>解释:</strong>\n一种可行的变换方式如下，从左到右：\n\n0110     1010     1010\n0110 --&gt; 1010 --&gt; 0101\n1001     0101     1010\n1001     0101     0101\n\n第一次移动交换了第一列和第二列。\n第二次移动交换了第二行和第三行。\n\n\n<strong>输入:</strong> board = [[0, 1], [1, 0]]\n<strong>输出:</strong> 0\n<strong>解释:</strong>\n注意左上角的格值为0时也是合法的棋盘，如：\n\n01\n10\n\n也是合法的棋盘.\n\n<strong>输入:</strong> board = [[1, 0], [1, 0]]\n<strong>输出:</strong> -1\n<strong>解释:</strong>\n任意的变换都不能使这个输入变为合法的棋盘。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>board</code>&nbsp;是方阵，且行列数的范围是<code>[2, 30]</code>。</li> \n <li><code>board[i][j]</code>&nbsp;将只包含&nbsp;<code>0</code>或&nbsp;<code>1</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('783. 二叉搜索树节点最小距离', '<p>给你一个二叉搜索树的根节点 <code>root</code> ，返回 <strong>树中任意两不同节点值之间的最小差值</strong> 。</p> \n<p><strong>注意：</strong>本题与 530：<a href=\"https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/\">https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/</a> 相同</p> \n<p>&nbsp;</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p><strong>示例 1：</strong></p> \n  <img style=\"width: 292px; height: 301px;\" src=\"https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>root = [4,2,6,1,3]\n<strong>输出：</strong>1\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <img style=\"width: 282px; height: 301px;\" src=\"https://assets.leetcode.com/uploads/2021/02/05/bst2.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>root = [1,0,48,null,null,12,49]\n<strong>输出：</strong>1\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li>树中节点数目在范围 <code>[2, 100]</code> 内</li> \n   <li><code>0 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> \n   <li>差值是一个正数，其数值等于两值之差的绝对值</li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('784. 字母大小写全排列', '<p>给定一个字符串<code>S</code>，通过将字符串<code>S</code>中的每个字母转变大小写，我们可以获得一个新的字符串。返回所有可能得到的字符串集合。</p> \n<p>&nbsp;</p> \n<pre><strong>示例：</strong>\n<strong>输入：</strong>S = \"a1b2\"\n<strong>输出：</strong>[\"a1b2\", \"a1B2\", \"A1b2\", \"A1B2\"]\n\n<strong>输入：</strong>S = \"3z4\"\n<strong>输出：</strong>[\"3z4\", \"3Z4\"]\n\n<strong>输入：</strong>S = \"12345\"\n<strong>输出：</strong>[\"12345\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>S</code>&nbsp;的长度不超过<code>12</code>。</li> \n <li><code>S</code>&nbsp;仅由数字和字母组成。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('785. 判断二分图', '存在一个 \n<strong>无向图</strong> ，图中有 \n<code>n</code> 个节点。其中每个节点都有一个介于 \n<code>0</code> 到 \n<code>n - 1</code> 之间的唯一编号。给你一个二维数组 \n<code>graph</code> ，其中 \n<code>graph[u]</code> 是一个节点数组，由节点 \n<code>u</code> 的邻接节点组成。形式上，对于&nbsp;\n<code>graph[u]</code> 中的每个 \n<code>v</code> ，都存在一条位于节点 \n<code>u</code> 和节点 \n<code>v</code> 之间的无向边。该无向图同时具有以下属性： \n<ul> \n <li>不存在自环（<code>graph[u]</code> 不包含 <code>u</code>）。</li> \n <li>不存在平行边（<code>graph[u]</code> 不包含重复值）。</li> \n <li>如果 <code>v</code> 在 <code>graph[u]</code> 内，那么 <code>u</code> 也应该在 <code>graph[v]</code> 内（该图是无向图）</li> \n <li>这个图可能不是连通图，也就是说两个节点 <code>u</code> 和 <code>v</code> 之间可能不存在一条连通彼此的路径。</li> \n</ul> \n<p><strong>二分图</strong> 定义：如果能将一个图的节点集合分割成两个独立的子集 <code>A</code> 和 <code>B</code> ，并使图中的每一条边的两个节点一个来自 <code>A</code> 集合，一个来自 <code>B</code> 集合，就将这个图称为 <strong>二分图</strong> 。</p> \n<p>如果图是二分图，返回 <code>true</code><em> </em>；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 222px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\n<strong>输出：</strong>false\n<strong>解释：</strong><code>不能将节点分割成两个独立的子集，</code>以使每条边都连通一个子集中的一个节点与另一个子集中的一个节点。</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 222px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>graph = [[1,3],[0,2],[1,3],[0,2]]\n<strong>输出：</strong>true\n<strong>解释：</strong><code>可以将节点分成两组: {0, 2} 和 {1, 3} 。</code></pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>graph.length == n</code></li> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>0 &lt;= graph[u].length &lt; n</code></li> \n <li><code>0 &lt;= graph[u][i] &lt;= n - 1</code></li> \n <li><code>graph[u]</code> 不会包含 <code>u</code></li> \n <li><code>graph[u]</code> 的所有值 <strong>互不相同</strong></li> \n <li>如果 <code>graph[u]</code> 包含 <code>v</code>，那么 <code>graph[v]</code> 也会包含 <code>u</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('786. 第 K 个最小的素数分数', '<p>给你一个按递增顺序排序的数组 <code>arr</code> 和一个整数 <code>k</code> 。数组 <code>arr</code> 由 <code>1</code> 和若干 <strong>素数</strong>&nbsp; 组成，且其中所有整数互不相同。</p> \n<p>对于每对满足 <code>0 &lt; i &lt; j &lt; arr.length</code> 的 <code>i</code> 和 <code>j</code> ，可以得到分数 <code>arr[i] / arr[j]</code> 。</p> \n<p>那么第&nbsp;<code>k</code>&nbsp;个最小的分数是多少呢?&nbsp; 以长度为 2 的整数数组返回你的答案, 这里&nbsp;<code>answer[0] == arr[i]</code>&nbsp;且&nbsp;<code>answer[1] == arr[j]</code> 。</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,3,5], k = 3\n<strong>输出：</strong>[2,5]\n<strong>解释：</strong>已构造好的分数,排序后如下所示: \n1/5, 1/3, 2/5, 1/2, 3/5, 2/3\n很明显第三个最小的分数是 2/5\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,7], k = 1\n<strong>输出：</strong>[1,7]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= arr.length &lt;= 1000</code></li> \n <li><code>1 &lt;= arr[i] &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>arr[0] == 1</code></li> \n <li><code>arr[i]</code> 是一个 <strong>素数</strong> ，<code>i &gt; 0</code></li> \n <li><code>arr</code> 中的所有数字 <strong>互不相同</strong> ，且按 <strong>严格递增</strong> 排序</li> \n <li><code>1 &lt;= k &lt;= arr.length * (arr.length - 1) / 2</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('787. K 站中转内最便宜的航班', '<p>有 <code>n</code> 个城市通过一些航班连接。给你一个数组&nbsp;<code>flights</code> ，其中&nbsp;<code>flights[i] = [from<sub>i</sub>, to<sub>i</sub>, price<sub>i</sub>]</code> ，表示该航班都从城市 <code>from<sub>i</sub></code> 开始，以价格 <code>price<sub>i</sub></code> 抵达 <code>to<sub>i</sub></code>。</p> \n<p>现在给定所有的城市和航班，以及出发城市 <code>src</code> 和目的地 <code>dst</code>，你的任务是找到出一条最多经过 <code>k</code>&nbsp;站中转的路线，使得从 <code>src</code> 到 <code>dst</code> 的 <strong>价格最便宜</strong> ，并返回该价格。 如果不存在这样的路线，则输出 <code>-1</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 1\n<strong>输出:</strong> 200\n<strong>解释:</strong> \n城市航班图如下\n<img style=\"height: 180px; width: 246px;\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" alt=\"\">\n\n从城市 0 到城市 2 在 1 站中转以内的最便宜价格是 200，如图中红色所示。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 0\n<strong>输出:</strong> 500\n<strong>解释:</strong> \n城市航班图如下\n<img style=\"height: 180px; width: 246px;\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" alt=\"\">\n\n从城市 0 到城市 2 在 0 站中转以内的最便宜价格是 500，如图中蓝色所示。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>0 &lt;= flights.length &lt;= (n * (n - 1) / 2)</code></li> \n <li><code>flights[i].length == 3</code></li> \n <li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt; n</code></li> \n <li><code>from<sub>i</sub> != to<sub>i</sub></code></li> \n <li><code>1 &lt;= price<sub>i</sub> &lt;= 10<sup>4</sup></code></li> \n <li>航班没有重复，且不存在自环</li> \n <li><code>0 &lt;= src, dst, k &lt; n</code></li> \n <li><code>src != dst</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('787. K 站中转内最便宜的航班', '<p>有 <code>n</code> 个城市通过一些航班连接。给你一个数组&nbsp;<code>flights</code> ，其中&nbsp;<code>flights[i] = [from<sub>i</sub>, to<sub>i</sub>, price<sub>i</sub>]</code> ，表示该航班都从城市 <code>from<sub>i</sub></code> 开始，以价格 <code>price<sub>i</sub></code> 抵达 <code>to<sub>i</sub></code>。</p> \n<p>现在给定所有的城市和航班，以及出发城市 <code>src</code> 和目的地 <code>dst</code>，你的任务是找到出一条最多经过 <code>k</code>&nbsp;站中转的路线，使得从 <code>src</code> 到 <code>dst</code> 的 <strong>价格最便宜</strong> ，并返回该价格。 如果不存在这样的路线，则输出 <code>-1</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 1\n<strong>输出:</strong> 200\n<strong>解释:</strong> \n城市航班图如下\n<img style=\"height: 180px; width: 246px;\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" alt=\"\">\n\n从城市 0 到城市 2 在 1 站中转以内的最便宜价格是 200，如图中红色所示。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 0\n<strong>输出:</strong> 500\n<strong>解释:</strong> \n城市航班图如下\n<img style=\"height: 180px; width: 246px;\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" alt=\"\">\n\n从城市 0 到城市 2 在 0 站中转以内的最便宜价格是 500，如图中蓝色所示。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>0 &lt;= flights.length &lt;= (n * (n - 1) / 2)</code></li> \n <li><code>flights[i].length == 3</code></li> \n <li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt; n</code></li> \n <li><code>from<sub>i</sub> != to<sub>i</sub></code></li> \n <li><code>1 &lt;= price<sub>i</sub> &lt;= 10<sup>4</sup></code></li> \n <li>航班没有重复，且不存在自环</li> \n <li><code>0 &lt;= src, dst, k &lt; n</code></li> \n <li><code>src != dst</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('788. 旋转数字', '<p>我们称一个数 X 为好数, 如果它的每位数字逐个地被旋转 180 度后，我们仍可以得到一个有效的，且和 X 不同的数。要求每位数字都要被旋转。</p> \n<p>如果一个数的每位数字被旋转以后仍然还是一个数字，&nbsp;则这个数是有效的。0, 1, 和 8 被旋转后仍然是它们自己；2 和 5 可以互相旋转成对方（在这种情况下，它们以不同的方向旋转，换句话说，2 和 5 互为镜像）；6 和 9 同理，除了这些以外其他的数字旋转以后都不再是有效的数字。</p> \n<p>现在我们有一个正整数&nbsp;<code>N</code>, 计算从&nbsp;<code>1</code> 到&nbsp;<code>N</code> 中有多少个数&nbsp;X 是好数？</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入:</strong> 10\n<strong>输出:</strong> 4\n<strong>解释:</strong> \n在[1, 10]中有四个好数： 2, 5, 6, 9。\n注意 1 和 10 不是好数, 因为他们在旋转之后不变。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>N&nbsp;的取值范围是&nbsp;<code>[1, 10000]</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('789. 逃脱阻碍者', '<p>你在进行一个简化版的吃豆人游戏。你从 <code>[0, 0]</code> 点开始出发，你的目的地是&nbsp;<code>target = [x<sub>target</sub>, y<sub>target</sub>]</code> 。地图上有一些阻碍者，以数组 <code>ghosts</code> 给出，第 <code>i</code> 个阻碍者从&nbsp;<code>ghosts[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>&nbsp;出发。所有输入均为 <strong>整数坐标</strong> 。</p> \n<p>每一回合，你和阻碍者们可以同时向东，西，南，北四个方向移动，每次可以移动到距离原位置 <strong>1 个单位</strong> 的新位置。当然，也可以选择 <strong>不动</strong> 。所有动作 <strong>同时</strong> 发生。</p> \n<p>如果你可以在任何阻碍者抓住你 <strong>之前</strong> 到达目的地（阻碍者可以采取任意行动方式），则被视为逃脱成功。如果你和阻碍者同时到达了一个位置（包括目的地）都不算是逃脱成功。</p> \n<p>只有在你有可能成功逃脱时，输出 <code>true</code> ；否则，输出 <code>false</code> 。</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>ghosts = [[1,0],[0,3]], target = [0,1]\n<strong>输出：</strong>true\n<strong>解释：</strong>你可以直接一步到达目的地 (0,1) ，在 (1, 0) 或者 (0, 3) 位置的阻碍者都不可能抓住你。 \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>ghosts = [[1,0]], target = [2,0]\n<strong>输出：</strong>false\n<strong>解释：</strong>你需要走到位于 (2, 0) 的目的地，但是在 (1, 0) 的阻碍者位于你和目的地之间。 \n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>ghosts = [[2,0]], target = [1,0]\n<strong>输出：</strong>false\n<strong>解释：</strong>阻碍者可以和你同时达到目的地。 \n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>ghosts = [[5,0],[-10,-2],[0,-5],[-2,-2],[-7,1]], target = [7,7]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>ghosts = [[-1,0],[0,1],[-1,0],[0,1],[-1,0]], target = [0,0]\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= ghosts.length &lt;= 100</code></li> \n <li><code>ghosts[i].length == 2</code></li> \n <li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li> \n <li>同一位置可能有 <strong>多个阻碍者</strong> 。</li> \n <li><code>target.length == 2</code></li> \n <li><code>-10<sup>4</sup> &lt;= x<sub>target</sub>, y<sub>target</sub> &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('79. 单词搜索', '<p>给定一个&nbsp;<code>m x n</code> 二维字符网格&nbsp;<code>board</code> 和一个字符串单词&nbsp;<code>word</code> 。如果&nbsp;<code>word</code> 存在于网格中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 322px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/11/04/word2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 322px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 322px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/10/15/word3.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == board.length</code></li> \n <li><code>n = board[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 6</code></li> \n <li><code>1 &lt;= word.length &lt;= 15</code></li> \n <li><code>board</code> 和 <code>word</code> 仅由大小写英文字母组成</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你可以使用搜索剪枝的技术来优化解决方案，使其在 <code>board</code> 更大的情况下可以更快解决问题？</p>');
INSERT INTO `leecode` VALUES ('790. 多米诺和托米诺平铺', '<p>有两种形状的瓷砖：一种是&nbsp;2x1 的多米诺形，另一种是形如&nbsp;\"L\" 的托米诺形。两种形状都可以旋转。</p> \n<pre>XX  &lt;- 多米诺\n\nXX  &lt;- \"L\" 托米诺\nX\n</pre> \n<p>给定&nbsp;N 的值，有多少种方法可以平铺&nbsp;2 x N 的面板？<strong>返回值 mod 10^9 + 7</strong>。</p> \n<p>（平铺指的是每个正方形都必须有瓷砖覆盖。两个平铺不同，当且仅当面板上有四个方向上的相邻单元中的两个，使得恰好有一个平铺有一个瓷砖占据两个正方形。）</p> \n<pre><strong>示例:</strong>\n<strong>输入:</strong> 3\n<strong>输出:</strong> 5\n<strong>解释:</strong> \n下面列出了五种不同的方法，不同字母代表不同瓷砖：\nXYZ XXZ XYY XXY XYY\nXYZ YYZ XZZ XYY XXY</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li>N&nbsp; 的范围是&nbsp;<code>[1, 1000]</code></li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('791. 自定义字符串排序', '<p>字符串<code>S</code>和 <code>T</code> 只包含小写字符。在<code>S</code>中，所有字符只会出现一次。</p> \n<p><code>S</code> 已经根据某种规则进行了排序。我们要根据<code>S</code>中的字符顺序对<code>T</code>进行排序。更具体地说，如果<code>S</code>中<code>x</code>在<code>y</code>之前出现，那么返回的字符串中<code>x</code>也应出现在<code>y</code>之前。</p> \n<p>返回任意一种符合条件的字符串<code>T</code>。</p> \n<pre><strong>示例:</strong>\n<strong>输入:</strong>\nS = \"cba\"\nT = \"abcd\"\n<strong>输出:</strong> \"cbad\"\n<strong>解释:</strong> \nS中出现了字符 \"a\", \"b\", \"c\", 所以 \"a\", \"b\", \"c\" 的顺序应该是 \"c\", \"b\", \"a\". \n由于 \"d\" 没有在S中出现, 它可以放在T的任意位置. \"dcba\", \"cdba\", \"cbda\" 都是合法的输出。\n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>S</code>的最大长度为<code>26</code>，其中没有重复的字符。</li> \n <li><code>T</code>的最大长度为<code>200</code>。</li> \n <li><code>S</code>和<code>T</code>只包含小写字符。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('792. 匹配子序列的单词数', '<p>给定字符串 <code>S</code> 和单词字典 <code>words</code>, 求&nbsp;<code>words[i]</code>&nbsp;中是&nbsp;<code>S</code>&nbsp;的子序列的单词个数。</p> \n<pre><strong>示例:</strong>\n<strong>输入:</strong> \nS = \"abcde\"\nwords = [\"a\", \"bb\", \"acd\", \"ace\"]\n<strong>输出:</strong> 3\n<strong>解释:</strong> 有三个是&nbsp;S 的子序列的单词: \"a\", \"acd\", \"ace\"。\n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li>所有在<code>words</code>和&nbsp;<code>S</code>&nbsp;里的单词都只由小写字母组成。</li> \n <li><code>S</code> 的长度在&nbsp;<code>[1, 50000]</code>。</li> \n <li><code>words</code>&nbsp;的长度在&nbsp;<code>[1, 5000]</code>。</li> \n <li><code>words[i]</code>的长度在<code>[1, 50]</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('793. 阶乘函数后 K 个零', '<p>&nbsp;<code>f(x)</code>&nbsp;是&nbsp;<code>x!</code>&nbsp;末尾是 0 的数量。（回想一下&nbsp;<code>x! = 1 * 2 * 3 * ... * x</code>，且 <code>0! = 1</code> ）</p> \n<p>例如，&nbsp;<code>f(3) = 0</code>&nbsp;，因为 3! = 6 的末尾没有 0 ；而 <code>f(11) = 2</code>&nbsp;，因为 11!= 39916800 末端有 2 个 0 。给定&nbsp;<code>K</code>，找出多少个非负整数 <code>x</code>&nbsp;，能满足 <code>f(x) = K</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong><strong> </strong></p> \n<pre><strong>输入：</strong>K = 0<strong>\n输出：</strong>5<strong>\n解释：</strong>0!, 1!, 2!, 3!, and 4!&nbsp;均符合 K = 0 的条件。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>K = 5\n<strong>输出：</strong>0\n<strong>解释：</strong>没有匹配到这样的 x!，符合 K = 5 的条件。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li> <p><code>K</code> 是范围在&nbsp;<code>[0, 10^9]</code>&nbsp;的整数<strong>。</strong></p> </li> \n</ul>');
INSERT INTO `leecode` VALUES ('794. 有效的井字游戏', '<p>用字符串数组作为井字游戏的游戏板&nbsp;<code>board</code>。当且仅当在井字游戏过程中，玩家有可能将字符放置成游戏板所显示的状态时，才返回 true。</p> \n<p>该游戏板是一个 3 x 3 数组，由字符&nbsp;<code>\" \"</code>，<code>\"X\"</code>&nbsp;和&nbsp;<code>\"O\"</code>&nbsp;组成。字符&nbsp;<code>\" \"</code>&nbsp;代表一个空位。</p> \n<p>以下是井字游戏的规则：</p> \n<ul> \n <li>玩家轮流将字符放入空位（\" \"）中。</li> \n <li>第一个玩家总是放字符 “X”，且第二个玩家总是放字符 “O”。</li> \n <li>“X” 和 “O” 只允许放置在空位中，不允许对已放有字符的位置进行填充。</li> \n <li>当有 3 个相同（且非空）的字符填充任何行、列或对角线时，游戏结束。</li> \n <li>当所有位置非空时，也算为游戏结束。</li> \n <li>如果游戏结束，玩家不允许再放置字符。</li> \n</ul> \n<pre><strong>示例 1:</strong>\n<strong>输入:</strong> board = [\"O&nbsp; \", \"&nbsp; &nbsp;\", \"&nbsp; &nbsp;\"]\n<strong>输出:</strong> false\n<strong>解释:</strong> 第一个玩家总是放置“X”。\n\n<strong>示例 2:</strong>\n<strong>输入:</strong> board = [\"XOX\", \" X \", \"   \"]\n<strong>输出:</strong> false\n<strong>解释:</strong> 玩家应该是轮流放置的。\n\n<strong>示例 3:</strong>\n<strong>输入:</strong> board = [\"XXX\", \"   \", \"OOO\"]\n<strong>输出:</strong> false\n\n<strong>示例 4:</strong>\n<strong>输入:</strong> board = [\"XOX\", \"O O\", \"XOX\"]\n<strong>输出:</strong> true\n</pre> \n<p><strong>说明:</strong></p> \n<ul> \n <li>游戏板&nbsp;<code>board</code>&nbsp;是长度为 3 的字符串数组，其中每个字符串&nbsp;<code>board[i]</code>&nbsp;的长度为&nbsp;3。</li> \n <li>&nbsp;<code>board[i][j]</code>&nbsp;是集合&nbsp;<code>{\" \", \"X\", \"O\"}</code>&nbsp;中的一个字符。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('795. 区间子数组个数', '<p>给定一个元素都是正整数的数组<code>A</code>&nbsp;，正整数 <code>L</code>&nbsp;以及&nbsp;<code>R</code>&nbsp;(<code>L &lt;= R</code>)。</p> \n<p>求连续、非空且其中最大元素满足大于等于<code>L</code>&nbsp;小于等于<code>R</code>的子数组个数。</p> \n<pre><strong>例如 :</strong>\n<strong>输入:</strong> \nA = [2, 1, 4, 3]\nL = 2\nR = 3\n<strong>输出:</strong> 3\n<strong>解释:</strong> 满足条件的子数组: [2], [2, 1], [3].\n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li>L, R&nbsp; 和&nbsp;<code>A[i]</code> 都是整数，范围在&nbsp;<code>[0, 10^9]</code>。</li> \n <li>数组&nbsp;<code>A</code>&nbsp;的长度范围在<code>[1, 50000]</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('796. 旋转字符串', '<p>给定两个字符串, <code>A</code>&nbsp;和&nbsp;<code>B</code>。</p> \n<p><code>A</code>&nbsp;的旋转操作就是将&nbsp;<code>A</code> 最左边的字符移动到最右边。&nbsp;例如, 若&nbsp;<code>A = \'abcde\'</code>，在移动一次之后结果就是<code>\'bcdea\'</code>&nbsp;。如果在若干次旋转操作之后，<code>A</code>&nbsp;能变成<code>B</code>，那么返回<code>True</code>。</p> \n<pre><strong>示例 1:</strong>\n<strong>输入:</strong> A = \'abcde\', B = \'cdeab\'\n<strong>输出:</strong> true\n\n<strong>示例 2:</strong>\n<strong>输入:</strong> A = \'abcde\', B = \'abced\'\n<strong>输出:</strong> false</pre> \n<p><strong>注意：</strong></p> \n<ul> \n <li><code>A</code> 和&nbsp;<code>B</code>&nbsp;长度不超过&nbsp;<code>100</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('797. 所有可能的路径', '<p>给你一个有&nbsp;<code>n</code>&nbsp;个节点的 <strong>有向无环图（DAG）</strong>，请你找出所有从节点 <code>0</code>&nbsp;到节点 <code>n-1</code>&nbsp;的路径并输出（<strong>不要求按特定顺序</strong>）</p> \n<p>二维数组的第 <code>i</code> 个数组中的单元都表示有向图中 <code>i</code> 号节点所能到达的下一些节点，空就是没有下一个结点了。</p> \n<p>译者注：有向图是有方向的，即规定了 a→b 你就不能从 b→a 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 242px; width: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>graph = [[1,2],[3],[3],[]]\n<strong>输出：</strong>[[0,1,3],[0,2,3]]\n<strong>解释：</strong>有两条路径 0 -&gt; 1 -&gt; 3 和 0 -&gt; 2 -&gt; 3\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 301px; width: 423px;\" src=\"https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>graph = [[4,3,1],[3,2,4],[3],[4],[]]\n<strong>输出：</strong>[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>graph = [[1],[]]\n<strong>输出：</strong>[[0,1]]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>graph = [[1,2,3],[2],[3],[]]\n<strong>输出：</strong>[[0,1,2,3],[0,2,3],[0,3]]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>graph = [[1,3],[2],[3],[]]\n<strong>输出：</strong>[[0,1,2,3],[0,3]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == graph.length</code></li> \n <li><code>2 &lt;= n &lt;= 15</code></li> \n <li><code>0 &lt;= graph[i][j] &lt; n</code></li> \n <li><code>graph[i][j] != i</code>（即，不存在自环）</li> \n <li><code>graph[i]</code> 中的所有元素 <strong>互不相同</strong></li> \n <li>保证输入为 <strong>有向无环图（DAG）</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('798. 得分最高的最小轮调', '<p>给定一个数组&nbsp;<code>A</code>，我们可以将它按一个非负整数 <code>K</code>&nbsp;进行轮调，这样可以使数组变为&nbsp;<code>A[K], A[K+1], A{K+2], ... A[A.length - 1], A[0], A[1], ..., A[K-1]</code>&nbsp;的形式。此后，任何值小于或等于其索引的项都可以记作一分。</p> \n<p>例如，如果数组为&nbsp;<code>[2, 4, 1, 3, 0]</code>，我们按&nbsp;<code>K = 2</code>&nbsp;进行轮调后，它将变成&nbsp;<code>[1, 3, 0, 2, 4]</code>。这将记作 3 分，因为 1 &gt; 0 [no points], 3 &gt; 1 [no points], 0 &lt;= 2 [one point], 2 &lt;= 3 [one point], 4 &lt;= 4 [one point]。</p> \n<p>在所有可能的轮调中，返回我们所能得到的最高分数对应的轮调索引 K。如果有多个答案，返回满足条件的最小的索引 K。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[2, 3, 1, 4, 0]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n下面列出了每个 K 的得分：\nK = 0,  A = [2,3,1,4,0],    score 2\nK = 1,  A = [3,1,4,0,2],    score 3\nK = 2,  A = [1,4,0,2,3],    score 3\nK = 3,  A = [4,0,2,3,1],    score 4\nK = 4,  A = [0,2,3,1,4],    score 3\n所以我们应当选择&nbsp;K = 3，得分最高。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[1, 3, 0, 2, 4]\n<strong>输出：</strong>0\n<strong>解释：</strong>\nA 无论怎么变化总是有 3 分。\n所以我们将选择最小的 K，即 0。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>A</code>&nbsp;的长度最大为&nbsp;<code>20000</code>。</li> \n <li><code>A[i]</code> 的取值范围是&nbsp;<code>[0, A.length]</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('799. 香槟塔', '<p>我们把玻璃杯摆成金字塔的形状，其中第一层有1个玻璃杯，第二层有2个，依次类推到第100层，每个玻璃杯(250ml)将盛有香槟。</p> \n<p>从顶层的第一个玻璃杯开始倾倒一些香槟，当顶层的杯子满了，任何溢出的香槟都会立刻等流量的流向左右两侧的玻璃杯。当左右两边的杯子也满了，就会等流量的流向它们左右两边的杯子，依次类推。（当最底层的玻璃杯满了，香槟会流到地板上）</p> \n<p>例如，在倾倒一杯香槟后，最顶层的玻璃杯满了。倾倒了两杯香槟后，第二层的两个玻璃杯各自盛放一半的香槟。在倒三杯香槟后，第二层的香槟满了 - 此时总共有三个满的玻璃杯。在倒第四杯后，第三层中间的玻璃杯盛放了一半的香槟，他两边的玻璃杯各自盛放了四分之一的香槟，如下图所示。</p> \n<p><img style=\"height:200px; width:290px\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/09/tower.png\" alt=\"\"></p> \n<p>现在当倾倒了非负整数杯香槟后，返回第 i 行 j 个玻璃杯所盛放的香槟占玻璃杯容积的比例（i 和 j都从0开始）。</p> \n<p>&nbsp;</p> \n<pre><strong>示例 1:</strong>\n<strong>输入:</strong> poured(倾倒香槟总杯数) = 1, query_glass(杯子的位置数) = 1, query_row(行数) = 1\n<strong>输出:</strong> 0.0\n<strong>解释:</strong> 我们在顶层（下标是（0，0））倒了一杯香槟后，没有溢出，因此所有在顶层以下的玻璃杯都是空的。\n\n<strong>示例 2:</strong>\n<strong>输入:</strong> poured(倾倒香槟总杯数) = 2, query_glass(杯子的位置数) = 1, query_row(行数) = 1\n<strong>输出:</strong> 0.5\n<strong>解释:</strong> 我们在顶层（下标是（0，0）倒了两杯香槟后，有一杯量的香槟将从顶层溢出，位于（1，0）的玻璃杯和（1，1）的玻璃杯平分了这一杯香槟，所以每个玻璃杯有一半的香槟。\n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>poured</code>&nbsp;的范围<code>[0, 10 ^ 9]</code>。</li> \n <li><code>query_glass</code>&nbsp;和<code>query_row</code>&nbsp;的范围&nbsp;<code>[0, 99]</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('8. 字符串转换整数 (atoi)', '<p>请你来实现一个&nbsp;<code>myAtoi(string s)</code>&nbsp;函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 <code>atoi</code> 函数）。</p> \n<p>函数&nbsp;<code>myAtoi(string s)</code> 的算法如下：</p> \n<ul> \n <li>读入字符串并丢弃无用的前导空格</li> \n <li>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li> \n <li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li> \n <li>将前面步骤读入的这些数字转换为整数（即，\"123\" -&gt; 123， \"0032\" -&gt; 32）。如果没有读入数字，则整数为 <code>0</code> 。必要时更改符号（从步骤 2 开始）。</li> \n <li>如果整数数超过 32 位有符号整数范围 <code>[−2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>− 1]</code> ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 <code>−2<sup>31</sup></code> 的整数应该被固定为 <code>−2<sup>31</sup></code> ，大于 <code>2<sup>31&nbsp;</sup>− 1</code> 的整数应该被固定为 <code>2<sup>31&nbsp;</sup>− 1</code> 。</li> \n <li>返回整数作为最终结果。</li> \n</ul> \n<p><strong>注意：</strong></p> \n<ul> \n <li>本题中的空白字符只包括空格字符 <code>\' \'</code> 。</li> \n <li>除前导空格或数字后的其余字符串外，<strong>请勿忽略</strong> 任何其他字符。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>s = \"42\"\n<strong>输出：</strong>42\n<strong>解释：</strong>加粗的字符串为已经读入的字符，插入符号是当前读取的字符。\n第 1 步：\"42\"（当前没有读入字符，因为没有前导空格）\n         ^\n第 2 步：\"42\"（当前没有读入字符，因为这里不存在 \'-\' 或者 \'+\'）\n         ^\n第 3 步：\"<strong>42</strong>\"（读入 \"42\"）\n           ^\n解析得到整数 42 。\n由于 \"42\" 在范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 内，最终结果为 42 。</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>s = \"   -42\"\n<strong>输出：</strong>-42\n<strong>解释：</strong>\n第 1 步：\"<strong>   </strong>-42\"（读入前导空格，但忽视掉）\n            ^\n第 2 步：\"   <strong>-</strong>42\"（读入 \'-\' 字符，所以结果应该是负数）\n             ^\n第 3 步：\"   -<strong>42</strong>\"（读入 \"42\"）\n               ^\n解析得到整数 -42 。\n由于 \"-42\" 在范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 内，最终结果为 -42 。\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<pre><strong>输入：</strong>s = \"4193 with words\"\n<strong>输出：</strong>4193\n<strong>解释：</strong>\n第 1 步：\"4193 with words\"（当前没有读入字符，因为没有前导空格）\n         ^\n第 2 步：\"4193 with words\"（当前没有读入字符，因为这里不存在 \'-\' 或者 \'+\'）\n         ^\n第 3 步：\"<strong>4193</strong> with words\"（读入 \"4193\"；由于下一个字符不是一个数字，所以读入停止）\n             ^\n解析得到整数 4193 。\n由于 \"4193\" 在范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 内，最终结果为 4193 。\n</pre> \n<p><strong>示例&nbsp;4：</strong></p> \n<pre><strong>输入：</strong>s = \"words and 987\"\n<strong>输出：</strong>0\n<strong>解释：</strong>\n第 1 步：\"words and 987\"（当前没有读入字符，因为没有前导空格）\n         ^\n第 2 步：\"words and 987\"（当前没有读入字符，因为这里不存在 \'-\' 或者 \'+\'）\n         ^\n第 3 步：\"words and 987\"（由于当前字符 \'w\' 不是一个数字，所以读入停止）\n         ^\n解析得到整数 0 ，因为没有读入任何数字。\n由于 0 在范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 内，最终结果为 0 。</pre> \n<p><strong>示例&nbsp;5：</strong></p> \n<pre><strong>输入：</strong>s = \"-91283472332\"\n<strong>输出：</strong>-2147483648\n<strong>解释：</strong>\n第 1 步：\"-91283472332\"（当前没有读入字符，因为没有前导空格）\n         ^\n第 2 步：\"<strong>-</strong>91283472332\"（读入 \'-\' 字符，所以结果应该是负数）\n          ^\n第 3 步：\"-<strong>91283472332</strong>\"（读入 \"91283472332\"）\n                     ^\n解析得到整数 -91283472332 。\n由于 -91283472332 小于范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 的下界，最终结果被截断为 -2<sup>31</sup> = -2147483648 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s.length &lt;= 200</code></li> \n <li><code>s</code> 由英文字母（大写和小写）、数字（<code>0-9</code>）、<code>\' \'</code>、<code>\'+\'</code>、<code>\'-\'</code> 和 <code>\'.\'</code> 组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('80. 删除有序数组中的重复项 II', '<p>给你一个有序数组 <code>nums</code> ，请你<strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\"> 原地</a></strong> 删除重复出现的元素，使每个元素 <strong>最多出现两次</strong> ，返回删除后数组的新长度。</p> \n<p>不要使用额外的数组空间，你必须在 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地 </a>修改输入数组 </strong>并在使用 O(1) 额外空间的条件下完成。</p> \n<p>&nbsp;</p> \n<p><strong>说明：</strong></p> \n<p>为什么返回数值是整数，但输出的答案是数组呢？</p> \n<p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p> \n<p>你可以想象内部操作如下:</p> \n<pre>// <strong>nums</strong> 是以“引用”方式传递的。也就是说，不对实参做任何拷贝\nint len = removeDuplicates(nums);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中<strong> 该长度范围内</strong> 的所有元素。\nfor (int i = 0; i &lt; len; i++) {\n&nbsp; &nbsp; print(nums[i]);\n}\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,1,2,2,3]\n<strong>输出：</strong>5, nums = [1,1,2,2,3]\n<strong>解释：</strong>函数应返回新长度 length = <strong><code>5</code></strong>, 并且原数组的前五个元素被修改为 <strong><code>1, 1, 2, 2,</code></strong> <strong>3 </strong>。 不需要考虑数组中超出新长度后面的元素。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,0,1,1,1,1,2,3,3]\n<strong>输出：</strong>7, nums = [0,0,1,1,2,3,3]\n<strong>解释：</strong>函数应返回新长度 length = <strong><code>7</code></strong>, 并且原数组的前五个元素被修改为&nbsp;<strong><code>0</code></strong>, <strong>0</strong>, <strong>1</strong>, <strong>1</strong>, <strong>2</strong>, <strong>3</strong>, <strong>3 。</strong> 不需要考虑数组中超出新长度后面的元素。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n <li><code>nums</code> 已按升序排列</li> \n</ul>');
INSERT INTO `leecode` VALUES ('801. 使序列递增的最小交换次数', '<p>我们有两个长度相等且不为空的整型数组&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;。</p> \n<p>我们可以交换&nbsp;<code>A[i]</code>&nbsp;和&nbsp;<code>B[i]</code>&nbsp;的元素。注意这两个元素在各自的序列中应该处于相同的位置。</p> \n<p>在交换过一些元素之后，数组&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;都应该是严格递增的（数组严格递增的条件仅为<code>A[0] &lt; A[1] &lt; A[2] &lt; ... &lt; A[A.length - 1]</code>）。</p> \n<p>给定数组&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;，请返回使得两个数组均保持严格递增状态的最小交换次数。假设给定的输入总是有效的。</p> \n<pre><strong>示例:</strong>\n<strong>输入:</strong> A = [1,3,5,4], B = [1,2,3,7]\n<strong>输出:</strong> 1\n<strong>解释: </strong>\n交换 A[3] 和 B[3] 后，两个数组如下:\nA = [1, 3, 5, 7] ， B = [1, 2, 3, 4]\n两个数组均为严格递增的。</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>A, B</code>&nbsp;两个数组的长度总是相等的，且长度的范围为&nbsp;<code>[1, 1000]</code>。</li> \n <li><code>A[i], B[i]</code>&nbsp;均为&nbsp;<code>[0, 2000]</code>区间内的整数。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('802. 找到最终的安全状态', '<p>在有向图中，以某个节点为起始节点，从该点出发，每一步沿着图中的一条有向边行走。如果到达的节点是终点（即它没有连出的有向边），则停止。</p> \n<p>对于一个起始节点，如果从该节点出发，<strong>无论每一步选择沿哪条有向边行走</strong>，最后必然在有限步内到达终点，则将该起始节点称作是 <strong>安全</strong> 的。</p> \n<p>返回一个由图中所有安全的起始节点组成的数组作为答案。答案数组中的元素应当按 <strong>升序</strong> 排列。</p> \n<p>该有向图有 <code>n</code> 个节点，按 <code>0</code> 到 <code>n - 1</code> 编号，其中 <code>n</code> 是&nbsp;<code>graph</code>&nbsp;的节点数。图以下述形式给出：<code>graph[i]</code> 是编号 <code>j</code> 节点的一个列表，满足 <code>(i, j)</code> 是图的一条有向边。</p> \n<p>&nbsp;</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p><strong>示例 1：</strong></p> \n  <img style=\"height: 171px; width: 600px;\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png\" alt=\"Illustration of graph\"> \n  <pre><strong>输入：</strong>graph = [[1,2],[2,3],[5],[0],[5],[],[]]\n<strong>输出：</strong>[2,4,5,6]\n<strong>解释：</strong>示意图如上。\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]\n<strong>输出：</strong>[4]\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>n == graph.length</code></li> \n   <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> \n   <li><code>0 &lt;= graph[i].length &lt;= n</code></li> \n   <li><code>graph[i]</code> 按严格递增顺序排列。</li> \n   <li>图中可能包含自环。</li> \n   <li>图中边的数目在范围 <code>[1, 4 * 10<sup>4</sup>]</code> 内。</li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('803. 打砖块', '<p>有一个 <code>m x n</code> 的二元网格，其中 <code>1</code> 表示砖块，<code>0</code> 表示空白。砖块 <strong>稳定</strong>（不会掉落）的前提是：</p> \n<ul> \n <li>一块砖直接连接到网格的顶部，或者</li> \n <li>至少有一块相邻（4&nbsp;个方向之一）砖块<strong> 稳定 </strong>不会掉落时</li> \n</ul> \n<p>给你一个数组 <code>hits</code> ，这是需要依次消除砖块的位置。每当消除&nbsp;<code>hits[i] = (rowi, coli)</code> 位置上的砖块时，对应位置的砖块（若存在）会消失，然后其他的砖块可能因为这一消除操作而掉落。一旦砖块掉落，它会立即从网格中消失（即，它不会落在其他稳定的砖块上）。</p> \n<p>返回一个数组 <code>result</code> ，其中 <code>result[i]</code> 表示第 <code>i</code> 次消除操作对应掉落的砖块数目。</p> \n<p><strong>注意</strong>，消除可能指向是没有砖块的空白位置，如果发生这种情况，则没有砖块掉落。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]\n<strong>输出：</strong>[2]\n<strong>解释：</strong>\n网格开始为：\n[[1,0,0,0]，\n [<strong>1</strong>,1,1,0]]\n消除 (1,0) 处加粗的砖块，得到网格：\n[[1,0,0,0]\n [0,<strong>1</strong>,<strong>1</strong>,0]]\n两个加粗的砖不再稳定，因为它们不再与顶部相连，也不再与另一个稳定的砖相邻，因此它们将掉落。得到网格：\n[[1,0,0,0],\n [0,0,0,0]]\n因此，结果为 [2] 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]\n<strong>输出：</strong>[0,0]\n<strong>解释：</strong>\n网格开始为：\n[[1,0,0,0],\n [1,<strong>1</strong>,0,0]]\n消除 (1,1) 处加粗的砖块，得到网格：\n[[1,0,0,0],\n [1,0,0,0]]\n剩下的砖都很稳定，所以不会掉落。网格保持不变：\n[[1,0,0,0], \n [<strong>1</strong>,0,0,0]]\n接下来消除 (1,0) 处加粗的砖块，得到网格：\n[[1,0,0,0],\n [0,0,0,0]]\n剩下的砖块仍然是稳定的，所以不会有砖块掉落。\n因此，结果为 [0,0] 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 200</code></li> \n <li><code>grid[i][j]</code> 为 <code>0</code> 或 <code>1</code></li> \n <li><code>1 &lt;= hits.length &lt;= 4 * 10<sup>4</sup></code></li> \n <li><code>hits[i].length == 2</code></li> \n <li><code>0 &lt;= x<sub>i&nbsp;</sub>&lt;= m - 1</code></li> \n <li><code>0 &lt;=&nbsp;y<sub>i</sub> &lt;= n - 1</code></li> \n <li>所有 <code>(x<sub>i</sub>, y<sub>i</sub>)</code> 互不相同</li> \n</ul>');
INSERT INTO `leecode` VALUES ('804. 唯一摩尔斯密码词', '<p>国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串，&nbsp;比如: <code>\"a\"</code> 对应 <code>\".-\"</code>, <code>\"b\"</code> 对应 <code>\"-...\"</code>, <code>\"c\"</code> 对应 <code>\"-.-.\"</code>, 等等。</p> \n<p>为了方便，所有26个英文字母对应摩尔斯密码表如下：</p> \n<pre>[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]</pre> \n<p>给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，\"cab\" 可以写成 \"-.-..--...\"，(即 \"-.-.\" + \".-\" + \"-...\" 字符串的结合)。我们将这样一个连接过程称作单词翻译。</p> \n<p>返回我们可以获得所有词不同单词翻译的数量。</p> \n<pre><strong>例如:</strong>\n<strong>输入:</strong> words = [\"gin\", \"zen\", \"gig\", \"msg\"]\n<strong>输出:</strong> 2\n<strong>解释: </strong>\n各单词翻译如下:\n\"gin\" -&gt; \"--...-.\"\n\"zen\" -&gt; \"--...-.\"\n\"gig\" -&gt; \"--...--.\"\n\"msg\" -&gt; \"--...--.\"\n\n共有 2 种不同翻译, \"--...-.\" 和 \"--...--.\".\n</pre> \n<p>&nbsp;</p> \n<p><strong>注意:</strong></p> \n<ul> \n <li>单词列表<code>words</code>&nbsp;的长度不会超过 <code>100</code>。</li> \n <li>每个单词&nbsp;<code>words[i]</code>的长度范围为&nbsp;<code>[1, 12]</code>。</li> \n <li>每个单词&nbsp;<code>words[i]</code>只包含小写字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('805. 数组的均值分割', '<p>给定的整数数组 A ，我们要将 A数组 中的每个元素移动到 B数组 或者 C数组中。（B数组和C数组在开始的时候都为空）</p> \n<p>返回<code>true</code> ，当且仅当在我们的完成这样的移动后，可使得B数组的平均值和C数组的平均值相等，并且B数组和C数组都不为空。</p> \n<pre><strong>示例:</strong>\n<strong>输入:</strong> \n[1,2,3,4,5,6,7,8]\n<strong>输出:</strong> true\n<strong>解释: </strong>我们可以将数组分割为 [1,4,5,8] 和 [2,3,6,7], 他们的平均值都是4.5。\n</pre> \n<p><strong>注意:</strong></p> \n<ul> \n <li><code>A</code> 数组的长度范围为 <code>[1, 30]</code>.</li> \n <li><code>A[i]</code> 的数据范围为 <code>[0, 10000]</code>.</li> \n</ul>');
INSERT INTO `leecode` VALUES ('806. 写字符串需要的行数', '<p>我们要把给定的字符串 <code>S</code>&nbsp;从左到右写到每一行上，每一行的最大宽度为100个单位，如果我们在写某个字母的时候会使这行超过了100 个单位，那么我们应该把这个字母写到下一行。我们给定了一个数组&nbsp;<code>widths</code>&nbsp;，这个数组&nbsp;widths[0] 代表 \'a\' 需要的单位，&nbsp;widths[1] 代表 \'b\' 需要的单位，...，&nbsp;widths[25] 代表 \'z\' 需要的单位。</p> \n<p>现在回答两个问题：至少多少行能放下<code>S</code>，以及最后一行使用的宽度是多少个单位？将你的答案作为长度为2的整数列表返回。</p> \n<pre><strong>示例 1:</strong>\n<strong>输入:</strong> \nwidths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\nS = \"abcdefghijklmnopqrstuvwxyz\"\n<strong>输出:</strong> [3, 60]\n<strong>解释: \n</strong>所有的字符拥有相同的占用单位10。所以书写所有的26个字母，\n我们需要2个整行和占用60个单位的一行。\n</pre> \n<pre><strong>示例 2:</strong>\n<strong>输入:</strong> \nwidths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\nS = \"bbbcccdddaaa\"\n<strong>输出:</strong> [2, 4]\n<strong>解释: \n</strong>除去字母\'a\'所有的字符都是相同的单位10，并且字符串 \"bbbcccdddaa\" 将会覆盖 9 * 10 + 2 * 4 = 98 个单位.\n最后一个字母 \'a\' 将会被写到第二行，因为第一行只剩下2个单位了。\n所以，这个答案是2行，第二行有4个单位宽度。\n</pre> \n<p>&nbsp;</p> \n<p><strong>注:</strong></p> \n<ul> \n <li>字符串&nbsp;<code>S</code> 的长度在&nbsp;[1, 1000] 的范围。</li> \n <li><code>S</code> 只包含小写字母。</li> \n <li><code>widths</code> 是长度为&nbsp;<code>26</code>的数组。</li> \n <li><code>widths[i]</code>&nbsp;值的范围在&nbsp;<code>[2, 10]</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('807. 保持城市天际线', '<p>在二维数组<code>grid</code>中，<code>grid[i][j]</code>代表位于某处的建筑物的高度。 我们被允许增加任何数量（不同建筑物的数量可能不同）的建筑物的高度。 高度 0 也被认为是建筑物。</p> \n<p>最后，从新数组的所有四个方向（即顶部，底部，左侧和右侧）观看的“天际线”必须与原始数组的天际线相同。 城市的天际线是从远处观看时，由所有建筑物形成的矩形的外部轮廓。 请看下面的例子。</p> \n<p>建筑物高度可以增加的最大总和是多少？</p> \n<pre><strong>例子：</strong>\n<strong>输入：</strong> grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\n<strong>输出：</strong> 35\n<strong>解释：</strong> \nThe grid is:\n[ [3, 0, 8, 4], \n  [2, 4, 5, 7],\n  [9, 2, 6, 3],\n  [0, 3, 1, 0] ]\n\n从数组竖直方向（即顶部，底部）看“天际线”是：[9, 4, 8, 7]\n从水平水平方向（即左侧，右侧）看“天际线”是：[8, 7, 9, 3]\n\n在不影响天际线的情况下对建筑物进行增高后，新数组如下：\n\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\n</pre> \n<p><strong>说明: </strong></p> \n<ul> \n <li><code>1 &lt; grid.length = grid[0].length &lt;= 50</code>。</li> \n <li>&nbsp;<code>grid[i][j]</code> 的高度范围是： <code>[0, 100]</code>。</li> \n <li>一座建筑物占据一个<code>grid[i][j]</code>：换言之，它们是 <code>1 x 1 x grid[i][j]</code> 的长方体。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('808. 分汤', '<p>有&nbsp;A&nbsp;和&nbsp;B 两种类型的汤。一开始每种类型的汤有&nbsp;<code>N</code>&nbsp;毫升。有四种分配操作：</p> \n<ol> \n <li>提供 100ml 的汤A 和 0ml 的汤B。</li> \n <li>提供 75ml 的汤A 和 25ml 的汤B。</li> \n <li>提供 50ml 的汤A 和 50ml 的汤B。</li> \n <li>提供 25ml 的汤A 和 75ml 的汤B。</li> \n</ol> \n<p>当我们把汤分配给某人之后，汤就没有了。每个回合，我们将从四种概率同为0.25的操作中进行分配选择。如果汤的剩余量不足以完成某次操作，我们将尽可能分配。当两种类型的汤都分配完时，停止操作。</p> \n<p>注意不存在先分配100 ml汤B的操作。</p> \n<p>需要返回的值：&nbsp;汤A先分配完的概率 + 汤A和汤B同时分配完的概率 / 2。</p> \n<pre><strong>示例:</strong>\n<strong>输入:</strong> N = 50\n<strong>输出:</strong> 0.625\n<strong>解释:\n</strong>如果我们选择前两个操作<strong>，</strong>A将首先变为空。对于第三个操作，A和B会同时变为空。对于第四个操作，B将首先变为空。<strong>\n</strong>所以A变为空的总概率加上A和B同时变为空的概率的一半是 0.25 *(1 + 1 + 0.5 + 0)= 0.625。\n</pre> \n<p><strong>注释: </strong></p> \n<ul> \n <li><code>0 &lt;= N &lt;= 10^9</code>。</li> \n <li> <p>返回值在&nbsp;<code>10^-6</code>&nbsp;的范围将被认为是正确的。</p> </li> \n</ul>');
INSERT INTO `leecode` VALUES ('809. 情感丰富的文字', '<p>有时候人们会用重复写一些字母来表示额外的感受，比如 <code>\"hello\" -&gt; \"heeellooo\"</code>, <code>\"hi\" -&gt; \"hiii\"</code>。我们将相邻字母都相同的一串字符定义为相同字母组，例如：\"h\", \"eee\", \"ll\", \"ooo\"。</p> \n<p>对于一个给定的字符串 S ，如果另一个单词能够通过将一些字母组扩张从而使其和 S 相同，我们将这个单词定义为可扩张的（stretchy）。扩张操作定义如下：选择一个字母组（包含字母&nbsp;<code>c</code>&nbsp;），然后往其中添加相同的字母&nbsp;<code>c</code>&nbsp;使其长度达到 3 或以上。</p> \n<p>例如，以&nbsp;\"hello\" 为例，我们可以对字母组&nbsp;\"o\" 扩张得到 \"hellooo\"，但是无法以同样的方法得到 \"helloo\" 因为字母组 \"oo\" 长度小于&nbsp;3。此外，我们可以进行另一种扩张 \"ll\" -&gt; \"lllll\" 以获得&nbsp;\"helllllooo\"。如果&nbsp;<code>S = \"helllllooo\"</code>，那么查询词&nbsp;\"hello\" 是可扩张的，因为可以对它执行这两种扩张操作使得&nbsp;<code>query = \"hello\" -&gt; \"hellooo\" -&gt;&nbsp;\"helllllooo\" = S</code>。</p> \n<p>输入一组查询单词，输出其中可扩张的单词数量。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong> \nS = \"heeellooo\"\nwords = [\"hello\", \"hi\", \"helo\"]\n<strong>输出：</strong>1\n<strong>解释</strong>：\n我们能通过扩张 \"hello\" 的 \"e\" 和 \"o\" 来得到 \"heeellooo\"。\n我们不能通过扩张 \"helo\" 来得到 \"heeellooo\" 因为 \"ll\" 的长度小于 3 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= len(S) &lt;= 100</code>。</li> \n <li><code>0 &lt;= len(words) &lt;= 100</code>。</li> \n <li><code>0 &lt;= len(words[i]) &lt;= 100</code>。</li> \n <li><code>S</code>&nbsp;和所有在&nbsp;<code>words</code>&nbsp;中的单词都只由小写字母组成。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('81. 搜索旋转排序数组 II', '<p>已知存在一个按非降序排列的整数数组 <code>nums</code> ，数组中的值不必互不相同。</p> \n<p>在传递给函数之前，<code>nums</code> 在预先未知的某个下标 <code>k</code>（<code>0 &lt;= k &lt; nums.length</code>）上进行了 <strong>旋转 </strong>，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 <strong>从 0 开始</strong> 计数）。例如， <code>[0,1,2,4,4,4,5,6,6,7]</code> 在下标 <code>5</code> 处经旋转后可能变为 <code>[4,5,6,6,7,0,1,2,4,4]</code> 。</p> \n<p>给你 <strong>旋转后</strong> 的数组 <code>nums</code> 和一个整数 <code>target</code> ，请你编写一个函数来判断给定的目标值是否存在于数组中。如果 <code>nums</code> 中存在这个目标值 <code>target</code> ，则返回 <code>true</code> ，否则返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>nums = [2<code>,5,6,0,0,1,2]</code>, target = 0\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>nums = [2<code>,5,6,0,0,1,2]</code>, target = 3\n<strong>输出：</strong>false</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 5000</code></li> \n <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n <li>题目数据保证 <code>nums</code> 在预先未知的某个下标上进行了旋转</li> \n <li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>这是 <a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/description/\">搜索旋转排序数组</a>&nbsp;的延伸题目，本题中的&nbsp;<code>nums</code>&nbsp; 可能包含重复元素。</li> \n <li>这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？</li> \n</ul>');
INSERT INTO `leecode` VALUES ('810. 黑板异或游戏', '<p>黑板上写着一个非负整数数组 <code>nums[i]</code> 。Alice 和 Bob 轮流从黑板上擦掉一个数字，Alice 先手。如果擦除一个数字后，剩余的所有数字按位异或运算得出的结果等于 0 的话，当前玩家游戏失败。&nbsp;(另外，如果只剩一个数字，按位异或运算得到它本身；如果无数字剩余，按位异或运算结果为&nbsp;0。）</p> \n<p>并且，轮到某个玩家时，如果当前黑板上所有数字按位异或运算结果等于 0，这个玩家获胜。</p> \n<p>假设两个玩家每步都使用最优解，当且仅当 Alice 获胜时返回 <code>true</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入:</strong> nums = [1, 1, 2]\n<strong>输出:</strong> false\n<strong>解释:</strong> \nAlice 有两个选择: 擦掉数字 1 或 2。\n如果擦掉 1, 数组变成 [1, 2]。剩余数字按位异或得到 1 XOR 2 = 3。那么 Bob 可以擦掉任意数字，因为 Alice 会成为擦掉最后一个数字的人，她总是会输。\n如果 Alice 擦掉 2，那么数组变成[1, 1]。剩余数字按位异或得到 1 XOR 1 = 0。Alice 仍然会输掉游戏。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= N &lt;= 1000</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 2^16</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('811. 子域名访问计数', '<p>一个网站域名，如\"discuss.leetcode.com\"，包含了多个子域名。作为顶级域名，常用的有\"com\"，下一级则有\"leetcode.com\"，最低的一级为\"discuss.leetcode.com\"。当我们访问域名\"discuss.leetcode.com\"时，也同时访问了其父域名\"leetcode.com\"以及顶级域名&nbsp;\"com\"。</p> \n<p>给定一个带访问次数和域名的组合，要求分别计算每个域名被访问的次数。其格式为访问次数+空格+地址，例如：\"9001 discuss.leetcode.com\"。</p> \n<p>接下来会给出一组访问次数和域名组合的列表<code>cpdomains</code>&nbsp;。要求解析出所有域名的访问次数，输出格式和输入格式相同，不限定先后顺序。</p> \n<pre><strong>示例 1:</strong>\n<strong>输入:</strong> \n[\"9001 discuss.leetcode.com\"]\n<strong>输出:</strong> \n[\"9001 discuss.leetcode.com\", \"9001 leetcode.com\", \"9001 com\"]\n<strong>说明:</strong> \n例子中仅包含一个网站域名：\"discuss.leetcode.com\"。按照前文假设，子域名\"leetcode.com\"和\"com\"都会被访问，所以它们都被访问了9001次。\n</pre> \n<pre><strong>示例 2\n输入:</strong> \n[\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"]\n<strong>输出:</strong> \n[\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"]\n<strong>说明:</strong> \n按照假设，会访问\"google.mail.com\" 900次，\"yahoo.com\" 50次，\"intel.mail.com\" 1次，\"wiki.org\" 5次。\n而对于父域名，会访问\"mail.com\" 900+1 = 901次，\"com\" 900 + 50 + 1 = 951次，和 \"org\" 5 次。\n</pre> \n<p><strong>注意事项：</strong></p> \n<ul> \n <li>&nbsp;<code>cpdomains</code>&nbsp;的长度小于&nbsp;<code>100</code>。</li> \n <li>每个域名的长度小于<code>100</code>。</li> \n <li>每个域名地址包含一个或两个\".\"符号。</li> \n <li>输入中任意一个域名的访问次数都小于<code>10000</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('812. 最大三角形面积', '<p>给定包含多个点的集合，从其中取三个点组成三角形，返回能组成的最大三角形的面积。</p> \n<pre><strong>示例:</strong>\n<strong>输入:</strong> points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n这五个点如下图所示。组成的橙色三角形是最大的，面积为2。\n</pre> \n<p><img style=\"height:328px; width:400px\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/04/1027.png\" alt=\"\"></p> \n<p><strong>注意: </strong></p> \n<ul> \n <li><code>3 &lt;= points.length &lt;= 50</code>.</li> \n <li>不存在重复的点。</li> \n <li>&nbsp;<code>-50 &lt;= points[i][j] &lt;= 50</code>.</li> \n <li>结果误差值在&nbsp;<code>10^-6</code>&nbsp;以内都认为是正确答案。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('813. 最大平均值和的分组', '<p>我们将给定的数组&nbsp;<code>A</code>&nbsp;分成&nbsp;<code>K</code>&nbsp;个相邻的非空子数组 ，我们的分数由每个子数组内的平均值的总和构成。计算我们所能得到的最大分数是多少。</p> \n<p>注意我们必须使用 A 数组中的每一个数进行分组，并且分数不一定需要是整数。</p> \n<pre><strong>示例:</strong>\n<strong>输入:</strong> \nA = [9,1,2,3,9]\nK = 3\n<strong>输出:</strong> 20\n<strong>解释:</strong> \nA 的最优分组是[9], [1, 2, 3], [9]. 得到的分数是 9 + (1 + 2 + 3) / 3 + 9 = 20.\n我们也可以把 A 分成[9, 1], [2], [3, 9].\n这样的分组得到的分数为 5 + 2 + 6 = 13, 但不是最大值.\n</pre> \n<p><strong>说明: </strong></p> \n<ul> \n <li><code>1 &lt;= A.length &lt;= 100</code>.</li> \n <li><code>1 &lt;= A[i] &lt;= 10000</code>.</li> \n <li><code>1 &lt;= K &lt;= A.length</code>.</li> \n <li>答案误差在&nbsp;<code>10^-6</code>&nbsp;内被视为是正确的。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('814. 二叉树剪枝', '<p>给定二叉树根结点&nbsp;<code>root</code>&nbsp;，此外树的每个结点的值要么是 0，要么是 1。</p> \n<p>返回移除了所有不包含 1 的子树的原二叉树。</p> \n<p>( 节点 X 的子树为 X 本身，以及所有 X 的后代。)</p> \n<pre><strong>示例1:</strong>\n<strong>输入:</strong> [1,null,0,0,1]\n<strong>输出: </strong>[1,null,0,null,1]\n \n<strong>解释:</strong> \n只有红色节点满足条件“所有不包含 1 的子树”。\n右图为返回的答案。\n\n<img style=\"width:450px\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png\" alt=\"\">\n</pre> \n<pre><strong>示例2:</strong>\n<strong>输入:</strong> [1,0,1,0,0,0,1]\n<strong>输出: </strong>[1,null,1,null,1]\n\n\n<img style=\"width:450px\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png\" alt=\"\">\n</pre> \n<pre><strong>示例3:</strong>\n<strong>输入:</strong> [1,1,0,1,1,0,1,0]\n<strong>输出: </strong>[1,1,0,1,1,null,1]\n\n\n<img style=\"width:450px\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png\" alt=\"\">\n</pre> \n<p><strong>说明: </strong></p> \n<ul> \n <li>给定的二叉树最多有&nbsp;<code>200</code>&nbsp;个节点。</li> \n <li>每个节点的值只会为&nbsp;<code>0</code> 或&nbsp;<code>1</code>&nbsp;。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('815. 公交路线', '<p>给你一个数组 <code>routes</code> ，表示一系列公交线路，其中每个 <code>routes[i]</code> 表示一条公交线路，第 <code>i</code> 辆公交车将会在上面循环行驶。</p> \n<ul> \n <li>例如，路线 <code>routes[0] = [1, 5, 7]</code> 表示第 <code>0</code> 辆公交车会一直按序列 <code>1 -&gt; 5 -&gt; 7 -&gt; 1 -&gt; 5 -&gt; 7 -&gt; 1 -&gt; ...</code> 这样的车站路线行驶。</li> \n</ul> \n<p>现在从 <code>source</code> 车站出发（初始时不在公交车上），要前往 <code>target</code> 车站。 期间仅可乘坐公交车。</p> \n<p>求出 <strong>最少乘坐的公交车数量</strong> 。如果不可能到达终点车站，返回 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>routes = [[1,2,7],[3,6,7]], source = 1, target = 6\n<strong>输出：</strong>2\n<strong>解释：</strong>最优策略是先乘坐第一辆公交车到达车站 7 , 然后换乘第二辆公交车到车站 6 。 \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12\n<strong>输出：</strong>-1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= routes.length &lt;= 500</code>.</li> \n <li><code>1 &lt;= routes[i].length &lt;= 10<sup>5</sup></code></li> \n <li><code>routes[i]</code> 中的所有值 <strong>互不相同</strong></li> \n <li><code>sum(routes[i].length) &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= routes[i][j] &lt; 10<sup>6</sup></code></li> \n <li><code>0 &lt;= source, target &lt; 10<sup>6</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('816. 模糊坐标', '<p>我们有一些二维坐标，如&nbsp;<code>\"(1, 3)\"</code>&nbsp;或&nbsp;<code>\"(2, 0.5)\"</code>，然后我们移除所有逗号，小数点和空格，得到一个字符串<code>S</code>。返回所有可能的原始字符串到一个列表中。</p> \n<p>原始的坐标表示法不会存在多余的零，所以不会出现类似于\"00\", \"0.0\", \"0.00\", \"1.0\", \"001\", \"00.01\"或一些其他更小的数来表示坐标。此外，一个小数点前至少存在一个数，所以也不会出现“.1”形式的数字。</p> \n<p>最后返回的列表可以是任意顺序的。而且注意返回的两个数字中间（逗号之后）都有一个空格。</p> \n<p>&nbsp;</p> \n<pre><strong>示例 1:</strong>\n<strong>输入:</strong> \"(123)\"\n<strong>输出:</strong> [\"(1, 23)\", \"(12, 3)\", \"(1.2, 3)\", \"(1, 2.3)\"]\n</pre> \n<pre><strong>示例 2:</strong>\n<strong>输入:</strong> \"(00011)\"\n<strong>输出:</strong> &nbsp;[\"(0.001, 1)\", \"(0, 0.011)\"]\n<strong>解释:</strong> \n0.0, 00, 0001 或 00.01 是不被允许的。\n</pre> \n<pre><strong>示例 3:</strong>\n<strong>输入:</strong> \"(0123)\"\n<strong>输出:</strong> [\"(0, 123)\", \"(0, 12.3)\", \"(0, 1.23)\", \"(0.1, 23)\", \"(0.1, 2.3)\", \"(0.12, 3)\"]\n</pre> \n<pre><strong>示例 4:</strong>\n<strong>输入:</strong> \"(100)\"\n<strong>输出:</strong> [(10, 0)]\n<strong>解释:</strong> \n1.0 是不被允许的。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示: </strong></p> \n<ul> \n <li><code>4 &lt;= S.length &lt;= 12</code>.</li> \n <li><code>S[0]</code> = \"(\", <code>S[S.length - 1]</code> = \")\", 且字符串&nbsp;<code>S</code>&nbsp;中的其他元素都是数字。</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('817. 链表组件', '<p>给定链表头结点&nbsp;<code>head</code>，该链表上的每个结点都有一个 <strong>唯一的整型值</strong> 。</p> \n<p>同时给定列表&nbsp;<code>G</code>，该列表是上述链表中整型值的一个子集。</p> \n<p>返回列表&nbsp;<code>G</code>&nbsp;中组件的个数，这里对组件的定义为：链表中一段最长连续结点的值（该值必须在列表&nbsp;<code>G</code>&nbsp;中）构成的集合。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入:</strong> \nhead: 0-&gt;1-&gt;2-&gt;3\nG = [0, 1, 3]\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n链表中,0 和 1 是相连接的，且 G 中不包含 2，所以 [0, 1] 是 G 的一个组件，同理 [3] 也是一个组件，故返回 2。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> \nhead: 0-&gt;1-&gt;2-&gt;3-&gt;4\nG = [0, 3, 1, 4]\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n链表中，0 和 1 是相连接的，3 和 4 是相连接的，所以 [0, 1] 和 [3, 4] 是两个组件，故返回 2。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>如果&nbsp;<code>N</code>&nbsp;是给定链表&nbsp;<code>head</code>&nbsp;的长度，<code>1 &lt;= N &lt;= 10000</code>。</li> \n <li>链表中每个结点的值所在范围为&nbsp;<code>[0, N - 1]</code>。</li> \n <li><code>1 &lt;= G.length &lt;= 10000</code></li> \n <li><code>G</code> 是链表中所有结点的值的一个子集.</li> \n</ul>');
INSERT INTO `leecode` VALUES ('818. 赛车', '<p>你的赛车起始停留在位置 0，速度为 +1，正行驶在一个无限长的数轴上。（车也可以向负数方向行驶。）</p> \n<p>你的车会根据一系列由 A（加速）和 R（倒车）组成的指令进行自动驾驶&nbsp;。</p> \n<p>当车得到指令 \"A\" 时, 将会做出以下操作：&nbsp;<code>position += speed, speed *= 2</code>。</p> \n<p>当车得到指令 \"R\" 时, 将会做出以下操作：如果当前速度是正数，则将车速调整为&nbsp;<code>speed = -1</code>&nbsp;；否则将车速调整为&nbsp;<code>speed = 1</code>。&nbsp; (当前所处位置不变。)</p> \n<p>例如，当得到一系列指令 \"AAR\" 后, 你的车将会走过位置 0-&gt;1-&gt;3-&gt;3，并且速度变化为&nbsp;1-&gt;2-&gt;4-&gt;-1。</p> \n<p>现在给定一个目标位置，请给出能够到达目标位置的最短指令列表的<strong>长度</strong>。</p> \n<p>&nbsp;</p> \n<pre><strong>示例 1:</strong>\n<strong>输入:</strong> \ntarget = 3\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n最短指令列表为 \"AA\"\n位置变化为 0-&gt;1-&gt;3\n</pre> \n<pre><strong>示例 2:</strong>\n<strong>输入:</strong> \ntarget = 6\n<strong>输出:</strong> 5\n<strong>解释:</strong> \n最短指令列表为 \"AAARA\"\n位置变化为 0-&gt;1-&gt;3-&gt;7-&gt;7-&gt;6\n</pre> \n<p><strong>说明: </strong></p> \n<ul> \n <li><code>1 &lt;= target（目标位置） &lt;= 10000</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('819. 最常见的单词', '<p>给定一个段落 (paragraph) 和一个禁用单词列表 (banned)。返回出现次数最多，同时不在禁用列表中的单词。</p> \n<p>题目保证至少有一个词不在禁用列表中，而且答案唯一。</p> \n<p>禁用列表中的单词用小写字母表示，不含标点符号。段落中的单词不区分大小写。答案都是小写字母。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入:</strong> \nparagraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\"\nbanned = [\"hit\"]\n<strong>输出:</strong> \"ball\"\n<strong>解释:</strong> \n\"hit\" 出现了3次，但它是一个禁用的单词。\n\"ball\" 出现了2次 (同时没有其他单词出现2次)，所以它是段落里出现次数最多的，且不在禁用列表中的单词。 \n注意，所有这些单词在段落里不区分大小写，标点符号需要忽略（即使是紧挨着单词也忽略， 比如 \"ball,\"）， \n\"hit\"不是最终的答案，虽然它出现次数更多，但它在禁用单词列表中。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= 段落长度 &lt;= 1000</code></li> \n <li><code>0 &lt;= 禁用单词个数 &lt;= 100</code></li> \n <li><code>1 &lt;= 禁用单词长度 &lt;= 10</code></li> \n <li>答案是唯一的, 且都是小写字母&nbsp;(即使在 <code>paragraph</code> 里是大写的，即使是一些特定的名词，答案都是小写的。)</li> \n <li><code>paragraph</code>&nbsp;只包含字母、空格和下列标点符号<code>!?\',;.</code></li> \n <li>不存在没有连字符或者带有连字符的单词。</li> \n <li>单词里只包含字母，不会出现省略号或者其他标点符号。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('82. 删除排序链表中的重复元素 II', '<p>存在一个按升序排列的链表，给你这个链表的头节点 <code>head</code> ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中&nbsp;<strong>没有重复出现</strong><em>&nbsp;</em>的数字。</p> \n<p>返回同样按升序排列的结果链表。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 500px; height: 142px;\" src=\"https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,2,3,3,4,4,5]\n<strong>输出：</strong>[1,2,5]\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 500px; height: 205px;\" src=\"https://assets.leetcode.com/uploads/2021/01/04/linkedlist2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,1,1,2,3]\n<strong>输出：</strong>[2,3]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表中节点数目在范围 <code>[0, 300]</code> 内</li> \n <li><code>-100 &lt;= Node.val &lt;= 100</code></li> \n <li>题目数据保证链表已经按升序排列</li> \n</ul>');
INSERT INTO `leecode` VALUES ('820. 单词的压缩编码', '<p>单词数组&nbsp;<code>words</code> 的 <strong>有效编码</strong> 由任意助记字符串 <code>s</code> 和下标数组 <code>indices</code> 组成，且满足：</p> \n<ul> \n <li><code>words.length == indices.length</code></li> \n <li>助记字符串 <code>s</code> 以 <code>\'#\'</code> 字符结尾</li> \n <li>对于每个下标 <code>indices[i]</code> ，<code>s</code> 的一个从 <code>indices[i]</code> 开始、到下一个 <code>\'#\'</code> 字符结束（但不包括 <code>\'#\'</code>）的 <strong>子字符串</strong> 恰好与 <code>words[i]</code> 相等</li> \n</ul> \n<p>给你一个单词数组&nbsp;<code>words</code> ，返回成功对 <code>words</code> 进行编码的最小助记字符串 <code>s</code> 的长度 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>words = [\"time\", \"me\", \"bell\"]\n<strong>输出：</strong>10\n<strong>解释：</strong>一组有效编码为 s = <code>\"time#bell#\" 和 indices = [0, 2, 5</code>] 。\nwords[0] = \"time\" ，s 开始于 indices[0] = 0 到下一个 \'#\' 结束的子字符串，如加粗部分所示 \"<strong>time</strong>#bell#\"\nwords[1] = \"me\" ，s 开始于 indices[1] = 2 到下一个 \'#\' 结束的子字符串，如加粗部分所示 \"ti<strong>me</strong>#bell#\"\nwords[2] = \"bell\" ，s 开始于 indices[2] = 5 到下一个 \'#\' 结束的子字符串，如加粗部分所示 \"time#<strong>bell</strong>#\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>words = [\"t\"]\n<strong>输出：</strong>2\n<strong>解释：</strong>一组有效编码为 s = \"t#\" 和 indices = [0] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 2000</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 7</code></li> \n <li><code>words[i]</code> 仅由小写字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('821. 字符的最短距离', '<p>给你一个字符串 <code>s</code> 和一个字符 <code>c</code> ，且 <code>c</code> 是 <code>s</code> 中出现过的字符。</p> \n<p>返回一个整数数组 <code>answer</code> ，其中 <code>answer.length == s.length</code> 且 <code>answer[i]</code> 是 <code>s</code> 中从下标 <code>i</code> 到离它 <strong>最近</strong> 的字符 <code>c</code> 的 <strong>距离</strong> 。</p> \n<p>两个下标&nbsp;<code>i</code> 和 <code>j</code> 之间的 <strong>距离</strong> 为 <code>abs(i - j)</code> ，其中 <code>abs</code> 是绝对值函数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"loveleetcode\", c = \"e\"\n<strong>输出：</strong>[3,2,1,0,1,0,0,1,2,2,1,0]\n<strong>解释：</strong>字符 \'e\' 出现在下标 3、5、6 和 11 处（下标从 0 开始计数）。\n距下标 0 最近的 \'e\' 出现在下标 3 ，所以距离为 abs(0 - 3) = 3 。\n距下标 1 最近的 \'e\' 出现在下标 3 ，所以距离为 abs(1 - 3) = 2 。\n对于下标 4 ，出现在下标 3 和下标 5 处的 \'e\' 都离它最近，但距离是一样的 abs(4 - 3) == abs(4 - 5) = 1 。\n距下标 8 最近的 \'e\' 出现在下标 6 ，所以距离为 abs(8 - 6) = 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"aaab\", c = \"b\"\n<strong>输出：</strong>[3,2,1,0]\n</pre> \n<p>&nbsp;</p> \n<strong>提示：</strong> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> \n <li><code>s[i]</code> 和 <code>c</code> 均为小写英文字母</li> \n <li>题目数据保证 <code>c</code> 在 <code>s</code> 中至少出现一次</li> \n</ul>');
INSERT INTO `leecode` VALUES ('822. 翻转卡片游戏', '<p>在桌子上有 <code>N</code> 张卡片，每张卡片的正面和背面都写着一个正数（正面与背面上的数有可能不一样）。</p> \n<p>我们可以先翻转任意张卡片，然后选择其中一张卡片。</p> \n<p>如果选中的那张卡片背面的数字 <code>X</code> 与任意一张卡片的正面的数字都不同，那么这个数字是我们想要的数字。</p> \n<p>哪个数是这些想要的数字中最小的数（找到这些数中的最小值）呢？如果没有一个数字符合要求的，输出 0。</p> \n<p>其中, <code>fronts[i]</code>&nbsp;和&nbsp;<code>backs[i]</code>&nbsp;分别代表第&nbsp;<code>i</code>&nbsp;张卡片的正面和背面的数字。</p> \n<p>如果我们通过翻转卡片来交换正面与背面上的数，那么当初在正面的数就变成背面的数，背面的数就变成正面的数。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\n<strong>输出：</strong><code>2</code>\n<strong>解释：</strong>假设我们翻转第二张卡片，那么在正面的数变成了 <code>[1,3,4,4,7]</code> ， 背面的数变成了 <code>[1,2,4,1,3]。</code>\n接着我们选择第二张卡片，因为现在该卡片的背面的数是 2，2 与任意卡片上正面的数都不同，所以 2 就是我们想要的数字。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= fronts.length == backs.length&nbsp;&lt;=&nbsp;1000</code></li> \n <li><code>1 &lt;=&nbsp;fronts[i]&nbsp;&lt;= 2000</code></li> \n <li><code>1 &lt;= backs[i]&nbsp;&lt;= 2000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('823. 带因子的二叉树', '<p>给出一个含有不重复整数元素的数组 <code>arr</code> ，每个整数 <code>arr[i]</code> 均大于 1。</p> \n<p>用这些整数来构建二叉树，每个整数可以使用任意次数。其中：每个非叶结点的值应等于它的两个子结点的值的乘积。</p> \n<p>满足条件的二叉树一共有多少个？答案可能很大，返回<strong> 对 </strong><code>10<sup>9</sup> + 7</code> <strong>取余</strong> 的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> <code>arr = [2, 4]</code>\n<strong>输出:</strong> 3\n<strong>解释:</strong> 可以得到这些二叉树: <code>[2], [4], [4, 2, 2]</code></pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> <code>arr = [2, 4, 5, 10]</code>\n<strong>输出:</strong> <code>7</code>\n<strong>解释:</strong> 可以得到这些二叉树: <code>[2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]</code>.</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 1000</code></li> \n <li><code>2 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>arr</code> 中的所有值 <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('824. 山羊拉丁文', '<p>给定一个由空格分割单词的句子&nbsp;<code>S</code>。每个单词只包含大写或小写字母。</p> \n<p>我们要将句子转换为&nbsp;<em>“Goat Latin”</em>（一种类似于 猪拉丁文&nbsp;- Pig Latin 的虚构语言）。</p> \n<p>山羊拉丁文的规则如下：</p> \n<ul> \n <li>如果单词以元音开头（a, e, i, o, u），在单词后添加<code>\"ma\"</code>。<br> 例如，单词<code>\"apple\"</code>变为<code>\"applema\"</code>。</li> \n <br> \n <li>如果单词以辅音字母开头（即非元音字母），移除第一个字符并将它放到末尾，之后再添加<code>\"ma\"</code>。<br> 例如，单词<code>\"goat\"</code>变为<code>\"oatgma\"</code>。</li> \n <br> \n <li>根据单词在句子中的索引，在单词最后添加与索引相同数量的字母<code>\'a\'</code>，索引从1开始。<br> 例如，在第一个单词后添加<code>\"a\"</code>，在第二个单词后添加<code>\"aa\"</code>，以此类推。</li> \n</ul> \n<p>返回将&nbsp;<code>S</code>&nbsp;转换为山羊拉丁文后的句子。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>\"I speak Goat Latin\"\n<strong>输出: </strong>\"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>\"The quick brown fox jumped over the lazy dog\"\n<strong>输出: </strong>\"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"\n</pre> \n<p><strong>说明:</strong></p> \n<ul> \n <li><code>S</code>&nbsp;中仅包含大小写字母和空格。单词间有且仅有一个空格。</li> \n <li><code>1 &lt;= S.length &lt;= 150</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('825. 适龄的朋友', '<p>人们会互相发送好友请求，现在给定一个包含有他们年龄的数组，<code>ages[i]</code>&nbsp;表示第 i 个人的年龄。</p> \n<p>当满足以下任一条件时，A 不能给 B（A、B不为同一人）发送好友请求：</p> \n<ul> \n <li><code>age[B]&nbsp;&lt;= 0.5 * age[A]&nbsp;+ 7</code></li> \n <li><code>age[B]&nbsp;&gt; age[A]</code></li> \n <li><code>age[B]&nbsp;&gt; 100 &amp;&amp;&nbsp;age[A]&nbsp;&lt; 100</code></li> \n</ul> \n<p>否则，A 可以给 B 发送好友请求。</p> \n<p>注意如果 A 向 B 发出了请求，不等于 B 也一定会向&nbsp;A 发出请求。而且，人们不会给自己发送好友请求。&nbsp;</p> \n<p>求总共会发出多少份好友请求?</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[16,16]\n<strong>输出：</strong>2\n<strong>解释：</strong>二人可以互发好友申请。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[16,17,18]\n<strong>输出：</strong>2\n<strong>解释：</strong>好友请求可产生于 17 -&gt; 16, 18 -&gt; 17.</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[20,30,100,110,120]\n<strong>输出：</strong>3\n<strong>解释：</strong>好友请求可产生于 110 -&gt; 100, 120 -&gt; 110, 120 -&gt; 100.\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= ages.length&nbsp;&lt;= 20000</code></li> \n <li><code>1 &lt;= ages[i] &lt;= 120</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('826. 安排工作以达到最大收益', '<p>有一些工作：<code>difficulty[i]</code>&nbsp;表示第 <code>i</code> 个工作的难度，<code>profit[i]</code> 表示第 <code>i</code> 个工作的收益。</p> \n<p>现在我们有一些工人。<code>worker[i]</code> 是第 <code>i</code> 个工人的能力，即该工人只能完成难度小于等于 <code>worker[i]</code> 的工作。</p> \n<p>每一个工人都最多只能安排一个工作，但是一个工作可以完成多次。</p> \n<p>举个例子，如果 3 个工人都尝试完成一份报酬为 1 的同样工作，那么总收益为 $3。如果一个工人不能完成任何工作，他的收益为 $0 。</p> \n<p>我们能得到的最大收益是多少？</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入: </strong>difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\n<strong>输出: </strong>100 \n<strong>解释: </strong>工人被分配的工作难度是 [4,4,6,6] ，分别获得 [20,20,30,30] 的收益。</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= difficulty.length = profit.length &lt;= 10000</code></li> \n <li><code>1 &lt;= worker.length &lt;= 10000</code></li> \n <li><code>difficulty[i], profit[i], worker[i]</code>&nbsp; 的范围是&nbsp;<code>[1, 10^5]</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('827. 最大人工岛', '<p>给你一个大小为 <code>n x n</code> 二进制矩阵 <code>grid</code> 。<strong>最多</strong> 只能将一格&nbsp;<code>0</code> 变成&nbsp;<code>1</code> 。</p> \n<p>返回执行此操作后，<code>grid</code> 中最大的岛屿面积是多少？</p> \n<p><strong>岛屿</strong> 由一组上、下、左、右四个方向相连的&nbsp;<code>1</code> 形成。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>grid = [[1, 0], [0, 1]]\n<strong>输出:</strong> 3\n<strong>解释:</strong> 将一格0变成1，最终连通两个小岛得到面积为 3 的岛屿。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>grid =<strong> </strong>[[1, 1], [1, 0]]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 将一格0变成1，岛屿的面积扩大为 4。</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入: </strong>grid = [[1, 1], [1, 1]]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 没有0可以让我们变成1，面积依然为 4。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= n &lt;= 500</code></li> \n <li><code>grid[i][j]</code> 为 <code>0</code> 或 <code>1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('828. 统计子串中的唯一字符', '<p>我们定义了一个函数 <code>countUniqueChars(s)</code> 来统计字符串 <code>s</code> 中的唯一字符，并返回唯一字符的个数。</p> \n<p>例如：<code>s = \"LEETCODE\"</code> ，则其中 <code>\"L\"</code>, <code>\"T\"</code>,<code>\"C\"</code>,<code>\"O\"</code>,<code>\"D\"</code> 都是唯一字符，因为它们只出现一次，所以 <code>countUniqueChars(s) = 5</code> 。</p> \n<p>本题将会给你一个字符串 <code>s</code> ，我们需要返回 <code>countUniqueChars(t)</code> 的总和，其中 <code>t</code> 是 <code>s</code> 的子字符串。注意，某些子字符串可能是重复的，但你统计时也必须算上这些重复的子字符串（也就是说，你必须统计 <code>s</code> 的所有子字符串中的唯一字符）。</p> \n<p>由于答案可能非常大，请将结果 <strong>mod 10 ^ 9 + 7</strong> 后再返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: </strong>s = \"ABC\"\n<strong>输出: </strong>10\n<strong>解释:</strong> 所有可能的子串为：\"A\",\"B\",\"C\",\"AB\",\"BC\" 和 \"ABC\"。\n     其中，每一个子串都由独特字符构成。\n     所以其长度总和为：1 + 1 + 1 + 2 + 2 + 3 = 10\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入: </strong>s = \"ABA\"\n<strong>输出: </strong>8\n<strong>解释: </strong>除<code>了 countUniqueChars</code>(\"ABA\") = 1 之外，其余与示例 1 相同。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"LEETCODE\"\n<strong>输出：</strong>92\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s.length &lt;= 10^4</code></li> \n <li><code>s</code> 只包含大写英文字符</li> \n</ul>');
INSERT INTO `leecode` VALUES ('829. 连续整数求和', '<p>给定一个正整数 <code>N</code>，试求有多少组连续正整数满足所有数字之和为 <code>N</code>?</p> \n<p><strong>示</strong><strong>例 1:</strong></p> \n<pre><strong>输入: </strong>5\n<strong>输出: </strong>2\n<strong>解释: </strong>5 = 5 = 2 + 3，共有两组连续整数([5],[2,3])求和后为 5。</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>9\n<strong>输出: </strong>3\n<strong>解释: </strong>9 = 9 = 4 + 5 = 2 + 3 + 4</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入: </strong>15\n<strong>输出: </strong>4\n<strong>解释: </strong>15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5</pre> \n<p><strong>说明:&nbsp;</strong><code>1 &lt;= N &lt;= 10 ^ 9</code></p>');
INSERT INTO `leecode` VALUES ('83. 删除排序链表中的重复元素', '<p>存在一个按升序排列的链表，给你这个链表的头节点 <code>head</code> ，请你删除所有重复的元素，使每个元素 <strong>只出现一次</strong> 。</p> \n<p>返回同样按升序排列的结果链表。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 302px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2021/01/04/list1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,1,2]\n<strong>输出：</strong>[1,2]\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 542px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2021/01/04/list2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,1,2,3,3]\n<strong>输出：</strong>[1,2,3]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表中节点数目在范围 <code>[0, 300]</code> 内</li> \n <li><code>-100 &lt;= Node.val &lt;= 100</code></li> \n <li>题目数据保证链表已经按升序排列</li> \n</ul>');
INSERT INTO `leecode` VALUES ('830. 较大分组的位置', '<p>在一个由小写字母构成的字符串 <code>s</code> 中，包含由一些连续的相同字符所构成的分组。</p> \n<p>例如，在字符串 <code>s = \"abbxxxxzyy\"</code>&nbsp;中，就含有 <code>\"a\"</code>, <code>\"bb\"</code>, <code>\"xxxx\"</code>, <code>\"z\"</code> 和 <code>\"yy\"</code> 这样的一些分组。</p> \n<p>分组可以用区间 <code>[start, end]</code> 表示，其中 <code>start</code> 和 <code>end</code> 分别表示该分组的起始和终止位置的下标。上例中的 <code>\"xxxx\"</code> 分组用区间表示为 <code>[3,6]</code> 。</p> \n<p>我们称所有包含大于或等于三个连续字符的分组为 <strong>较大分组</strong> 。</p> \n<p>找到每一个 <strong>较大分组</strong> 的区间，<strong>按起始位置下标递增顺序排序后</strong>，返回结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>s = \"abbxxxxzzy\"\n<strong>输出：</strong>[[3,6]]\n<strong>解释</strong><strong>：</strong><code>\"xxxx\" 是一个起始于 3 且终止于 6 的较大分组</code>。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"abc\"\n<strong>输出：</strong>[]\n<strong>解释：</strong>\"a\",\"b\" 和 \"c\" 均不是符合要求的较大分组。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"abcdddeeeeaabbbcd\"\n<strong>输出：</strong>[[3,5],[6,9],[12,14]]\n<strong>解释：</strong>较大分组为 \"ddd\", \"eeee\" 和 \"bbb\"</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"aba\"\n<strong>输出：</strong>[]\n</pre> &nbsp; \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 1000</code></li> \n <li><code>s</code> 仅含小写英文字母</li> \n</ul>');
INSERT INTO `leecode` VALUES ('831. 隐藏个人信息', '<p>给你一条个人信息字符串 <code>S</code>，它可能是一个 <strong>邮箱地址</strong> ，也可能是一串 <strong>电话号码</strong> 。</p> \n<p>我们将隐藏它的隐私信息，通过如下规则:</p> \n<p>&nbsp;</p> \n<p><strong>1. 电子邮箱</strong></p> \n<p>定义名称 <strong>name</strong> 是长度大于等于 2 （<code>length ≥ 2</code>），并且只包含小写字母 <code>a-z</code> 和大写字母 <code>A-Z</code> 的字符串。</p> \n<p>电子邮箱地址由名称 <strong>name</strong> 开头，紧接着是符号 <code>\'@\'</code>，后面接着一个名称 <strong>name</strong>，再接着一个点号 <code>\'.\'</code>，然后是一个名称 <strong>name</strong>。</p> \n<p>电子邮箱地址确定为有效的，并且格式是 <code>\"name1@name2.name3\"</code>。</p> \n<p>为了隐藏电子邮箱，所有的名称 <strong>name</strong> 必须被转换成小写的，并且第一个名称&nbsp;<strong>name</strong> 的第一个字母和最后一个字母的中间的所有字母由 5 个 <code>\'*\'</code> 代替。</p> \n<p>&nbsp;</p> \n<p><strong>2. 电话号码</strong></p> \n<p>电话号码是一串包括数字&nbsp;<code>0-9</code>，以及 <code>{\'+\', \'-\', \'(\', \')\', \'&nbsp;\'}</code> 这几个字符的字符串。你可以假设电话号码包含 10 到 13 个数字。</p> \n<p>电话号码的最后 10 个数字组成本地号码，在这之前的数字组成国际号码。注意，国际号码是可选的。我们只暴露最后 4 个数字并隐藏所有其他数字。</p> \n<p>本地号码是有格式的，并且如 <code>\"***-***-1111\"</code> 这样显示，这里的 1 表示暴露的数字。</p> \n<p>为了隐藏有国际号码的电话号码，像&nbsp;<code>\"+111 111 111 1111\"</code>，我们以 <code>\"+***-***-***-1111\"</code> 的格式来显示。在本地号码前面的 <code>\'+\'</code> 号和第一个 <code>\'-\'</code> 号仅当电话号码中包含国际号码时存在。例如，一个 12 位的电话号码应当以 <code>\"+**-\"</code> 开头进行显示。</p> \n<p>注意：像 <code>\"(\"，\")\"，\" \"</code> 这样的不相干的字符以及不符合上述格式的额外的减号或者加号都应当被删除。</p> \n<p>&nbsp;</p> \n<p>最后，将提供的信息正确隐藏后返回。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: </strong>\"LeetCode@LeetCode.com\"\n<strong>输出: </strong>\"l*****e@leetcode.com\"\n<strong>解释： \n</strong>所有的名称转换成小写, 第一个名称的第一个字符和最后一个字符中间由 5 个星号代替。\n因此，\"leetcode\" -&gt; \"l*****e\"。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入: </strong>\"AB@qq.com\"\n<strong>输出: </strong>\"a*****b@qq.com\"\n<strong>解释:&nbsp;\n</strong>第一个名称\"ab\"的第一个字符和最后一个字符的中间必须有 5 个星号\n因此，\"ab\" -&gt; \"a*****b\"。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入: </strong>\"1(234)567-890\"\n<strong>输出: </strong>\"***-***-7890\"\n<strong>解释:</strong>&nbsp;\n10 个数字的电话号码，那意味着所有的数字都是本地号码。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入: </strong>\"86-(10)12345678\"\n<strong>输出: </strong>\"+**-***-***-5678\"\n<strong>解释:</strong>&nbsp;\n12 位数字，2 个数字是国际号码另外 10 个数字是本地号码 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>注意:</strong></p> \n<ol> \n <li><code>S.length&nbsp;&lt;=&nbsp;40</code>。</li> \n <li>邮箱的长度至少是 8。</li> \n <li>电话号码的长度至少是 10。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('832. 翻转图像', '<p>给定一个二进制矩阵&nbsp;<code>A</code>，我们想先水平翻转图像，然后反转图像并返回结果。</p> \n<p>水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转&nbsp;<code>[1, 1, 0]</code>&nbsp;的结果是&nbsp;<code>[0, 1, 1]</code>。</p> \n<p>反转图片的意思是图片中的&nbsp;<code>0</code>&nbsp;全部被&nbsp;<code>1</code>&nbsp;替换，&nbsp;<code>1</code>&nbsp;全部被&nbsp;<code>0</code>&nbsp;替换。例如，反转&nbsp;<code>[0, 1, 1]</code>&nbsp;的结果是&nbsp;<code>[1, 0, 0]</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[[1,1,0],[1,0,1],[0,0,0]]\n<strong>输出：</strong>[[1,0,0],[0,1,0],[1,1,1]]\n<strong>解释：</strong>首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；\n     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\n<strong>输出：</strong>[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n<strong>解释：</strong>首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；\n     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= A.length = A[0].length &lt;= 20</code></li> \n <li><code>0 &lt;= A[i][j]&nbsp;&lt;=&nbsp;1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('833. 字符串中的查找与替换', '<p>某个字符串 <code>S</code> 需要执行一些替换操作，用新的字母组替换原有的字母组（不一定大小相同）。</p> \n<p>每个替换操作具有 3 个参数：起始索引 <code>i</code>，源字 <code>x</code> 和目标字 <code>y</code>。规则是：如果 <code>x</code> 从<strong>原始字符串 <code>S</code></strong> 中的位置 <code>i</code> 开始，那么就用 <code>y</code> 替换出现的 <code>x</code>。如果没有，则什么都不做。</p> \n<p>举个例子，如果 <code>S&nbsp;= “abcd”</code> 并且替换操作 <code>i = 2，x = “cd”，y = “ffff”</code>，那么因为 <code>“cd”</code> 从原始字符串 <code>S</code> 中的位置 <code>2</code> 开始，所以用&nbsp;<code>“ffff”</code> 替换它。</p> \n<p>再来看 <code>S = “abcd”</code> 上的另一个例子，如果一个替换操作<code> i = 0，x = “ab”，y = “eee”</code>，以及另一个替换操作 <code>i = 2，x = “ec”，y = “ffff”</code>，那么第二个操作将不会执行，因为原始字符串中&nbsp;<code>S[2] = \'c\'</code>，与 <code>x[0] = \'e\'</code> 不匹配。</p> \n<p>所有这些操作同时发生。保证在替换时不会有任何重叠：&nbsp;<code>S = \"abc\", indexes = [0, 1],&nbsp;sources = [\"ab\",\"bc\"]</code> 不是有效的测试用例。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>S = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]\n<strong>输出：</strong>\"eeebffff\"\n<strong>解释：\n</strong>\"a\" 从 S 中的索引 0 开始，所以它被替换为 \"eee\"。\n\"cd\" 从 S 中的索引 2 开始，所以它被替换为 \"ffff\"。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>S = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\n<strong>输出：</strong>\"eeecd\"\n<strong>解释：\n</strong>\"ab\" 从 S 中的索引 0 开始，所以它被替换为 \"eee\"。\n\"ec\" 没有从<strong>原始的</strong> S 中的索引 2 开始，所以它没有被替换。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= S.length &lt;= 1000</code></li> \n <li><code>S</code> 仅由小写英文字母组成</li> \n <li><code>0 &lt;= indexes.length &lt;= 100</code></li> \n <li><code>0 &lt;= indexes[i] &lt; S.length</code></li> \n <li><code>sources.length == indexes.length</code></li> \n <li><code>targets.length == indexes.length</code></li> \n <li><code>1 &lt;= sources[i].length, targets[i].length &lt;= 50</code></li> \n <li><code>sources[i]</code> 和 <code>targets[i]</code> 仅由小写英文字母组成</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('834. 树中距离之和', '<p>给定一个无向、连通的树。树中有 <code>N</code> 个标记为 <code>0...N-1</code> 的节点以及 <code>N-1</code>&nbsp;条边&nbsp;。</p> \n<p>第 <code>i</code> 条边连接节点&nbsp;<code>edges[i][0]</code> 和 <code>edges[i][1]</code>&nbsp;。</p> \n<p>返回一个表示节点 <code>i</code> 与其他所有节点距离之和的列表 <code>ans</code>。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\n<strong>输出: </strong>[8,12,6,10,10,10]\n<strong>解释: </strong>\n如下为给定的树的示意图：\n  0\n / \\\n1   2\n   /|\\\n  3 4 5\n\n我们可以计算出 dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5) \n也就是 1 + 1 + 2 + 2 + 2 = 8。 因此，answer[0] = 8，以此类推。\n</pre> \n<p><strong>说明:</strong>&nbsp;<code>1 &lt;= N &lt;= 10000</code></p>');
INSERT INTO `leecode` VALUES ('835. 图像重叠', '<p>给你两个图像 <code>img1</code> 和 <code>img2</code> ，两个图像的大小都是 <code>n x n</code> ，用大小相同的二维正方形矩阵表示。（并且为二进制矩阵，只包含若干 <code>0</code> 和若干 <code>1</code> ）</p> \n<p>转换其中一个图像，向左，右，上，或下滑动任何数量的单位，并把它放在另一个图像的上面。之后，该转换的 <strong>重叠</strong> 是指两个图像都具有 <code>1</code> 的位置的数目。</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p>（请注意，转换 <strong>不包括</strong> 向任何方向旋转。）</p> \n  <p>最大可能的重叠是多少？</p> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <img style=\"width: 450px; height: 231px;\" src=\"https://assets.leetcode.com/uploads/2020/09/09/overlap1.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]\n<strong>输出：</strong>3\n<strong>解释：</strong>将 img1 向右移动 1 个单位，再向下移动 1 个单位。\n<img style=\"width: 450px; height: 105px;\" src=\"https://assets.leetcode.com/uploads/2020/09/09/overlap_step1.jpg\" alt=\"\">\n两个图像都具有 <code>1</code> 的位置的数目是 3（用红色标识）。\n<img style=\"width: 450px; height: 231px;\" src=\"https://assets.leetcode.com/uploads/2020/09/09/overlap_step2.jpg\" alt=\"\">\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>img1 = [[1]], img2 = [[1]]\n<strong>输出：</strong>1\n</pre> \n  <p><strong>示例 3：</strong></p> \n  <pre><strong>输入：</strong>img1 = [[0]], img2 = [[0]]\n<strong>输出：</strong>0\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>n == img1.length</code></li> \n   <li><code>n == img1[i].length</code></li> \n   <li><code>n == img2.length </code></li> \n   <li><code>n == img2[i].length</code></li> \n   <li><code>1 &lt;= n &lt;= 30</code></li> \n   <li><code>img1[i][j]</code> 为 <code>0</code> 或 <code>1</code></li> \n   <li><code>img2[i][j]</code> 为 <code>0</code> 或 <code>1</code></li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('836. 矩形重叠', '<p>矩形以列表 <code>[x1, y1, x2, y2]</code> 的形式表示，其中 <code>(x1, y1)</code> 为左下角的坐标，<code>(x2, y2)</code> 是右上角的坐标。矩形的上下边平行于 x 轴，左右边平行于 y 轴。</p> \n<p>如果相交的面积为 <strong>正</strong> ，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。</p> \n<p>给出两个矩形 <code>rec1</code> 和 <code>rec2</code> 。如果它们重叠，返回 <code>true</code>；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>rec1 = [0,0,2,2], rec2 = [1,1,3,3]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>rec1 = [0,0,1,1], rec2 = [1,0,2,1]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>rec1 = [0,0,1,1], rec2 = [2,2,3,3]\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>rect1.length == 4</code></li> \n <li><code>rect2.length == 4</code></li> \n <li><code>-10<sup>9</sup> &lt;= rec1[i], rec2[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>rec1[0] &lt;= rec1[2]</code> 且 <code>rec1[1] &lt;= rec1[3]</code></li> \n <li><code>rec2[0] &lt;= rec2[2]</code> 且 <code>rec2[1] &lt;= rec2[3]</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('837. 新21点', '<p>爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：</p> \n<p>爱丽丝以 <code>0</code> 分开始，并在她的得分少于 <code>K</code> 分时抽取数字。 抽取时，她从 <code>[1, W]</code> 的范围中随机获得一个整数作为分数进行累计，其中 <code>W</code> 是整数。 每次抽取都是独立的，其结果具有相同的概率。</p> \n<p>当爱丽丝获得不少于 <code>K</code> 分时，她就停止抽取数字。 爱丽丝的分数不超过 <code>N</code> 的概率是多少？</p> \n<p>&nbsp;</p> \n<p><strong>示例</strong><strong> 1</strong><strong>：</strong></p> \n<pre><strong>输入：</strong>N = 10, K = 1, W = 10\n<strong>输出：</strong>1.00000\n<strong>说明：</strong>爱丽丝得到一张卡，然后停止。</pre> \n<p><strong>示例 </strong><strong>2</strong><strong>：</strong></p> \n<pre><strong>输入：</strong>N = 6, K = 1, W = 10\n<strong>输出：</strong>0.60000\n<strong>说明：</strong>爱丽丝得到一张卡，然后停止。\n在 W = 10 的 6 种可能下，她的得分不超过 N = 6 分。</pre> \n<p><strong>示例 </strong><strong>3</strong><strong>：</strong></p> \n<pre><strong>输入：</strong>N = 21, K = 17, W = 10\n<strong>输出：</strong>0.73278</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= K &lt;= N &lt;= 10000</code></li> \n <li><code>1 &lt;= W &lt;= 10000</code></li> \n <li>如果答案与正确答案的误差不超过 <code>10^-5</code>，则该答案将被视为正确答案通过。</li> \n <li>此问题的判断限制时间已经减少。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('838. 推多米诺', '<p>一行中有 <code>N</code> 张多米诺骨牌，我们将每张多米诺骨牌垂直竖立。</p> \n<p>在开始时，我们同时把一些多米诺骨牌向左或向右推。</p> \n<p><img style=\"height: 160px; width: 418px;\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/05/19/domino.png\" alt=\"\"></p> \n<p>每过一秒，倒向左边的多米诺骨牌会推动其左侧相邻的多米诺骨牌。</p> \n<p>同样地，倒向右边的多米诺骨牌也会推动竖立在其右侧的相邻多米诺骨牌。</p> \n<p>如果同时有多米诺骨牌落在一张垂直竖立的多米诺骨牌的两边，由于受力平衡， 该骨牌仍然保持不变。</p> \n<p>就这个问题而言，我们会认为正在下降的多米诺骨牌不会对其它正在下降或已经下降的多米诺骨牌施加额外的力。</p> \n<p>给定表示初始状态的字符串 \"S\" 。如果第 i 张多米诺骨牌被推向左边，则 <code>S[i] = \'L\'</code>；如果第 i 张多米诺骨牌被推向右边，则 <code>S[i] = \'R\'</code>；如果第 i 张多米诺骨牌没有被推动，则 <code>S[i] = \'.\'</code>。</p> \n<p>返回表示最终状态的字符串。</p> \n<p><strong>示例 </strong><strong>1</strong><strong>：</strong></p> \n<pre><strong>输入：</strong>\".L.R...LR..L..\"\n<strong>输出：</strong>\"LL.RR.LLRRLL..\"</pre> \n<p><strong>示例 </strong><strong>2</strong><strong>：</strong></p> \n<pre><strong>输入：</strong>\"RR.L\"\n<strong>输出：</strong>\"RR.L\"\n<strong>说明：</strong>第一张多米诺骨牌没有给第二张施加额外的力。</pre> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= N &lt;= 10^5</code></li> \n <li>表示多米诺骨牌状态的字符串只含有 <code>\'L\'</code>，<code>\'R\'</code>; 以及 <code>\'.\'</code>;</li> \n</ol>');
INSERT INTO `leecode` VALUES ('839. 相似字符串组', '<p>如果交换字符串&nbsp;<code>X</code> 中的两个不同位置的字母，使得它和字符串&nbsp;<code>Y</code> 相等，那么称 <code>X</code> 和 <code>Y</code> 两个字符串相似。如果这两个字符串本身是相等的，那它们也是相似的。</p> \n<p>例如，<code>\"tars\"</code> 和 <code>\"rats\"</code> 是相似的 (交换 <code>0</code> 与 <code>2</code> 的位置)；&nbsp;<code>\"rats\"</code> 和 <code>\"arts\"</code> 也是相似的，但是 <code>\"star\"</code> 不与 <code>\"tars\"</code>，<code>\"rats\"</code>，或 <code>\"arts\"</code> 相似。</p> \n<p>总之，它们通过相似性形成了两个关联组：<code>{\"tars\", \"rats\", \"arts\"}</code> 和 <code>{\"star\"}</code>。注意，<code>\"tars\"</code> 和 <code>\"arts\"</code> 是在同一组中，即使它们并不相似。形式上，对每个组而言，要确定一个单词在组中，只需要这个词和该组中至少一个单词相似。</p> \n<p>给你一个字符串列表 <code>strs</code>。列表中的每个字符串都是 <code>strs</code> 中其它所有字符串的一个字母异位词。请问 <code>strs</code> 中有多少个相似字符串组？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>strs = [\"tars\",\"rats\",\"arts\",\"star\"]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>strs = [\"omv\",\"ovm\"]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= strs.length &lt;= 300</code></li> \n <li><code>1 &lt;= strs[i].length &lt;= 300</code></li> \n <li><code>strs[i]</code> 只包含小写字母。</li> \n <li><code>strs</code> 中的所有单词都具有相同的长度，且是彼此的字母异位词。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>备注：</strong></p> \n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 字母异位词（anagram），一种把某个字符串的字母的位置（顺序）加以改换所形成的新词。</p>');
INSERT INTO `leecode` VALUES ('84. 柱状图中最大的矩形', '<p>给定 <em>n</em> 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p> \n<p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<p><img src=\"https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg\"></p> \n<pre><strong>输入：</strong>heights = [2,1,5,6,2,3]\n<strong>输出：</strong>10\n<strong>解释：</strong>最大的矩形为图中红色区域，面积为 10\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img src=\"https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg\"></p> \n<pre><strong>输入：</strong> heights = [2,4]\n<b>输出：</b> 4</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= heights.length &lt;=10<sup>5</sup></code></li> \n <li><code>0 &lt;= heights[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('840. 矩阵中的幻方', '<p>3 x 3 的幻方是一个填充有<strong>从 1 到 9</strong> 的不同数字的 3 x 3 矩阵，其中每行，每列以及两条对角线上的各数之和都相等。</p> \n<p>给定一个由整数组成的 <code>grid</code>，其中有多少个 3 × 3 的 “幻方” 子矩阵？（每个子矩阵都是连续的）。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入: </strong>[[4,3,8,4],\n      [9,5,1,9],\n      [2,7,6,2]]\n<strong>输出: </strong>1\n<strong>解释: </strong>\n下面的子矩阵是一个 3 x 3 的幻方：\n438\n951\n276\n\n而这一个不是：\n384\n519\n762\n\n总的来说，在本示例所给定的矩阵中只有一个 3 x 3 的幻方子矩阵。\n</pre> \n<p><strong>提示:</strong></p> \n<ol> \n <li><code>1 &lt;= grid.length&nbsp;&lt;= 10</code></li> \n <li><code>1 &lt;= grid[0].length&nbsp;&lt;= 10</code></li> \n <li><code>0 &lt;= grid[i][j] &lt;= 15</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('841. 钥匙和房间', '<p>有 <code>N</code> 个房间，开始时你位于 <code>0</code> 号房间。每个房间有不同的号码：<code>0，1，2，...，N-1</code>，并且房间里可能有一些钥匙能使你进入下一个房间。</p> \n<p>在形式上，对于每个房间 <code>i</code> 都有一个钥匙列表 <code>rooms[i]</code>，每个钥匙 <code>rooms[i][j]</code> 由 <code>[0,1，...，N-1]</code> 中的一个整数表示，其中 <code>N = rooms.length</code>。 钥匙 <code>rooms[i][j] = v</code> 可以打开编号为 <code>v</code> 的房间。</p> \n<p>最初，除 <code>0</code> 号房间外的其余所有房间都被锁住。</p> \n<p>你可以自由地在房间之间来回走动。</p> \n<p>如果能进入每个房间返回 <code>true</code>，否则返回 <code>false</code>。</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: </strong>[[1],[2],[3],[]]\n<strong>输出: </strong>true\n<strong>解释:  </strong>\n我们从 0 号房间开始，拿到钥匙 1。\n之后我们去 1 号房间，拿到钥匙 2。\n然后我们去 2 号房间，拿到钥匙 3。\n最后我们去了 3 号房间。\n由于我们能够进入每个房间，我们返回 true。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[[1,3],[3,0,1],[2],[0]]\n<strong>输出：</strong>false\n<strong>解释：</strong>我们不能进入 2 号房间。\n</pre> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= rooms.length &lt;=&nbsp;1000</code></li> \n <li><code>0 &lt;= rooms[i].length &lt;= 1000</code></li> \n <li>所有房间中的钥匙数量总计不超过&nbsp;<code>3000</code>。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('842. 将数组拆分成斐波那契序列', '<p>给定一个数字字符串 <code>S</code>，比如 <code>S = \"123456579\"</code>，我们可以将它分成斐波那契式的序列 <code>[123, 456, 579]</code>。</p> \n<p>形式上，斐波那契式序列是一个非负整数列表 <code>F</code>，且满足：</p> \n<ul> \n <li><code>0 &lt;= F[i] &lt;= 2^31 - 1</code>，（也就是说，每个整数都符合 32 位有符号整数类型）；</li> \n <li><code>F.length &gt;= 3</code>；</li> \n <li>对于所有的<code>0 &lt;= i &lt; F.length - 2</code>，都有 <code>F[i] + F[i+1] = F[i+2]</code> 成立。</li> \n</ul> \n<p>另外，请注意，将字符串拆分成小块时，每个块的数字一定不要以零开头，除非这个块是数字 0 本身。</p> \n<p>返回从 <code>S</code> 拆分出来的任意一组斐波那契式的序列块，如果不能拆分则返回 <code>[]</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\"123456579\"\n<strong>输出：</strong>[123,456,579]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入: </strong>\"11235813\"\n<strong>输出: </strong>[1,1,2,3,5,8,13]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入: </strong>\"112358130\"\n<strong>输出: </strong>[]\n<strong>解释: </strong>这项任务无法完成。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>\"0123\"\n<strong>输出：</strong>[]\n<strong>解释：</strong>每个块的数字不能以零开头，因此 \"01\"，\"2\"，\"3\" 不是有效答案。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入: </strong>\"1101111\"\n<strong>输出: </strong>[110, 1, 111]\n<strong>解释: </strong>输出 [11,0,11,11] 也同样被接受。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= S.length&nbsp;&lt;= 200</code></li> \n <li>字符串 <code>S</code> 中只含有数字。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('843. 猜猜这个单词', '<p>这个问题是 LeetCode 平台新增的<strong><em>交互式问题 </em></strong>。</p> \n<p>我们给出了一个由一些独特的单词组成的单词列表，每个单词都是 6 个字母长，并且这个列表中的一个单词将被选作<strong>秘密</strong>。</p> \n<p>你可以调用 <code>master.guess(word)</code> 来猜单词。你所猜的单词应当是存在于原列表并且由 6 个小写字母组成的类型<code>字符串</code>。</p> \n<p>此函数将会返回一个<code>整型数字</code>，表示你的猜测与<strong>秘密单词</strong>的准确匹配（值和位置同时匹配）的数目。此外，如果你的猜测不在给定的单词列表中，它将返回 <code>-1</code>。</p> \n<p>对于每个测试用例，你有 10 次机会来猜出这个单词。当所有调用都结束时，如果您对 <code>master.guess</code> 的调用不超过 10 次，并且至少有一次猜到<strong>秘密</strong>，那么您将通过该测试用例。</p> \n<p>除了下面示例给出的测试用例外，还会有 5 个额外的测试用例，每个单词列表中将会有 100 个单词。这些测试用例中的每个单词的字母都是从 <code>\'a\'</code> 到 <code>\'z\'</code>&nbsp;中随机选取的，并且保证给定单词列表中的每个单词都是唯一的。</p> \n<pre><strong>示例 1:</strong>\n<strong>输入:</strong>&nbsp;secret = \"acckzz\", wordlist = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"]\n\n<strong>解释:</strong>\n\n<code>master.guess(\"aaaaaa\")</code> 返回 -1, 因为&nbsp;<code>\"aaaaaa\"</code>&nbsp;不在 wordlist 中.\n<code>master.guess(\"acckzz\") 返回</code> 6, 因为&nbsp;<code>\"acckzz\"</code> 就是<strong>秘密</strong>，6个字母完全匹配。\n<code>master.guess(\"ccbazz\")</code> 返回 3, 因为<code>&nbsp;\"ccbazz\"</code>&nbsp;有 3 个匹配项。\n<code>master.guess(\"eiowzz\")</code> 返回 2, 因为&nbsp;<code>\"eiowzz\"</code>&nbsp;有 2 个匹配项。\n<code>master.guess(\"abcczz\")</code> 返回 4, 因为&nbsp;<code>\"abcczz\"</code> 有 4 个匹配项。\n\n我们调用了 5 次master.guess，其中一次猜到了<strong>秘密</strong>，所以我们通过了这个测试用例。\n</pre> \n<p><strong>提示：</strong>任何试图绕过评判的解决方案都将导致比赛资格被取消。</p>');
INSERT INTO `leecode` VALUES ('844. 比较含退格的字符串', '<p>给定 <code>S</code> 和 <code>T</code> 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 <code>#</code> 代表退格字符。</p> \n<p><strong>注意：</strong>如果对空文本输入退格字符，文本继续为空。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>S = \"ab#c\", T = \"ad#c\"\n<strong>输出：</strong>true\n<strong>解释：</strong>S 和 T 都会变成 “ac”。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>S = \"ab##\", T = \"c#d#\"\n<strong>输出：</strong>true\n<strong>解释：</strong>S 和 T 都会变成 “”。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>S = \"a##c\", T = \"#a#c\"\n<strong>输出：</strong>true\n<strong>解释：</strong>S 和 T 都会变成 “c”。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>S = \"a#c\", T = \"b\"\n<strong>输出：</strong>false\n<strong>解释：</strong>S 会变成 “c”，但 T 仍然是 “b”。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= S.length &lt;= 200</code></li> \n <li><code>1 &lt;= T.length &lt;= 200</code></li> \n <li><code>S</code> 和 <code>T</code> 只含有小写字母以及字符 <code>\'#\'</code>。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你可以用 <code>O(N)</code> 的时间复杂度和 <code>O(1)</code> 的空间复杂度解决该问题吗？</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('845. 数组中的最长山脉', '<p>我们把数组 A 中符合下列属性的任意连续子数组 B 称为 “<em>山脉”</em>：</p> \n<ul> \n <li><code>B.length &gt;= 3</code></li> \n <li>存在 <code>0 &lt; i&nbsp;&lt; B.length - 1</code> 使得 <code>B[0] &lt; B[1] &lt; ... B[i-1] &lt; B[i] &gt; B[i+1] &gt; ... &gt; B[B.length - 1]</code></li> \n</ul> \n<p>（注意：B 可以是 A 的任意子数组，包括整个数组 A。）</p> \n<p>给出一个整数数组 <code>A</code>，返回最长 <em>“山脉”</em>&nbsp;的长度。</p> \n<p>如果不含有 “<em>山脉”&nbsp;</em>则返回 <code>0</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[2,1,4,7,3,2,5]\n<strong>输出：</strong>5\n<strong>解释：</strong>最长的 “山脉” 是 [1,4,7,3,2]，长度为 5。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[2,2,2]\n<strong>输出：</strong>0\n<strong>解释：</strong>不含 “山脉”。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= A.length &lt;= 10000</code></li> \n <li><code>0 &lt;= A[i] &lt;= 10000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('846. 一手顺子', '<p>爱丽丝有一手（<code>hand</code>）由整数数组给定的牌。&nbsp;</p> \n<p>现在她想把牌重新排列成组，使得每个组的大小都是 <code>W</code>，且由 <code>W</code> 张连续的牌组成。</p> \n<p>如果她可以完成分组就返回 <code>true</code>，否则返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>注意：</strong>此题目与 1296 重复：<a href=\"https://leetcode-cn.com/problems/divide-array-in-sets-of-k-consecutive-numbers/\">https://leetcode-cn.com/problems/divide-array-in-sets-of-k-consecutive-numbers/</a></p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>hand = [1,2,3,6,2,3,4,7,8], W = 3\n<strong>输出：</strong>true\n<strong>解释：</strong>爱丽丝的手牌可以被重新排列为 <code>[1,2,3]，[2,3,4]，[6,7,8]</code>。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>hand = [1,2,3,4,5], W = 4\n<strong>输出：</strong>false\n<strong>解释：</strong>爱丽丝的手牌无法被重新排列成几个大小为 4 的组。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= hand.length &lt;= 10000</code></li> \n <li><code>0 &lt;= hand[i]&nbsp;&lt;= 10^9</code></li> \n <li><code>1 &lt;= W &lt;= hand.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('847. 访问所有节点的最短路径', '<p>存在一个由 <code>n</code> 个节点组成的无向连通图，图中的节点按从 <code>0</code> 到 <code>n - 1</code> 编号。</p> \n<p>给你一个数组 <code>graph</code> 表示这个图。其中，<code>graph[i]</code> 是一个列表，由所有与节点 <code>i</code> 直接相连的节点组成。</p> \n<p>返回能够访问所有节点的最短路径的长度。你可以在任一节点开始和停止，也可以多次重访节点，并且可以重用边。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 222px; height: 183px;\" src=\"https://assets.leetcode.com/uploads/2021/05/12/shortest1-graph.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>graph = [[1,2,3],[0],[0],[0]]\n<strong>输出：</strong>4\n<strong>解释：</strong>一种可能的路径为 [1,0,2,0,3]</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 382px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2021/05/12/shortest2-graph.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]\n<strong>输出：</strong>4\n<strong>解释：</strong>一种可能的路径为 [0,1,4,2,3]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == graph.length</code></li> \n <li><code>1 &lt;= n &lt;= 12</code></li> \n <li><code>0 &lt;= graph[i].length &lt;&nbsp;n</code></li> \n <li><code>graph[i]</code> 不包含 <code>i</code></li> \n <li>如果 <code>graph[a]</code> 包含 <code>b</code> ，那么 <code>graph[b]</code> 也包含 <code>a</code></li> \n <li>输入的图总是连通图</li> \n</ul>');
INSERT INTO `leecode` VALUES ('848. 字母移位', '<p>有一个由小写字母组成的字符串 <code>S</code>，和一个整数数组 <code>shifts</code>。</p> \n<p>我们将字母表中的下一个字母称为原字母的 <em>移位</em>（由于字母表是环绕的， <code>\'z\'</code>&nbsp;将会变成&nbsp;<code>\'a\'</code>）。</p> \n<p>例如·，<code>shift(\'a\') = \'b\'</code>，&nbsp;<code>shift(\'t\') = \'u\'</code>,， 以及&nbsp;<code>shift(\'z\') = \'a\'</code>。</p> \n<p>对于每个&nbsp;<code>shifts[i] = x</code>&nbsp;， 我们会将 <code>S</code>&nbsp;中的前&nbsp;<code>i+1</code>&nbsp;个字母移位&nbsp;<code>x</code>&nbsp;次。</p> \n<p>返回将所有这些移位都应用到 <code>S</code> 后最终得到的字符串。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>S = \"abc\", shifts = [3,5,9]\n<strong>输出：</strong>\"rpl\"\n<strong>解释： </strong>\n我们以 \"abc\" 开始。\n将 S 中的第 1 个字母移位 3 次后，我们得到 \"dbc\"。\n再将 S 中的前 2 个字母移位 5 次后，我们得到 \"igc\"。\n最后将 S 中的这 3 个字母移位 9 次后，我们得到答案 \"rpl\"。\n</pre> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= S.length = shifts.length &lt;= 20000</code></li> \n <li><code>0 &lt;= shifts[i] &lt;= 10 ^ 9</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('849. 到最近的人的最大距离', '<p>给你一个数组&nbsp;<code>seats</code> 表示一排座位，其中 <code>seats[i] = 1</code> 代表有人坐在第 <code>i</code> 个座位上，<code>seats[i] = 0</code> 代表座位 <code>i</code> 上是空的（<strong>下标从 0 开始</strong>）。</p> \n<p>至少有一个空座位，且至少有一人已经坐在座位上。</p> \n<p>亚历克斯希望坐在一个能够使他与离他最近的人之间的距离达到最大化的座位上。</p> \n<p>返回他到离他最近的人的最大距离。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 650px; height: 257px;\" src=\"https://assets.leetcode.com/uploads/2020/09/10/distance.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>seats = [1,0,0,0,1,0,1]\n<strong>输出：</strong>2\n<strong>解释：\n</strong>如果亚历克斯坐在第二个空位（seats[2]）上，他到离他最近的人的距离为 2 。\n如果亚历克斯坐在其它任何一个空位上，他到离他最近的人的距离为 1 。\n因此，他到离他最近的人的最大距离是 2 。 \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>seats = [1,0,0,0]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n如果亚历克斯坐在最后一个座位上，他离最近的人有 3 个座位远。\n这是可能的最大距离，所以答案是 3 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>seats = [0,1]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= seats.length &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>seats[i]</code> 为 <code>0</code> 或 <code>1</code></li> \n <li>至少有一个 <strong>空座位</strong></li> \n <li>至少有一个 <strong>座位上有人</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('85. 最大矩形', '<p>给定一个仅包含&nbsp;<code>0</code> 和 <code>1</code> 、大小为 <code>rows x cols</code> 的二维二进制矩阵，找出只包含 <code>1</code> 的最大矩形，并返回其面积。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 402px; height: 322px;\" src=\"https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n<strong>输出：</strong>6\n<strong>解释：</strong>最大矩形如上图所示。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>matrix = []\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>matrix = [[\"0\"]]\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>matrix = [[\"1\"]]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>matrix = [[\"0\",\"0\"]]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>rows == matrix.length</code></li> \n <li><code>cols == matrix[0].length</code></li> \n <li><code>0 &lt;= row, cols &lt;= 200</code></li> \n <li><code>matrix[i][j]</code> 为 <code>\'0\'</code> 或 <code>\'1\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('850. 矩形面积 II', '<p>我们给出了一个（轴对齐的）矩形列表&nbsp;<code>rectangles</code>&nbsp;。 对于&nbsp;<code>rectangle[i] = [x1, y1, x2, y2]</code>，其中（x1，y1）是矩形&nbsp;<code>i</code>&nbsp;左下角的坐标，（x2，y2）是该矩形右上角的坐标。</p> \n<p>找出平面中所有矩形叠加覆盖后的总面积。 由于答案可能太大，<strong>请返回它对 10 ^ 9 + 7 取模的结果</strong>。</p> \n<p><img style=\"height: 360px; width: 480px;\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png\" alt=\"\"></p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[[0,0,2,2],[1,0,2,3],[1,0,3,1]]\n<strong>输出：</strong>6\n<strong>解释：</strong>如图所示。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[[0,0,1000000000,1000000000]]\n<strong>输出：</strong>49\n<strong>解释：</strong>答案是 10^18 对 (10^9 + 7) 取模的结果， 即 (10^9)^2 → (-7)^2 = 49 。\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= rectangles.length &lt;= 200</code></li> \n <li><code>rectanges[i].length = 4</code></li> \n <li><code>0 &lt;= rectangles[i][j] &lt;= 10^9</code></li> \n <li>矩形叠加覆盖后的总面积不会超越&nbsp;<code>2^63 - 1</code>&nbsp;，这意味着可以用一个&nbsp;64 位有符号整数来保存面积结果。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('851. 喧闹和富有', '<p>在一组 N 个人（编号为&nbsp;<code>0, 1, 2, ..., N-1</code>）中，每个人都有不同数目的钱，以及不同程度的安静（quietness）。</p> \n<p>为了方便起见，我们将编号为&nbsp;<code>x</code>&nbsp;的人简称为 \"person&nbsp;<code>x</code>&nbsp;\"。</p> \n<p>如果能够肯定 person&nbsp;<code>x</code>&nbsp;比 person&nbsp;<code>y</code>&nbsp;更有钱的话，我们会说&nbsp;<code>richer[i] = [x, y]</code>&nbsp;。注意&nbsp;<code>richer</code>&nbsp;可能只是有效观察的一个子集。</p> \n<p>另外，如果 person&nbsp;<code>x</code>&nbsp;的安静程度为&nbsp;<code>q</code>&nbsp;，我们会说&nbsp;<code>quiet[x] = q</code>&nbsp;。</p> \n<p>现在，返回答案&nbsp;<code>answer</code>&nbsp;，其中&nbsp;<code>answer[x] = y</code>&nbsp;的前提是，在所有拥有的钱不少于&nbsp;person&nbsp;<code>x</code>&nbsp;的人中，person&nbsp;<code>y</code>&nbsp;是最安静的人（也就是安静值&nbsp;<code>quiet[y]</code>&nbsp;最小的人）。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\n<strong>输出：</strong>[5,5,2,5,4,5,6,7]\n<strong>解释： </strong>\nanswer[0] = 5，\nperson 5 比 person 3 有更多的钱，person 3 比 person 1 有更多的钱，person 1 比 person 0 有更多的钱。\n唯一较为安静（有较低的安静值 quiet[x]）的人是 person 7，\n但是目前还不清楚他是否比 person 0 更有钱。\n\nanswer[7] = 7，\n在所有拥有的钱肯定不少于 person 7 的人中(这可能包括 person 3，4，5，6 以及 7)，\n最安静(有较低安静值 quiet[x])的人是 person 7。\n\n其他的答案也可以用类似的推理来解释。\n</pre> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= quiet.length = N &lt;= 500</code></li> \n <li><code>0 &lt;= quiet[i] &lt; N</code>，所有&nbsp;<code>quiet[i]</code>&nbsp;都不相同。</li> \n <li><code>0 &lt;= richer.length &lt;= N * (N-1) / 2</code></li> \n <li><code>0 &lt;= richer[i][j] &lt; N</code></li> \n <li><code>richer[i][0] != richer[i][1]</code></li> \n <li><code>richer[i]</code>&nbsp;都是不同的。</li> \n <li>对&nbsp;<code>richer</code>&nbsp;的观察在逻辑上是一致的。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('852. 山脉数组的峰顶索引', '符合下列属性的数组 \n<code>arr</code> 称为 \n<strong>山脉数组</strong> ： \n<ul> \n <li><code>arr.length &gt;= 3</code></li> \n <li>存在 <code>i</code>（<code>0 &lt; i&nbsp;&lt; arr.length - 1</code>）使得： \n  <ul> \n   <li><code>arr[0] &lt; arr[1] &lt; ... arr[i-1] &lt; arr[i] </code></li> \n   <li><code>arr[i] &gt; arr[i+1] &gt; ... &gt; arr[arr.length - 1]</code></li> \n  </ul> </li> \n</ul> \n<p>给你由整数组成的山脉数组 <code>arr</code> ，返回任何满足 <code>arr[0] &lt; arr[1] &lt; ... arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code> 的下标 <code>i</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [0,1,0]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [0,2,1,0]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [0,10,5,2]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [3,4,5,1]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>arr = [24,69,100,99,79,78,67,36,26,19]\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= arr[i] &lt;= 10<sup>6</sup></code></li> \n <li>题目数据保证 <code>arr</code> 是一个山脉数组</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>很容易想到时间复杂度 <code>O(n)</code> 的解决方案，你可以设计一个 <code>O(log(n))</code> 的解决方案吗？</p>');
INSERT INTO `leecode` VALUES ('853. 车队', '<p><code>N</code> &nbsp;辆车沿着一条车道驶向位于&nbsp;<code>target</code>&nbsp;英里之外的共同目的地。</p> \n<p>每辆车&nbsp;<code>i</code>&nbsp;以恒定的速度&nbsp;<code>speed[i]</code>&nbsp;（英里/小时），从初始位置&nbsp;<code>position[i]</code>&nbsp;（英里） 沿车道驶向目的地。</p> \n<p>一辆车永远不会超过前面的另一辆车，但它可以追上去，并与前车以相同的速度紧接着行驶。</p> \n<p>此时，我们会忽略这两辆车之间的距离，也就是说，它们被假定处于相同的位置。</p> \n<p><em>车队&nbsp;</em>是一些由行驶在相同位置、具有相同速度的车组成的非空集合。注意，一辆车也可以是一个车队。</p> \n<p>即便一辆车在目的地才赶上了一个车队，它们仍然会被视作是同一个车队。</p> \n<p>&nbsp;</p> \n<p>会有多少车队到达目的地?</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n从 10 和 8 开始的车会组成一个车队，它们在 12 处相遇。\n从 0 处开始的车无法追上其它车，所以它自己就是一个车队。\n从 5 和 3 开始的车会组成一个车队，它们在 6 处相遇。\n请注意，在到达目的地之前没有其它车会遇到这些车队，所以答案是 3。\n</pre> \n<p><br> <strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= N &lt;= 10 ^ 4</code></li> \n <li><code>0 &lt; target&nbsp;&lt;= 10 ^ 6</code></li> \n <li><code>0 &lt;&nbsp;speed[i] &lt;= 10 ^ 6</code></li> \n <li><code>0 &lt;= position[i] &lt; target</code></li> \n <li>所有车的初始位置各不相同。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('854. 相似度为 K 的字符串', '<p>如果可以通过将 <code>A</code> 中的两个小写字母精确地交换位置 <code>K</code> 次得到与 <code>B</code> 相等的字符串，我们称字符串&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;的相似度为 <code>K</code>（<code>K</code>&nbsp;为非负整数）。</p> \n<p>给定两个字母异位词&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;，返回 <code>A</code> 和 <code>B</code>&nbsp;的相似度 <code>K</code> 的最小值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = \"ab\", B = \"ba\"\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = \"abc\", B = \"bca\"\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>A = \"abac\", B = \"baca\"\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>A = \"aabc\", B = \"abca\"\n<strong>输出：</strong>2</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length == B.length &lt;= 20</code></li> \n <li><code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;只包含集合&nbsp;<code>{\'a\', \'b\', \'c\', \'d\', \'e\', \'f\'}</code>&nbsp;中的小写字母。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('855. 考场就座', '<p>在考场里，一排有&nbsp;<code>N</code>&nbsp;个座位，分别编号为&nbsp;<code>0, 1, 2, ..., N-1</code>&nbsp;。</p> \n<p>当学生进入考场后，他必须坐在能够使他与离他最近的人之间的距离达到最大化的座位上。如果有多个这样的座位，他会坐在编号最小的座位上。(另外，如果考场里没有人，那么学生就坐在 0 号座位上。)</p> \n<p>返回&nbsp;<code>ExamRoom(int N)</code>&nbsp;类，它有两个公开的函数：其中，函数&nbsp;<code>ExamRoom.seat()</code>&nbsp;会返回一个&nbsp;<code>int</code>&nbsp;（整型数据），代表学生坐的位置；函数&nbsp;<code>ExamRoom.leave(int p)</code>&nbsp;代表坐在座位 <code>p</code> 上的学生现在离开了考场。每次调用&nbsp;<code>ExamRoom.leave(p)</code>&nbsp;时都保证有学生坐在座位&nbsp;<code>p</code>&nbsp;上。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[\"ExamRoom\",\"seat\",\"seat\",\"seat\",\"seat\",\"leave\",\"seat\"], [[10],[],[],[],[],[4],[]]\n<strong>输出：</strong>[null,0,9,4,2,null,5]\n<strong>解释：</strong>\nExamRoom(10) -&gt; null\nseat() -&gt; 0，没有人在考场里，那么学生坐在 0 号座位上。\nseat() -&gt; 9，学生最后坐在 9 号座位上。\nseat() -&gt; 4，学生最后坐在 4 号座位上。\nseat() -&gt; 2，学生最后坐在 2 号座位上。\nleave(4) -&gt; null\nseat() -&gt; 5，学生最后坐在 5 号座位上。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= N &lt;= 10^9</code></li> \n <li>在所有的测试样例中&nbsp;<code>ExamRoom.seat()</code>&nbsp;和&nbsp;<code>ExamRoom.leave()</code>&nbsp;最多被调用&nbsp;<code>10^4</code>&nbsp;次。</li> \n <li>保证在调用&nbsp;<code>ExamRoom.leave(p)</code>&nbsp;时有学生正坐在座位 <code>p</code> 上。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('856. 括号的分数', '<p>给定一个平衡括号字符串&nbsp;<code>S</code>，按下述规则计算该字符串的分数：</p> \n<ul> \n <li><code>()</code> 得 1 分。</li> \n <li><code>AB</code> 得&nbsp;<code>A + B</code>&nbsp;分，其中 A 和 B 是平衡括号字符串。</li> \n <li><code>(A)</code> 得&nbsp;<code>2 * A</code>&nbsp;分，其中 A 是平衡括号字符串。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入： </strong>\"()\"\n<strong>输出： </strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入： </strong>\"(())\"\n<strong>输出： </strong>2\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<pre><strong>输入： </strong>\"()()\"\n<strong>输出： </strong>2\n</pre> \n<p><strong>示例&nbsp;4：</strong></p> \n<pre><strong>输入： </strong>\"(()(()))\"\n<strong>输出： </strong>6\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>S</code>&nbsp;是平衡括号字符串，且只含有&nbsp;<code>(</code>&nbsp;和&nbsp;<code>)</code>&nbsp;。</li> \n <li><code>2 &lt;= S.length &lt;= 50</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('857. 雇佣 K 名工人的最低成本', '<p>有 <code>N</code>&nbsp;名工人。&nbsp;第&nbsp;<code>i</code>&nbsp;名工人的工作质量为&nbsp;<code>quality[i]</code>&nbsp;，其最低期望工资为&nbsp;<code>wage[i]</code>&nbsp;。</p> \n<p>现在我们想雇佣&nbsp;<code>K</code>&nbsp;名工人组成一个<em>工资组。</em>在雇佣&nbsp;一组 K 名工人时，我们必须按照下述规则向他们支付工资：</p> \n<ol> \n <li>对工资组中的每名工人，应当按其工作质量与同组其他工人的工作质量的比例来支付工资。</li> \n <li>工资组中的每名工人至少应当得到他们的最低期望工资。</li> \n</ol> \n<p>返回组成一个满足上述条件的工资组至少需要多少钱。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入： </strong>quality = [10,20,5], wage = [70,50,30], K = 2\n<strong>输出： </strong>105.00000\n<strong>解释：</strong> 我们向 0 号工人支付 70，向 2 号工人支付 35。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入： </strong>quality = [3,1,10,10,1], wage = [4,8,2,2,7], K = 3\n<strong>输出： </strong>30.66667\n<strong>解释： </strong>我们向 0 号工人支付 4，向 2 号和 3 号分别支付 13.33333。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= K &lt;= N &lt;= 10000</code>，其中&nbsp;<code>N = quality.length = wage.length</code></li> \n <li><code>1 &lt;= quality[i] &lt;= 10000</code></li> \n <li><code>1 &lt;= wage[i] &lt;= 10000</code></li> \n <li>与正确答案误差在&nbsp;<code>10^-5</code>&nbsp;之内的答案将被视为正确的。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('858. 镜面反射', '<p>有一个特殊的正方形房间，每面墙上都有一面镜子。除西南角以外，每个角落都放有一个接受器，编号为&nbsp;<code>0</code>，&nbsp;<code>1</code>，以及&nbsp;<code>2</code>。</p> \n<p>正方形房间的墙壁长度为&nbsp;<code>p</code>，一束激光从西南角射出，首先会与东墙相遇，入射点到接收器 <code>0</code> 的距离为 <code>q</code> 。</p> \n<p>返回光线最先遇到的接收器的编号（保证光线最终会遇到一个接收器）。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入： </strong>p = 2, q = 1\n<strong>输出： </strong>2\n<strong>解释： </strong>这条光线在第一次被反射回左边的墙时就遇到了接收器 2 。\n<img style=\"height: 217px; width: 218px;\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/06/22/reflection.png\" alt=\"\"></pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= p &lt;= 1000</code></li> \n <li><code>0 &lt;= q &lt;= p</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('859. 亲密字符串', '<p>给定两个由小写字母构成的字符串&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;，只要我们可以通过交换 <code>A</code> 中的两个字母得到与 <code>B</code> 相等的结果，就返回&nbsp;<code>true</code>&nbsp;；否则返回 <code>false</code> 。</p> \n<p>交换字母的定义是取两个下标 <code>i</code> 和 <code>j</code> （下标从 <code>0</code> 开始），只要 <code>i!=j</code> 就交换 <code>A[i]</code> 和 <code>A[j]</code> 处的字符。例如，在 <code>\"abcd\"</code> 中交换下标 <code>0</code> 和下标 <code>2</code> 的元素可以生成 <code>\"cbad\"</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入： </strong>A = \"ab\", B = \"ba\"\n<strong>输出： </strong>true<strong>\n解释： </strong>你可以交换 A[0] = \'a\' 和 A[1] = \'b\' 生成 \"ba\"，此时 A 和 B 相等。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入： </strong>A = \"ab\", B = \"ab\"\n<strong>输出： </strong>false\n<strong>解释： </strong>你只能交换 A[0] = \'a\' 和 A[1] = \'b\' 生成 \"ba\"，此时 A 和 B 不相等。\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入： </strong>A = \"aa\", B = \"aa\"\n<strong>输出： </strong>true\n<strong>解释： </strong>你可以交换 A[0] = \'a\' 和 A[1] = \'a\' 生成 \"aa\"，此时 A 和 B 相等。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入： </strong>A = \"aaaaaaabc\", B = \"aaaaaaacb\"\n<strong>输出： </strong>true\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入： </strong>A = \"\", B = \"aa\"\n<strong>输出： </strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= A.length &lt;= 20000</code></li> \n <li><code>0 &lt;= B.length &lt;= 20000</code></li> \n <li><code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;仅由小写字母构成。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('86. 分隔链表', '<p>给你一个链表的头节点 <code>head</code> 和一个特定值<em> </em><code>x</code> ，请你对链表进行分隔，使得所有 <strong>小于</strong> <code>x</code> 的节点都出现在 <strong>大于或等于</strong> <code>x</code> 的节点之前。</p> \n<p>你应当 <strong>保留</strong> 两个分区中每个节点的初始相对位置。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 662px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2021/01/04/partition.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,4,3,2,5,2], x = 3\n<strong>输出</strong>：[1,2,2,4,3,5]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>head = [2,1], x = 2\n<strong>输出</strong>：[1,2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表中节点的数目在范围 <code>[0, 200]</code> 内</li> \n <li><code>-100 &lt;= Node.val &lt;= 100</code></li> \n <li><code>-200 &lt;= x &lt;= 200</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('860. 柠檬水找零', '<p>在柠檬水摊上，每一杯柠檬水的售价为&nbsp;<code>5</code>&nbsp;美元。顾客排队购买你的产品，（按账单 <code>bills</code> 支付的顺序）一次购买一杯。</p> \n<p>每位顾客只买一杯柠檬水，然后向你付 <code>5</code> 美元、<code>10</code> 美元或 <code>20</code> 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 <code>5</code> 美元。</p> \n<p>注意，一开始你手头没有任何零钱。</p> \n<p>给你一个整数数组 <code>bills</code> ，其中 <code>bills[i]</code> 是第 <code>i</code> 位顾客付的账。如果你能给每位顾客正确找零，返回&nbsp;<code>true</code>&nbsp;，否则返回 <code>false</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>bills = [5,5,5,10,20]\n<strong>输出：</strong>true\n<strong>解释：\n</strong>前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。\n第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。\n第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。\n由于所有客户都得到了正确的找零，所以我们输出 true。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>bills = [5,5,10,10,20]\n<strong>输出：</strong>false\n<strong>解释：</strong>\n前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。\n对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。\n对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。\n由于不是每位顾客都得到了正确的找零，所以答案是 false。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>bills = [5,5,10]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>bills = [10,10]\n<strong>输出：</strong>false</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= bills.length &lt;= 10<sup>5</sup></code></li> \n <li><code>bills[i]</code>&nbsp;不是&nbsp;<code>5</code>&nbsp;就是&nbsp;<code>10</code>&nbsp;或是&nbsp;<code>20</code>&nbsp;</li> \n</ul>');
INSERT INTO `leecode` VALUES ('861. 翻转矩阵后的得分', '<p>有一个二维矩阵&nbsp;<code>A</code> 其中每个元素的值为&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code>&nbsp;。</p> \n<p>移动是指选择任一行或列，并转换该行或列中的每一个值：将所有 <code>0</code> 都更改为 <code>1</code>，将所有 <code>1</code> 都更改为 <code>0</code>。</p> \n<p>在做出任意次数的移动后，将该矩阵的每一行都按照二进制数来解释，矩阵的得分就是这些数字的总和。</p> \n<p>返回尽可能高的分数。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[[0,0,1,1],[1,0,1,0],[1,1,0,0]]\n<strong>输出：</strong>39\n<strong>解释：\n</strong>转换为 [[1,1,1,1],[1,0,0,1],[1,1,1,1]]\n0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 20</code></li> \n <li><code>1 &lt;= A[0].length &lt;= 20</code></li> \n <li><code>A[i][j]</code>&nbsp;是&nbsp;<code>0</code> 或&nbsp;<code>1</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('862. 和至少为 K 的最短子数组', '<p>返回 <code>A</code> 的最短的非空连续子数组的<strong>长度</strong>，该子数组的和至少为 <code>K</code> 。</p> \n<p>如果没有和至少为&nbsp;<code>K</code>&nbsp;的非空子数组，返回&nbsp;<code>-1</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = [1], K = 1\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = [1,2], K = 4\n<strong>输出：</strong>-1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>A = [2,-1,2], K = 3\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 50000</code></li> \n <li><code>-10 ^ 5&nbsp;&lt;= A[i] &lt;= 10 ^ 5</code></li> \n <li><code>1 &lt;= K &lt;= 10 ^ 9</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('863. 二叉树中所有距离为 K 的结点', '<p>给定一个二叉树（具有根结点&nbsp;<code>root</code>），&nbsp;一个目标结点&nbsp;<code>target</code>&nbsp;，和一个整数值 <code>K</code> 。</p> \n<p>返回到目标结点 <code>target</code> 距离为 <code>K</code> 的所有结点的值的列表。 答案可以以任何顺序返回。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2\n<strong>输出：</strong>[7,4,1]\n<strong>解释：</strong>\n所求结点为与目标结点（值为 5）距离为 2 的结点，\n值分别为 7，4，以及 1\n\n<img style=\"height: 240px; width: 280px;\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png\" alt=\"\">\n\n注意，输入的 \"root\" 和 \"target\" 实际上是树上的结点。\n上面的输入仅仅是对这些对象进行了序列化描述。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>给定的树是非空的。</li> \n <li>树上的每个结点都具有唯一的值&nbsp;<code>0 &lt;= node.val &lt;= 500</code>&nbsp;。</li> \n <li>目标结点&nbsp;<code>target</code>&nbsp;是树上的结点。</li> \n <li><code>0 &lt;= K &lt;= 1000</code>.</li> \n</ol>');
INSERT INTO `leecode` VALUES ('864. 获取所有钥匙的最短路径', '<p>给定一个二维网格&nbsp;<code>grid</code>。&nbsp;<code>\".\"</code>&nbsp;代表一个空房间，&nbsp;<code>\"#\"</code>&nbsp;代表一堵墙，&nbsp;<code>\"@\"</code>&nbsp;是起点，（<code>\"a\"</code>,&nbsp;<code>\"b\"</code>, ...）代表钥匙，（<code>\"A\"</code>,&nbsp;<code>\"B\"</code>, ...）代表锁。</p> \n<p>我们从起点开始出发，一次移动是指向四个基本方向之一行走一个单位空间。我们不能在网格外面行走，也无法穿过一堵墙。如果途经一个钥匙，我们就把它捡起来。除非我们手里有对应的钥匙，否则无法通过锁。</p> \n<p>假设 K 为钥匙/锁的个数，且满足&nbsp;<code>1 &lt;= K &lt;= 6</code>，字母表中的前 K 个字母在网格中都有自己对应的一个小写和一个大写字母。换言之，每个锁有唯一对应的钥匙，每个钥匙也有唯一对应的锁。另外，代表钥匙和锁的字母互为大小写并按字母顺序排列。</p> \n<p>返回获取所有钥匙所需要的移动的最少次数。如果无法获取所有钥匙，返回&nbsp;<code>-1</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[\"@.a.#\",\"###.#\",\"b.A.B\"]\n<strong>输出：</strong>8\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[\"@..aA\",\"..B#.\",\"....b\"]\n<strong>输出：</strong>6\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= grid.length&nbsp;&lt;= 30</code></li> \n <li><code>1 &lt;= grid[0].length&nbsp;&lt;= 30</code></li> \n <li><code>grid[i][j]</code>&nbsp;只含有&nbsp;<code>\'.\'</code>,&nbsp;<code>\'#\'</code>,&nbsp;<code>\'@\'</code>,&nbsp;<code>\'a\'-</code><code>\'f</code><code>\'</code>&nbsp;以及&nbsp;<code>\'A\'-\'F\'</code></li> \n <li>钥匙的数目范围是&nbsp;<code>[1, 6]</code>，每个钥匙都对应一个不同的字母，正好打开一个对应的锁。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('865. 具有所有最深节点的最小子树', '<p>给定一个根为&nbsp;<code>root</code>&nbsp;的二叉树，每个节点的深度是 <strong>该节点到根的最短距离</strong> 。</p> \n<p>如果一个节点在 <strong>整个树 </strong>的任意节点之间具有最大的深度，则该节点是 <strong>最深的</strong> 。</p> \n<p>一个节点的 <strong>子树</strong> 是该节点加上它的所有后代的集合。</p> \n<p>返回能满足 <strong>以该节点为根的子树中包含所有最深的节点</strong> 这一条件的具有最大深度的节点。</p> \n<p>&nbsp;</p> \n<p><strong>注意：</strong>本题与力扣 1123 重复：<a href=\"https://leetcode-cn.com/problems/lowest-common-ancestor-of-deepest-leaves/\">https://leetcode-cn.com/problems/lowest-common-ancestor-of-deepest-leaves/</a></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img width=\"560\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png\" height=\"475\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4]\n<strong>输出：</strong>[2,7,4]\n<strong>解释：</strong>\n我们返回值为 2 的节点，在图中用黄色标记。\n在图中用蓝色标记的是树的最深的节点。\n注意，节点 5、3 和 2 包含树中最深的节点，但节点 2 的子树最小，因此我们返回它。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = [1]\n<strong>输出：</strong>[1]\n<strong>解释：</strong>根节点是树中最深的节点。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [0,1,3,null,2]\n<strong>输出：</strong>[2]\n<strong>解释：</strong>树中最深的节点为 2 ，有效子树为节点 2、1 和 0 的子树，但节点 2 的子树最小。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点的数量介于&nbsp;1 和&nbsp;500 之间。</li> \n <li><code>0 &lt;= Node.val &lt;= 500</code></li> \n <li>每个节点的值都是独一无二的。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('866. 回文素数', '<p>求出大于或等于&nbsp;<code>N</code>&nbsp;的最小回文素数。</p> \n<p>回顾一下，如果一个数大于 1，且其因数只有 1 和它自身，那么这个数是<em>素数</em>。</p> \n<p>例如，2，3，5，7，11 以及&nbsp;13 是素数。</p> \n<p>回顾一下，如果一个数从左往右读与从右往左读是一样的，那么这个数是<em>回文数。</em></p> \n<p>例如，12321 是回文数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>6\n<strong>输出：</strong>7\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>8\n<strong>输出：</strong>11\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<pre><strong>输入：</strong>13\n<strong>输出：</strong>101</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= N &lt;= 10^8</code></li> \n <li>答案肯定存在，且小于&nbsp;<code>2 * 10^8</code>。</li> \n</ul> \n<p>&nbsp;</p> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('867. 转置矩阵', '<p>给你一个二维整数数组 <code>matrix</code>，&nbsp;返回 <code>matrix</code> 的 <strong>转置矩阵</strong> 。</p> \n<p>矩阵的 <strong>转置</strong> 是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。</p> \n<p><img style=\"width: 600px; height: 197px;\" src=\"https://assets.leetcode.com/uploads/2021/02/10/hint_transpose.png\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>输出：</strong>[[1,4,7],[2,5,8],[3,6,9]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>matrix = [[1,2,3],[4,5,6]]\n<strong>输出：</strong>[[1,4],[2,5],[3,6]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 1000</code></li> \n <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> \n <li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('868. 二进制间距', '<p>给定一个正整数 <code>n</code>，找到并返回 <code>n</code> 的二进制表示中两个 <strong>相邻</strong> 1 之间的<strong> 最长距离 </strong>。如果不存在两个相邻的 1，返回 <code>0</code> 。</p> \n<p>如果只有 <code>0</code> 将两个 <code>1</code> 分隔开（可能不存在 <code>0</code> ），则认为这两个 1 彼此 <strong>相邻</strong> 。两个 <code>1</code> 之间的距离是它们的二进制表示中位置的绝对差。例如，<code>\"1001\"</code> 中的两个 <code>1</code> 的距离为 3 。</p> \n<p>&nbsp;</p> \n<ul> \n</ul> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 22\n<strong>输出：</strong>2\n<strong>解释：</strong>\n22 的二进制是 \"10110\" 。\n在 22 的二进制表示中，有三个 1，组成两对相邻的 1 。\n第一对相邻的 1 中，两个 1 之间的距离为 2 。\n第二对相邻的 1 中，两个 1 之间的距离为 1 。\n答案取两个距离之中最大的，也就是 2 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 5\n<strong>输出：</strong>2\n<strong>解释：</strong>\n5 的二进制是 \"101\" 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 6\n<strong>输出：</strong>1\n<strong>解释：</strong>\n6 的二进制是 \"110\" 。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 8\n<strong>输出：</strong>0\n<strong>解释：</strong>\n8 的二进制是 \"1000\" 。\n在 8 的二进制表示中没有相邻的两个 1，所以返回 0 。\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= N &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('869. 重新排序得到 2 的幂', '<p>给定正整数 <code>N</code>&nbsp;，我们按任何顺序（包括原始顺序）将数字重新排序，注意其前导数字不能为零。</p> \n<p>如果我们可以通过上述方式得到&nbsp;2 的幂，返回 <code>true</code>；否则，返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>1\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>10\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>16\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>24\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>46\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= N &lt;= 10^9</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('87. 扰乱字符串', '使用下面描述的算法可以扰乱字符串 \n<code>s</code> 得到字符串 \n<code>t</code> ： \n<ol> \n <li>如果字符串的长度为 1 ，算法停止</li> \n <li>如果字符串的长度 &gt; 1 ，执行下述步骤： \n  <ul> \n   <li>在一个随机下标处将字符串分割成两个非空的子字符串。即，如果已知字符串 <code>s</code> ，则可以将其分成两个子字符串 <code>x</code> 和 <code>y</code> ，且满足 <code>s = x + y</code> 。</li> \n   <li><strong>随机</strong> 决定是要「交换两个子字符串」还是要「保持这两个子字符串的顺序不变」。即，在执行这一步骤之后，<code>s</code> 可能是 <code>s = x + y</code> 或者 <code>s = y + x</code> 。</li> \n   <li>在 <code>x</code> 和 <code>y</code> 这两个子字符串上继续从步骤 1 开始递归执行此算法。</li> \n  </ul> </li> \n</ol> \n<p>给你两个 <strong>长度相等</strong> 的字符串 <code>s1</code><em> </em>和&nbsp;<code>s2</code>，判断&nbsp;<code>s2</code><em>&nbsp;</em>是否是&nbsp;<code>s1</code><em>&nbsp;</em>的扰乱字符串。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s1 = \"great\", s2 = \"rgeat\"\n<strong>输出：</strong>true\n<strong>解释：</strong>s1 上可能发生的一种情形是：\n\"great\" --&gt; \"gr/eat\" // 在一个随机下标处分割得到两个子字符串\n\"gr/eat\" --&gt; \"gr/eat\" // 随机决定：「保持这两个子字符串的顺序不变」\n\"gr/eat\" --&gt; \"g/r / e/at\" // 在子字符串上递归执行此算法。两个子字符串分别在随机下标处进行一轮分割\n\"g/r / e/at\" --&gt; \"r/g / e/at\" // 随机决定：第一组「交换两个子字符串」，第二组「保持这两个子字符串的顺序不变」\n\"r/g / e/at\" --&gt; \"r/g / e/ a/t\" // 继续递归执行此算法，将 \"at\" 分割得到 \"a/t\"\n\"r/g / e/ a/t\" --&gt; \"r/g / e/ a/t\" // 随机决定：「保持这两个子字符串的顺序不变」\n算法终止，结果字符串和 s2 相同，都是 \"rgeat\"\n这是一种能够扰乱 s1 得到 s2 的情形，可以认为 s2 是 s1 的扰乱字符串，返回 true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s1 = \"abcde\", s2 = \"caebd\"\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s1 = \"a\", s2 = \"a\"\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>s1.length == s2.length</code></li> \n <li><code>1 &lt;= s1.length &lt;= 30</code></li> \n <li><code>s1</code> 和 <code>s2</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('870. 优势洗牌', '<p>给定两个大小相等的数组&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>，A 相对于 B 的<em>优势</em>可以用满足&nbsp;<code>A[i] &gt; B[i]</code>&nbsp;的索引 <code>i</code>&nbsp;的数目来描述。</p> \n<p>返回&nbsp;<code>A</code>&nbsp;的<strong>任意</strong>排列，使其相对于 <code>B</code>&nbsp;的优势最大化。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = [2,7,11,15], B = [1,10,4,11]\n<strong>输出：</strong>[2,11,7,15]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = [12,24,8,32], B = [13,25,32,11]\n<strong>输出：</strong>[24,32,8,12]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length = B.length &lt;= 10000</code></li> \n <li><code>0 &lt;= A[i] &lt;= 10^9</code></li> \n <li><code>0 &lt;= B[i] &lt;= 10^9</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('871. 最低加油次数', '<p>汽车从起点出发驶向目的地，该目的地位于出发位置东面 <code>target</code>&nbsp;英里处。</p> \n<p>沿途有加油站，每个&nbsp;<code>station[i]</code>&nbsp;代表一个加油站，它位于出发位置东面&nbsp;<code>station[i][0]</code>&nbsp;英里处，并且有&nbsp;<code>station[i][1]</code>&nbsp;升汽油。</p> \n<p>假设汽车油箱的容量是无限的，其中最初有&nbsp;<code>startFuel</code>&nbsp;升燃料。它每行驶 1 英里就会用掉 1 升汽油。</p> \n<p>当汽车到达加油站时，它可能停下来加油，将所有汽油从加油站转移到汽车中。</p> \n<p>为了到达目的地，汽车所必要的最低加油次数是多少？如果无法到达目的地，则返回 <code>-1</code> 。</p> \n<p>注意：如果汽车到达加油站时剩余燃料为 0，它仍然可以在那里加油。如果汽车到达目的地时剩余燃料为 0，仍然认为它已经到达目的地。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>target = 1, startFuel = 1, stations = []\n<strong>输出：</strong>0\n<strong>解释：</strong>我们可以在不加油的情况下到达目的地。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>target = 100, startFuel = 1, stations = [[10,100]]\n<strong>输出：</strong>-1\n<strong>解释：</strong>我们无法抵达目的地，甚至无法到达第一个加油站。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\n<strong>输出：</strong>2\n<strong>解释：</strong>\n我们出发时有 10 升燃料。\n我们开车来到距起点 10 英里处的加油站，消耗 10 升燃料。将汽油从 0 升加到 60 升。\n然后，我们从 10 英里处的加油站开到 60 英里处的加油站（消耗 50 升燃料），\n并将汽油从 10 升加到 50 升。然后我们开车抵达目的地。\n我们沿途在1两个加油站停靠，所以返回 2 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= target, startFuel, stations[i][1] &lt;= 10^9</code></li> \n <li><code>0 &lt;= stations.length &lt;= 500</code></li> \n <li><code>0 &lt; stations[0][0] &lt; stations[1][0] &lt; ... &lt; stations[stations.length-1][0] &lt; target</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('872. 叶子相似的树', '<p>请考虑一棵二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个&nbsp;<strong>叶值序列 </strong>。</p> \n<p><img style=\"height: 240px; width: 300px;\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png\" alt=\"\"></p> \n<p>举个例子，如上图所示，给定一棵叶值序列为&nbsp;<code>(6, 7, 4, 9, 8)</code>&nbsp;的树。</p> \n<p>如果有两棵二叉树的叶值序列是相同，那么我们就认为它们是&nbsp;<em>叶相似&nbsp;</em>的。</p> \n<p>如果给定的两个根结点分别为&nbsp;<code>root1</code> 和&nbsp;<code>root2</code>&nbsp;的树是叶相似的，则返回&nbsp;<code>true</code>；否则返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 297px; width: 750px;\" src=\"https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root1 = [1], root2 = [1]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root1 = [1], root2 = [2]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>root1 = [1,2], root2 = [2,2]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 5：</strong></p> \n<p><img style=\"height: 165px; width: 450px;\" src=\"https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-2.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>root1 = [1,2,3], root2 = [1,3,2]\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>给定的两棵树可能会有&nbsp;<code>1</code>&nbsp;到 <code>200</code>&nbsp;个结点。</li> \n <li>给定的两棵树上的值介于 <code>0</code> 到 <code>200</code> 之间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('873. 最长的斐波那契子序列的长度', '<p>如果序列&nbsp;<code>X_1, X_2, ..., X_n</code>&nbsp;满足下列条件，就说它是&nbsp;<em>斐波那契式&nbsp;</em>的：</p> \n<ul> \n <li><code>n &gt;= 3</code></li> \n <li>对于所有&nbsp;<code>i + 2 &lt;= n</code>，都有&nbsp;<code>X_i + X_{i+1} = X_{i+2}</code></li> \n</ul> \n<p>给定一个<strong>严格递增</strong>的正整数数组形成序列 arr&nbsp;，找到 <font color=\"#c7254e\"><font face=\"Menlo, Monaco, Consolas, Courier New, monospace\"><span style=\"font-size:12.600000381469727px\"><span style=\"caret-color:#c7254e\"><span style=\"background-color:#f9f2f4\">arr</span></span></span></font></font>&nbsp;中最长的斐波那契式的子序列的长度。如果一个不存在，返回&nbsp;&nbsp;0 。</p> \n<p><em>（回想一下，子序列是从原序列 <font color=\"#c7254e\"><font face=\"Menlo, Monaco, Consolas, Courier New, monospace\"><span style=\"font-size:12.600000381469727px\"><span style=\"caret-color:#c7254e\"><span style=\"background-color:#f9f2f4\">arr</span></span></span></font></font>&nbsp;中派生出来的，它从 <font color=\"#c7254e\"><font face=\"Menlo, Monaco, Consolas, Courier New, monospace\"><span style=\"font-size:12.600000381469727px\"><span style=\"caret-color:#c7254e\"><span style=\"background-color:#f9f2f4\">arr</span></span></span></font></font>&nbsp;中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如，&nbsp;<code>[3, 5, 8]</code>&nbsp;是&nbsp;<code>[3, 4, 5, 6, 7, 8]</code>&nbsp;的一个子序列）</em></p> \n<p>&nbsp;</p> \n<ul> \n</ul> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: </strong>arr =<strong> </strong>[1,2,3,4,5,6,7,8]\n<strong>输出: </strong>5\n<strong>解释: </strong>最长的斐波那契式子序列为 [1,2,3,5,8] 。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入: </strong>arr =<strong> </strong>[1,3,7,11,12,14,18]\n<strong>输出: </strong>3\n<strong>解释</strong>: 最长的斐波那契式子序列有 [1,11,12]、[3,11,14] 以及 [7,11,18] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= arr.length &lt;= 1000</code></li> \n <li> <p><code>1 &lt;= arr[i] &lt; arr[i + 1] &lt;= 10^9</code></p> </li> \n</ul>');
INSERT INTO `leecode` VALUES ('874. 模拟行走机器人', '<p>机器人在一个无限大小的 XY 网格平面上行走，从点&nbsp;<code>(0, 0)</code> 处开始出发，面向北方。该机器人可以接收以下三种类型的命令 <code>commands</code> ：</p> \n<ul> \n <li><code>-2</code> ：向左转&nbsp;<code>90</code> 度</li> \n <li><code>-1</code> ：向右转 <code>90</code> 度</li> \n <li><code>1 &lt;= x &lt;= 9</code> ：向前移动&nbsp;<code>x</code>&nbsp;个单位长度</li> \n</ul> \n<p>在网格上有一些格子被视为障碍物&nbsp;<code>obstacles</code> 。第 <code>i</code>&nbsp;个障碍物位于网格点 &nbsp;<code>obstacles[i] = (x<sub>i</sub>, y<sub>i</sub>)</code> 。</p> \n<p>机器人无法走到障碍物上，它将会停留在障碍物的前一个网格方块上，但仍然可以继续尝试进行该路线的其余部分。</p> \n<p>返回从原点到机器人所有经过的路径点（坐标为整数）的最大欧式距离的平方。（即，如果距离为 <code>5</code> ，则返回 <code>25</code> ）</p> \n<div class=\"d-google dictRoot saladict-panel isAnimate\"> \n <div> \n  <div class=\"MachineTrans-Text\"> \n   <div class=\"MachineTrans-Lines\"> \n    <div class=\"MachineTrans-Lines-collapse MachineTrans-lang-en\">\n     &nbsp;\n    </div> \n   </div> \n   <div class=\"MachineTrans-Lines\"> \n    <p class=\"MachineTrans-lang-zh-CN\"><strong>注意：</strong></p> \n    <ul> \n     <li class=\"MachineTrans-lang-zh-CN\">北表示 <code>+Y</code> 方向。</li> \n     <li class=\"MachineTrans-lang-zh-CN\">东表示 <code>+X</code> 方向。</li> \n     <li class=\"MachineTrans-lang-zh-CN\">南表示 <code>-Y</code> 方向。</li> \n     <li class=\"MachineTrans-lang-zh-CN\">西表示 <code>-X</code> 方向。</li> \n    </ul> \n   </div> \n  </div> \n </div> \n</div> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>commands = [4,-1,3], obstacles = []\n<strong>输出：</strong>25\n<strong>解释：\n</strong>机器人开始位于 (0, 0)：\n1. 向北移动 4 个单位，到达 (0, 4)\n2. 右转\n3. 向东移动 3 个单位，到达 (3, 4)\n距离原点最远的是 (3, 4) ，距离为 3<sup>2</sup> + 4<sup>2</sup> = 25</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>commands = [4,-1,4,-2,4], obstacles = [[2,4]]\n<strong>输出：</strong>65\n<strong>解释</strong>：机器人开始位于 (0, 0)：\n1. 向北移动 4 个单位，到达 (0, 4)\n2. 右转\n3. 向东移动 1 个单位，然后被位于 (2, 4) 的障碍物阻挡，机器人停在 (1, 4)\n4. 左转\n5. 向北走 4 个单位，到达 (1, 8)\n距离原点最远的是 (1, 8) ，距离为 1<sup>2</sup> + 8<sup>2</sup> = 65</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= commands.length &lt;= 10<sup>4</sup></code></li> \n <li><code>commands[i]</code> is one of the values in the list <code>[-2,-1,1,2,3,4,5,6,7,8,9]</code>.</li> \n <li><code>0 &lt;= obstacles.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-3 * 10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 3 * 10<sup>4</sup></code></li> \n <li>答案保证小于 <code>2<sup>31</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('875. 爱吃香蕉的珂珂', '<p>珂珂喜欢吃香蕉。这里有&nbsp;<code>N</code>&nbsp;堆香蕉，第 <code>i</code> 堆中有&nbsp;<code>piles[i]</code>&nbsp;根香蕉。警卫已经离开了，将在&nbsp;<code>H</code>&nbsp;小时后回来。</p> \n<p>珂珂可以决定她吃香蕉的速度&nbsp;<code>K</code>&nbsp;（单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉 <code>K</code> 根。如果这堆香蕉少于 <code>K</code> 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。&nbsp;&nbsp;</p> \n<p>珂珂喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。</p> \n<p>返回她可以在 <code>H</code> 小时内吃掉所有香蕉的最小速度 <code>K</code>（<code>K</code> 为整数）。</p> \n<p>&nbsp;</p> \n<ul> \n</ul> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: </strong>piles = [3,6,7,11], H = 8\n<strong>输出: </strong>4\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入: </strong>piles = [30,11,23,4,20], H = 5\n<strong>输出: </strong>30\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<pre><strong>输入: </strong>piles = [30,11,23,4,20], H = 6\n<strong>输出: </strong>23\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= piles.length &lt;= 10^4</code></li> \n <li><code>piles.length &lt;= H &lt;= 10^9</code></li> \n <li><code>1 &lt;= piles[i] &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('876. 链表的中间结点', '<p>给定一个头结点为 <code>head</code>&nbsp;的非空单链表，返回链表的中间结点。</p> \n<p>如果有两个中间结点，则返回第二个中间结点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1,2,3,4,5]\n<strong>输出：</strong>此列表中的结点 3 (序列化形式：[3,4,5])\n返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。\n注意，我们返回了一个 ListNode 类型的对象 ans，这样：\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>[1,2,3,4,5,6]\n<strong>输出：</strong>此列表中的结点 4 (序列化形式：[4,5,6])\n由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>给定链表的结点数介于&nbsp;<code>1</code>&nbsp;和&nbsp;<code>100</code>&nbsp;之间。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('877. 石子游戏', '<p>亚历克斯和李用几堆石子在做游戏。偶数堆石子<strong>排成一行</strong>，每堆都有正整数颗石子&nbsp;<code>piles[i]</code>&nbsp;。</p> \n<p>游戏以谁手中的石子最多来决出胜负。石子的总数是奇数，所以没有平局。</p> \n<p>亚历克斯和李轮流进行，亚历克斯先开始。 每回合，玩家从行的开始或结束处取走整堆石头。 这种情况一直持续到没有更多的石子堆为止，此时手中石子最多的玩家获胜。</p> \n<p>假设亚历克斯和李都发挥出最佳水平，当亚历克斯赢得比赛时返回&nbsp;<code>true</code>&nbsp;，当李赢得比赛时返回&nbsp;<code>false</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[5,3,4,5]\n<strong>输出：</strong>true\n<strong>解释：</strong>\n亚历克斯先开始，只能拿前 5 颗或后 5 颗石子 。\n假设他取了前 5 颗，这一行就变成了 [3,4,5] 。\n如果李拿走前 3 颗，那么剩下的是 [4,5]，亚历克斯拿走后 5 颗赢得 10 分。\n如果李拿走后 5 颗，那么剩下的是 [3,4]，亚历克斯拿走后 4 颗赢得 9 分。\n这表明，取前 5 颗石子对亚历克斯来说是一个胜利的举动，所以我们返回 true 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= piles.length &lt;= 500</code></li> \n <li><code>piles.length</code> 是偶数。</li> \n <li><code>1 &lt;= piles[i] &lt;= 500</code></li> \n <li><code>sum(piles)</code>&nbsp;是奇数。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('878. 第 N 个神奇数字', '<p>如果正整数可以被 A 或 B 整除，那么它是神奇的。</p> \n<p>返回第 N 个神奇数字。由于答案可能非常大，<strong>返回它模&nbsp;</strong><code>10^9 + 7</code>&nbsp;<strong>的结果</strong>。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>N = 1, A = 2, B = 3\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>N = 4, A = 2, B = 3\n<strong>输出：</strong>6\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>N = 5, A = 2, B = 4\n<strong>输出：</strong>10\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>N = 3, A = 6, B = 4\n<strong>输出：</strong>8\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= N&nbsp;&lt;= 10^9</code></li> \n <li><code>2 &lt;= A&nbsp;&lt;= 40000</code></li> \n <li><code>2 &lt;= B&nbsp;&lt;= 40000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('879. 盈利计划', '<p>集团里有 <code>n</code> 名员工，他们可以完成各种各样的工作创造利润。</p> \n<p>第&nbsp;<code>i</code>&nbsp;种工作会产生&nbsp;<code>profit[i]</code>&nbsp;的利润，它要求&nbsp;<code>group[i]</code>&nbsp;名成员共同参与。如果成员参与了其中一项工作，就不能参与另一项工作。</p> \n<p>工作的任何至少产生&nbsp;<code>minProfit</code> 利润的子集称为 <strong>盈利计划</strong> 。并且工作的成员总数最多为 <code>n</code> 。</p> \n<p>有多少种计划可以选择？因为答案很大，所以<strong> 返回结果模&nbsp;</strong><code>10^9 + 7</code><strong>&nbsp;的值</strong>。</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <pre><strong>输入：</strong>n = 5, minProfit = 3, group = [2,2], profit = [2,3]\n<strong>输出：</strong>2\n<strong>解释：</strong>至少产生 3 的利润，该集团可以完成工作 0 和工作 1 ，或仅完成工作 1 。\n总的来说，有两种计划。</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]\n<strong>输出：</strong>7\n<strong>解释：</strong>至少产生 5 的利润，只要完成其中一种工作就行，所以该集团可以完成任何工作。\n有 7 种可能的计划：(0)，(1)，(2)，(0,1)，(0,2)，(1,2)，以及 (0,1,2) 。</pre> \n </div> \n</div> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>0 &lt;= minProfit &lt;= 100</code></li> \n <li><code>1 &lt;= group.length &lt;= 100</code></li> \n <li><code>1 &lt;= group[i] &lt;= 100</code></li> \n <li><code>profit.length == group.length</code></li> \n <li><code>0 &lt;= profit[i] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('88. 合并两个有序数组', '<p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组&nbsp;<code>nums1</code><em> </em>和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p> \n<p>请你 <strong>合并</strong> <code>nums2</code><em> </em>到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p> \n<p><strong>注意：</strong>最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n<strong>输出：</strong>[1,2,2,3,5,6]\n<strong>解释：</strong>需要合并 [1,2,3] 和 [2,5,6] 。\n合并结果是 [<em><strong>1</strong></em>,<em><strong>2</strong></em>,2,<em><strong>3</strong></em>,5,6] ，其中斜体加粗标注的为 nums1 中的元素。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums1 = [1], m = 1, nums2 = [], n = 0\n<strong>输出：</strong>[1]\n<strong>解释：</strong>需要合并 [1] 和 [] 。\n合并结果是 [1] 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums1 = [0], m = 0, nums2 = [1], n = 1\n<strong>输出：</strong>[1]\n<strong>解释：</strong>需要合并的数组是 [] 和 [1] 。\n合并结果是 [1] 。\n注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>nums1.length == m + n</code></li> \n <li><code>nums2.length == n</code></li> \n <li><code>0 &lt;= m, n &lt;= 200</code></li> \n <li><code>1 &lt;= m + n &lt;= 200</code></li> \n <li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你可以设计实现一个时间复杂度为 <code>O(m + n)</code> 的算法解决此问题吗？</p>');
INSERT INTO `leecode` VALUES ('880. 索引处的解码字符串', '<p>给定一个编码字符串 <code>S</code>。请你找出<em> </em><strong>解码字符串</strong> 并将其写入磁带。解码时，从编码字符串中<strong> 每次读取一个字符 </strong>，并采取以下步骤：</p> \n<ul> \n <li>如果所读的字符是字母，则将该字母写在磁带上。</li> \n <li>如果所读的字符是数字（例如 <code>d</code>），则整个当前磁带总共会被重复写&nbsp;<code>d-1</code> 次。</li> \n</ul> \n<p>现在，对于给定的编码字符串 <code>S</code> 和索引 <code>K</code>，查找并返回解码字符串中的第&nbsp;<code>K</code>&nbsp;个字母。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>S = \"leet2code3\", K = 10\n<strong>输出：</strong>\"o\"\n<strong>解释：</strong>\n解码后的字符串为 \"leetleetcodeleetleetcodeleetleetcode\"。\n字符串中的第 10 个字母是 \"o\"。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>S = \"ha22\", K = 5\n<strong>输出：</strong>\"h\"\n<strong>解释：</strong>\n解码后的字符串为 \"hahahaha\"。第 5 个字母是 \"h\"。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>S = \"a2345678999999999999999\", K = 1\n<strong>输出：</strong>\"a\"\n<strong>解释：</strong>\n解码后的字符串为 \"a\" 重复 8301530446056247680 次。第 1 个字母是 \"a\"。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= S.length &lt;= 100</code></li> \n <li><code>S</code>&nbsp;只包含小写字母与数字 <code>2</code> 到 <code>9</code> 。</li> \n <li><code>S</code>&nbsp;以字母开头。</li> \n <li><code>1 &lt;= K &lt;= 10^9</code></li> \n <li>题目保证 <code>K</code> 小于或等于解码字符串的长度。</li> \n <li>解码后的字符串保证少于&nbsp;<code>2^63</code>&nbsp;个字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('881. 救生艇', '<p>第&nbsp;<code>i</code>&nbsp;个人的体重为&nbsp;<code>people[i]</code>，每艘船可以承载的最大重量为&nbsp;<code>limit</code>。</p> \n<p>每艘船最多可同时载两人，但条件是这些人的重量之和最多为&nbsp;<code>limit</code>。</p> \n<p>返回载到每一个人所需的最小船数。(保证每个人都能被船载)。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>people = [1,2], limit = 3\n<strong>输出：</strong>1\n<strong>解释：</strong>1 艘船载 (1, 2)\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>people = [3,2,2,1], limit = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>3 艘船分别载 (1, 2), (2) 和 (3)\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>people = [3,5,3,4], limit = 5\n<strong>输出：</strong>4\n<strong>解释：</strong>4 艘船分别载 (3), (3), (4), (5)</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;people.length &lt;= 50000</code></li> \n <li><code>1 &lt;= people[i] &lt;=&nbsp;limit &lt;= 30000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('882. 细分图中的可到达结点', '<p>给你一个无向图（<strong>原始图</strong>），图中有 <code>n</code> 个节点，编号从 <code>0</code> 到 <code>n - 1</code> 。你决定将图中的每条边细分为一条节点链，每条边之间的新节点数各不相同。</p> \n<p>图用由边组成的二维数组 <code>edges</code> 表示，其中&nbsp;<code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, cnt<sub>i</sub>]</code> 表示原始图中节点&nbsp;<code>u<sub>i</sub></code> 和&nbsp;<code>v<sub>i</sub></code> 之间存在一条边，<code>cnt<sub>i</sub></code> 是将边细分后的新节点总数。注意，<code>cnt<sub>i</sub> == 0</code> 表示边不可细分。</p> \n<p>要细分边 <code>[ui, vi]</code> ，需要将其替换为 <code>(cnt<sub>i</sub> + 1)</code> 条新边，和&nbsp;<code>cnt<sub>i</sub></code> 个新节点。新节点为 <code>x<sub>1</sub></code>, <code>x<sub>2</sub></code>, ..., <code>x<sub>cnt<sub>i</sub></sub></code> ，新边为 <code>[u<sub>i</sub>, x<sub>1</sub>]</code>, <code>[x<sub>1</sub>, x<sub>2</sub>]</code>, <code>[x<sub>2</sub>, x<sub>3</sub>]</code>, ..., <code>[x<sub>cnt<sub>i</sub>+1</sub>, x<sub>cnt<sub>i</sub></sub>]</code>, <code>[x<sub>cnt<sub>i</sub></sub>, v<sub>i</sub>]</code> 。</p> \n<p class=\"MachineTrans-lang-zh-CN\">现在得到一个新的 <strong>细分图</strong> ，请你计算从节点 <code>0</code> 出发，可以到达多少个节点？节点 <strong>是否可以到达的判断条件</strong> 为：如果节点间距离是 <code>maxMoves</code> 或更少，则视为可以到达；否则，不可到达。</p> \n<p class=\"MachineTrans-lang-zh-CN\">给你原始图和 <code>maxMoves</code> ，返回新的细分图中从节点 <code>0</code> 出发<strong> 可到达的节点数 </strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 600px; height: 247px;\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png\" alt=\"\"> \n<pre><strong>输入：</strong>edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3\n<strong>输出：</strong>13\n<strong>解释：</strong>边的细分情况如上图所示。\n可以到达的节点已经用黄色标注出来。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4\n<strong>输出：</strong>23\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5\n<strong>输出：</strong>1\n<strong>解释：</strong>节点 0 与图的其余部分没有连通，所以只有节点 0 可以到达。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= edges.length &lt;= min(n * (n - 1) / 2, 10<sup>4</sup>)</code></li> \n <li><code>edges[i].length == 3</code></li> \n <li><code>0 &lt;= u<sub>i</sub> &lt; v<sub>i</sub> &lt; n</code></li> \n <li>图中 <strong>不存在平行边</strong></li> \n <li><code>0 &lt;= cnt<sub>i</sub> &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= maxMoves &lt;= 10<sup>9</sup></code></li> \n <li><code>1 &lt;= n &lt;= 3000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('883. 三维形体投影面积', '<p>在&nbsp;<code>N&nbsp;*&nbsp;N</code>&nbsp;的网格中，我们放置了一些与 x，y，z 三轴对齐的&nbsp;<code>1 * 1 * 1</code>&nbsp;立方体。</p> \n<p>每个值&nbsp;<code>v = grid[i][j]</code>&nbsp;表示 <code>v</code>&nbsp;个正方体叠放在单元格&nbsp;<code>(i, j)</code>&nbsp;上。</p> \n<p>现在，我们查看这些立方体在 xy、yz&nbsp;和 zx&nbsp;平面上的<em>投影</em>。</p> \n<p>投影就像影子，将三维形体映射到一个二维平面上。</p> \n<p>在这里，从顶部、前面和侧面看立方体时，我们会看到“影子”。</p> \n<p>返回所有三个投影的总面积。</p> \n<p>&nbsp;</p> \n<ul> \n</ul> \n<ul> \n</ul> \n<ul> \n</ul> \n<ul> \n</ul> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[[2]]\n<strong>输出：</strong>5\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[[1,2],[3,4]]\n<strong>输出：</strong>17\n<strong>解释：</strong>\n这里有该形体在三个轴对齐平面上的三个投影(“阴影部分”)。\n<img style=\"height: 200px; width: 749px;\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png\" alt=\"\">\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[[1,0],[0,2]]\n<strong>输出：</strong>8\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>[[1,1,1],[1,0,1],[1,1,1]]\n<strong>输出：</strong>14\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>[[2,2,2],[2,1,2],[2,2,2]]\n<strong>输出：</strong>21\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= grid.length = grid[0].length&nbsp;&lt;= 50</code></li> \n <li><code>0 &lt;= grid[i][j] &lt;= 50</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('884. 两句话中的不常见单词', '<p>给定两个句子&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;。&nbsp;（<em>句子</em>是一串由空格分隔的单词。每个<em>单词</em>仅由小写字母组成。）</p> \n<p>如果一个单词在其中一个句子中只出现一次，在另一个句子中却没有出现，那么这个单词就是<em>不常见的</em>。</p> \n<p>返回所有不常用单词的列表。</p> \n<p>您可以按任何顺序返回列表。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = \"this apple is sweet\", B = \"this apple is sour\"\n<strong>输出：</strong>[\"sweet\",\"sour\"]\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>A = \"apple apple\", B = \"banana\"\n<strong>输出：</strong>[\"banana\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= A.length &lt;= 200</code></li> \n <li><code>0 &lt;= B.length &lt;= 200</code></li> \n <li><code>A</code> 和&nbsp;<code>B</code>&nbsp;都只包含空格和小写字母。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('885. 螺旋矩阵 III', '<p>在&nbsp;<code>R</code>&nbsp;行&nbsp;<code>C</code>&nbsp;列的矩阵上，我们从&nbsp;<code>(r0, c0)</code>&nbsp;面朝东面开始</p> \n<p>这里，网格的西北角位于第一行第一列，网格的东南角位于最后一行最后一列。</p> \n<p>现在，我们以顺时针按螺旋状行走，访问此网格中的每个位置。</p> \n<p>每当我们移动到网格的边界之外时，我们会继续在网格之外行走（但稍后可能会返回到网格边界）。</p> \n<p>最终，我们到过网格的所有&nbsp;<code>R * C</code>&nbsp;个空间。</p> \n<p>按照访问顺序返回表示网格位置的坐标列表。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>R = 1, C = 4, r0 = 0, c0 = 0\n<strong>输出：</strong>[[0,0],[0,1],[0,2],[0,3]]\n\n<img style=\"height: 99px; width: 174px;\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/24/example_1.png\" alt=\"\">\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>R = 5, C = 6, r0 = 1, c0 = 4\n<strong>输出：</strong>[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\n\n<img style=\"height: 142px; width: 202px;\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/24/example_2.png\" alt=\"\">\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= R &lt;= 100</code></li> \n <li><code>1 &lt;= C &lt;= 100</code></li> \n <li><code>0 &lt;= r0 &lt; R</code></li> \n <li><code>0 &lt;= c0 &lt; C</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('886. 可能的二分法', '<p>给定一组&nbsp;<code>N</code>&nbsp;人（编号为&nbsp;<code>1, 2, ..., N</code>），&nbsp;我们想把每个人分进<strong>任意</strong>大小的两组。</p> \n<p>每个人都可能不喜欢其他人，那么他们不应该属于同一组。</p> \n<p>形式上，如果 <code>dislikes[i] = [a, b]</code>，表示不允许将编号为 <code>a</code> 和 <code>b</code> 的人归入同一组。</p> \n<p>当可以用这种方法将所有人分进两组时，返回 <code>true</code>；否则返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>N = 4, dislikes = [[1,2],[1,3],[2,4]]\n<strong>输出：</strong>true\n<strong>解释：</strong>group1 [1,4], group2 [2,3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>N = 3, dislikes = [[1,2],[1,3],[2,3]]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= N &lt;= 2000</code></li> \n <li><code>0 &lt;= dislikes.length &lt;= 10000</code></li> \n <li><code>dislikes[i].length == 2</code></li> \n <li><code>1 &lt;= dislikes[i][j] &lt;= N</code></li> \n <li><code>dislikes[i][0] &lt; dislikes[i][1]</code></li> \n <li>对于 <code>dislikes[i] == dislikes[j]</code> 不存在 <code>i != j</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('887. 鸡蛋掉落', '<p>给你 <code>k</code> 枚相同的鸡蛋，并可以使用一栋从第 <code>1</code> 层到第 <code>n</code> 层共有 <code>n</code> 层楼的建筑。</p> \n<p>已知存在楼层 <code>f</code> ，满足&nbsp;<code>0 &lt;= f &lt;= n</code> ，任何从<strong> 高于</strong> <code>f</code> 的楼层落下的鸡蛋都会碎，从 <code>f</code> 楼层或比它低的楼层落下的鸡蛋都不会破。</p> \n<p>每次操作，你可以取一枚没有碎的鸡蛋并把它从任一楼层 <code>x</code> 扔下（满足&nbsp;<code>1 &lt;= x &lt;= n</code>）。如果鸡蛋碎了，你就不能再次使用它。如果某枚鸡蛋扔下后没有摔碎，则可以在之后的操作中 <strong>重复使用</strong> 这枚鸡蛋。</p> \n<p>请你计算并返回要确定 <code>f</code> <strong>确切的值</strong> 的 <strong>最小操作次数</strong> 是多少？</p> &nbsp; \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>k = 1, n = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>\n鸡蛋从 1 楼掉落。如果它碎了，肯定能得出 f = 0 。 \n否则，鸡蛋从 2 楼掉落。如果它碎了，肯定能得出 f = 1 。 \n如果它没碎，那么肯定能得出 f = 2 。 \n因此，在最坏的情况下我们需要移动 2 次以确定 f 是多少。 \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>k = 2, n = 6\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>k = 3, n = 14\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= 100</code></li> \n <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('888. 公平的糖果棒交换', '<p>爱丽丝和鲍勃有不同大小的糖果棒：<code>A[i]</code> 是爱丽丝拥有的第 <code>i</code> 根糖果棒的大小，<code>B[j]</code> 是鲍勃拥有的第 <code>j</code> 根糖果棒的大小。</p> \n<p>因为他们是朋友，所以他们想交换一根糖果棒，这样交换后，他们都有相同的糖果总量。<em>（一个人拥有的糖果总量是他们拥有的糖果棒大小的总和。）</em></p> \n<p>返回一个整数数组 <code>ans</code>，其中 <code>ans[0]</code> 是爱丽丝必须交换的糖果棒的大小，<code>ans[1]</code>&nbsp;是 Bob 必须交换的糖果棒的大小。</p> \n<p>如果有多个答案，你可以返回其中任何一个。保证答案存在。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = [1,1], B = [2,2]\n<strong>输出：</strong>[1,2]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = [1,2], B = [2,3]\n<strong>输出：</strong>[1,2]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>A = [2], B = [1,3]\n<strong>输出：</strong>[2,3]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>A = [1,2,5], B = [2,4]\n<strong>输出：</strong>[5,4]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= A.length &lt;= 10000</code></li> \n <li><code>1 &lt;= B.length &lt;= 10000</code></li> \n <li><code>1 &lt;= A[i] &lt;= 100000</code></li> \n <li><code>1 &lt;= B[i] &lt;= 100000</code></li> \n <li>保证爱丽丝与鲍勃的糖果总量不同。</li> \n <li>答案肯定存在。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('889. 根据前序和后序遍历构造二叉树', '<p>返回与给定的前序和后序遍历匹配的任何二叉树。</p> \n<p>&nbsp;<code>pre</code>&nbsp;和&nbsp;<code>post</code>&nbsp;遍历中的值是不同的正整数。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]\n<strong>输出：</strong>[1,2,3,4,5,6,7]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= pre.length == post.length &lt;= 30</code></li> \n <li><code>pre[]</code>&nbsp;和&nbsp;<code>post[]</code>&nbsp;都是&nbsp;<code>1, 2, ..., pre.length</code>&nbsp;的排列</li> \n <li>每个输入保证至少有一个答案。如果有多个答案，可以返回其中一个。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('89. 格雷编码', '<p>格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。</p> \n<p>给定一个代表编码总位数的非负整数<em> n</em>，打印其格雷编码序列。即使有多个不同答案，你也只需要返回其中一种。</p> \n<p>格雷编码序列必须以 0 开头。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong>&nbsp;2\n<strong>输出:</strong>&nbsp;<code>[0,1,3,2]</code>\n<strong>解释:</strong>\n00 - 0\n01 - 1\n11 - 3\n10 - 2\n\n对于给定的&nbsp;<em>n</em>，其格雷编码序列并不唯一。\n例如，<code>[0,2,3,1]</code>&nbsp;也是一个有效的格雷编码序列。\n\n00 - 0\n10 - 2\n11 - 3\n01 - 1</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong>&nbsp;0\n<strong>输出:</strong>&nbsp;<code>[0]\n<strong>解释:</strong> 我们定义</code>格雷编码序列必须以 0 开头。<code>\n&nbsp;    给定</code>编码总位数为<code> <em>n</em> 的格雷编码序列，其长度为 2<sup>n</sup></code>。<code>当 <em>n</em> = 0 时，长度为 2<sup>0</sup> = 1。\n&nbsp;    因此，当 <em>n</em> = 0 时，其格雷编码序列为 [0]。</code>\n</pre>');
INSERT INTO `leecode` VALUES ('890. 查找和替换模式', '<p>你有一个单词列表&nbsp;<code>words</code>&nbsp;和一个模式&nbsp;&nbsp;<code>pattern</code>，你想知道 <code>words</code> 中的哪些单词与模式匹配。</p> \n<p>如果存在字母的排列 <code>p</code>&nbsp;，使得将模式中的每个字母 <code>x</code> 替换为 <code>p(x)</code> 之后，我们就得到了所需的单词，那么单词与模式是匹配的。</p> \n<p><em>（回想一下，字母的排列是从字母到字母的双射：每个字母映射到另一个字母，没有两个字母映射到同一个字母。）</em></p> \n<p>返回 <code>words</code> 中与给定模式匹配的单词列表。</p> \n<p>你可以按任何顺序返回答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"\n<strong>输出：</strong>[\"mee\",\"aqq\"]\n<strong>解释：\n</strong>\"mee\" 与模式匹配，因为存在排列 {a -&gt; m, b -&gt; e, ...}。\n\"ccc\" 与模式不匹配，因为 {a -&gt; c, b -&gt; c, ...} 不是排列。\n因为 a 和 b 映射到同一个字母。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 50</code></li> \n <li><code>1 &lt;= pattern.length = words[i].length&nbsp;&lt;= 20</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('891. 子序列宽度之和', '<p>给定一个整数数组 <code>A</code> ，考虑 <code>A</code> 的所有非空子序列。</p> \n<p>对于任意序列 S ，设 S 的宽度是 S 的最大元素和最小元素的差。</p> \n<p>返回 A 的所有子序列的宽度之和。</p> \n<p>由于答案可能非常大，请<strong>返回答案模 10^9+7</strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[2,1,3]\n<strong>输出：</strong>6\n<strong>解释：\n</strong>子序列为 [1]，[2]，[3]，[2,1]，[2,3]，[1,3]，[2,1,3] 。\n相应的宽度是 0，0，0，1，1，2，2 。\n这些宽度之和是 6 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= A.length &lt;= 20000</code></li> \n <li><code>1 &lt;= A[i] &lt;= 20000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('892. 三维形体的表面积', '<p>给你一个 <code>n * n</code> 的网格&nbsp;<code>grid</code> ，上面放置着一些&nbsp;<code>1 x 1 x 1</code>&nbsp;的正方体。</p> \n<p>每个值&nbsp;<code>v = grid[i][j]</code>&nbsp;表示&nbsp;<code>v</code>&nbsp;个正方体叠放在对应单元格&nbsp;<code>(i, j)</code>&nbsp;上。</p> \n<p>放置好正方体后，任何直接相邻的正方体都会互相粘在一起，形成一些不规则的三维形体。</p> \n<p>请你返回最终这些形体的总表面积。</p> \n<p><strong>注意：</strong>每个形体的底面也需要计入表面积中。</p> \n<p>&nbsp;</p> \n<ul> \n</ul> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 82px; height: 82px;\" src=\"https://assets.leetcode.com/uploads/2021/01/08/tmp-grid1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>grid = [[2]]\n<strong>输出：</strong>10\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 162px; height: 162px;\" src=\"https://assets.leetcode.com/uploads/2021/01/08/tmp-grid2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>grid = [[1,2],[3,4]]\n<strong>输出：</strong>34\n</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 162px; height: 162px;\" src=\"https://assets.leetcode.com/uploads/2021/01/08/tmp-grid3.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>grid = [[1,0],[0,2]]\n<strong>输出：</strong>16\n</pre> \n<p><strong>示例 4：</strong></p> \n<img style=\"width: 242px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2021/01/08/tmp-grid4.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>grid = [[1,1,1],[1,0,1],[1,1,1]]\n<strong>输出：</strong>32\n</pre> \n<p><strong>示例 5：</strong></p> \n<img style=\"width: 242px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2021/01/08/tmp-grid5.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>grid = [[2,2,2],[2,1,2],[2,2,2]]\n<strong>输出：</strong>46\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= n &lt;= 50</code></li> \n <li><code>0 &lt;= grid[i][j] &lt;= 50</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('893. 特殊等价字符串组', '<p>给你一个字符串数组 <code>words</code>。</p> \n<p>一步操作中，你可以交换字符串 <code>words[i]</code> 的任意两个偶数下标对应的字符或任意两个奇数下标对应的字符。</p> \n<p>对两个字符串&nbsp;<code>words[i]</code> 和 <code>words[j]</code> 而言，如果经过任意次数的操作，<code>words[i] == words[j]</code> ，那么这两个字符串是 <strong>特殊等价 </strong>的。</p> \n<ul> \n <li>例如，<code>words[i] = \"zzxy\"</code> 和 <code>words[j] = \"xyzz\"</code> 是一对 <strong>特殊等价</strong> 字符串，因为可以按 <code>\"zzxy\" -&gt; \"xzzy\" -&gt; \"xyzz\"</code> 的操作路径使&nbsp;<code>words[i] == words[j]</code> 。</li> \n</ul> \n<p>现在规定，<strong><code>words</code> </strong>的 <strong>一组特殊等价字符串 </strong>就是 <code>words</code> 的一个同时满足下述条件的非空子集：</p> \n<ul> \n <li>该组中的每一对字符串都是<strong> 特殊等价 </strong>的</li> \n <li>该组字符串已经涵盖了该类别中的所有特殊等价字符串，容量达到理论上的最大值（也就是说，如果一个字符串不在该组中，那么这个字符串就 <strong>不会</strong> 与该组内任何字符串特殊等价）</li> \n</ul> \n<p>返回 <code>words</code> 中 <strong>特殊等价字符串组</strong> 的数量。</p> \n<p>&nbsp;</p> \n<ul> \n</ul> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n其中一组为 [\"abcd\", \"cdab\", \"cbad\"]，因为它们是成对的特殊等价字符串，且没有其他字符串与这些字符串特殊等价。\n另外两组分别是 [\"xyzz\", \"zzxy\"] 和 [\"zzyx\"]。特别需要注意的是，\"zzxy\" 不与 \"zzyx\" 特殊等价。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]\n<strong>输出：</strong>3\n<strong>解释：</strong>3 组 [\"abc\",\"cba\"]，[\"acb\",\"bca\"]，[\"bac\",\"cab\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 1000</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 20</code></li> \n <li>所有 <code>words[i]</code>&nbsp;都只由小写字母组成。</li> \n <li>所有 <code>words[i]</code>&nbsp;都具有相同的长度。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('894. 所有可能的满二叉树', '<p><em>满二叉树</em>是一类二叉树，其中每个结点恰好有 0 或 2 个子结点。</p> \n<p>返回包含 <code>N</code> 个结点的所有可能满二叉树的列表。 答案的每个元素都是一个可能树的根结点。</p> \n<p>答案中每个树的每个<code>结点</code>都<strong>必须</strong>有 <code>node.val=0</code>。</p> \n<p>你可以按任何顺序返回树的最终列表。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>7\n<strong>输出：</strong>[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\n<strong>解释：</strong>\n<img style=\"height: 400px; width: 700px;\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/24/fivetrees.png\" alt=\"\">\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= N &lt;= 20</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('895. 最大频率栈', '<p>实现 <code>FreqStack</code>，模拟类似栈的数据结构的操作的一个类。</p> \n<p><code>FreqStack</code>&nbsp;有两个函数：</p> \n<ul> \n <li><code>push(int x)</code>，将整数&nbsp;<code>x</code>&nbsp;推入栈中。</li> \n <li><code>pop()</code>，它<strong>移除</strong>并返回栈中出现最频繁的元素。 \n  <ul> \n   <li>如果最频繁的元素不只一个，则移除并返回最接近栈顶的元素。</li> \n  </ul> </li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"FreqStack\",\"push\",\"push\",\"push\",\"push\",\"push\",\"push\",\"pop\",\"pop\",\"pop\",\"pop\"],\n[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]\n<strong>输出：</strong>[null,null,null,null,null,null,null,5,7,5,4]\n<strong>解释：</strong>\n执行六次 .push 操作后，栈自底向上为 [5,7,5,7,4,5]。然后：\n\npop() -&gt; 返回 5，因为 5 是出现频率最高的。\n栈变成 [5,7,5,7,4]。\n\npop() -&gt; 返回 7，因为 5 和 7 都是频率最高的，但 7 最接近栈顶。\n栈变成 [5,7,5,4]。\n\npop() -&gt; 返回 5 。\n栈变成 [5,7,4]。\n\npop() -&gt; 返回 4 。\n栈变成 [5,7]。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>对&nbsp;<code>FreqStack.push(int x)</code>&nbsp;的调用中&nbsp;<code>0 &lt;= x &lt;= 10^9</code>。</li> \n <li>如果栈的元素数目为零，则保证不会调用&nbsp; <code>FreqStack.pop()</code>。</li> \n <li>单个测试样例中，对&nbsp;<code>FreqStack.push</code>&nbsp;的总调用次数不会超过&nbsp;<code>10000</code>。</li> \n <li>单个测试样例中，对&nbsp;<code>FreqStack.pop</code>&nbsp;的总调用次数不会超过&nbsp;<code>10000</code>。</li> \n <li>所有测试样例中，对&nbsp;<code>FreqStack.push</code>&nbsp;和 <code>FreqStack.pop</code>&nbsp;的总调用次数不会超过&nbsp;<code>150000</code>。</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('896. 单调数列', '<p>如果数组是单调递增或单调递减的，那么它是<em>单调的</em>。</p> \n<p>如果对于所有 <code>i &lt;= j</code>，<code>A[i] &lt;= A[j]</code>，那么数组 <code>A</code> 是单调递增的。 如果对于所有 <code>i &lt;= j</code>，<code>A[i]&gt; = A[j]</code>，那么数组 <code>A</code> 是单调递减的。</p> \n<p>当给定的数组 <code>A</code>&nbsp;是单调数组时返回 <code>true</code>，否则返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1,2,2,3]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[6,5,4,4]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[1,3,2]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>[1,2,4,5]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例&nbsp;5：</strong></p> \n<pre><strong>输入：</strong>[1,1,1]\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 50000</code></li> \n <li><code>-100000 &lt;= A[i] &lt;= 100000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('897. 递增顺序搜索树', '<p>给你一棵二叉搜索树，请你 <strong>按中序遍历</strong> 将其重新排列为一棵递增顺序搜索树，使树中最左边的节点成为树的根节点，并且每个节点没有左子节点，只有一个右子节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 600px; height: 350px;\" src=\"https://assets.leetcode.com/uploads/2020/11/17/ex1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\n<strong>输出：</strong>[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 300px; height: 114px;\" src=\"https://assets.leetcode.com/uploads/2020/11/17/ex2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [5,1,7]\n<strong>输出：</strong>[1,null,5,null,7]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点数的取值范围是 <code>[1, 100]</code></li> \n <li><code>0 &lt;= Node.val &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('898. 子数组按位或操作', '<p>我们有一个非负整数数组&nbsp;<code>A</code>。</p> \n<p>对于每个（连续的）子数组&nbsp;<code>B =&nbsp;[A[i], A[i+1], ..., A[j]]</code> （&nbsp;<code>i &lt;= j</code>），我们对&nbsp;<code>B</code>&nbsp;中的每个元素进行按位或操作，获得结果&nbsp;<code>A[i] | A[i+1] | ... | A[j]</code>。</p> \n<p>返回可能结果的数量。 （多次出现的结果在最终答案中仅计算一次。）</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[0]\n<strong>输出：</strong>1\n<strong>解释：</strong>\n只有一个可能的结果 0 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[1,1,2]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n可能的子数组为 [1]，[1]，[2]，[1, 1]，[1, 2]，[1, 1, 2]。\n产生的结果为 1，1，2，1，3，3 。\n有三个唯一值，所以答案是 3 。\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<pre><strong>输入：</strong>[1,2,4]\n<strong>输出：</strong>6\n<strong>解释：</strong>\n可能的结果是 1，2，3，4，6，以及 7 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 50000</code></li> \n <li><code>0 &lt;= A[i] &lt;= 10^9</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('899. 有序队列', '<p>给出了一个由小写字母组成的字符串 <code>S</code>。然后，我们可以进行任意次数的<em>移动</em>。</p> \n<p>在每次移动中，我们选择前 <code>K</code> 个字母中的一个（从左侧开始），将其从原位置移除，并放置在字符串的末尾。</p> \n<p>返回我们在任意次数的移动之后可以拥有的按字典顺序排列的最小字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>S = \"cba\", K = 1\n<strong>输出：</strong>\"acb\"\n<strong>解释：</strong>\n在第一步中，我们将第一个字符（“c”）移动到最后，获得字符串 “bac”。\n在第二步中，我们将第一个字符（“b”）移动到最后，获得最终结果 “acb”。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>S = \"baaca\", K = 3\n<strong>输出：</strong>\"aaabc\"\n<strong>解释：\n</strong>在第一步中，我们将第一个字符（“b”）移动到最后，获得字符串 “aacab”。\n在第二步中，我们将第三个字符（“c”）移动到最后，获得最终结果 “aaabc”。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= K &lt;= S.length&nbsp;&lt;= 1000</code></li> \n <li><code>S</code>&nbsp;只由小写字母组成。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('9. 回文数', '<p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，<code>121</code> 是回文，而 <code>123</code> 不是。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>x = 121\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>x = -121\n<strong>输出：</strong>false\n<strong>解释：</strong>从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>x = 10\n<strong>输出：</strong>false\n<strong>解释：</strong>从右向左读, 为 01 。因此它不是一个回文数。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>x = -101\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>-2<sup>31</sup>&nbsp;&lt;= x &lt;= 2<sup>31</sup>&nbsp;- 1</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你能不将整数转为字符串来解决这个问题吗？</p>');
INSERT INTO `leecode` VALUES ('90. 子集 II', '<p>给你一个整数数组 <code>nums</code> ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。</p> \n<p>解集 <strong>不能</strong> 包含重复的子集。返回的解集中，子集可以按 <strong>任意顺序</strong> 排列。</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <pre><strong>输入：</strong>nums = [1,2,2]\n<strong>输出：</strong>[[],[1],[1,2],[1,2,2],[2],[2,2]]\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>nums = [0]\n<strong>输出：</strong>[[],[0]]\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>1 &lt;= nums.length &lt;= 10</code></li> \n   <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('900. RLE 迭代器', '<p>编写一个遍历游程编码序列的迭代器。</p> \n<p>迭代器由 <code>RLEIterator(int[] A)</code> 初始化，其中&nbsp;<code>A</code>&nbsp;是某个序列的游程编码。更具体地，对于所有偶数 <code>i</code>，<code>A[i]</code> 告诉我们在序列中重复非负整数值 <code>A[i + 1]</code> 的次数。</p> \n<p>迭代器支持一个函数：<code>next(int n)</code>，它耗尽接下来的&nbsp; <code>n</code> 个元素（<code>n &gt;= 1</code>）并返回以这种方式耗去的最后一个元素。如果没有剩余的元素可供耗尽，则&nbsp; <code>next</code>&nbsp;返回&nbsp;<code>-1</code> 。</p> \n<p>例如，我们以&nbsp;<code>A = [3,8,0,9,2,5]</code>&nbsp;开始，这是序列&nbsp;<code>[8,8,8,5,5]</code>&nbsp;的游程编码。这是因为该序列可以读作 “三个八，零个九，两个五”。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[\"RLEIterator\",\"next\",\"next\",\"next\",\"next\"], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]\n<strong>输出：</strong>[null,8,8,5,-1]\n<strong>解释：</strong>\nRLEIterator 由 RLEIterator([3,8,0,9,2,5]) 初始化。\n这映射到序列 [8,8,8,5,5]。\n然后调用 RLEIterator.next 4次。\n\n.next(2) 耗去序列的 2 个项，返回 8。现在剩下的序列是 [8, 5, 5]。\n\n.next(1) 耗去序列的 1 个项，返回 8。现在剩下的序列是 [5, 5]。\n\n.next(1) 耗去序列的 1 个项，返回 5。现在剩下的序列是 [5]。\n\n.next(2) 耗去序列的 2 个项，返回 -1。 这是由于第一个被耗去的项是 5，\n但第二个项并不存在。由于最后一个要耗去的项不存在，我们返回 -1。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= A.length &lt;= 1000</code></li> \n <li><code>A.length</code>&nbsp;是偶数。</li> \n <li><code>0 &lt;= A[i] &lt;= 10^9</code></li> \n <li>每个测试用例最多调用&nbsp;<code>1000</code>&nbsp;次&nbsp;<code>RLEIterator.next(int n)</code>。</li> \n <li>每次调用&nbsp;<code>RLEIterator.next(int n)</code>&nbsp;都有&nbsp;<code>1 &lt;= n &lt;= 10^9</code>&nbsp;。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('901. 股票价格跨度', '<p>编写一个 <code>StockSpanner</code> 类，它收集某些股票的每日报价，并返回该股票当日价格的跨度。</p> \n<p>今天股票价格的跨度被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。</p> \n<p>例如，如果未来7天股票的价格是 <code>[100, 80, 60, 70, 60, 75, 85]</code>，那么股票跨度将是 <code>[1, 1, 1, 2, 1, 4, 6]</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[\"StockSpanner\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\"], [[],[100],[80],[60],[70],[60],[75],[85]]\n<strong>输出：</strong>[null,1,1,1,2,1,4,6]\n<strong>解释：</strong>\n首先，初始化 S = StockSpanner()，然后：\nS.next(100) 被调用并返回 1，\nS.next(80) 被调用并返回 1，\nS.next(60) 被调用并返回 1，\nS.next(70) 被调用并返回 2，\nS.next(60) 被调用并返回 1，\nS.next(75) 被调用并返回 4，\nS.next(85) 被调用并返回 6。\n\n注意 (例如) S.next(75) 返回 4，因为截至今天的最后 4 个价格\n(包括今天的价格 75) 小于或等于今天的价格。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>调用&nbsp;<code>StockSpanner.next(int price)</code>&nbsp;时，将有&nbsp;<code>1 &lt;= price &lt;= 10^5</code>。</li> \n <li>每个测试用例最多可以调用&nbsp; <code>10000</code> 次 <code>StockSpanner.next</code>。</li> \n <li>在所有测试用例中，最多调用&nbsp;<code>150000</code>&nbsp;次&nbsp;<code>StockSpanner.next</code>。</li> \n <li>此问题的总时间限制减少了 50%。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('902. 最大为 N 的数字组合', '<p>我们有一组<strong>排序的</strong>数字 <code>D</code>，它是&nbsp; <code>{\'1\',\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\'}</code>&nbsp;的非空子集。（请注意，<code>\'0\'</code> 不包括在内。）</p> \n<p>现在，我们用这些数字进行组合写数字，想用多少次就用多少次。例如&nbsp;<code>D = {\'1\',\'3\',\'5\'}</code>，我们可以写出像&nbsp;<code>\'13\', \'551\', \'1351315\'</code>&nbsp;这样的数字。</p> \n<p>返回可以用 <code>D</code> 中的数字写出的小于或等于 <code>N</code> 的正整数的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>D = [\"1\",\"3\",\"5\",\"7\"], N = 100\n<strong>输出：</strong>20\n<strong>解释：</strong>\n可写出的 20 个数字是：\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>D = [\"1\",\"4\",\"9\"], N = 1000000000\n<strong>输出：</strong>29523\n<strong>解释：</strong>\n我们可以写 3 个一位数字，9 个两位数字，27 个三位数字，\n81 个四位数字，243 个五位数字，729 个六位数字，\n2187 个七位数字，6561 个八位数字和 19683 个九位数字。\n总共，可以使用D中的数字写出 29523 个整数。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>D</code> 是按排序顺序的数字 <code>\'1\'-\'9\'</code> 的子集。</li> \n <li><code>1 &lt;= N &lt;= 10^9</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('903. DI 序列的有效排列', '<p>我们给出 <code>S</code>，一个源于&nbsp;<code>{\'D\', \'I\'}</code>&nbsp;的长度为 <code>n</code>&nbsp;的字符串 。（这些字母代表 “减少” 和 “增加”。）<br> <em>有效排列</em>&nbsp;是对整数 <code>{0, 1, ..., n}</code>&nbsp;的一个排列&nbsp;<code>P[0], P[1], ..., P[n]</code>，使得对所有的&nbsp;<code>i</code>：</p> \n<ul> \n <li>如果 <code>S[i] == \'D\'</code>，那么&nbsp;<code>P[i] &gt; P[i+1]</code>，以及；</li> \n <li>如果 <code>S[i] == \'I\'</code>，那么 <code>P[i] &lt; P[i+1]</code>。</li> \n</ul> \n<p>有多少个有效排列？因为答案可能很大，所以请<strong>返回你的答案模</strong><strong> <code>10^9 + 7</code></strong>.</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\"DID\"\n<strong>输出：</strong>5\n<strong>解释：</strong>\n(0, 1, 2, 3) 的五个有效排列是：\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= S.length &lt;= 200</code></li> \n <li><code>S</code> 仅由集合 <code>{\'D\', \'I\'}</code>&nbsp;中的字符组成。</li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('904. 水果成篮', '<p>在一排树中，第 <code>i</code> 棵树产生&nbsp;<code>tree[i]</code> 型的水果。<br> 你可以<strong>从你选择的任何树开始</strong>，然后重复执行以下步骤：</p> \n<ol> \n <li>把这棵树上的水果放进你的篮子里。如果你做不到，就停下来。</li> \n <li>移动到当前树右侧的下一棵树。如果右边没有树，就停下来。</li> \n</ol> \n<p>请注意，在选择一颗树后，你没有任何选择：你必须执行步骤 1，然后执行步骤 2，然后返回步骤 1，然后执行步骤 2，依此类推，直至停止。</p> \n<p>你有两个篮子，每个篮子可以携带任何数量的水果，但你希望每个篮子只携带一种类型的水果。</p> \n<p>用这个程序你能收集的水果树的最大总量是多少？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1,2,1]\n<strong>输出：</strong>3\n<strong>解释：</strong>我们可以收集 [1,2,1]。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[0,1,2,2]\n<strong>输出：</strong>3\n<strong>解释：</strong>我们可以收集 [1,2,2]\n如果我们从第一棵树开始，我们将只能收集到 [0, 1]。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[1,2,3,2,2]\n<strong>输出：</strong>4\n<strong>解释：</strong>我们可以收集 [2,3,2,2]\n如果我们从第一棵树开始，我们将只能收集到 [1, 2]。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>[3,3,3,1,2,1,1,2,3,3,4]\n<strong>输出：</strong>5\n<strong>解释：</strong>我们可以收集 [1,2,1,1,2]\n如果我们从第一棵树或第八棵树开始，我们将只能收集到 4 棵水果树。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= tree.length &lt;= 40000</code></li> \n <li><code>0 &lt;= tree[i] &lt; tree.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('905. 按奇偶排序数组', '<p>给定一个非负整数数组 <code>A</code>，返回一个数组，在该数组中，&nbsp;<code>A</code> 的所有偶数元素之后跟着所有奇数元素。</p> \n<p>你可以返回满足此条件的任何数组作为答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[3,1,2,4]\n<strong>输出：</strong>[2,4,3,1]\n输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 5000</code></li> \n <li><code>0 &lt;= A[i] &lt;= 5000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('906. 超级回文数', '<p>如果一个正整数自身是回文数，而且它也是一个回文数的平方，那么我们称这个数为超级回文数。</p> \n<p>现在，给定两个正整数&nbsp;<code>L</code> 和&nbsp;<code>R</code> （以字符串形式表示），返回包含在范围 <code>[L, R]</code> 中的超级回文数的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>L = \"4\", R = \"1000\"\n<strong>输出：</strong>4\n<strong>解释：\n</strong>4，9，121，以及 484 是超级回文数。\n注意 676 不是一个超级回文数： 26 * 26 = 676，但是 26 不是回文数。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= len(L) &lt;= 18</code></li> \n <li><code>1 &lt;= len(R) &lt;= 18</code></li> \n <li><code>L</code> 和&nbsp;<code>R</code>&nbsp;是表示&nbsp;<code>[1, 10^18)</code>&nbsp;范围的整数的字符串。</li> \n <li><code>int(L) &lt;= int(R)</code></li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('907. 子数组的最小值之和', '<p>给定一个整数数组 <code>arr</code>，找到 <code>min(b)</code>&nbsp;的总和，其中 <code>b</code> 的范围为 <code>arr</code> 的每个（连续）子数组。</p> \n<p>由于答案可能很大，因此<strong> 返回答案模 <code>10^9 + 7</code></strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [3,1,2,4]\n<strong>输出：</strong>17\n<strong>解释：\n</strong>子数组为<strong> </strong>[3]，[1]，[2]，[4]，[3,1]，[1,2]，[2,4]，[3,1,2]，[1,2,4]，[3,1,2,4]。 \n最小值为 3，1，2，4，1，1，2，1，1，1，和为 17。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [11,81,94,43,3]\n<strong>输出：</strong>444\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= arr[i] &lt;= 3 * 10<sup>4</sup></code></li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('908. 最小差值 I', '<p>给你一个整数数组 <code>nums</code>，请你给数组中的每个元素 <code>nums[i]</code> 都加上一个任意数字 <code>x</code> （<code>-k &lt;= x &lt;= k</code>），从而得到一个新数组 <code>result</code> 。</p> \n<p>返回数组 <code>result</code> 的最大值和最小值之间可能存在的最小差值。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<ol> \n</ol> \n<div> \n <p><strong>示例 1：</strong></p> \n <pre><strong>输入：</strong>nums = <span id=\"example-input-1-1\">[1]</span>, k = <span id=\"example-input-1-2\">0</span>\n<strong>输出：</strong><span id=\"example-output-1\">0\n<strong>解释：</strong>result = [1]</span>\n</pre> \n <div> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>nums = <span id=\"example-input-2-1\">[0,10]</span>, k = <span id=\"example-input-2-2\">2</span>\n<strong>输出：</strong><span id=\"example-output-2\">6\n</span><span id=\"example-output-1\"><strong>解释：</strong></span><span>result = [2,8]</span>\n</pre> \n  <div> \n   <p><strong>示例 3：</strong></p> \n   <pre><strong>输入：</strong>nums = <span id=\"example-input-3-1\">[1,3,6]</span>, k = <span id=\"example-input-3-2\">3</span>\n<strong>输出：</strong><span id=\"example-output-3\">0\n</span><span id=\"example-output-1\"><strong>解释：</strong></span><span>result = [3,3,3] or result = [4,4,4]</span>\n</pre> \n  </div> \n </div> \n</div> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10000</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 10000</code></li> \n <li><code>0 &lt;= k &lt;= 10000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('909. 蛇梯棋', '<p>N x N 的棋盘&nbsp;<code>board</code> 上，按从&nbsp;<code>1</code> 到 <code>N*N</code>&nbsp;的数字给方格编号，编号<strong> 从左下角开始</strong>，每一行交替方向。</p> \n<p>例如，一块 6 x 6 大小的棋盘，编号如下：</p> \n<pre><img style=\"height: 200px; width: 254px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/31/snakes.png\" alt=\"\">\n</pre> \n<p><code>r</code> 行 <code>c</code> 列的棋盘，按前述方法编号，棋盘格中可能存在 “蛇” 或 “梯子”；如果 <code>board[r][c] != -1</code>，那个蛇或梯子的目的地将会是 <code>board[r][c]</code>。</p> \n<p>玩家从棋盘上的方格&nbsp;<code>1</code> （总是在最后一行、第一列）开始出发。</p> \n<p>每一回合，玩家需要从当前方格 <code>x</code> 开始出发，按下述要求前进：</p> \n<ul> \n <li>选定目标方格：从编号为 <code>x+1</code>，<code>x+2</code>，<code>x+3</code>，<code>x+4</code>，<code>x+5</code>，或者 <code>x+6</code> 的方格中选出一个作为目标方格 <code>s</code> ，目标方格的编号 <code>&lt;= N*N</code>。 \n  <ul> \n   <li>该选择模拟了掷骰子的情景，无论棋盘大小如何，你的目的地范围也只能处于区间 <code>[x+1, x+6]</code> 之间。</li> \n  </ul> </li> \n <li>传送玩家：如果目标方格 <code>S</code> 处存在蛇或梯子，那么玩家会传送到蛇或梯子的目的地。否则，玩家传送到目标方格 <code>S</code> 。&nbsp;</li> \n</ul> \n<p>注意，玩家在每回合的前进过程中最多只能爬过蛇或梯子一次：就算目的地是另一条蛇或梯子的起点，你也不会继续移动。</p> \n<p>返回达到方格 N*N 所需的最少移动次数，如果不可能，则返回 <code>-1</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[\n[-1,-1,-1,-1,-1,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,35,-1,-1,13,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,15,-1,-1,-1,-1]]\n<strong>输出：</strong>4\n<strong>解释：</strong>\n首先，从方格 1 [第 5 行，第 0 列] 开始。\n你决定移动到方格 2，并必须爬过梯子移动到到方格 15。\n然后你决定移动到方格 17 [第 3 行，第 4 列]，必须爬过蛇到方格 13。\n然后你决定移动到方格 14，且必须通过梯子移动到方格 35。\n然后你决定移动到方格 36, 游戏结束。\n可以证明你需要至少 4 次移动才能到达第 N*N 个方格，所以答案是 4。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= board.length = board[0].length&nbsp;&lt;= 20</code></li> \n <li><code>board[i][j]</code>&nbsp;介于&nbsp;<code>1</code>&nbsp;和&nbsp;<code>N*N</code>&nbsp;之间或者等于&nbsp;<code>-1</code>。</li> \n <li>编号为&nbsp;<code>1</code>&nbsp;的方格上没有蛇或梯子。</li> \n <li>编号为&nbsp;<code>N*N</code>&nbsp;的方格上没有蛇或梯子。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('91. 解码方法', '<p>一条包含字母&nbsp;<code>A-Z</code> 的消息通过以下映射进行了 <strong>编码</strong> ：</p> \n<pre>\'A\' -&gt; 1\n\'B\' -&gt; 2\n...\n\'Z\' -&gt; 26\n</pre> \n<p>要 <strong>解码</strong> 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，<code>\"11106\"</code> 可以映射为：</p> \n<ul> \n <li><code>\"AAJF\"</code> ，将消息分组为 <code>(1 1 10 6)</code></li> \n <li><code>\"KJF\"</code> ，将消息分组为 <code>(11 10 6)</code></li> \n</ul> \n<p>注意，消息不能分组为&nbsp; <code>(1 11 06)</code> ，因为 <code>\"06\"</code> 不能映射为 <code>\"F\"</code> ，这是由于 <code>\"6\"</code> 和 <code>\"06\"</code> 在映射中并不等价。</p> \n<p>给你一个只含数字的 <strong>非空 </strong>字符串 <code>s</code> ，请计算并返回 <strong>解码</strong> 方法的 <strong>总数</strong> 。</p> \n<p>题目数据保证答案肯定是一个 <strong>32 位</strong> 的整数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"12\"\n<strong>输出：</strong>2\n<strong>解释：</strong>它可以解码为 \"AB\"（1 2）或者 \"L\"（12）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"226\"\n<strong>输出：</strong>3\n<strong>解释：</strong>它可以解码为 \"BZ\" (2 26), \"VF\" (22 6), 或者 \"BBF\" (2 2 6) 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"0\"\n<strong>输出：</strong>0\n<strong>解释：</strong>没有字符映射到以 0 开头的数字。\n含有 0 的有效映射是 \'J\' -&gt; \"10\" 和 \'T\'-&gt; \"20\" 。\n由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"06\"\n<strong>输出：</strong>0\n<strong>解释：</strong>\"06\" 不能映射到 \"F\" ，因为字符串含有前导 0（<code>\"6\"</code> 和 <code>\"06\"</code> 在映射中并不等价）。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 100</code></li> \n <li><code>s</code> 只包含数字，并且可能包含前导零。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('910. 最小差值 II', '<p>给你一个整数数组 <code>A</code>，对于每个整数 <code>A[i]</code>，可以选择<strong>&nbsp;<code>x = -K</code>&nbsp;或是&nbsp;<code>x = K</code></strong> （<code><strong>K</strong></code> 总是非负整数），并将&nbsp;<code>x</code>&nbsp;加到&nbsp;<code>A[i]</code>&nbsp;中。</p> \n<p>在此过程之后，得到数组&nbsp;<code>B</code>。</p> \n<p>返回 <code>B</code>&nbsp;的最大值和 <code>B</code>&nbsp;的最小值之间可能存在的最小差值。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = [1], K = 0\n<strong>输出：</strong>0\n<strong>解释：</strong>B = [1]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = [0,10], K = 2\n<strong>输出：</strong>6\n<strong>解释：</strong>B = [2,8]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>A = [1,3,6], K = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>B = [4,6,3]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= A.length &lt;= 10000</code></li> \n <li><code>0 &lt;= A[i] &lt;= 10000</code></li> \n <li><code>0 &lt;= K &lt;= 10000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('911. 在线选举', '<p>在选举中，第&nbsp;<code>i</code>&nbsp;张票是在时间为&nbsp;<code>times[i]</code>&nbsp;时投给&nbsp;<code>persons[i]</code>&nbsp;的。</p> \n<p>现在，我们想要实现下面的查询函数： <code>TopVotedCandidate.q(int t)</code> 将返回在&nbsp;<code>t</code> 时刻主导选举的候选人的编号。</p> \n<p>在&nbsp;<code>t</code> 时刻投出的选票也将被计入我们的查询之中。在平局的情况下，最近获得投票的候选人将会获胜。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[\"TopVotedCandidate\",\"q\",\"q\",\"q\",\"q\",\"q\",\"q\"], [[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]\n<strong>输出：</strong>[null,0,1,1,0,0,1]\n<strong>解释：</strong>\n时间为 3，票数分布情况是 [0]，编号为 0 的候选人领先。\n时间为 12，票数分布情况是 [0,1,1]，编号为 1 的候选人领先。\n时间为 25，票数分布情况是 [0,1,1,0,0,1]，编号为 1 的候选人领先（因为最近的投票结果是平局）。\n在时间 15、24 和 8 处继续执行 3 个查询。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= persons.length = times.length &lt;= 5000</code></li> \n <li><code>0 &lt;= persons[i] &lt;= persons.length</code></li> \n <li><code>times</code>&nbsp;是严格递增的数组，所有元素都在&nbsp;<code>[0, 10^9]</code>&nbsp;范围中。</li> \n <li>每个测试用例最多调用&nbsp;<code>10000</code>&nbsp;次&nbsp;<code>TopVotedCandidate.q</code>。</li> \n <li><code>TopVotedCandidate.q(int t)</code>&nbsp;被调用时总是满足&nbsp;<code>t &gt;= times[0]</code>。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('912. 排序数组', '<p>给你一个整数数组&nbsp;<code>nums</code>，请你将该数组升序排列。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [5,2,3,1]\n<strong>输出：</strong>[1,2,3,5]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [5,1,1,2,0,0]\n<strong>输出：</strong>[0,0,1,1,2,5]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= nums.length &lt;= 50000</code></li> \n <li><code>-50000 &lt;= nums[i] &lt;= 50000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('913. 猫和老鼠', '<p>两个玩家分别扮演猫（Cat）和老鼠（Mouse）在<strong>无向</strong>图上进行游戏，他们轮流行动。</p> \n<p>该图按下述规则给出：<code>graph[a]</code>&nbsp;是所有结点 <code>b</code> 的列表，使得 <code>ab</code> 是图的一条边。</p> \n<p>老鼠从结点 1 开始并率先出发，猫从结点 2 开始且随后出发，在结点 0 处有一个洞。</p> \n<p>在每个玩家的回合中，他们<strong>必须</strong>沿着与他们所在位置相吻合的图的一条边移动。例如，如果老鼠位于结点 <code>1</code>，那么它只能移动到&nbsp;<code>graph[1]</code>&nbsp;中的（任何）结点去。</p> \n<p>此外，猫无法移动到洞（结点 0）里。</p> \n<p>然后，游戏在出现以下三种情形之一时结束：</p> \n<ul> \n <li>如果猫和老鼠占据相同的结点，猫获胜。</li> \n <li>如果老鼠躲入洞里，老鼠获胜。</li> \n <li>如果某一位置重复出现（即，玩家们的位置和移动顺序都与上一个回合相同），游戏平局。</li> \n</ul> \n<p>给定&nbsp;<code>graph</code>，并假设两个玩家都以最佳状态参与游戏，如果老鼠获胜，则返回&nbsp;<code>1</code>；如果猫获胜，则返回 <code>2</code>；如果平局，则返回 <code>0</code>。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n4---3---1\n|&nbsp; &nbsp;|\n2---5\n&nbsp;\\&nbsp;/\n&nbsp; 0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>3 &lt;= graph.length &lt;= 200</code></li> \n <li>保证 <code>graph[1]</code>&nbsp;非空。</li> \n <li>保证&nbsp;<code>graph[2]</code>&nbsp;包含非零元素。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('914. 卡牌分组', '<p>给定一副牌，每张牌上都写着一个整数。</p> \n<p>此时，你需要选定一个数字 <code>X</code>，使我们可以将整副牌按下述规则分成 1 组或更多组：</p> \n<ul> \n <li>每组都有&nbsp;<code>X</code>&nbsp;张牌。</li> \n <li>组内所有的牌上都写着相同的整数。</li> \n</ul> \n<p>仅当你可选的 <code>X &gt;= 2</code> 时返回&nbsp;<code>true</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1,2,3,4,4,3,2,1]\n<strong>输出：</strong>true\n<strong>解释：</strong>可行的分组是 [1,1]，[2,2]，[3,3]，[4,4]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[1,1,1,2,2,2,3,3]\n<strong>输出：</strong>false\n<strong>解释：</strong>没有满足要求的分组。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[1]\n<strong>输出：</strong>false\n<strong>解释：</strong>没有满足要求的分组。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>[1,1]\n<strong>输出：</strong>true\n<strong>解释：</strong>可行的分组是 [1,1]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>[1,1,2,2,2,2]\n<strong>输出：</strong>true\n<strong>解释：</strong>可行的分组是 [1,1]，[2,2]，[2,2]\n</pre> \n<p><br> <strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= deck.length &lt;= 10000</code></li> \n <li><code>0 &lt;= deck[i] &lt;&nbsp;10000</code></li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('915. 分割数组', '<p>给定一个数组&nbsp;<code>A</code>，将其划分为两个连续子数组&nbsp;<code>left</code>&nbsp;和&nbsp;<code>right</code>，&nbsp;使得：</p> \n<ul> \n <li><code>left</code>&nbsp;中的每个元素都小于或等于&nbsp;<code>right</code>&nbsp;中的每个元素。</li> \n <li><code>left</code> 和&nbsp;<code>right</code>&nbsp;都是非空的。</li> \n <li><code>left</code> 的长度要尽可能小。</li> \n</ul> \n<p>在完成这样的分组后返回&nbsp;<code>left</code>&nbsp;的<strong>长度</strong>。可以保证存在这样的划分方法。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[5,0,3,8,6]\n<strong>输出：</strong>3\n<strong>解释：</strong>left = [5,0,3]，right = [8,6]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[1,1,1,0,6,12]\n<strong>输出：</strong>4\n<strong>解释：</strong>left = [1,1,1,0]，right = [6,12]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>2 &lt;= A.length&nbsp;&lt;= 30000</code></li> \n <li><code>0 &lt;= A[i] &lt;= 10^6</code></li> \n <li>可以保证至少有一种方法能够按题目所描述的那样对 <code>A</code> 进行划分。</li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('916. 单词子集', '<p>我们给出两个单词数组 <code>A</code>&nbsp;和&nbsp;<code>B</code>。每个单词都是一串小写字母。</p> \n<p>现在，如果&nbsp;<code>b</code> 中的每个字母都出现在 <code>a</code> 中，<strong>包括重复出现的字母</strong>，那么称单词 <code>b</code> 是单词 <code>a</code> 的子集。 例如，“wrr” 是 “warrior” 的子集，但不是 “world” 的子集。</p> \n<p>如果对 <code>B</code> 中的每一个单词&nbsp;<code>b</code>，<code>b</code> 都是 <code>a</code> 的子集，那么我们称&nbsp;<code>A</code> 中的单词 <code>a</code> 是<em>通用的</em>。</p> \n<p>你可以按任意顺序以列表形式返回&nbsp;<code>A</code> 中所有的通用单词。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], B = [\"e\",\"o\"]\n<strong>输出：</strong>[\"facebook\",\"google\",\"leetcode\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], B = [\"l\",\"e\"]\n<strong>输出：</strong>[\"apple\",\"google\",\"leetcode\"]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>A = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], B = [\"e\",\"oo\"]\n<strong>输出：</strong>[\"facebook\",\"google\"]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>A = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], B = [\"lo\",\"eo\"]\n<strong>输出：</strong>[\"google\",\"leetcode\"]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>A = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], B = [\"ec\",\"oc\",\"ceo\"]\n<strong>输出：</strong>[\"facebook\",\"leetcode\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length, B.length &lt;= 10000</code></li> \n <li><code>1 &lt;= A[i].length, B[i].length&nbsp;&lt;= 10</code></li> \n <li><code>A[i]</code>&nbsp;和&nbsp;<code>B[i]</code>&nbsp;只由小写字母组成。</li> \n <li><code>A[i]</code>&nbsp;中所有的单词都是独一无二的，也就是说不存在&nbsp;<code>i != j</code>&nbsp;使得&nbsp;<code>A[i] == A[j]</code>。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('917. 仅仅反转字母', '<p>给定一个字符串&nbsp;<code>S</code>，返回&nbsp;“反转后的”&nbsp;字符串，其中不是字母的字符都保留在原地，而所有字母的位置发生反转。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\"ab-cd\"\n<strong>输出：</strong>\"dc-ba\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\"a-bC-dEf-ghIj\"\n<strong>输出：</strong>\"j-Ih-gfE-dCba\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>\"Test1ng-Leet=code-Q!\"\n<strong>输出：</strong>\"Qedo1ct-eeLg=ntse-T!\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>S.length &lt;= 100</code></li> \n <li><code>33 &lt;= S[i].ASCIIcode &lt;= 122</code>&nbsp;</li> \n <li><code>S</code> 中不包含&nbsp;<code>\\</code> or <code>\"</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('918. 环形子数组的最大和', '<p>给定一个由整数数组 <code>A</code>&nbsp;表示的<strong>环形数组 <code>C</code></strong>，求 <code><strong>C</strong></code>&nbsp;的非空子数组的最大可能和。</p> \n<p>在此处，<em>环形数组</em>意味着数组的末端将会与开头相连呈环状。（形式上，当<code>0 &lt;= i &lt; A.length</code>&nbsp;时&nbsp;<code>C[i] = A[i]</code>，且当&nbsp;<code>i &gt;= 0</code>&nbsp;时&nbsp;<code>C[i+A.length] = C[i]</code>）</p> \n<p>此外，子数组最多只能包含固定缓冲区 <code>A</code>&nbsp;中的每个元素一次。（形式上，对于子数组&nbsp;<code>C[i], C[i+1], ..., C[j]</code>，不存在&nbsp;<code>i &lt;= k1, k2 &lt;= j</code>&nbsp;其中&nbsp;<code>k1 % A.length&nbsp;= k2 % A.length</code>）</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1,-2,3,-2]\n<strong>输出：</strong>3\n<strong>解释：</strong>从子数组 [3] 得到最大和 3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[5,-3,5]\n<strong>输出：</strong>10\n<strong>解释：</strong>从子数组 [5,5] 得到最大和 5 + 5 = 10\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[3,-1,2,-1]\n<strong>输出：</strong>4\n<strong>解释：</strong>从子数组 [2,-1,3] 得到最大和 2 + (-1) + 3 = 4\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>[3,-2,2,-3]\n<strong>输出：</strong>3\n<strong>解释：</strong>从子数组 [3] 和 [3,-2,2] 都可以得到最大和 3\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>[-2,-3,-1]\n<strong>输出：</strong>-1\n<strong>解释：</strong>从子数组 [-1] 得到最大和 -1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>-30000 &lt;= A[i] &lt;= 30000</code></li> \n <li><code>1 &lt;= A.length &lt;= 30000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('919. 完全二叉树插入器', '<p>完全二叉树是每一层（除最后一层外）都是完全填充（即，节点数达到最大）的，并且所有的节点都尽可能地集中在左侧。</p> \n<p>设计一个用完全二叉树初始化的数据结构&nbsp;<code>CBTInserter</code>，它支持以下几种操作：</p> \n<ul> \n <li><code>CBTInserter(TreeNode root)</code>&nbsp;使用头节点为&nbsp;<code>root</code>&nbsp;的给定树初始化该数据结构；</li> \n <li><code>CBTInserter.insert(int v)</code>&nbsp; 向树中插入一个新节点，节点类型为 <code>TreeNode</code>，值为 <code>v</code> 。使树保持完全二叉树的状态，<strong>并返回插入的新节点的父节点的值</strong>；</li> \n <li><code>CBTInserter.get_root()</code> 将返回树的头节点。</li> \n</ul> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>inputs = [\"CBTInserter\",\"insert\",\"get_root\"], inputs = [[[1]],[2],[]]\n<strong>输出：</strong>[null,1,[1,2]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>inputs = [\"CBTInserter\",\"insert\",\"insert\",\"get_root\"], inputs = [[[1,2,3,4,5,6]],[7],[8],[]]\n<strong>输出：</strong>[null,3,4,[1,2,3,4,5,6,7,8]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>最初给定的树是完全二叉树，且包含&nbsp;<code>1</code>&nbsp;到&nbsp;<code>1000</code>&nbsp;个节点。</li> \n <li>每个测试用例最多调用&nbsp;<code>CBTInserter.insert</code>&nbsp; 操作&nbsp;<code>10000</code>&nbsp;次。</li> \n <li>给定节点或插入节点的每个值都在&nbsp;<code>0</code>&nbsp;到&nbsp;<code>5000</code>&nbsp;之间。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('92. 反转链表 II', '给你单链表的头指针 \n<code>head</code> 和两个整数&nbsp;\n<code>left</code> 和 \n<code>right</code> ，其中&nbsp;\n<code>left &lt;= right</code> 。请你反转从位置 \n<code>left</code> 到位置 \n<code>right</code> 的链表节点，返回 \n<strong>反转后的链表</strong> 。 \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 542px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,2,3,4,5], left = 2, right = 4\n<strong>输出：</strong>[1,4,3,2,5]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>head = [5], left = 1, right = 1\n<strong>输出：</strong>[5]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表中节点数目为 <code>n</code></li> \n <li><code>1 &lt;= n &lt;= 500</code></li> \n <li><code>-500 &lt;= Node.val &lt;= 500</code></li> \n <li><code>1 &lt;= left &lt;= right &lt;= n</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong> 你可以使用一趟扫描完成反转吗？</p>');
INSERT INTO `leecode` VALUES ('920. 播放列表的数量', '<p>你的音乐播放器里有&nbsp;<code>N</code>&nbsp;首不同的歌，在旅途中，你的旅伴想要听 <code>L</code>&nbsp;首歌（不一定不同，即，允许歌曲重复）。请你为她按如下规则创建一个播放列表：</p> \n<ul> \n <li>每首歌至少播放一次。</li> \n <li>一首歌只有在其他 <code>K</code> 首歌播放完之后才能再次播放。</li> \n</ul> \n<p>返回可以满足要求的播放列表的数量。<strong>由于答案可能非常大，请返回它模&nbsp;<code>10^9 + 7</code>&nbsp;的结果。</strong></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>N = 3, L = 3, K = 1\n<strong>输出：</strong>6\n<strong>解释：</strong>有 6 种可能的播放列表。[1, 2, 3]，[1, 3, 2]，[2, 1, 3]，[2, 3, 1]，[3, 1, 2]，[3, 2, 1].\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>N = 2, L = 3, K = 0\n<strong>输出：</strong>6\n<strong>解释：</strong>有 6 种可能的播放列表。[1, 1, 2]，[1, 2, 1]，[2, 1, 1]，[2, 2, 1]，[2, 1, 2]，[1, 2, 2]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>N = 2, L = 3, K = 1\n<strong>输出：</strong>2\n<strong>解释：</strong>有 2 种可能的播放列表。[1, 2, 1]，[2, 1, 2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= K &lt; N &lt;= L &lt;= 100</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('921. 使括号有效的最少添加', '<p>给定一个由&nbsp;<code>\'(\'</code>&nbsp;和&nbsp;<code>\')\'</code>&nbsp;括号组成的字符串 <code>S</code>，我们需要添加最少的括号（ <code>\'(\'</code>&nbsp;或是&nbsp;<code>\')\'</code>，可以在任何位置），以使得到的括号字符串有效。</p> \n<p>从形式上讲，只有满足下面几点之一，括号字符串才是有效的：</p> \n<ul> \n <li>它是一个空字符串，或者</li> \n <li>它可以被写成&nbsp;<code>AB</code>&nbsp;（<code>A</code>&nbsp;与&nbsp;<code>B</code>&nbsp;连接）, 其中&nbsp;<code>A</code> 和&nbsp;<code>B</code>&nbsp;都是有效字符串，或者</li> \n <li>它可以被写作&nbsp;<code>(A)</code>，其中&nbsp;<code>A</code>&nbsp;是有效字符串。</li> \n</ul> \n<p>给定一个括号字符串，返回为使结果字符串有效而必须添加的最少括号数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\"())\"\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\"(((\"\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>\"()\"\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>\"()))((\"\n<strong>输出：</strong>4</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>S.length &lt;= 1000</code></li> \n <li><code>S</code> 只包含&nbsp;<code>\'(\'</code> 和&nbsp;<code>\')\'</code>&nbsp;字符。</li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('922. 按奇偶排序数组 II', '<p>给定一个非负整数数组&nbsp;<code>A</code>， A 中一半整数是奇数，一半整数是偶数。</p> \n<p>对数组进行排序，以便当&nbsp;<code>A[i]</code> 为奇数时，<code>i</code>&nbsp;也是奇数；当&nbsp;<code>A[i]</code>&nbsp;为偶数时， <code>i</code> 也是偶数。</p> \n<p>你可以返回任何满足上述条件的数组作为答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[4,2,5,7]\n<strong>输出：</strong>[4,5,2,7]\n<strong>解释：</strong>[4,7,2,5]，[2,5,4,7]，[2,7,4,5] 也会被接受。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>2 &lt;= A.length &lt;= 20000</code></li> \n <li><code>A.length % 2 == 0</code></li> \n <li><code>0 &lt;= A[i] &lt;= 1000</code></li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('923. 三数之和的多种可能', '<p>给定一个整数数组&nbsp;<code>A</code>，以及一个整数&nbsp;<code>target</code>&nbsp;作为目标值，返回满足 <code>i &lt; j &lt; k</code> 且&nbsp;<code>A[i] + A[j] + A[k] == target</code>&nbsp;的元组&nbsp;<code>i, j, k</code>&nbsp;的数量。</p> \n<p>由于结果会非常大，请返回 <code>结果除以 10^9 + 7 的余数</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = [1,1,2,2,3,3,4,4,5,5], target = 8\n<strong>输出：</strong>20\n<strong>解释：</strong>\n按值枚举（A[i]，A[j]，A[k]）：\n(1, 2, 5) 出现 8 次；\n(1, 3, 4) 出现 8 次；\n(2, 2, 4) 出现 2 次；\n(2, 3, 3) 出现 2 次。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = [1,1,2,2,2,2], target = 5\n<strong>输出：</strong>12\n<strong>解释：</strong>\nA[i] = 1，A[j] = A[k] = 2 出现 12 次：\n我们从 [1,1] 中选择一个 1，有 2 种情况，\n从 [2,2,2,2] 中选出两个 2，有 6 种情况。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>3 &lt;= A.length &lt;= 3000</code></li> \n <li><code>0 &lt;= A[i] &lt;= 100</code></li> \n <li><code>0 &lt;= target &lt;= 300</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('924. 尽量减少恶意软件的传播', '<p>在节点网络中，只有当 <code>graph[i][j] = 1</code>&nbsp;时，每个节点&nbsp;<code>i</code>&nbsp;能够直接连接到另一个节点 <code>j</code>。</p> \n<p>一些节点&nbsp;<code>initial</code>&nbsp;最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。</p> \n<p>假设 <code>M(initial)</code> 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。</p> \n<p>我们可以从初始列表中删除一个节点。如果移除这一节点将最小化 <code>M(initial)</code>，&nbsp;则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。</p> \n<p>请注意，如果某个节点已从受感染节点的列表 <code>initial</code> 中删除，它以后可能仍然因恶意软件传播而受到感染。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt; graph.length = graph[0].length &lt;= 300</code></li> \n <li><code>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</code></li> \n <li><code>graph[i][i] == 1</code></li> \n <li><code>1 &lt;= initial.length &lt; graph.length</code></li> \n <li><code>0 &lt;= initial[i] &lt; graph.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('925. 长按键入', '<p>你的朋友正在使用键盘输入他的名字&nbsp;<code>name</code>。偶尔，在键入字符&nbsp;<code>c</code>&nbsp;时，按键可能会被<em>长按</em>，而字符可能被输入 1 次或多次。</p> \n<p>你将会检查键盘输入的字符&nbsp;<code>typed</code>。如果它对应的可能是你的朋友的名字（其中一些字符可能被长按），那么就返回&nbsp;<code>True</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>name = \"alex\", typed = \"aaleex\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\'alex\' 中的 \'a\' 和 \'e\' 被长按。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>name = \"saeed\", typed = \"ssaaedd\"\n<strong>输出：</strong>false\n<strong>解释：</strong>\'e\' 一定需要被键入两次，但在 typed 的输出中不是这样。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>name = \"leelee\", typed = \"lleeelee\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>name = \"laiden\", typed = \"laiden\"\n<strong>输出：</strong>true\n<strong>解释：</strong>长按名字中的字符并不是必要的。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>name.length &lt;= 1000</code></li> \n <li><code>typed.length &lt;= 1000</code></li> \n <li><code>name</code> 和&nbsp;<code>typed</code>&nbsp;的字符都是小写字母。</li> \n</ol> \n<p>&nbsp;</p> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('926. 将字符串翻转到单调递增', '<p>如果一个由&nbsp;<code>\'0\'</code> 和 <code>\'1\'</code>&nbsp;组成的字符串，是以一些 <code>\'0\'</code>（可能没有 <code>\'0\'</code>）后面跟着一些 <code>\'1\'</code>（也可能没有 <code>\'1\'</code>）的形式组成的，那么该字符串是<em>单调递增</em>的。</p> \n<p>我们给出一个由字符 <code>\'0\'</code> 和 <code>\'1\'</code>&nbsp;组成的字符串&nbsp;<code>S</code>，我们可以将任何&nbsp;<code>\'0\'</code> 翻转为&nbsp;<code>\'1\'</code>&nbsp;或者将&nbsp;<code>\'1\'</code>&nbsp;翻转为&nbsp;<code>\'0\'</code>。</p> \n<p>返回使 <code>S</code> 单调递增的最小翻转次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\"00110\"\n<strong>输出：</strong>1\n<strong>解释：</strong>我们翻转最后一位得到 00111.\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\"010110\"\n<strong>输出：</strong>2\n<strong>解释：</strong>我们翻转得到 011111，或者是 000111。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>\"00011000\"\n<strong>输出：</strong>2\n<strong>解释：</strong>我们翻转得到 00000000。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= S.length &lt;= 20000</code></li> \n <li><code>S</code> 中只包含字符&nbsp;<code>\'0\'</code>&nbsp;和&nbsp;<code>\'1\'</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('927. 三等分', '<p>给定一个由 <code>0</code> 和 <code>1</code> 组成的数组&nbsp;<code>A</code>，将数组分成 3&nbsp;个非空的部分，使得所有这些部分表示相同的二进制值。</p> \n<p>如果可以做到，请返回<strong>任何</strong>&nbsp;<code>[i, j]</code>，其中 <code>i+1 &lt; j</code>，这样一来：</p> \n<ul> \n <li><code>A[0], A[1], ..., A[i]</code>&nbsp;组成第一部分；</li> \n <li><code>A[i+1], A[i+2], ..., A[j-1]</code>&nbsp;作为第二部分；</li> \n <li><code>A[j], A[j+1], ..., A[A.length - 1]</code> 是第三部分。</li> \n <li>这三个部分所表示的二进制值相等。</li> \n</ul> \n<p>如果无法做到，就返回&nbsp;<code>[-1, -1]</code>。</p> \n<p>注意，在考虑每个部分所表示的二进制时，应当将其看作一个整体。例如，<code>[1,1,0]</code>&nbsp;表示十进制中的&nbsp;<code>6</code>，而不会是&nbsp;<code>3</code>。此外，前导零也是被允许的，所以&nbsp;<code>[0,1,1]</code> 和&nbsp;<code>[1,1]</code>&nbsp;表示相同的值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1,0,1,0,1]\n<strong>输出：</strong>[0,3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输出：</strong>[1,1,0,1,1]\n<strong>输出：</strong>[-1,-1]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>3 &lt;= A.length &lt;= 30000</code></li> \n <li><code>A[i] == 0</code>&nbsp;或&nbsp;<code>A[i] == 1</code></li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('928. 尽量减少恶意软件的传播 II', '<p>(这个问题与&nbsp;<em>尽量减少恶意软件的传播&nbsp;</em>是一样的，不同之处用粗体表示。)</p> \n<p>在节点网络中，只有当&nbsp;<code>graph[i][j] = 1</code>&nbsp;时，每个节点&nbsp;<code>i</code>&nbsp;能够直接连接到另一个节点&nbsp;<code>j</code>。</p> \n<p>一些节点&nbsp;<code>initial</code>&nbsp;最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。</p> \n<p>假设&nbsp;<code>M(initial)</code>&nbsp;是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。</p> \n<p>我们可以从初始列表中删除一个节点，<strong>并完全移除该节点以及从该节点到任何其他节点的任何连接。</strong>如果移除这一节点将最小化&nbsp;<code>M(initial)</code>，&nbsp;则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输出：</strong>graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n<strong>输入：</strong>0\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt; graph.length = graph[0].length &lt;= 300</code></li> \n <li><code>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</code></li> \n <li><code>graph[i][i] = 1</code></li> \n <li><code>1 &lt;= initial.length &lt; graph.length</code></li> \n <li><code>0 &lt;= initial[i] &lt; graph.length</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('929. 独特的电子邮件地址', '<p>每封电子邮件都由一个本地名称和一个域名组成，以 @ 符号分隔。</p> \n<p>例如，在&nbsp;<code>alice@leetcode.com</code>中，&nbsp;<code>alice</code>&nbsp;是本地名称，而&nbsp;<code>leetcode.com</code>&nbsp;是域名。</p> \n<p>除了小写字母，这些电子邮件还可能包含 <code>\'.\'</code> 或 <code>\'+\'</code>。</p> \n<p>如果在电子邮件地址的<strong>本地名称</strong>部分中的某些字符之间添加句点（<code>\'.\'</code>），则发往那里的邮件将会转发到本地名称中没有点的同一地址。例如，<code>\"alice.z@leetcode.com”</code> 和 <code>“alicez@leetcode.com”</code>&nbsp;会转发到同一电子邮件地址。 （请注意，此规则不适用于域名。）</p> \n<p>如果在<strong>本地名称</strong>中添加加号（<code>\'+\'</code>），则会忽略第一个加号后面的所有内容。这允许过滤某些电子邮件，例如 <code>m.y+name@email.com</code> 将转发到 <code>my@email.com</code>。 （同样，此规则不适用于域名。）</p> \n<p>可以同时使用这两个规则。</p> \n<p>给定电子邮件列表 <code>emails</code>，我们会向列表中的每个地址发送一封电子邮件。实际收到邮件的不同地址有多少？</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\n<strong>输出：</strong>2\n<strong>解释：</strong>实际收到邮件的是 \"testemail@leetcode.com\" 和 \"testemail@lee.tcode.com\"。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= emails[i].length&nbsp;&lt;= 100</code></li> \n <li><code>1 &lt;= emails.length &lt;= 100</code></li> \n <li>每封 <code>emails[i]</code> 都包含有且仅有一个 <code>\'@\'</code> 字符。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('93. 复原 IP 地址', '<p>给定一个只包含数字的字符串，用以表示一个 IP 地址，返回所有可能从 <code>s</code> 获得的 <strong>有效 IP 地址 </strong>。你可以按任何顺序返回答案。</p> \n<p><strong>有效 IP 地址</strong> 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 <code>0</code>），整数之间用 <code>\'.\'</code> 分隔。</p> \n<p>例如：\"0.1.2.201\" 和 \"192.168.1.1\" 是 <strong>有效</strong> IP 地址，但是 \"0.011.255.245\"、\"192.168.1.312\" 和 \"192.168@1.1\" 是 <strong>无效</strong> IP 地址。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"25525511135\"\n<strong>输出：</strong>[\"255.255.11.135\",\"255.255.111.35\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"0000\"\n<strong>输出：</strong>[\"0.0.0.0\"]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"1111\"\n<strong>输出：</strong>[\"1.1.1.1\"]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"010010\"\n<strong>输出：</strong>[\"0.10.0.10\",\"0.100.1.0\"]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>s = \"101023\"\n<strong>输出：</strong>[\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s.length &lt;= 3000</code></li> \n <li><code>s</code> 仅由数字组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('930. 和相同的二元子数组', '<p>给你一个二元数组 <code>nums</code> ，和一个整数 <code>goal</code> ，请你统计并返回有多少个和为 <code>goal</code> 的<strong> 非空</strong> 子数组。</p> \n<p><strong>子数组</strong> 是数组的一段连续部分。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,0,1,0,1], goal = 2\n<strong>输出：</strong>4\n<strong>解释：</strong>\n有 4 个满足题目要求的子数组：[1,0,1]、[1,0,1,0]、[0,1,0,1]、[1,0,1]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,0,0,0,0], goal = 0\n<strong>输出：</strong>15\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>nums[i]</code> 不是 <code>0</code> 就是 <code>1</code></li> \n <li><code>0 &lt;= goal &lt;= nums.length</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('931. 下降路径最小和', '<p>给你一个 <code>n x n</code> 的<strong> 方形 </strong>整数数组&nbsp;<code>matrix</code> ，请你找出并返回通过 <code>matrix</code> 的<strong>下降路径</strong><em> </em>的<strong> </strong><strong>最小和</strong> 。</p> \n<p><strong>下降路径</strong> 可以从第一行中的任何元素开始，并从每一行中选择一个元素。在下一行选择的元素和当前行所选元素最多相隔一列（即位于正下方或者沿对角线向左或者向右的第一个元素）。具体来说，位置 <code>(row, col)</code> 的下一个元素应当是 <code>(row + 1, col - 1)</code>、<code>(row + 1, col)</code> 或者 <code>(row + 1, col + 1)</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>matrix = [[2,1,3],[6,5,4],[7,8,9]]\n<strong>输出：</strong>13\n<strong>解释：</strong>下面是两条和最小的下降路径，用加粗+斜体标注：\n[[2,<em><strong>1</strong></em>,3],      [[2,<em><strong>1</strong></em>,3],\n [6,<em><strong>5</strong></em>,4],       [6,5,<em><strong>4</strong></em>],\n [<em><strong>7</strong></em>,8,9]]       [7,<em><strong>8</strong></em>,9]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>matrix = [[-19,57],[-40,-5]]\n<strong>输出：</strong>-59\n<strong>解释：</strong>下面是一条和最小的下降路径，用加粗+斜体标注：\n[[<em><strong>-19</strong></em>,57],\n [<em><strong>-40</strong></em>,-5]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>matrix = [[-48]]\n<strong>输出：</strong>-48\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('932. 漂亮数组', '<p>对于某些固定的&nbsp;<code>N</code>，如果数组&nbsp;<code>A</code>&nbsp;是整数&nbsp;<code>1, 2, ..., N</code>&nbsp;组成的排列，使得：</p> \n<p>对于每个&nbsp;<code>i &lt; j</code>，都<strong>不存在</strong>&nbsp;<code>k</code> 满足&nbsp;<code>i &lt; k &lt; j</code>&nbsp;使得&nbsp;<code>A[k] * 2 = A[i] + A[j]</code>。</p> \n<p>那么数组 <code>A</code>&nbsp;是漂亮数组。</p> \n<p>&nbsp;</p> \n<p>给定&nbsp;<code>N</code>，返回<strong>任意</strong>漂亮数组&nbsp;<code>A</code>（保证存在一个）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>4\n<strong>输出：</strong>[2,1,4,3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>5\n<strong>输出：</strong>[3,1,2,5,4]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= N &lt;= 1000</code></li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('933. 最近的请求次数', '<p>写一个&nbsp;<code>RecentCounter</code>&nbsp;类来计算特定时间范围内最近的请求。</p> \n<p>请你实现 <code>RecentCounter</code> 类：</p> \n<ul> \n <li><code>RecentCounter()</code> 初始化计数器，请求数为 0 。</li> \n <li><code>int ping(int t)</code> 在时间 <code>t</code> 添加一个新请求，其中 <code>t</code> 表示以毫秒为单位的某个时间，并返回过去 <code>3000</code> 毫秒内发生的所有请求数（包括新请求）。确切地说，返回在 <code>[t-3000, t]</code> 内发生的请求数。</li> \n</ul> \n<p><strong>保证</strong> 每次对 <code>ping</code> 的调用都使用比之前更大的 <code>t</code> 值。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\n[[], [1], [100], [3001], [3002]]\n<strong>输出：</strong>\n[null, 1, 2, 3, 3]\n\n<strong>解释：</strong>\nRecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = [<strong>1</strong>]，范围是 [-2999,1]，返回 1\nrecentCounter.ping(100);   // requests = [<strong>1</strong>, <strong>100</strong>]，范围是 [-2900,100]，返回 2\nrecentCounter.ping(3001);  // requests = [<strong>1</strong>, <strong>100</strong>, <strong>3001</strong>]，范围是 [1,3001]，返回 3\nrecentCounter.ping(3002);  // requests = [1, <strong>100</strong>, <strong>3001</strong>, <strong>3002</strong>]，范围是 [2,3002]，返回 3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= t &lt;= 10<sup>9</sup></code></li> \n <li>保证每次对 <code>ping</code> 调用所使用的 <code>t</code> 值都 <strong>严格递增</strong></li> \n <li>至多调用 <code>ping</code> 方法 <code>10<sup>4</sup></code> 次</li> \n</ul>');
INSERT INTO `leecode` VALUES ('934. 最短的桥', '<p>在给定的二维二进制数组&nbsp;<code>A</code>&nbsp;中，存在两座岛。（岛是由四面相连的 <code>1</code> 形成的一个最大组。）</p> \n<p>现在，我们可以将&nbsp;<code>0</code>&nbsp;变为&nbsp;<code>1</code>，以使两座岛连接起来，变成一座岛。</p> \n<p>返回必须翻转的&nbsp;<code>0</code> 的最小数目。（可以保证答案至少是 <code>1</code> 。）</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = [[0,1],[1,0]]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = [[0,1,0],[0,0,0],[0,0,1]]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>A = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\n<strong>输出：</strong>1</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= A.length == A[0].length &lt;= 100</code></li> \n <li><code>A[i][j] == 0</code> 或 <code>A[i][j] == 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('935. 骑士拨号器', '<p>国际象棋中的骑士可以按下图所示进行移动：</p> \n<p><img style=\"height: 150px; width: 150px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/11/03/knight.png\" alt=\"\">&nbsp;.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img style=\"height: 150px; width: 134px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/11/03/keypad.png\" alt=\"\"></p> \n<p><br> 这一次，我们将&nbsp;“骑士” 放在电话拨号盘的任意数字键（如上图所示）上，接下来，骑士将会跳&nbsp;N-1 步。每一步必须是从一个数字键跳到另一个数字键。</p> \n<p>每当它落在一个键上（包括骑士的初始位置），都会拨出键所对应的数字，总共按下&nbsp;<code>N</code> 位数字。</p> \n<p>你能用这种方式拨出多少个不同的号码？</p> \n<p>因为答案可能很大，<strong>所以输出答案模&nbsp;<code>10^9 + 7</code></strong>。</p> \n<p>&nbsp;</p> \n<ul> \n</ul> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>1\n<strong>输出：</strong>10\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>2\n<strong>输出：</strong>20\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>3\n<strong>输出：</strong>46\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= N &lt;= 5000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('936. 戳印序列', '<p>你想要用<strong>小写字母</strong>组成一个目标字符串&nbsp;<code>target</code>。&nbsp;</p> \n<p>开始的时候，序列由&nbsp;<code>target.length</code>&nbsp;个&nbsp;<code>\'?\'</code>&nbsp;记号组成。而你有一个小写字母印章&nbsp;<code>stamp</code>。</p> \n<p>在每个回合，你可以将印章放在序列上，并将序列中的每个字母替换为印章上的相应字母。你最多可以进行&nbsp;<code>10 * target.length</code>&nbsp; 个回合。</p> \n<p>举个例子，如果初始序列为 \"?????\"，而你的印章 <code>stamp</code>&nbsp;是&nbsp;<code>\"abc\"</code>，那么在第一回合，你可以得到&nbsp;\"abc??\"、\"?abc?\"、\"??abc\"。（请注意，印章必须完全包含在序列的边界内才能盖下去。）</p> \n<p>如果可以印出序列，那么返回一个数组，该数组由每个回合中被印下的最左边字母的索引组成。如果不能印出序列，就返回一个空数组。</p> \n<p>例如，如果序列是 \"ababc\"，印章是 <code>\"abc\"</code>，那么我们就可以返回与操作&nbsp;\"?????\" -&gt; \"abc??\" -&gt; \"ababc\" 相对应的答案 <code>[0, 2]</code>；</p> \n<p>另外，如果可以印出序列，那么需要保证可以在 <code>10 * target.length</code>&nbsp;个回合内完成。任何超过此数字的答案将不被接受。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>stamp = \"abc\", target = \"ababc\"\n<strong>输出：</strong>[0,2]\n（[1,0,2] 以及其他一些可能的结果也将作为答案被接受）\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>stamp = \"abca\", target = \"aabcaca\"\n<strong>输出：</strong>[3,0,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= stamp.length &lt;= target.length &lt;= 1000</code></li> \n <li><code>stamp</code> 和&nbsp;<code>target</code>&nbsp;只包含小写字母。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('937. 重新排列日志文件', '<p>给你一个日志数组 <code>logs</code>。每条日志都是以空格分隔的字串，其第一个字为字母与数字混合的<em> </em><strong>标识符 </strong>。</p> \n<p>有两种不同类型的日志：</p> \n<ul> \n <li><strong>字母日志</strong>：除标识符之外，所有字均由小写字母组成</li> \n <li><strong>数字日志</strong>：除标识符之外，所有字均由数字组成</li> \n</ul> \n<p>请按下述规则将日志重新排序：</p> \n<ul> \n <li>所有 <strong>字母日志</strong> 都排在 <strong>数字日志</strong> 之前。</li> \n <li><strong>字母日志</strong> 在内容不同时，忽略标识符后，按内容字母顺序排序；在内容相同时，按标识符排序。</li> \n <li><strong>数字日志</strong> 应该保留原来的相对顺序。</li> \n</ul> \n<p>返回日志的最终顺序。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]\n<strong>输出：</strong>[\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]\n<strong>解释：</strong>\n字母日志的内容都不同，所以顺序为 \"art can\", \"art zero\", \"own kit dig\" 。\n数字日志保留原来的相对顺序 \"dig1 8 1 5 1\", \"dig2 3 6\" 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]\n<strong>输出：</strong>[\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= logs.length &lt;= 100</code></li> \n <li><code>3 &lt;= logs[i].length &lt;= 100</code></li> \n <li><code>logs[i]</code> 中，字与字之间都用 <strong>单个</strong> 空格分隔</li> \n <li>题目数据保证 <code>logs[i]</code> 都有一个标识符，并且在标识符之后至少存在一个字</li> \n</ul>');
INSERT INTO `leecode` VALUES ('938. 二叉搜索树的范围和', '<p>给定二叉搜索树的根结点&nbsp;<code>root</code>，返回值位于范围 <em><code>[low, high]</code></em> 之间的所有结点的值的和。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 400px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2020/11/05/bst1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [10,5,15,3,7,null,18], low = 7, high = 15\n<strong>输出：</strong>32\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 400px; height: 335px;\" src=\"https://assets.leetcode.com/uploads/2020/11/05/bst2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\n<strong>输出：</strong>23\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点数目在范围 <code>[1, 2 * 10<sup>4</sup>]</code> 内</li> \n <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= low &lt;= high &lt;= 10<sup>5</sup></code></li> \n <li>所有 <code>Node.val</code> <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('939. 最小面积矩形', '<p>给定在 xy 平面上的一组点，确定由这些点组成的矩形的最小面积，其中矩形的边平行于 x 轴和 y 轴。</p> \n<p>如果没有任何矩形，就返回 0。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[[1,1],[1,3],[3,1],[3,3],[2,2]]\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= points.length &lt;= 500</code></li> \n <li><code>0 &lt;=&nbsp;points[i][0] &lt;=&nbsp;40000</code></li> \n <li><code>0 &lt;=&nbsp;points[i][1] &lt;=&nbsp;40000</code></li> \n <li>所有的点都是不同的。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('94. 二叉树的中序遍历', '<p>给定一个二叉树的根节点 <code>root</code> ，返回它的 <strong>中序</strong>&nbsp;遍历。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 202px; height: 324px;\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,null,2,3]\n<strong>输出：</strong>[1,3,2]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = []\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [1]\n<strong>输出：</strong>[1]\n</pre> \n<p><strong>示例 4：</strong></p> \n<img style=\"width: 202px; height: 202px;\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_5.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,2]\n<strong>输出：</strong>[2,1]\n</pre> \n<p><strong>示例 5：</strong></p> \n<img style=\"width: 202px; height: 202px;\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_4.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,null,2]\n<strong>输出：</strong>[1,2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点数目在范围 <code>[0, 100]</code> 内</li> \n <li><code>-100 &lt;= Node.val &lt;= 100</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶:</strong>&nbsp;递归算法很简单，你可以通过迭代算法完成吗？</p>');
INSERT INTO `leecode` VALUES ('940. 不同的子序列 II', '<p>给定一个字符串&nbsp;<code>S</code>，计算&nbsp;<code>S</code>&nbsp;的不同非空子序列的个数。</p> \n<p>因为结果可能很大，所以<strong>返回答案模</strong><strong> <code>10^9 + 7</code></strong>.</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\"abc\"\n<strong>输出：</strong>7\n<strong>解释：</strong>7 个不同的子序列分别是 \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", 以及 \"abc\"。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\"aba\"\n<strong>输出：</strong>6\n<strong>解释：</strong>6 个不同的子序列分别是 \"a\", \"b\", \"ab\", \"ba\", \"aa\" 以及 \"aba\"。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>\"aaa\"\n<strong>输出：</strong>3\n<strong>解释：</strong>3 个不同的子序列分别是 \"a\", \"aa\" 以及 \"aaa\"。\n</pre> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>S</code>&nbsp;只包含小写字母。</li> \n <li><code>1 &lt;= S.length &lt;= 2000</code></li> \n</ol> \n<p>&nbsp;</p> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('941. 有效的山脉数组', '<p>给定一个整数数组 <code>arr</code>，如果它是有效的山脉数组就返回&nbsp;<code>true</code>，否则返回 <code>false</code>。</p> \n<p>让我们回顾一下，如果 A 满足下述条件，那么它是一个山脉数组：</p> \n<ul> \n <li><code>arr.length &gt;= 3</code></li> \n <li>在&nbsp;<code>0 &lt; i&nbsp;&lt; arr.length - 1</code>&nbsp;条件下，存在&nbsp;<code>i</code>&nbsp;使得： \n  <ul> \n   <li><code>arr[0] &lt; arr[1] &lt; ... arr[i-1] &lt; arr[i] </code></li> \n   <li><code>arr[i] &gt; arr[i+1] &gt; ... &gt; arr[arr.length - 1]</code></li> \n  </ul> </li> \n</ul> \n<p>&nbsp;</p> \n<p><img style=\"height: 316px; width: 500px;\" src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_valid_mountain_array.png\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [2,1]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [3,5,5]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [0,3,2,1]\n<strong>输出：</strong>true</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= arr[i] &lt;= 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('942. 增减字符串匹配', '<p>给定只含&nbsp;<code>\"I\"</code>（增大）或 <code>\"D\"</code>（减小）的字符串&nbsp;<code>S</code>&nbsp;，令&nbsp;<code>N = S.length</code>。</p> \n<p>返回&nbsp;<code>[0, 1, ..., N]</code>&nbsp;的任意排列&nbsp;<code>A</code>&nbsp;使得对于所有&nbsp;<code>i = 0,&nbsp;..., N-1</code>，都有：</p> \n<ul> \n <li>如果&nbsp;<code>S[i] == \"I\"</code>，那么&nbsp;<code>A[i] &lt; A[i+1]</code></li> \n <li>如果&nbsp;<code>S[i] == \"D\"</code>，那么&nbsp;<code>A[i] &gt; A[i+1]</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\"IDID\"\n<strong>输出：</strong>[0,4,1,3,2]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\"III\"\n<strong>输出：</strong>[0,1,2,3]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>\"DDI\"\n<strong>输出：</strong>[3,2,0,1]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= S.length &lt;= 10000</code></li> \n <li><code>S</code> 只包含字符&nbsp;<code>\"I\"</code>&nbsp;或&nbsp;<code>\"D\"</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('943. 最短超级串', '<p>给定一个字符串数组 <code>words</code>，找到以 <code>words</code> 中每个字符串作为子字符串的最短字符串。如果有多个有效最短字符串满足题目条件，返回其中 <strong>任意一个</strong> 即可。</p> \n<p>我们可以假设 <code>words</code> 中没有字符串是 <code>words</code> 中另一个字符串的子字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>words = [\"alex\",\"loves\",\"leetcode\"]\n<strong>输出：</strong>\"alexlovesleetcode\"\n<strong>解释：</strong>\"alex\"，\"loves\"，\"leetcode\" 的所有排列都会被接受。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]\n<strong>输出：</strong>\"gctaagttcatgcatc\"</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 12</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 20</code></li> \n <li><code>words[i]</code> 由小写英文字母组成</li> \n <li><code>words</code> 中的所有字符串 <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('944. 删列造序', '<p>给你由 <code>n</code> 个小写字母字符串组成的数组 <code>strs</code>，其中每个字符串长度相等。</p> \n<p>这些字符串可以每个一行，排成一个网格。例如，<code>strs = [\"abc\", \"bce\", \"cae\"]</code> 可以排列为：</p> \n<pre>abc\nbce\ncae</pre> \n<p>你需要找出并删除 <strong>不是按字典序升序排列的</strong> 列。在上面的例子（下标从 0 开始）中，列 0（<code>\'a\'</code>, <code>\'b\'</code>, <code>\'c\'</code>）和列 2（<code>\'c\'</code>, <code>\'e\'</code>, <code>\'e\'</code>）都是按升序排列的，而列 1（<code>\'b\'</code>, <code>\'c\'</code>, <code>\'a\'</code>）不是，所以要删除列 1 。</p> \n<p>返回你需要删除的列数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>strs = [\"cba\",\"daf\",\"ghi\"]\n<strong>输出：</strong>1\n<strong>解释：</strong>网格示意如下：\n  cba\n  daf\n  ghi\n列 0 和列 2 按升序排列，但列 1 不是，所以只需要删除列 1 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>strs = [\"a\",\"b\"]\n<strong>输出：</strong>0\n<strong>解释：</strong>网格示意如下：\n  a\n  b\n只有列 0 这一列，且已经按升序排列，所以不用删除任何列。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>strs = [\"zyx\",\"wvu\",\"tsr\"]\n<strong>输出：</strong>3\n<strong>解释：</strong>网格示意如下：\n  zyx\n  wvu\n  tsr\n所有 3 列都是非升序排列的，所以都要删除。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == strs.length</code></li> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>1 &lt;= strs[i].length &lt;= 1000</code></li> \n <li><code>strs[i]</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('945. 使数组唯一的最小增量', '<p>给定整数数组 A，每次 <em>move</em> 操作将会选择任意&nbsp;<code>A[i]</code>，并将其递增&nbsp;<code>1</code>。</p> \n<p>返回使 <code>A</code>&nbsp;中的每个值都是唯一的最少操作次数。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入：</strong>[1,2,2]\n<strong>输出：</strong>1\n<strong>解释：</strong>经过一次 <em>move</em> 操作，数组将变为 [1, 2, 3]。</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入：</strong>[3,2,1,2,1,7]\n<strong>输出：</strong>6\n<strong>解释：</strong>经过 6 次 <em>move</em> 操作，数组将变为 [3, 4, 1, 2, 5, 7]。\n可以看出 5 次或 5 次以下的 <em>move</em> 操作是不能让数组的每个值唯一的。\n</pre> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= A.length &lt;= 40000</code></li> \n <li><code>0 &lt;= A[i] &lt; 40000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('946. 验证栈序列', '<p>给定&nbsp;<code>pushed</code>&nbsp;和&nbsp;<code>popped</code>&nbsp;两个序列，每个序列中的 <strong>值都不重复</strong>，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 <code>true</code>；否则，返回 <code>false</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n<strong>输出：</strong>true\n<strong>解释：</strong>我们可以按以下顺序执行：\npush(1), push(2), push(3), push(4), pop() -&gt; 4,\npush(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n<strong>输出：</strong>false\n<strong>解释：</strong>1 不能在 2 之前弹出。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= pushed.length == popped.length &lt;= 1000</code></li> \n <li><code>0 &lt;= pushed[i], popped[i] &lt; 1000</code></li> \n <li><code>pushed</code>&nbsp;是&nbsp;<code>popped</code>&nbsp;的排列。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('947. 移除最多的同行或同列石头', '<p><code>n</code> 块石头放置在二维平面中的一些整数坐标点上。每个坐标点上最多只能有一块石头。</p> \n<p>如果一块石头的 <strong>同行或者同列</strong> 上有其他石头存在，那么就可以移除这块石头。</p> \n<p>给你一个长度为 <code>n</code> 的数组 <code>stones</code> ，其中 <code>stones[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> 表示第 <code>i</code> 块石头的位置，返回 <strong>可以移除的石子</strong> 的最大数量。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]\n<strong>输出：</strong>5\n<strong>解释：</strong>一种移除 5 块石头的方法如下所示：\n1. 移除石头 [2,2] ，因为它和 [2,1] 同行。\n2. 移除石头 [2,1] ，因为它和 [0,1] 同列。\n3. 移除石头 [1,2] ，因为它和 [1,0] 同行。\n4. 移除石头 [1,0] ，因为它和 [0,0] 同列。\n5. 移除石头 [0,1] ，因为它和 [0,0] 同行。\n石头 [0,0] 不能移除，因为它没有与另一块石头同行/列。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]\n<strong>输出：</strong>3\n<strong>解释：</strong>一种移除 3 块石头的方法如下所示：\n1. 移除石头 [2,2] ，因为它和 [2,0] 同行。\n2. 移除石头 [2,0] ，因为它和 [0,0] 同列。\n3. 移除石头 [0,2] ，因为它和 [0,0] 同行。\n石头 [0,0] 和 [1,1] 不能移除，因为它们没有与另一块石头同行/列。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>stones = [[0,0]]\n<strong>输出：</strong>0\n<strong>解释：</strong>[0,0] 是平面上唯一一块石头，所以不可以移除它。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= stones.length &lt;= 1000</code></li> \n <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li> \n <li>不会有两块石头放在同一个坐标点上</li> \n</ul>');
INSERT INTO `leecode` VALUES ('948. 令牌放置', '<p>你的初始 <strong>能量</strong> 为&nbsp;<code>P</code>，初始 <strong>分数</strong> 为&nbsp;<code>0</code>，只有一包令牌 <code>tokens</code> 。其中 <code>tokens[i]</code> 是第 <code>i</code> 个令牌的值（下标从 0 开始）。</p> \n<p>令牌可能的两种使用方法如下：</p> \n<ul> \n <li>如果你至少有&nbsp;<code>token[i]</code>&nbsp;点 <strong>能量</strong> ，可以将令牌 <code>i</code> 置为正面朝上，失去&nbsp;<code>token[i]</code>&nbsp;点 <strong>能量</strong> ，并得到&nbsp;<code>1</code>&nbsp;<strong>分</strong> 。</li> \n <li>如果我们至少有&nbsp;<code>1</code>&nbsp;<strong>分 </strong>，可以将令牌 <code>i</code> 置为反面朝上，获得&nbsp;<code>token[i]</code> 点 <strong>能量</strong> ，并失去&nbsp;<code>1</code>&nbsp;<strong>分</strong> 。</li> \n</ul> \n<p>每个令牌 <strong>最多</strong> 只能使用一次，使用 <strong>顺序不限</strong> ，<strong>不需</strong> 使用所有令牌。</p> \n<p>在使用任意数量的令牌后，返回我们可以得到的最大 <strong>分数</strong> 。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>tokens = [100], P = 50\n<strong>输出：</strong>0\n<strong>解释：</strong>无法使用唯一的令牌，因为能量和分数都太少了。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>tokens = [100,200], P = 150\n<strong>输出：</strong>1\n<strong>解释：</strong>令牌 0 正面朝上，能量变为 50，分数变为 1 。不必使用令牌 1 ，因为你无法使用它来提高分数。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>tokens = [100,200,300,400], P = 200\n<strong>输出：</strong>2\n<strong>解释：</strong>按下面顺序使用令牌可以得到 2 分：\n1. 令牌 0 正面朝上，能量变为 100 ，分数变为 1\n2. 令牌 3 正面朝下，能量变为 500 ，分数变为 0\n3. 令牌 1 正面朝上，能量变为 300 ，分数变为 1\n4. 令牌 2 正面朝上，能量变为 0 ，分数变为 2</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= tokens.length &lt;= 1000</code></li> \n <li><code>0 &lt;= tokens[i],&nbsp;P &lt; 10<sup>4</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('949. 给定数字能组成的最大时间', '<p>给定一个由 4 位数字组成的数组，返回可以设置的符合 24 小时制的最大时间。</p> \n<p>24 小时格式为 <code>\"HH:MM\"</code> ，其中 <code>HH</code> 在 <code>00</code> 到 <code>23</code> 之间，<code>MM</code> 在 <code>00</code> 到 <code>59</code> 之间。最小的 24 小时制时间是&nbsp;<code>00:00</code> ，而最大的是&nbsp;<code>23:59</code> 。从 00:00 （午夜）开始算起，过得越久，时间越大。</p> \n<p>以长度为 5 的字符串，按 <code>\"HH:MM\"</code> 格式返回答案。如果不能确定有效时间，则返回空字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,3,4]\n<strong>输出：</strong>\"23:41\"\n<strong>解释：</strong>有效的 24 小时制时间是 \"12:34\"，\"12:43\"，\"13:24\"，\"13:42\"，\"14:23\"，\"14:32\"，\"21:34\"，\"21:43\"，\"23:14\" 和 \"23:41\" 。这些时间中，\"23:41\" 是最大时间。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [5,5,5,5]\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>不存在有效的 24 小时制时间，因为 \"55:55\" 无效。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [0,0,0,0]\n<strong>输出：</strong>\"00:00\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [0,0,1,0]\n<strong>输出：</strong>\"10:00\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>arr.length == 4</code></li> \n <li><code>0 &lt;= arr[i] &lt;= 9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('95. 不同的二叉搜索树 II', '<p>给你一个整数 <code>n</code> ，请你生成并返回所有由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的不同 <strong>二叉搜索树</strong><em> </em>。可以按 <strong>任意顺序</strong> 返回答案。</p> \n<p>&nbsp;</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p><strong>示例 1：</strong></p> \n  <img style=\"width: 600px; height: 148px;\" src=\"https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>[[1]]\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>1 &lt;= n &lt;= 8</code></li> \n  </ul> \n </div> \n</div>');
INSERT INTO `leecode` VALUES ('950. 按递增顺序显示卡牌', '<p>牌组中的每张卡牌都对应有一个唯一的整数。你可以按你想要的顺序对这套卡片进行排序。</p> \n<p>最初，这些卡牌在牌组里是正面朝下的（即，未显示状态）。</p> \n<p>现在，重复执行以下步骤，直到显示所有卡牌为止：</p> \n<ol> \n <li>从牌组顶部抽一张牌，显示它，然后将其从牌组中移出。</li> \n <li>如果牌组中仍有牌，则将下一张处于牌组顶部的牌放在牌组的底部。</li> \n <li>如果仍有未显示的牌，那么返回步骤 1。否则，停止行动。</li> \n</ol> \n<p>返回能以<strong>递增顺序</strong>显示卡牌的牌组顺序。</p> \n<p>答案中的第一张牌被认为处于牌堆顶部。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[17,13,11,2,3,5,7]\n<strong>输出：</strong>[2,13,3,11,5,17,7]\n<strong>解释：\n</strong>我们得到的牌组顺序为 [17,13,11,2,3,5,7]（这个顺序不重要），然后将其重新排序。\n重新排序后，牌组以 [2,13,3,11,5,17,7] 开始，其中 2 位于牌组的顶部。\n我们显示 2，然后将 13 移到底部。牌组现在是 [3,11,5,17,7,13]。\n我们显示 3，并将 11 移到底部。牌组现在是 [5,17,7,13,11]。\n我们显示 5，然后将 17 移到底部。牌组现在是 [7,13,11,17]。\n我们显示 7，并将 13 移到底部。牌组现在是 [11,17,13]。\n我们显示 11，然后将 17 移到底部。牌组现在是 [13,17]。\n我们展示 13，然后将 17 移到底部。牌组现在是 [17]。\n我们显示 17。\n由于所有卡片都是按递增顺序排列显示的，所以答案是正确的。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 1000</code></li> \n <li><code>1 &lt;= A[i] &lt;= 10^6</code></li> \n <li>对于所有的&nbsp;<code>i != j</code>，<code>A[i] != A[j]</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('951. 翻转等价二叉树', '<p>我们可以为二叉树 T 定义一个翻转操作，如下所示：选择任意节点，然后交换它的左子树和右子树。</p> \n<p>只要经过一定次数的翻转操作后，能使 X 等于 Y，我们就称二叉树 X <em>翻转等价</em>于二叉树 Y。</p> \n<p>编写一个判断两个二叉树是否是<em>翻转等价</em>的函数。这些树由根节点&nbsp;<code>root1</code> 和 <code>root2</code>&nbsp;给出。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]\n<strong>输出：</strong>true\n<strong>解释：</strong>我们翻转值为 1，3 以及 5 的三个节点。\n<img style=\"height: 220px; width: 500px;\" src=\"https://assets.leetcode.com/uploads/2018/11/29/tree_ex.png\" alt=\"Flipped Trees Diagram\">\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>每棵树最多有&nbsp;<code>100</code>&nbsp;个节点。</li> \n <li>每棵树中的每个值都是唯一的、在 <code>[0, 99]</code>&nbsp;范围内的整数。</li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('952. 按公因数计算最大组件大小', '<p>给定一个由不同正整数的组成的非空数组 <code>A</code>，考虑下面的图：</p> \n<ul> \n <li>有&nbsp;<code>A.length</code>&nbsp;个节点，按从&nbsp;<code>A[0]</code>&nbsp;到&nbsp;<code>A[A.length - 1]</code>&nbsp;标记；</li> \n <li>只有当 <code>A[i]</code> 和 <code>A[j]</code> 共用一个大于 1 的公因数时，<code>A[i]</code>&nbsp;和 <code>A[j]</code> 之间才有一条边。</li> \n</ul> \n<p>返回图中最大连通组件的大小。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[4,6,15,35]\n<strong>输出：</strong>4\n<img style=\"height: 50px; width: 257px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/01/ex1.png\" alt=\"\">\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[20,50,9,63]\n<strong>输出：</strong>2\n<img style=\"height: 50px; width: 293px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/01/ex2.png\" alt=\"\">\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[2,3,6,7,4,12,21,39]\n<strong>输出：</strong>8\n<img style=\"height: 180px; width: 346px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/01/ex3.png\" alt=\"\">\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 20000</code></li> \n <li><code>1 &lt;= A[i] &lt;= 100000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('953. 验证外星语词典', '<p>某种外星语也使用英文小写字母，但可能顺序 <code>order</code> 不同。字母表的顺序（<code>order</code>）是一些小写字母的排列。</p> \n<p>给定一组用外星语书写的单词 <code>words</code>，以及其字母表的顺序 <code>order</code>，只有当给定的单词在这种外星语中按字典序排列时，返回 <code>true</code>；否则，返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"\n<strong>输出：</strong>true\n<strong>解释：</strong>在该语言的字母表中，\'h\' 位于 \'l\' 之前，所以单词序列是按字典序排列的。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"\n<strong>输出：</strong>false\n<strong>解释：</strong>在该语言的字母表中，\'d\' 位于 \'l\' 之后，那么 words[0] &gt; words[1]，因此单词序列不是按字典序排列的。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"\n<strong>输出：</strong>false\n<strong>解释：</strong>当前三个字符 \"app\" 匹配时，第二个字符串相对短一些，然后根据词典编纂规则 \"apple\" &gt; \"app\"，因为 \'l\' &gt; \'∅\'，其中 \'∅\' 是空白字符，定义为比任何其他字符都小（<a href=\"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E5%BA%8F\">更多信息</a>）。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 100</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 20</code></li> \n <li><code>order.length == 26</code></li> \n <li>在&nbsp;<code>words[i]</code>&nbsp;和&nbsp;<code>order</code>&nbsp;中的所有字符都是英文小写字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('954. 二倍数对数组', '<p>给定一个长度为偶数的整数数组 <code>arr</code>，只有对 <code>arr</code> 进行重组后可以满足 “对于每个 <code>0 &lt;=&nbsp;i &lt; len(arr) / 2</code>，都有 <code>arr[2 * i + 1] = 2 * arr[2 * i]</code>”&nbsp;时，返回 <code>true</code>；否则，返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [3,1,3,6]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [2,1,2,6]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [4,-2,2,-4]\n<strong>输出：</strong>true\n<strong>解释：</strong>可以用 [-2,-4] 和 [2,4] 这两组组成 [-2,-4,2,4] 或是 [2,4,-2,-4]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [1,2,4,16,8,4]\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= arr.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>arr.length</code> 是偶数</li> \n <li><code>-10<sup>5</sup> &lt;= arr[i] &lt;= 10<sup>5</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('955. 删列造序 II', '<p>给定由 <code>n</code> 个字符串组成的数组 <code>strs</code>，其中每个字符串长度相等。</p> \n<p>选取一个删除索引序列，对于 <code>strs</code> 中的每个字符串，删除对应每个索引处的字符。</p> \n<p>比如，有 <code>strs = [\"abcdef\", \"uvwxyz\"]</code>，删除索引序列&nbsp;<code>{0, 2, 3}</code>，删除后 <code>strs</code> 为<code>[\"bef\", \"vyz\"]</code>。</p> \n<p>假设，我们选择了一组删除索引 <code>answer</code>，那么在执行删除操作之后，最终得到的数组的元素是按 <strong>字典序</strong>（<code>strs[0] &lt;= strs[1] &lt;= strs[2] ... &lt;= strs[n - 1]</code>）排列的，然后请你返回 <code>answer.length</code>&nbsp;的最小可能值。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>strs = [\"ca\",\"bb\",\"ac\"]\n<strong>输出：</strong>1\n<strong>解释： </strong>\n删除第一列后，strs = [\"a\", \"b\", \"c\"]。\n现在 strs 中元素是按字典排列的 (即，strs[0] &lt;= strs[1] &lt;= strs[2])。\n我们至少需要进行 1 次删除，因为最初 strs 不是按字典序排列的，所以答案是 1。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>strs = [\"xc\",\"yb\",\"za\"]\n<strong>输出：</strong>0\n<strong>解释：</strong>\nstrs 的列已经是按字典序排列了，所以我们不需要删除任何东西。\n注意 strs 的行不需要按字典序排列。\n也就是说，strs[0][0] &lt;= strs[0][1] &lt;= ... 不一定成立。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>strs = [\"zyx\",\"wvu\",\"tsr\"]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n我们必须删掉每一列。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == strs.length</code></li> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>1 &lt;= strs[i].length &lt;= 100</code></li> \n <li><code>strs[i]</code> 由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('956. 最高的广告牌', '<p>你正在安装一个广告牌，并希望它高度最大。这块广告牌将有两个钢制支架，两边各一个。每个钢支架的高度必须相等。</p> \n<p>你有一堆可以焊接在一起的钢筋 <code>rods</code>。举个例子，如果钢筋的长度为 1、2 和 3，则可以将它们焊接在一起形成长度为 6 的支架。</p> \n<p>返回广告牌的最大可能安装高度。如果没法安装广告牌，请返回 0。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1,2,3,6]\n<strong>输出：</strong>6\n<strong>解释：</strong>我们有两个不相交的子集 {1,2,3} 和 {6}，它们具有相同的和 sum = 6。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[1,2,3,4,5,6]\n<strong>输出：</strong>10\n<strong>解释：</strong>我们有两个不相交的子集 {2,3,5} 和 {4,6}，它们具有相同的和 sum = 10。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[1,2]\n<strong>输出：</strong>0\n<strong>解释：</strong>没法安装广告牌，所以返回 0。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= rods.length &lt;= 20</code></li> \n <li><code>1 &lt;= rods[i] &lt;= 1000</code></li> \n <li><code>钢筋的长度总和最多为 5000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('957. N 天后的牢房', '<p>8 间牢房排成一排，每间牢房不是有人住就是空着。</p> \n<p>每天，无论牢房是被占用或空置，都会根据以下规则进行更改：</p> \n<ul> \n <li>如果一间牢房的两个相邻的房间都被占用或都是空的，那么该牢房就会被占用。</li> \n <li>否则，它就会被空置。</li> \n</ul> \n<p>（请注意，由于监狱中的牢房排成一行，所以行中的第一个和最后一个房间无法有两个相邻的房间。）</p> \n<p>我们用以下方式描述监狱的当前状态：如果第 <code>i</code> 间牢房被占用，则 <code>cell[i]==1</code>，否则 <code>cell[i]==0</code>。</p> \n<p>根据监狱的初始状态，在 <code>N</code> 天后返回监狱的状况（和上述 N 种变化）。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>cells = [0,1,0,1,1,0,0,1], N = 7\n<strong>输出：</strong>[0,0,1,1,0,0,0,0]\n<strong>解释：\n</strong>下表概述了监狱每天的状况：\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]\n\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>cells = [1,0,0,1,0,0,1,0], N = 1000000000\n<strong>输出：</strong>[0,0,1,1,1,1,1,0]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>cells.length == 8</code></li> \n <li><code>cells[i]</code>&nbsp;的值为 <code>0</code> 或 <code>1</code>&nbsp;</li> \n <li><code>1 &lt;= N &lt;= 10^9</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('958. 二叉树的完全性检验', '<p>给定一个二叉树，确定它是否是一个<em>完全二叉树</em>。</p> \n<p><strong><a href=\"https://baike.baidu.com/item/完全二叉树/7773232?fr=aladdin\">百度百科</a>中对完全二叉树的定义如下：</strong></p> \n<p>若设二叉树的深度为 h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。（注：第 h 层可能包含 1~&nbsp;2<sup>h</sup>&nbsp;个节点。）</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 145px; width: 180px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/complete-binary-tree-1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>[1,2,3,4,5,6]\n<strong>输出：</strong>true\n<strong>解释：</strong>最后一层前的每一层都是满的（即，结点值为 {1} 和 {2,3} 的两层），且最后一层中的所有结点（{4,5,6}）都尽可能地向左。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/complete-binary-tree-2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>[1,2,3,4,5,null,7]\n<strong>输出：</strong>false\n<strong>解释：</strong>值为 7 的结点没有尽可能靠向左侧。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>树中将会有 1 到 100 个结点。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('959. 由斜杠划分区域', '<p>在由 1 x 1 方格组成的 N x N 网格&nbsp;<code>grid</code> 中，每个 1 x 1&nbsp;方块由 <code>/</code>、<code>\\</code> 或空格构成。这些字符会将方块划分为一些共边的区域。</p> \n<p>（请注意，反斜杠字符是转义的，因此 <code>\\</code> 用 <code>\"\\\\\"</code>&nbsp;表示。）。</p> \n<p>返回区域的数目。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：\n</strong>[\n&nbsp; \" /\",\n&nbsp; \"/ \"\n]\n<strong>输出：</strong>2\n<strong>解释：</strong>2x2 网格如下：\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/1.png\" alt=\"\"></pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：\n</strong>[\n&nbsp; \" /\",\n&nbsp; \"  \"\n]\n<strong>输出：</strong>1\n<strong>解释：</strong>2x2 网格如下：\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/2.png\" alt=\"\"></pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：\n</strong>[\n&nbsp; \"\\\\/\",\n&nbsp; \"/\\\\\"\n]\n<strong>输出：</strong>4\n<strong>解释：</strong>（回想一下，因为 \\ 字符是转义的，所以 \"\\\\/\" 表示 \\/，而 \"/\\\\\" 表示 /\\。）\n2x2 网格如下：\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/3.png\" alt=\"\"></pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：\n</strong>[\n&nbsp; \"/\\\\\",\n&nbsp; \"\\\\/\"\n]\n<strong>输出：</strong>5\n<strong>解释：</strong>（回想一下，因为 \\ 字符是转义的，所以 \"/\\\\\" 表示 /\\，而 \"\\\\/\" 表示 \\/。）\n2x2 网格如下：\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/4.png\" alt=\"\"></pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：\n</strong>[\n&nbsp; \"//\",\n&nbsp; \"/ \"\n]\n<strong>输出：</strong>3\n<strong>解释：</strong>2x2 网格如下：\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/5.png\" alt=\"\">\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= grid.length == grid[0].length &lt;= 30</code></li> \n <li><code>grid[i][j]</code> 是&nbsp;<code>\'/\'</code>、<code>\'\\\'</code>、或&nbsp;<code>\' \'</code>。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('96. 不同的二叉搜索树', '<p>给你一个整数 <code>n</code> ，求恰由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的 <strong>二叉搜索树</strong> 有多少种？返回满足题意的二叉搜索树的种数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 600px; height: 148px;\" src=\"https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>5\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 19</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('960. 删列造序 III', '<p>给定由&nbsp;<code>N</code>&nbsp;个小写字母字符串组成的数组&nbsp;<code>A</code>，其中每个字符串长度相等。</p> \n<p>选取一个删除索引序列，对于&nbsp;<code>A</code>&nbsp;中的每个字符串，删除对应每个索引处的字符。</p> \n<p>比如，有&nbsp;<code>A = [\"babca\",\"bbazb\"]</code>，删除索引序列&nbsp;<code>{0, 1, 4}</code>，删除后&nbsp;<code>A</code>&nbsp;为<code>[\"bc\",\"az\"]</code>。</p> \n<p>假设，我们选择了一组删除索引&nbsp;<code>D</code>，那么在执行删除操作之后，最终得到的数组的行中的每个元素都是按<strong>字典序</strong>排列的。</p> \n<p>清楚起见，<code>A[0]</code>&nbsp;是按字典序排列的（即，<code>A[0][0] &lt;= A[0][1] &lt;= ... &lt;= A[0][A[0].length - 1]</code>），<code>A[1]</code>&nbsp;是按字典序排列的（即，<code>A[1][0] &lt;= A[1][1] &lt;= ... &lt;= A[1][A[1].length - 1]</code>），依此类推。</p> \n<p>请你返回&nbsp;<code>D.length</code>&nbsp;的最小可能值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[\"babca\",\"bbazb\"]\n<strong>输出：</strong>3\n<strong>解释：\n</strong>删除 0、1 和 4 这三列后，最终得到的数组是 A = [\"bc\", \"az\"]。\n这两行是分别按字典序排列的（即，A[0][0] &lt;= A[0][1] 且 A[1][0] &lt;= A[1][1]）。\n注意，A[0] &gt; A[1] —— 数组 A 不一定是按字典序排列的。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[\"edcba\"]\n<strong>输出：</strong>4\n<strong>解释：</strong>如果删除的列少于 4 列，则剩下的行都不会按字典序排列。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[\"ghi\",\"def\",\"abc\"]\n<strong>输出：</strong>0\n<strong>解释：</strong>所有行都已按字典序排列。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 100</code></li> \n <li><code>1 &lt;= A[i].length &lt;= 100</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('961. 重复 N 次的元素', '<p>在大小为 <code>2N</code>&nbsp;的数组 <code>A</code>&nbsp;中有 <code>N+1</code> 个不同的元素，其中有一个元素重复了 <code>N</code> 次。</p> \n<p>返回重复了 <code>N</code>&nbsp;次的那个元素。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1,2,3,3]\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[2,1,2,5,3,2]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<pre><strong>输入：</strong>[5,1,5,2,5,3,5,4]\n<strong>输出：</strong>5\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>4 &lt;= A.length &lt;= 10000</code></li> \n <li><code>0 &lt;= A[i] &lt; 10000</code></li> \n <li><code>A.length</code>&nbsp;为偶数</li> \n</ul>');
INSERT INTO `leecode` VALUES ('962. 最大宽度坡', '<p>给定一个整数数组&nbsp;<code>A</code>，<em>坡</em>是元组&nbsp;<code>(i, j)</code>，其中&nbsp;&nbsp;<code>i &lt; j</code>&nbsp;且&nbsp;<code>A[i] &lt;= A[j]</code>。这样的坡的宽度为&nbsp;<code>j - i</code>。</p> \n<p>找出&nbsp;<code>A</code>&nbsp;中的坡的最大宽度，如果不存在，返回 0 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[6,0,8,2,1,5]\n<strong>输出：</strong>4\n<strong>解释：</strong>\n最大宽度的坡为 (i, j) = (1, 5): A[1] = 0 且 A[5] = 5.\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[9,8,1,0,1,9,4,0,4,1]\n<strong>输出：</strong>7\n<strong>解释：</strong>\n最大宽度的坡为 (i, j) = (2, 9): A[2] = 1 且 A[9] = 1.\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>2 &lt;= A.length &lt;= 50000</code></li> \n <li><code>0 &lt;= A[i] &lt;= 50000</code></li> \n</ol> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('963. 最小面积矩形 II', '<p>给定在 xy 平面上的一组点，确定由这些点组成的任何矩形的最小面积，其中矩形的边<strong>不一定平行于</strong> x 轴和 y 轴。</p> \n<p>如果没有任何矩形，就返回 0。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 151px; width: 150px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/22/1a.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>[[1,2],[2,1],[1,0],[0,1]]\n<strong>输出：</strong>2.00000\n<strong>解释：</strong>最小面积的矩形出现在 [1,2],[2,1],[1,0],[0,1] 处，面积为 2。</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 94px; width: 150px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/23/2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>[[0,1],[2,1],[1,1],[1,0],[2,0]]\n<strong>输出：</strong>1.00000\n<strong>解释：</strong>最小面积的矩形出现在 [1,0],[1,1],[2,1],[2,0] 处，面积为 1。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 94px; width: 150px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/23/3.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>[[0,3],[1,2],[3,1],[1,3],[2,1]]\n<strong>输出：</strong>0\n<strong>解释：</strong>没法从这些点中组成任何矩形。\n</pre> \n<p><strong>示例 4：</strong></p> \n<p><strong><img style=\"height: 155px; width: 160px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/21/4c.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>[[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]]\n<strong>输出：</strong>2.00000\n<strong>解释：</strong>最小面积的矩形出现在 [2,1],[2,3],[3,3],[3,1] 处，面积为 2。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= points.length &lt;= 50</code></li> \n <li><code>0 &lt;=&nbsp;points[i][0] &lt;=&nbsp;40000</code></li> \n <li><code>0 &lt;=&nbsp;points[i][1] &lt;=&nbsp;40000</code></li> \n <li>所有的点都是不同的。</li> \n <li>与真实值误差不超过 <code>10^-5</code>&nbsp;的答案将视为正确结果。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('964. 表示数字的最少运算符', '<p>给定一个正整数 <code>x</code>，我们将会写出一个形如&nbsp;<code>x (op1) x (op2) x (op3) x ...</code>&nbsp;的表达式，其中每个运算符&nbsp;<code>op1</code>，<code>op2</code>，… 可以是加、减、乘、除（<code>+</code>，<code>-</code>，<code>*</code>，或是&nbsp;<code>/</code>）之一。例如，对于&nbsp;<code>x = 3</code>，我们可以写出表达式&nbsp;<code>3 * 3 / 3 + 3 - 3</code>，该式的值为 3 。</p> \n<p>在写这样的表达式时，我们需要遵守下面的惯例：</p> \n<ol> \n <li>除运算符（<code>/</code>）返回有理数。</li> \n <li>任何地方都没有括号。</li> \n <li>我们使用通常的操作顺序：乘法和除法发生在加法和减法之前。</li> \n <li>不允许使用一元否定运算符（<code>-</code>）。例如，“<code>x - x</code>” 是一个有效的表达式，因为它只使用减法，但是 “<code>-x + x</code>” 不是，因为它使用了否定运算符。&nbsp;</li> \n</ol> \n<p>我们希望编写一个能使表达式等于给定的目标值 <code>target</code> 且运算符最少的表达式。返回所用运算符的最少数量。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>x = 3, target = 19\n<strong>输出：</strong>5\n<strong>解释：</strong>3 * 3 + 3 * 3 + 3 / 3 。表达式包含 5 个运算符。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>x = 5, target = 501\n<strong>输出：</strong>8\n<strong>解释：</strong>5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5 。表达式包含 8 个运算符。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>x = 100, target = 100000000\n<strong>输出：</strong>3\n<strong>解释：</strong>100 * 100 * 100 * 100 。表达式包含 3 个运算符。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= x &lt;= 100</code></li> \n <li><code>1 &lt;= target &lt;= 2 * 10^8</code></li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('965. 单值二叉树', '<p>如果二叉树每个节点都具有相同的值，那么该二叉树就是<em>单值</em>二叉树。</p> \n<p>只有给定的树是单值二叉树时，才返回&nbsp;<code>true</code>；否则返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 159px; width: 200px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/screen-shot-2018-12-25-at-50104-pm.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>[1,1,1,1,1,null,1]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 158px; width: 200px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/screen-shot-2018-12-25-at-50050-pm.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>[2,2,2,5,2]\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>给定树的节点数范围是&nbsp;<code>[1, 100]</code>。</li> \n <li>每个节点的值都是整数，范围为&nbsp;<code>[0, 99]</code>&nbsp;。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('966. 元音拼写检查器', '<p>在给定单词列表&nbsp;<code>wordlist</code>&nbsp;的情况下，我们希望实现一个拼写检查器，将查询单词转换为正确的单词。</p> \n<p>对于给定的查询单词&nbsp;<code>query</code>，拼写检查器将会处理两类拼写错误：</p> \n<ul> \n <li>大小写：如果查询匹配单词列表中的某个单词（<strong>不区分大小写</strong>），则返回的正确单词与单词列表中的大小写相同。 \n  <ul> \n   <li>例如：<code>wordlist = [\"yellow\"]</code>, <code>query = \"YellOw\"</code>: <code>correct = \"yellow\"</code></li> \n   <li>例如：<code>wordlist = [\"Yellow\"]</code>, <code>query = \"yellow\"</code>: <code>correct = \"Yellow\"</code></li> \n   <li>例如：<code>wordlist = [\"yellow\"]</code>, <code>query = \"yellow\"</code>: <code>correct = \"yellow\"</code></li> \n  </ul> </li> \n <li>元音错误：如果在将查询单词中的元音（‘a’、‘e’、‘i’、‘o’、‘u’）分别替换为任何元音后，能与单词列表中的单词匹配（<strong>不区分大小写</strong>），则返回的正确单词与单词列表中的匹配项大小写相同。 \n  <ul> \n   <li>例如：<code>wordlist = [\"YellOw\"]</code>, <code>query = \"yollow\"</code>: <code>correct = \"YellOw\"</code></li> \n   <li>例如：<code>wordlist = [\"YellOw\"]</code>, <code>query = \"yeellow\"</code>: <code>correct = \"\"</code> （无匹配项）</li> \n   <li>例如：<code>wordlist = [\"YellOw\"]</code>, <code>query = \"yllw\"</code>: <code>correct = \"\"</code> （无匹配项）</li> \n  </ul> </li> \n</ul> \n<p>此外，拼写检查器还按照以下优先级规则操作：</p> \n<ul> \n <li>当查询完全匹配单词列表中的某个单词（<strong>区分大小写</strong>）时，应返回相同的单词。</li> \n <li>当查询匹配到大小写问题的单词时，您应该返回单词列表中的第一个这样的匹配项。</li> \n <li>当查询匹配到元音错误的单词时，您应该返回单词列表中的第一个这样的匹配项。</li> \n <li>如果该查询在单词列表中没有匹配项，则应返回空字符串。</li> \n</ul> \n<p>给出一些查询 <code>queries</code>，返回一个单词列表 <code>answer</code>，其中 <code>answer[i]</code> 是由查询 <code>query = queries[i]</code> 得到的正确单词。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]\n<strong>输出：</strong>[\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= wordlist.length &lt;= 5000</code></li> \n <li><code>1 &lt;= queries.length &lt;= 5000</code></li> \n <li><code>1 &lt;= wordlist[i].length &lt;= 7</code></li> \n <li><code>1 &lt;= queries[i].length &lt;= 7</code></li> \n <li><code>wordlist</code> 和&nbsp;<code>queries</code>&nbsp;中的所有字符串仅由<strong>英文</strong>字母组成。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('967. 连续差相同的数字', '<p>返回所有长度为 <code>n</code> 且满足其每两个连续位上的数字之间的差的绝对值为 <code>k</code> 的<strong> 非负整数 </strong>。</p> \n<p>请注意，<strong>除了 </strong>数字 <code>0</code> 本身之外，答案中的每个数字都 <strong>不能 </strong>有前导零。例如，<code>01</code> 有一个前导零，所以是无效的；但 <code>0</code>&nbsp;是有效的。</p> \n<p>你可以按 <strong>任何顺序</strong> 返回答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 3, k = 7\n<strong>输出：</strong>[181,292,707,818,929]\n<strong>解释：</strong>注意，070 不是一个有效的数字，因为它有前导零。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 2, k = 1\n<strong>输出：</strong>[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 2, k = 0\n<strong>输出：</strong>[11,22,33,44,55,66,77,88,99]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 2, k = 2\n<strong>输出：</strong>[13,20,24,31,35,42,46,53,57,64,68,75,79,86,97]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 9</code></li> \n <li><code>0 &lt;= k &lt;= 9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('968. 监控二叉树', '<p>给定一个二叉树，我们在树的节点上安装摄像头。</p> \n<p>节点上的每个摄影头都可以监视<strong>其父对象、自身及其直接子对象。</strong></p> \n<p>计算监控树的所有节点所需的最小摄像头数量。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 163px; width: 138px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_01.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>[0,0,null,0,0]\n<strong>输出：</strong>1\n<strong>解释：</strong>如图所示，一台摄像头足以监控所有节点。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 312px; width: 139px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_02.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>[0,0,null,0,null,0,null,null,0]\n<strong>输出：</strong>2\n<strong>解释：</strong>需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。\n</pre> \n<p><br> <strong>提示：</strong></p> \n<ol> \n <li>给定树的节点数的范围是&nbsp;<code>[1, 1000]</code>。</li> \n <li>每个节点的值都是 0。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('969. 煎饼排序', '<p>给你一个整数数组 <code>arr</code> ，请使用 <strong>煎饼翻转</strong><em> </em>完成对数组的排序。</p> \n<p>一次煎饼翻转的执行过程如下：</p> \n<ul> \n <li>选择一个整数 <code>k</code> ，<code>1 &lt;= k &lt;= arr.length</code></li> \n <li>反转子数组 <code>arr[0...k-1]</code>（<strong>下标从 0 开始</strong>）</li> \n</ul> \n<p>例如，<code>arr = [3,2,1,4]</code> ，选择 <code>k = 3</code> 进行一次煎饼翻转，反转子数组 <code>[3,2,1]</code> ，得到 <code>arr = [<strong>1</strong>,<strong>2</strong>,<strong>3</strong>,4]</code> 。</p> \n<p>以数组形式返回能使 <code>arr</code> 有序的煎饼翻转操作所对应的 <code>k</code> 值序列。任何将数组排序且翻转次数在&nbsp;<code>10 * arr.length</code> 范围内的有效答案都将被判断为正确。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[3,2,4,1]\n<strong>输出：</strong>[4,2,4,3]\n<strong>解释：</strong>\n我们执行 4 次煎饼翻转，k 值分别为 4，2，4，和 3。\n初始状态 arr = [3, 2, 4, 1]\n第一次翻转后（k = 4）：arr = [<strong>1</strong>, <strong>4</strong>, <strong>2</strong>, <strong>3</strong>]\n第二次翻转后（k = 2）：arr = [<strong>4</strong>, <strong>1</strong>, 2, 3]\n第三次翻转后（k = 4）：arr = [<strong>3</strong>, <strong>2</strong>, <strong>1</strong>, <strong>4</strong>]\n第四次翻转后（k = 3）：arr = [<strong>1</strong>, <strong>2</strong>, <strong>3</strong>, 4]，此时已完成排序。 \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[1,2,3]\n<strong>输出：</strong>[]\n<strong>解释：\n</strong>输入已经排序，因此不需要翻转任何内容。\n请注意，其他可能的答案，如 [3，3] ，也将被判断为正确。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr.length &lt;= 100</code></li> \n <li><code>1 &lt;= arr[i] &lt;= arr.length</code></li> \n <li><code>arr</code> 中的所有整数互不相同（即，<code>arr</code> 是从 <code>1</code> 到 <code>arr.length</code> 整数的一个排列）</li> \n</ul>');
INSERT INTO `leecode` VALUES ('97. 交错字符串', '<p>给定三个字符串&nbsp;<code>s1</code>、<code>s2</code>、<code>s3</code>，请你帮忙验证&nbsp;<code>s3</code>&nbsp;是否是由&nbsp;<code>s1</code>&nbsp;和&nbsp;<code>s2</code><em> </em><strong>交错 </strong>组成的。</p> \n<p>两个字符串 <code>s</code> 和 <code>t</code> <strong>交错</strong> 的定义与过程如下，其中每个字符串都会被分割成若干 <strong>非空</strong> 子字符串：</p> \n<ul> \n <li><code>s = s<sub>1</sub> + s<sub>2</sub> + ... + s<sub>n</sub></code></li> \n <li><code>t = t<sub>1</sub> + t<sub>2</sub> + ... + t<sub>m</sub></code></li> \n <li><code>|n - m| &lt;= 1</code></li> \n <li><strong>交错</strong> 是 <code>s<sub>1</sub> + t<sub>1</sub> + s<sub>2</sub> + t<sub>2</sub> + s<sub>3</sub> + t<sub>3</sub> + ...</code> 或者 <code>t<sub>1</sub> + s<sub>1</sub> + t<sub>2</sub> + s<sub>2</sub> + t<sub>3</sub> + s<sub>3</sub> + ...</code></li> \n</ul> \n<p><strong>提示：</strong><code>a + b</code> 意味着字符串 <code>a</code> 和 <code>b</code> 连接。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 561px; height: 203px;\" src=\"https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s1 = \"\", s2 = \"\", s3 = \"\"\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s1.length, s2.length &lt;= 100</code></li> \n <li><code>0 &lt;= s3.length &lt;= 200</code></li> \n <li><code>s1</code>、<code>s2</code>、和 <code>s3</code> 都由小写英文字母组成</li> \n</ul>');
INSERT INTO `leecode` VALUES ('970. 强整数', '<p>给定两个正整数 <code>x</code> 和 <code>y</code>，如果某一整数等于 <code>x^i + y^j</code>，其中整数&nbsp;<code>i &gt;= 0</code> 且&nbsp;<code>j &gt;= 0</code>，那么我们认为该整数是一个<em>强整数</em>。</p> \n<p>返回值小于或等于&nbsp;<code>bound</code>&nbsp;的所有<em>强整数</em>组成的列表。</p> \n<p>你可以按任何顺序返回答案。在你的回答中，每个值最多出现一次。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>x = 2, y = 3, bound = 10\n<strong>输出：</strong>[2,3,4,5,7,9,10]\n<strong>解释： </strong>\n2 = 2^0 + 3^0\n3 = 2^1 + 3^0\n4 = 2^0 + 3^1\n5 = 2^1 + 3^1\n7 = 2^2 + 3^1\n9 = 2^3 + 3^0\n10 = 2^0 + 3^2\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>x = 3, y = 5, bound = 15\n<strong>输出：</strong>[2,4,6,8,10,14]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= x &lt;= 100</code></li> \n <li><code>1 &lt;= y&nbsp;&lt;= 100</code></li> \n <li><code>0 &lt;= bound&nbsp;&lt;= 10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('971. 翻转二叉树以匹配先序遍历', '<p>给你一棵二叉树的根节点 <code>root</code> ，树中有 <code>n</code> 个节点，每个节点都有一个不同于其他节点且处于 <code>1</code> 到 <code>n</code> 之间的值。</p> \n<p>另给你一个由 <code>n</code> 个值组成的行程序列 <code>voyage</code> ，表示 <strong>预期</strong> 的二叉树 <a href=\"https://baike.baidu.com/item/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/6442839?fr=aladdin\"><strong>先序遍历</strong></a> 结果。</p> \n<p>通过交换节点的左右子树，可以 <strong>翻转</strong> 该二叉树中的任意节点。例，翻转节点 1 的效果如下：</p> \n<img style=\"width: 400px; height: 187px;\" src=\"https://assets.leetcode.com/uploads/2021/02/15/fliptree.jpg\" alt=\"\"> \n<p>请翻转 <strong>最少 </strong>的树中节点，使二叉树的 <strong>先序遍历</strong> 与预期的遍历行程&nbsp;<code>voyage</code>&nbsp;<strong>相匹配</strong> 。&nbsp;</p> \n<p>如果可以，则返回 <strong>翻转的</strong> 所有节点的值的列表。你可以按任何顺序返回答案。如果不能，则返回列表 <code>[-1]</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 150px; height: 205px;\" src=\"https://assets.leetcode.com/uploads/2019/01/02/1219-01.png\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,2], voyage = [2,1]\n<strong>输出：</strong>[-1]\n<strong>解释：</strong>翻转节点无法令先序遍历匹配预期行程。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 150px; height: 142px;\" src=\"https://assets.leetcode.com/uploads/2019/01/02/1219-02.png\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,2,3], voyage = [1,3,2]\n<strong>输出：</strong>[1]\n<strong>解释：</strong>交换节点 2 和 3 来翻转节点 1 ，先序遍历可以匹配预期行程。</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 150px; height: 142px;\" src=\"https://assets.leetcode.com/uploads/2019/01/02/1219-02.png\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,2,3], voyage = [1,2,3]\n<strong>输出：</strong>[]\n<strong>解释：</strong>先序遍历已经匹配预期行程，所以不需要翻转节点。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中的节点数目为 <code>n</code></li> \n <li><code>n == voyage.length</code></li> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>1 &lt;= Node.val, voyage[i] &lt;= n</code></li> \n <li>树中的所有值 <strong>互不相同</strong></li> \n <li><code>voyage</code> 中的所有值 <strong>互不相同</strong></li> \n</ul>');
INSERT INTO `leecode` VALUES ('972. 相等的有理数', '<p>给定两个字符串 <code>S</code> 和 <code>T</code>，每个字符串代表一个非负有理数，只有当它们表示相同的数字时才返回 <strong>true</strong>；否则，返回 <strong>false</strong>。字符串中可以使用括号来表示有理数的重复部分。</p> \n<p>通常，有理数最多可以用三个部分来表示：<em>整数部分</em>&nbsp;<code>&lt;IntegerPart&gt;</code>、<em>小数非重复部分</em>&nbsp;<code>&lt;NonRepeatingPart&gt;</code>&nbsp;和<em>小数重复部分</em>&nbsp;<code>&lt;(&gt;&lt;RepeatingPart&gt;&lt;)&gt;</code>。数字可以用以下三种方法之一来表示：</p> \n<ul> \n <li><code>&lt;IntegerPart&gt;</code>（例：0，12，123）</li> \n <li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;</code> （例：0.5，2.12，2.0001）</li> \n <li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;&lt;(&gt;&lt;RepeatingPart&gt;&lt;)&gt;</code>（例：0.1(6)，0.9(9)，0.00(1212)）</li> \n</ul> \n<p>十进制展开的重复部分通常在一对圆括号内表示。例如：</p> \n<p>1 / 6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)</p> \n<p>0.1(6) 或&nbsp;0.1666(6) 或&nbsp;0.166(66) 都是&nbsp;1 / 6 的正确表示形式。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>S = \"0.(52)\", T = \"0.5(25)\"\n<strong>输出：</strong>true\n<strong>解释：</strong>因为 \"0.(52)\" 代表 0.52525252...，而 \"0.5(25)\" 代表 0.52525252525.....，则这两个字符串表示相同的数字。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>S = \"0.1666(6)\", T = \"0.166(66)\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>S = \"0.9(9)\", T = \"1.\"\n<strong>输出：</strong>true\n<strong>解释：\n</strong>\"0.9(9)\" 代表 0.999999999... 永远重复，等于 1 。[<a href=\"https://baike.baidu.com/item/0.999…/5615429?fr=aladdin\">有关说明，请参阅此链接</a>]\n\"1.\" 表示数字 1，其格式正确：(IntegerPart) = \"1\" 且 (NonRepeatingPart) = \"\" 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>每个部分仅由数字组成。</li> \n <li>整数部分&nbsp;<code>&lt;IntegerPart&gt;</code>&nbsp;不会以 2 个或更多的零开头。（对每个部分的数字没有其他限制）。</li> \n <li><code>1 &lt;= &lt;IntegerPart&gt;.length &lt;= 4 </code></li> \n <li><code>0 &lt;= &lt;NonRepeatingPart&gt;.length &lt;= 4 </code></li> \n <li><code>1 &lt;= &lt;RepeatingPart&gt;.length &lt;= 4 </code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('973. 最接近原点的 K 个点', '<p>我们有一个由平面上的点组成的列表 <code>points</code>。需要从中找出 <code>K</code> 个距离原点 <code>(0, 0)</code> 最近的点。</p> \n<p>（这里，平面上两点之间的距离是欧几里德距离。）</p> \n<p>你可以按任何顺序返回答案。除了点坐标的顺序之外，答案确保是唯一的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>points = [[1,3],[-2,2]], K = 1\n<strong>输出：</strong>[[-2,2]]\n<strong>解释： </strong>\n(1, 3) 和原点之间的距离为 sqrt(10)，\n(-2, 2) 和原点之间的距离为 sqrt(8)，\n由于 sqrt(8) &lt; sqrt(10)，(-2, 2) 离原点更近。\n我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>points = [[3,3],[5,-1],[-2,4]], K = 2\n<strong>输出：</strong>[[3,3],[-2,4]]\n（答案 [[-2,4],[3,3]] 也会被接受。）\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= K &lt;= points.length &lt;= 10000</code></li> \n <li><code>-10000 &lt; points[i][0] &lt; 10000</code></li> \n <li><code>-10000 &lt; points[i][1] &lt; 10000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('974. 和可被 K 整除的子数组', '<p>给定一个整数数组 <code>A</code>，返回其中元素之和可被 <code>K</code>&nbsp;整除的（连续、非空）子数组的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>A = [4,5,0,-2,-3,1], K = 5\n<strong>输出：</strong>7\n<strong>解释：\n</strong>有 7 个子数组满足其元素之和可被 K = 5 整除：\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 30000</code></li> \n <li><code>-10000 &lt;= A[i] &lt;= 10000</code></li> \n <li><code>2 &lt;= K &lt;= 10000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('975. 奇偶跳', '<p>给定一个整数数组 <code>A</code>，你可以从某一起始索引出发，跳跃一定次数。在你跳跃的过程中，第 1、3、5... 次跳跃称为奇数跳跃，而第 2、4、6... 次跳跃称为偶数跳跃。</p> \n<p>你可以按以下方式从索引 <code>i</code>&nbsp;向后跳转到索引 <code>j</code>（其中 <code>i &lt; j</code>）：</p> \n<ul> \n <li>在进行奇数跳跃时（如，第&nbsp;1，3，5... 次跳跃），你将会跳到索引 <code>j</code>，使得 <code>A[i] &lt;=&nbsp;A[j]</code>，<code>A[j]</code> 是可能的最小值。如果存在多个这样的索引 <code>j</code>，你只能跳到满足要求的<strong>最小</strong>索引 <code>j</code> 上。</li> \n <li>在进行偶数跳跃时（如，第&nbsp;2，4，6... 次跳跃），你将会跳到索引&nbsp;<code>j</code>，使得 <code>A[i] &gt;= A[j]</code>，<code>A[j]</code> 是可能的最大值。如果存在多个这样的索引 <code>j</code>，你只能跳到满足要求的<strong>最小</strong>索引 <code>j</code>&nbsp;上。</li> \n <li>（对于某些索引 <code>i</code>，可能无法进行合乎要求的跳跃。）</li> \n</ul> \n<p>如果从某一索引开始跳跃一定次数（可能是 0 次或多次），就可以到达数组的末尾（索引 <code>A.length - 1</code>），那么该索引就会被认为是好的起始索引。</p> \n<p>返回好的起始索引的数量。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[10,13,12,14,15]\n<strong>输出：</strong>2\n<strong>解释： </strong>\n从起始索引 i = 0 出发，我们可以跳到 i = 2，（因为 A[2] 是 A[1]，A[2]，A[3]，A[4] 中大于或等于 A[0] 的最小值），然后我们就无法继续跳下去了。\n从起始索引 i = 1 和 i = 2 出发，我们可以跳到 i = 3，然后我们就无法继续跳下去了。\n从起始索引 i = 3 出发，我们可以跳到 i = 4，到达数组末尾。\n从起始索引 i = 4 出发，我们已经到达数组末尾。\n总之，我们可以从 2 个不同的起始索引（i = 3, i = 4）出发，通过一定数量的跳跃到达数组末尾。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>[2,3,1,1,4]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n从起始索引 i=0 出发，我们依次可以跳到 i = 1，i = 2，i = 3：\n\n在我们的第一次跳跃（奇数）中，我们先跳到 i = 1，因为 A[1] 是（A[1]，A[2]，A[3]，A[4]）中大于或等于 A[0] 的最小值。\n\n在我们的第二次跳跃（偶数）中，我们从 i = 1 跳到 i = 2，因为 A[2] 是（A[2]，A[3]，A[4]）中小于或等于 A[1] 的最大值。A[3] 也是最大的值，但 2 是一个较小的索引，所以我们只能跳到 i = 2，而不能跳到 i = 3。\n\n在我们的第三次跳跃（奇数）中，我们从 i = 2 跳到 i = 3，因为 A[3] 是（A[3]，A[4]）中大于或等于 A[2] 的最小值。\n\n我们不能从 i = 3 跳到 i = 4，所以起始索引 i = 0 不是好的起始索引。\n\n类似地，我们可以推断：\n从起始索引 i = 1 出发， 我们跳到 i = 4，这样我们就到达数组末尾。\n从起始索引 i = 2 出发， 我们跳到 i = 3，然后我们就不能再跳了。\n从起始索引 i = 3 出发， 我们跳到 i = 4，这样我们就到达数组末尾。\n从起始索引 i = 4 出发，我们已经到达数组末尾。\n总之，我们可以从 3 个不同的起始索引（i = 1, i = 3, i = 4）出发，通过一定数量的跳跃到达数组末尾。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[5,1,3,4,2]\n<strong>输出：</strong>3\n<strong>解释： </strong>\n我们可以从起始索引 1，2，4 出发到达数组末尾。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 20000</code></li> \n <li><code>0 &lt;= A[i] &lt; 100000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('976. 三角形的最大周长', '<p>给定由一些正数（代表长度）组成的数组 <code>A</code>，返回由其中三个长度组成的、<strong>面积不为零</strong>的三角形的最大周长。</p> \n<p>如果不能形成任何面积不为零的三角形，返回&nbsp;<code>0</code>。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[2,1,2]\n<strong>输出：</strong>5\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[1,2,1]\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[3,2,3,4]\n<strong>输出：</strong>10\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>[3,6,2,3]\n<strong>输出：</strong>8\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>3 &lt;= A.length &lt;= 10000</code></li> \n <li><code>1 &lt;= A[i] &lt;= 10^6</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('977. 有序数组的平方', '<p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p> \n<ul> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [-4,-1,0,3,10]\n<strong>输出：</strong>[0,1,9,16,100]\n<strong>解释：</strong>平方后，数组变为 [16,1,0,9,100]\n排序后，数组变为 [0,1,9,16,100]</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [-7,-3,2,3,11]\n<strong>输出：</strong>[4,9,9,49,121]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code><span>1 &lt;= nums.length &lt;= </span>10<sup>4</sup></code></li> \n <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n <li><code>nums</code> 已按 <strong>非递减顺序</strong> 排序</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>请你<span style=\"color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;\">设计时间复杂度为 <code>O(n)</code> 的算法解决本问题</span></li> \n</ul>');
INSERT INTO `leecode` VALUES ('978. 最长湍流子数组', '<p>当 <code>A</code>&nbsp;的子数组&nbsp;<code>A[i], A[i+1], ..., A[j]</code>&nbsp;满足下列条件时，我们称其为<em>湍流子数组</em>：</p> \n<ul> \n <li>若&nbsp;<code>i &lt;= k &lt; j</code>，当 <code>k</code>&nbsp;为奇数时，&nbsp;<code>A[k] &gt; A[k+1]</code>，且当 <code>k</code> 为偶数时，<code>A[k] &lt; A[k+1]</code>；</li> \n <li><strong>或 </strong>若&nbsp;<code>i &lt;= k &lt; j</code>，当 <code>k</code> 为偶数时，<code>A[k] &gt; A[k+1]</code>&nbsp;，且当 <code>k</code>&nbsp;为奇数时，&nbsp;<code>A[k] &lt; A[k+1]</code>。</li> \n</ul> \n<p>也就是说，如果比较符号在子数组中的每个相邻元素对之间翻转，则该子数组是湍流子数组。</p> \n<p>返回 <code>A</code> 的最大湍流子数组的<strong>长度</strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[9,4,2,10,7,8,8,1,9]\n<strong>输出：</strong>5\n<strong>解释：</strong>(A[1] &gt; A[2] &lt; A[3] &gt; A[4] &lt; A[5])\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[4,8,12,16]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[100]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 40000</code></li> \n <li><code>0 &lt;= A[i] &lt;= 10^9</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('979. 在二叉树中分配硬币', '<p>给定一个有 <code>N</code> 个结点的二叉树的根结点 <code>root</code>，树中的每个结点上都对应有 <code>node.val</code> 枚硬币，并且总共有 <code>N</code> 枚硬币。</p> \n<p>在一次移动中，我们可以选择两个相邻的结点，然后将一枚硬币从其中一个结点移动到另一个结点。(移动可以是从父结点到子结点，或者从子结点移动到父结点。)。</p> \n<p>返回使每个结点上只有一枚硬币所需的移动次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 142px; width: 150px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/tree1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>[3,0,0]\n<strong>输出：</strong>2\n<strong>解释：</strong>从树的根结点开始，我们将一枚硬币移到它的左子结点上，一枚硬币移到它的右子结点上。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 142px; width: 150px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/tree2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>[0,3,0]\n<strong>输出：</strong>3\n<strong>解释：</strong>从根结点的左子结点开始，我们将两枚硬币移到根结点上 [移动两次]。然后，我们把一枚硬币从根结点移到右子结点上。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"height: 142px; width: 150px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/tree3.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>[1,0,2]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 4：</strong></p> \n<p><strong><img style=\"height: 156px; width: 155px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/tree4.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>[1,0,0,null,3]\n<strong>输出：</strong>4\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1&lt;= N &lt;= 100</code></li> \n <li><code>0 &lt;= node.val &lt;= N</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('98. 验证二叉搜索树', '<p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p> \n<p>假设一个二叉搜索树具有如下特征：</p> \n<ul> \n <li>节点的左子树只包含<strong>小于</strong>当前节点的数。</li> \n <li>节点的右子树只包含<strong>大于</strong>当前节点的数。</li> \n <li>所有左子树和右子树自身必须也是二叉搜索树。</li> \n</ul> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong>\n    2\n   / \\\n  1   3\n<strong>输出:</strong> true\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:\n</strong>    5\n   / \\\n  1   4\n&nbsp;    / \\\n&nbsp;   3   6\n<strong>输出:</strong> false\n<strong>解释:</strong> 输入为: [5,1,4,null,null,3,6]。\n&nbsp;    根节点的值为 5 ，但是其右子节点值为 4 。\n</pre>');
INSERT INTO `leecode` VALUES ('980. 不同路径 III', '<p>在二维网格 <code>grid</code> 上，有 4 种类型的方格：</p> \n<ul> \n <li><code>1</code> 表示起始方格。且只有一个起始方格。</li> \n <li><code>2</code> 表示结束方格，且只有一个结束方格。</li> \n <li><code>0</code> 表示我们可以走过的空方格。</li> \n <li><code>-1</code> 表示我们无法跨越的障碍。</li> \n</ul> \n<p>返回在四个方向（上、下、左、右）上行走时，从起始方格到结束方格的不同路径的数目<strong>。</strong></p> \n<p><strong>每一个无障碍方格都要通过一次，但是一条路径中不能重复通过同一个方格</strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\n<strong>输出：</strong>2\n<strong>解释：</strong>我们有以下两条路径：\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[[1,0,0,0],[0,0,0,0],[0,0,0,2]]\n<strong>输出：</strong>4\n<strong>解释：</strong>我们有以下四条路径： \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[[0,1],[2,0]]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n没有一条路能完全穿过每一个空的方格一次。\n请注意，起始和结束方格可以位于网格中的任意位置。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= grid.length * grid[0].length &lt;= 20</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('981. 基于时间的键值存储', '<p>设计一个基于时间的键值数据结构，该结构可以在不同时间戳存储对应同一个键的多个值，并针对特定时间戳检索键对应的值。</p> \n<p>实现 <code>TimeMap</code> 类：</p> \n<ul> \n <li><code>TimeMap()</code> 初始化数据结构对象</li> \n <li><code>void set(String key, String value, int timestamp)</code> 存储键&nbsp;<code>key</code>、值&nbsp;<code>value</code>，以及给定的时间戳&nbsp;<code>timestamp</code>。</li> \n <li><code>String get(String key, int timestamp)</code> \n  <ul> \n   <li>返回先前调用&nbsp;<code>set(key, value, timestamp_prev)</code>&nbsp;所存储的值，其中&nbsp;<code>timestamp_prev &lt;= timestamp</code> 。</li> \n   <li>如果有多个这样的值，则返回对应最大的&nbsp;&nbsp;<code>timestamp_prev</code>&nbsp;的那个值。</li> \n   <li>如果没有值，则返回空字符串（<code>\"\"</code>）。</li> \n  </ul> </li> \n</ul> &nbsp; \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]\n[[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]]\n<strong>输出：</strong>\n[null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]\n\n<strong>解释：</strong>\nTimeMap timeMap = new TimeMap();\ntimeMap.set(\"foo\", \"bar\", 1);  // 存储键 \"foo\" 和值 \"bar\" ，时间戳 timestamp = 1 &nbsp; \ntimeMap.get(\"foo\", 1);         // 返回 \"bar\"\ntimeMap.get(\"foo\", 3);         // 返回 \"bar\", 因为在时间戳 3 和时间戳 2 处没有对应 \"foo\" 的值，所以唯一的值位于时间戳 1 处（即 \"bar\"） 。\ntimeMap.set(\"foo\", \"bar2\", 4); // 存储键 \"foo\" 和值 \"bar2\" ，时间戳 timestamp = 4&nbsp; \ntimeMap.get(\"foo\", 4);         // 返回 \"bar2\"\ntimeMap.get(\"foo\", 5);         // 返回 \"bar2\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= key.length, value.length &lt;= 100</code></li> \n <li><code>key</code> 和 <code>value</code> 由小写英文字母和数字组成</li> \n <li><code>1 &lt;= timestamp &lt;= 10<sup>7</sup></code></li> \n <li><code>set</code> 操作中的时间戳 <code>timestamp</code> 都是严格递增的</li> \n <li>最多调用&nbsp;<code>set</code> 和 <code>get</code> 操作 <code>2 * 10<sup>5</sup></code> 次</li> \n</ul>');
INSERT INTO `leecode` VALUES ('982. 按位与为零的三元组', '<p>给定一个整数数组&nbsp;<code>A</code>，找出索引为 (i, j, k) 的三元组，使得：</p> \n<ul> \n <li><code>0 &lt;= i &lt; A.length</code></li> \n <li><code>0 &lt;= j &lt; A.length</code></li> \n <li><code>0 &lt;= k &lt; A.length</code></li> \n <li><code>A[i]&nbsp;&amp; A[j]&nbsp;&amp; A[k] == 0</code>，其中&nbsp;<code>&amp;</code>&nbsp;表示按位与（AND）操作符。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[2,1,3]\n<strong>输出：</strong>12\n<strong>解释：</strong>我们可以选出如下 i, j, k 三元组：\n(i=0, j=0, k=1) : 2 &amp; 2 &amp; 1\n(i=0, j=1, k=0) : 2 &amp; 1 &amp; 2\n(i=0, j=1, k=1) : 2 &amp; 1 &amp; 1\n(i=0, j=1, k=2) : 2 &amp; 1 &amp; 3\n(i=0, j=2, k=1) : 2 &amp; 3 &amp; 1\n(i=1, j=0, k=0) : 1 &amp; 2 &amp; 2\n(i=1, j=0, k=1) : 1 &amp; 2 &amp; 1\n(i=1, j=0, k=2) : 1 &amp; 2 &amp; 3\n(i=1, j=1, k=0) : 1 &amp; 1 &amp; 2\n(i=1, j=2, k=0) : 1 &amp; 3 &amp; 2\n(i=2, j=0, k=1) : 3 &amp; 2 &amp; 1\n(i=2, j=1, k=0) : 3 &amp; 1 &amp; 2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 1000</code></li> \n <li><code>0 &lt;= A[i] &lt; 2^16</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('983. 最低票价', '<p>在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为&nbsp;<code>days</code>&nbsp;的数组给出。每一项是一个从&nbsp;<code>1</code>&nbsp;到&nbsp;<code>365</code>&nbsp;的整数。</p> \n<p>火车票有三种不同的销售方式：</p> \n<ul> \n <li>一张为期一天的通行证售价为&nbsp;<code>costs[0]</code> 美元；</li> \n <li>一张为期七天的通行证售价为&nbsp;<code>costs[1]</code> 美元；</li> \n <li>一张为期三十天的通行证售价为&nbsp;<code>costs[2]</code> 美元。</li> \n</ul> \n<p>通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。</p> \n<p>返回你想要完成在给定的列表&nbsp;<code>days</code>&nbsp;中列出的每一天的旅行所需要的最低消费。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>days = [1,4,6,7,8,20], costs = [2,7,15]\n<strong>输出：</strong>11\n<strong>解释： </strong>\n例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：\n在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。\n在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, ..., 9 天生效。\n在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。\n你总共花了 $11，并完成了你计划的每一天旅行。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\n<strong>输出：</strong>17\n<strong>解释：\n</strong>例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划： \n在第 1 天，你花了 costs[2] = $15 买了一张为期 30 天的通行证，它将在第 1, 2, ..., 30 天生效。\n在第 31 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 31 天生效。 \n你总共花了 $17，并完成了你计划的每一天旅行。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= days.length &lt;= 365</code></li> \n <li><code>1 &lt;= days[i] &lt;= 365</code></li> \n <li><code>days</code>&nbsp;按顺序严格递增</li> \n <li><code>costs.length == 3</code></li> \n <li><code>1 &lt;= costs[i] &lt;= 1000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('984. 不含 AAA 或 BBB 的字符串', '<p>给定两个整数&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>，返回<strong>任意</strong>字符串 <code>S</code>，要求满足：</p> \n<ul> \n <li><code>S</code> 的长度为&nbsp;<code>A + B</code>，且正好包含&nbsp;<code>A</code>&nbsp;个 <code>\'a\'</code>&nbsp;字母与&nbsp;<code>B</code>&nbsp;个 <code>\'b\'</code>&nbsp;字母；</li> \n <li>子串&nbsp;<code>\'aaa\'</code>&nbsp;没有出现在&nbsp;<code>S</code>&nbsp;中；</li> \n <li>子串&nbsp;<code>\'bbb\'</code> 没有出现在&nbsp;<code>S</code>&nbsp;中。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = 1, B = 2\n<strong>输出：</strong>\"abb\"\n<strong>解释：</strong>\"abb\", \"bab\" 和 \"bba\" 都是正确答案。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = 4, B = 1\n<strong>输出：</strong>\"aabaa\"</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= A &lt;= 100</code></li> \n <li><code>0 &lt;= B &lt;= 100</code></li> \n <li>对于给定的 <code>A</code> 和 <code>B</code>，保证存在满足要求的 <code>S</code>。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('985. 查询后的偶数和', '<p>给出一个整数数组&nbsp;<code>A</code>&nbsp;和一个查询数组&nbsp;<code>queries</code>。</p> \n<p>对于第&nbsp;<code>i</code>&nbsp;次查询，有&nbsp;<code>val =&nbsp;queries[i][0], index&nbsp;= queries[i][1]</code>，我们会把&nbsp;<code>val</code>&nbsp;加到&nbsp;<code>A[index]</code>&nbsp;上。然后，第&nbsp;<code>i</code>&nbsp;次查询的答案是 <code>A</code> 中偶数值的和。</p> \n<p><em>（此处给定的&nbsp;<code>index = queries[i][1]</code>&nbsp;是从 0 开始的索引，每次查询都会永久修改数组&nbsp;<code>A</code>。）</em></p> \n<p>返回所有查询的答案。你的答案应当以数组&nbsp;<code>answer</code>&nbsp;给出，<code>answer[i]</code>&nbsp;为第&nbsp;<code>i</code>&nbsp;次查询的答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\n<strong>输出：</strong>[8,6,2,4]\n<strong>解释：</strong>\n开始时，数组为 [1,2,3,4]。\n将 1 加到 A[0] 上之后，数组为 [2,2,3,4]，偶数值之和为 2 + 2 + 4 = 8。\n将 -3 加到 A[1] 上之后，数组为 [2,-1,3,4]，偶数值之和为 2 + 4 = 6。\n将 -4 加到 A[0] 上之后，数组为 [-2,-1,3,4]，偶数值之和为 -2 + 4 = 2。\n将 2 加到 A[3] 上之后，数组为 [-2,-1,3,6]，偶数值之和为 -2 + 6 = 4。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 10000</code></li> \n <li><code>-10000 &lt;= A[i] &lt;= 10000</code></li> \n <li><code>1 &lt;= queries.length &lt;= 10000</code></li> \n <li><code>-10000 &lt;= queries[i][0] &lt;= 10000</code></li> \n <li><code>0 &lt;= queries[i][1] &lt; A.length</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('986. 区间列表的交集', '<p>给定两个由一些<strong> 闭区间 </strong>组成的列表，<code>firstList</code> 和 <code>secondList</code> ，其中 <code>firstList[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> 而&nbsp;<code>secondList[j] = [start<sub>j</sub>, end<sub>j</sub>]</code> 。每个区间列表都是成对 <strong>不相交</strong> 的，并且 <strong>已经排序</strong> 。</p> \n<p>返回这 <strong>两个区间列表的交集</strong> 。</p> \n<p>形式上，<strong>闭区间</strong>&nbsp;<code>[a, b]</code>（其中&nbsp;<code>a &lt;= b</code>）表示实数&nbsp;<code>x</code>&nbsp;的集合，而&nbsp;<code>a &lt;= x &lt;= b</code> 。</p> \n<p>两个闭区间的 <strong>交集</strong> 是一组实数，要么为空集，要么为闭区间。例如，<code>[1, 3]</code> 和 <code>[2, 4]</code> 的交集为 <code>[2, 3]</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 700px; height: 194px;\" src=\"https://assets.leetcode.com/uploads/2019/01/30/interval1.png\" alt=\"\"> \n<pre><strong>输入：</strong>firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]\n<strong>输出：</strong>[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>firstList = [[1,3],[5,9]], secondList = []\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>firstList = [], secondList = [[4,8],[10,12]]\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>firstList = [[1,7]], secondList = [[3,10]]\n<strong>输出：</strong>[[3,7]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= firstList.length, secondList.length &lt;= 1000</code></li> \n <li><code>firstList.length + secondList.length &gt;= 1</code></li> \n <li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>9</sup></code></li> \n <li><code>end<sub>i</sub> &lt; start<sub>i+1</sub></code></li> \n <li><code>0 &lt;= start<sub>j</sub> &lt; end<sub>j</sub> &lt;= 10<sup>9</sup> </code></li> \n <li><code>end<sub>j</sub> &lt; start<sub>j+1</sub></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('987. 二叉树的垂序遍历', '<p>给你二叉树的根结点 <code>root</code> ，请你设计算法计算二叉树的<em> </em><strong>垂序遍历</strong> 序列。</p> \n<p>对位于&nbsp;<code>(row, col)</code>&nbsp;的每个结点而言，其左右子结点分别位于&nbsp;<code>(row + 1, col - 1)</code>&nbsp;和&nbsp;<code>(row + 1, col + 1)</code> 。树的根结点位于 <code>(0, 0)</code> 。</p> \n<p>二叉树的 <strong>垂序遍历</strong> 从最左边的列开始直到最右边的列结束，按列索引每一列上的所有结点，形成一个按出现位置从上到下排序的有序列表。如果同行同列上有多个结点，则按结点的值从小到大进行排序。</p> \n<p>返回二叉树的 <strong>垂序遍历</strong> 序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 431px; height: 304px;\" src=\"https://assets.leetcode.com/uploads/2021/01/29/vtree1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [3,9,20,null,null,15,7]\n<strong>输出：</strong>[[9],[3,15],[20],[7]]\n<strong>解释：</strong>\n列 -1 ：只有结点 9 在此列中。\n列  0 ：只有结点 3 和 15 在此列中，按从上到下顺序。\n列  1 ：只有结点 20 在此列中。\n列  2 ：只有结点 7 在此列中。</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 512px; height: 304px;\" src=\"https://assets.leetcode.com/uploads/2021/01/29/vtree2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,2,3,4,5,6,7]\n<strong>输出：</strong>[[4],[2],[1,5,6],[3],[7]]\n<strong>解释：</strong>\n列 -2 ：只有结点 4 在此列中。\n列 -1 ：只有结点 2 在此列中。\n列  0 ：结点 1 、5 和 6 都在此列中。\n          1 在上面，所以它出现在前面。\n          5 和 6 位置都是 (2, 0) ，所以按值从小到大排序，5 在 6 的前面。\n列  1 ：只有结点 3 在此列中。\n列  2 ：只有结点 7 在此列中。\n</pre> \n<p><strong>示例 3：</strong></p> \n<img style=\"width: 512px; height: 304px;\" src=\"https://assets.leetcode.com/uploads/2021/01/29/vtree3.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,2,3,4,6,5,7]\n<strong>输出：</strong>[[4],[2],[1,5,6],[3],[7]]\n<strong>解释：</strong>\n这个示例实际上与示例 2 完全相同，只是结点 5 和 6 在树中的位置发生了交换。\n因为 5 和 6 的位置仍然相同，所以答案保持不变，仍然按值从小到大排序。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中结点数目总数在范围 <code>[1, 1000]</code> 内</li> \n <li><code>0 &lt;= Node.val &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('988. 从叶结点开始的最小字符串', '<p>给定一颗根结点为&nbsp;<code>root</code>&nbsp;的二叉树，树中的每一个结点都有一个从&nbsp;<code>0</code> 到&nbsp;<code>25</code>&nbsp;的值，分别代表字母&nbsp;<code>\'a\'</code> 到&nbsp;<code>\'z\'</code>：值&nbsp;<code>0</code> 代表&nbsp;<code>\'a\'</code>，值&nbsp;<code>1</code>&nbsp;代表&nbsp;<code>\'b\'</code>，依此类推。</p> \n<p>找出按字典序最小的字符串，该字符串从这棵树的一个叶结点开始，到根结点结束。</p> \n<p><em>（小贴士：字符串中任何较短的前缀在字典序上都是较小的：例如，在字典序上&nbsp;<code>\"ab\"</code> 比&nbsp;<code>\"aba\"</code>&nbsp;要小。叶结点是指没有子结点的结点。）</em></p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 107px; width: 160px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/tree1.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>[0,1,2,3,4,3,4]\n<strong>输出：</strong>\"dba\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"height: 107px; width: 160px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/tree2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>[25,1,3,1,3,0,2]\n<strong>输出：</strong>\"adz\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"height: 180px; width: 172px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/tree3.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>[2,2,1,null,1,0,null,0]\n<strong>输出：</strong>\"abc\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>给定树的结点数介于&nbsp;<code>1</code> 和&nbsp;<code>8500</code>&nbsp;之间。</li> \n <li>树中的每个结点都有一个介于&nbsp;<code>0</code>&nbsp;和&nbsp;<code>25</code>&nbsp;之间的值。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('989. 数组形式的整数加法', '<p>对于非负整数&nbsp;<code>X</code>&nbsp;而言，<em><code>X</code></em>&nbsp;的<em>数组形式</em>是每位数字按从左到右的顺序形成的数组。例如，如果&nbsp;<code>X = 1231</code>，那么其数组形式为&nbsp;<code>[1,2,3,1]</code>。</p> \n<p>给定非负整数 <code>X</code> 的数组形式&nbsp;<code>A</code>，返回整数&nbsp;<code>X+K</code>&nbsp;的数组形式。</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = [1,2,0,0], K = 34\n<strong>输出：</strong>[1,2,3,4]\n<strong>解释：</strong>1200 + 34 = 1234\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = [2,7,4], K = 181\n<strong>输出：</strong>[4,5,5]\n<strong>解释：</strong>274 + 181 = 455\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>A = [2,1,5], K = 806\n<strong>输出：</strong>[1,0,2,1]\n<strong>解释：</strong>215 + 806 = 1021\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>A = [9,9,9,9,9,9,9,9,9,9], K = 1\n<strong>输出：</strong>[1,0,0,0,0,0,0,0,0,0,0]\n<strong>解释：</strong>9999999999 + 1 = 10000000000\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 10000</code></li> \n <li><code>0 &lt;= A[i] &lt;= 9</code></li> \n <li><code>0 &lt;= K &lt;= 10000</code></li> \n <li>如果&nbsp;<code>A.length &gt; 1</code>，那么&nbsp;<code>A[0] != 0</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('99. 恢复二叉搜索树', '<p>给你二叉搜索树的根节点 <code>root</code> ，该树中的两个节点被错误地交换。请在不改变其结构的情况下，恢复这棵树。</p> \n<p><strong>进阶：</strong>使用 O(<em>n</em>) 空间复杂度的解法很容易实现。你能想出一个只使用常数空间的解决方案吗？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 422px; height: 302px;\" src=\"https://assets.leetcode.com/uploads/2020/10/28/recover1.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,3,null,null,2]\n<strong>输出：</strong>[3,1,null,null,2]\n<strong>解释：</strong>3 不能是 1 左孩子，因为 3 &gt; 1 。交换 1 和 3 使二叉搜索树有效。\n</pre> \n<p><strong>示例 2：</strong></p> \n<img style=\"width: 581px; height: 302px;\" src=\"https://assets.leetcode.com/uploads/2020/10/28/recover2.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [3,1,4,null,null,2]\n<strong>输出：</strong>[2,1,4,null,null,3]\n<strong>解释：</strong>2 不能在 3 的右子树中，因为 2 &lt; 3 。交换 2 和 3 使二叉搜索树有效。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树上节点的数目在范围 <code>[2, 1000]</code> 内</li> \n <li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('990. 等式方程的可满足性', '<p>给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 <code>equations[i]</code> 的长度为 <code>4</code>，并采用两种不同的形式之一：<code>\"a==b\"</code> 或&nbsp;<code>\"a!=b\"</code>。在这里，a 和 b 是小写字母（不一定不同），表示单字母变量名。</p> \n<p>只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回&nbsp;<code>true</code>，否则返回 <code>false</code>。&nbsp;</p> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[\"a==b\",\"b!=a\"]\n<strong>输出：</strong>false\n<strong>解释：</strong>如果我们指定，a = 1 且 b = 1，那么可以满足第一个方程，但无法满足第二个方程。没有办法分配变量同时满足这两个方程。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[\"b==a\",\"a==b\"]\n<strong>输出：</strong>true\n<strong>解释：</strong>我们可以指定 a = 1 且 b = 1 以满足满足这两个方程。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[\"a==b\",\"b==c\",\"a==c\"]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>[\"a==b\",\"b!=c\",\"c==a\"]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>[\"c==c\",\"b==d\",\"x!=z\"]\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= equations.length &lt;= 500</code></li> \n <li><code>equations[i].length == 4</code></li> \n <li><code>equations[i][0]</code> 和&nbsp;<code>equations[i][3]</code>&nbsp;是小写字母</li> \n <li><code>equations[i][1]</code> 要么是&nbsp;<code>\'=\'</code>，要么是&nbsp;<code>\'!\'</code></li> \n <li><code>equations[i][2]</code>&nbsp;是&nbsp;<code>\'=\'</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('991. 坏了的计算器', '<p>在显示着数字的坏计算器上，我们可以执行以下两种操作：</p> \n<ul> \n <li><strong>双倍（Double）：</strong>将显示屏上的数字乘 2；</li> \n <li><strong>递减（Decrement）：</strong>将显示屏上的数字减 1 。</li> \n</ul> \n<p>最初，计算器显示数字&nbsp;<code>X</code>。</p> \n<p>返回显示数字&nbsp;<code>Y</code>&nbsp;所需的最小操作数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>X = 2, Y = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>先进行双倍运算，然后再进行递减运算 {2 -&gt; 4 -&gt; 3}.\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>X = 5, Y = 8\n<strong>输出：</strong>2\n<strong>解释：</strong>先递减，再双倍 {5 -&gt; 4 -&gt; 8}.\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>X = 3, Y = 10\n<strong>输出：</strong>3\n<strong>解释：</strong>先双倍，然后递减，再双倍 {3 -&gt; 6 -&gt; 5 -&gt; 10}.\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>X = 1024, Y = 1\n<strong>输出：</strong>1023\n<strong>解释：</strong>执行递减运算 1023 次\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= X &lt;= 10^9</code></li> \n <li><code>1 &lt;= Y &lt;= 10^9</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('992. K 个不同整数的子数组', '<p>给定一个正整数数组 <code>A</code>，如果 <code>A</code>&nbsp;的某个子数组中不同整数的个数恰好为 <code>K</code>，则称 <code>A</code> 的这个连续、不一定不同的子数组为<em>好子数组</em>。</p> \n<p>（例如，<code>[1,2,3,1,2]</code> 中有&nbsp;<code>3</code>&nbsp;个不同的整数：<code>1</code>，<code>2</code>，以及&nbsp;<code>3</code>。）</p> \n<p>返回&nbsp;<code>A</code>&nbsp;中<em>好子数组</em>的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = [1,2,1,2,3], K = 2\n<strong>输出：</strong>7\n<strong>解释：</strong>恰好由 2 个不同整数组成的子数组：[1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = [1,2,1,3,4], K = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>恰好由 3 个不同整数组成的子数组：[1,2,1,3], [2,1,3], [1,3,4].\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 20000</code></li> \n <li><code>1 &lt;= A[i] &lt;= A.length</code></li> \n <li><code>1 &lt;= K &lt;= A.length</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('993. 二叉树的堂兄弟节点', '<p>在二叉树中，根节点位于深度 <code>0</code> 处，每个深度为 <code>k</code> 的节点的子节点位于深度 <code>k+1</code> 处。</p> \n<p>如果二叉树的两个节点深度相同，但<strong> 父节点不同</strong> ，则它们是一对<em>堂兄弟节点</em>。</p> \n<p>我们给出了具有唯一值的二叉树的根节点 <code>root</code> ，以及树中两个不同节点的值 <code>x</code> 和 <code>y</code> 。</p> \n<p>只有与值 <code>x</code> 和 <code>y</code> 对应的节点是堂兄弟节点时，才返回 <code>true</code> 。否则，返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：<br> <img style=\"height: 160px; width: 180px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-01.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [1,2,3,4], x = 4, y = 3\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 2：<br> <img style=\"height: 160px; width: 201px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-02.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [1,2,3,null,4,null,5], x = 5, y = 4\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img style=\"height: 160px; width: 156px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-03.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [1,2,3,null,4], x = 2, y = 3\n<strong>输出：</strong>false</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>二叉树的节点数介于&nbsp;<code>2</code> 到&nbsp;<code>100</code>&nbsp;之间。</li> \n <li>每个节点的值都是唯一的、范围为&nbsp;<code>1</code> 到&nbsp;<code>100</code>&nbsp;的整数。</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('994. 腐烂的橘子', '<p>在给定的网格中，每个单元格可以有以下三个值之一：</p> \n<ul> \n <li>值&nbsp;<code>0</code>&nbsp;代表空单元格；</li> \n <li>值&nbsp;<code>1</code>&nbsp;代表新鲜橘子；</li> \n <li>值&nbsp;<code>2</code>&nbsp;代表腐烂的橘子。</li> \n</ul> \n<p>每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。</p> \n<p>返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回&nbsp;<code>-1</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 150px; width: 712px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/oranges.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>[[2,1,1],[1,1,0],[0,1,1]]\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[[2,1,1],[0,1,1],[1,0,1]]\n<strong>输出：</strong>-1\n<strong>解释：</strong>左下角的橘子（第 2 行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个正向上。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[[0,2]]\n<strong>输出：</strong>0\n<strong>解释：</strong>因为 0 分钟时已经没有新鲜橘子了，所以答案就是 0 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= grid.length &lt;= 10</code></li> \n <li><code>1 &lt;= grid[0].length &lt;= 10</code></li> \n <li><code>grid[i][j]</code> 仅为&nbsp;<code>0</code>、<code>1</code>&nbsp;或&nbsp;<code>2</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('995. K 连续位的最小翻转次数', '<p>在仅包含 <code>0</code> 和 <code>1</code> 的数组 <code>A</code> 中，一次 <em><code>K</code> 位翻转</em>包括选择一个长度为 <code>K</code> 的（连续）子数组，同时将子数组中的每个 <code>0</code> 更改为 <code>1</code>，而每个 <code>1</code> 更改为 <code>0</code>。</p> \n<p>返回所需的 <code>K</code> 位翻转的最小次数，以便数组没有值为 <code>0</code> 的元素。如果不可能，返回 <code>-1</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = [0,1,0], K = 1\n<strong>输出：</strong>2\n<strong>解释：</strong>先翻转 A[0]，然后翻转 A[2]。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = [1,1,0], K = 2\n<strong>输出：</strong>-1\n<strong>解释：</strong>无论我们怎样翻转大小为 2 的子数组，我们都不能使数组变为 [1,1,1]。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>A = [0,0,0,1,0,1,1,0], K = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>\n翻转 A[0],A[1],A[2]:&nbsp;A变成 [1,1,1,1,0,1,1,0]\n翻转 A[4],A[5],A[6]:&nbsp;A变成 [1,1,1,1,1,0,0,0]\n翻转 A[5],A[6],A[7]:&nbsp;A变成 [1,1,1,1,1,1,1,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;=&nbsp;30000</code></li> \n <li><code>1 &lt;= K &lt;= A.length</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('996. 正方形数组的数目', '<p>给定一个非负整数数组&nbsp;<code>A</code>，如果该数组每对相邻元素之和是一个完全平方数，则称这一数组为<em>正方形</em>数组。</p> \n<p>返回 A 的正方形排列的数目。两个排列 <code>A1</code> 和 <code>A2</code> 不同的充要条件是存在某个索引 <code>i</code>，使得 A1[i] != A2[i]。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1,17,8]\n<strong>输出：</strong>2\n<strong>解释：</strong>\n[1,8,17] 和 [17,8,1] 都是有效的排列。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[2,2,2]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>1 &lt;= A.length &lt;= 12</code></li> \n <li><code>0 &lt;= A[i] &lt;= 1e9</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('997. 找到小镇的法官', '<p>在一个小镇里，按从 <code>1</code> 到 <code>n</code> 为 <code>n</code> 个人进行编号。传言称，这些人中有一个是小镇上的秘密法官。</p> \n<p>如果小镇的法官真的存在，那么：</p> \n<ol> \n <li>小镇的法官不相信任何人。</li> \n <li>每个人（除了小镇法官外）都信任小镇的法官。</li> \n <li>只有一个人同时满足条件 1 和条件 2 。</li> \n</ol> \n<p>给定数组&nbsp;<code>trust</code>，该数组由信任对 <code>trust[i] = [a, b]</code>&nbsp;组成，表示编号为 <code>a</code> 的人信任编号为 <code>b</code> 的人。</p> \n<p>如果小镇存在秘密法官并且可以确定他的身份，请返回该法官的编号。否则，返回 <code>-1</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2, trust = [[1,2]]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 3, trust = [[1,3],[2,3]]\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 3, trust = [[1,3],[2,3],[3,1]]\n<strong>输出：</strong>-1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>n = 3, trust = [[1,2],[2,3]]\n<strong>输出：</strong>-1\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>n = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]\n<strong>输出：</strong>3</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 1000</code></li> \n <li><code>0 &lt;= trust.length &lt;= 10<sup>4</sup></code></li> \n <li><code>trust[i].length == 2</code></li> \n <li><code>trust[i]</code> 互不相同</li> \n <li><code>trust[i][0] != trust[i][1]</code></li> \n <li><code>1 &lt;= trust[i][0], trust[i][1] &lt;= n</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('998. 最大二叉树 II', '<p>最大树定义：一个树，其中每个节点的值都大于其子树中的任何其他值。</p> \n<p>给出最大树的根节点 <code>root</code>。</p> \n<p>就像<a href=\"https://leetcode-cn.com/problems/maximum-binary-tree/\">之前的问题</a>那样，给定的树是从列表&nbsp;<code>A</code>（<code>root = Construct(A)</code>）递归地使用下述&nbsp;<code>Construct(A)</code>&nbsp;例程构造的：</p> \n<ul> \n <li>如果&nbsp;<code>A</code>&nbsp;为空，返回&nbsp;<code>null</code></li> \n <li>否则，令&nbsp;<code>A[i]</code>&nbsp;作为 A 的最大元素。创建一个值为&nbsp;<code>A[i]</code>&nbsp;的根节点 <code>root</code></li> \n <li><code>root</code>&nbsp;的左子树将被构建为&nbsp;<code>Construct([A[0], A[1], ..., A[i-1]])</code></li> \n <li><code>root</code>&nbsp;的右子树将被构建为 <code>Construct([A[i+1], A[i+2], ..., A[A.length - 1]])</code></li> \n <li>返回&nbsp;<code>root</code></li> \n</ul> \n<p>请注意，我们没有直接给定&nbsp;A，只有一个根节点&nbsp;<code>root = Construct(A)</code>.</p> \n<p>假设 <code>B</code> 是 <code>A</code> 的副本，并在末尾附加值 <code>val</code>。题目数据保证 <code>B</code>&nbsp;中的值是不同的。</p> \n<p>返回&nbsp;<code>Construct(B)</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 160px; width: 159px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-1-1.png\" alt=\"\"><img style=\"height: 160px; width: 169px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-1-2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [4,1,3,null,null,2], val = 5\n<strong>输出：</strong>[5,4,null,1,3,null,null,2]\n<strong>解释：</strong>A = [1,4,2,3], B = [1,4,2,3,5]\n</pre> \n<p><strong>示例 2：<br> <img style=\"height: 160px; width: 180px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-2-1.png\" alt=\"\"><img style=\"height: 160px; width: 214px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-2-2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [5,2,4,null,1], val = 3\n<strong>输出：</strong>[5,2,4,null,1,null,3]\n<strong>解释：</strong>A = [2,1,5,4], B = [2,1,5,4,3]\n</pre> \n<p><strong>示例 3：<br> <img style=\"height: 160px; width: 180px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-3-1.png\" alt=\"\"><img style=\"height: 160px; width: 201px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-3-2.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root = [5,2,3,null,1], val = 4\n<strong>输出：</strong>[5,2,4,null,1,3]\n<strong>解释：</strong>A = [2,1,5,3], B = [2,1,5,3,4]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= B.length &lt;= 100</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('999. 可以被一步捕获的棋子数', '<p>在一个 8 x 8 的棋盘上，有一个白色的车（<code>Rook</code>），用字符 <code>\'R\'</code> 表示。棋盘上还可能存在空方块，白色的象（<code>Bishop</code>）以及黑色的卒（<code>pawn</code>），分别用字符 <code>\'.\'</code>，<code>\'B\'</code> 和 <code>\'p\'</code> 表示。不难看出，大写字符表示的是白棋，小写字符表示的是黑棋。</p> \n<p>车按国际象棋中的规则移动。东，西，南，北四个基本方向任选其一，然后一直向选定的方向移动，直到满足下列四个条件之一：</p> \n<ul> \n <li>棋手选择主动停下来。</li> \n <li>棋子因到达棋盘的边缘而停下。</li> \n <li>棋子移动到某一方格来捕获位于该方格上敌方（黑色）的卒，停在该方格内。</li> \n <li>车不能进入/越过已经放有其他友方棋子（白色的象）的方格，停在友方棋子前。</li> \n</ul> \n<p>你现在可以控制车移动一次，请你统计有多少敌方的卒处于你的捕获范围内（即，可以被一步捕获的棋子数）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 305px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/1253_example_1_improved.PNG\" alt=\"\"></p> \n<pre><strong>输入：</strong>[[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n<strong>输出：</strong>3\n<strong>解释：\n</strong>在本例中，车能够捕获所有的卒。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 306px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/1253_example_2_improved.PNG\" alt=\"\"></p> \n<pre><strong>输入：</strong>[[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n<strong>输出：</strong>0\n<strong>解释：\n</strong>象阻止了车捕获任何卒。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 305px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/1253_example_3_improved.PNG\" alt=\"\"></p> \n<pre><strong>输入：</strong>[[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n<strong>输出：</strong>3\n<strong>解释： </strong>\n车可以捕获位置 b5，d6 和 f5 的卒。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>board.length == board[i].length == 8</code></li> \n <li><code>board[i][j]</code> 可以是&nbsp;<code>\'R\'</code>，<code>\'.\'</code>，<code>\'B\'</code>&nbsp;或&nbsp;<code>\'p\'</code></li> \n <li>只有一个格子上存在&nbsp;<code>board[i][j] == \'R\'</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('LCP 01. 猜数字', '<p>小A 和 小B 在玩猜数字。小B 每次从 1, 2, 3 中随机选择一个，小A 每次也从 1, 2, 3 中选择一个猜。他们一共进行三次这个游戏，请返回 小A 猜对了几次？</p> \n<p>输入的<code>guess</code>数组为 小A 每次的猜测，<code>answer</code>数组为 小B 每次的选择。<code>guess</code>和<code>answer</code>的长度都等于3。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>guess = [1,2,3], answer = [1,2,3]\n<strong>输出：</strong>3\n<strong>解释：</strong>小A 每次都猜对了。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>guess = [2,2,3], answer = [3,2,1]\n<strong>输出：</strong>1\n<strong>解释：</strong>小A 只猜对了第二次。</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ol> \n <li><code>guess</code> 的长度 = 3</li> \n <li><code>answer</code> 的长度 = 3</li> \n <li><code>guess</code> 的元素取值为 <code>{1, 2, 3}</code> 之一。</li> \n <li><code>answer</code> 的元素取值为 <code>{1, 2, 3}</code> 之一。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('LCP 02. 分式化简', '<p>有一个同学在学习分式。他需要将一个连分数化成最简分数，你能帮助他吗？</p> \n<p><img style=\"height: 195px; width: 480px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/09/fraction_example_1.jpg\" alt=\"\"></p> \n<p>连分数是形如上图的分式。在本题中，所有系数都是大于等于0的整数。</p> \n<p>&nbsp;</p> \n<p>输入的<code>cont</code>代表连分数的系数（<code>cont[0]</code>代表上图的<code>a<sub>0</sub></code>，以此类推）。返回一个长度为2的数组<code>[n, m]</code>，使得连分数的值等于<code>n / m</code>，且<code>n, m</code>最大公约数为1。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>cont = [3, 2, 0, 2]\n<strong>输出：</strong>[13, 4]\n<strong>解释：</strong>原连分数等价于3 + (1 / (2 + (1 / (0 + 1 / 2))))。注意[26, 8], [-13, -4]都不是正确答案。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>cont = [0, 0, 3]\n<strong>输出：</strong>[3, 1]\n<strong>解释：</strong>如果答案是整数，令分母为1即可。</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ol> \n <li><code>cont[i] &gt;= 0</code></li> \n <li><code>1 &lt;= cont的长度 &lt;= 10</code></li> \n <li><code>cont</code>最后一个元素不等于0</li> \n <li>答案的<code>n, m</code>的取值都能被32位int整型存下（即不超过<code>2 ^ 31 - 1</code>）。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('LCP 03. 机器人大冒险', '<p>力扣团队买了一个可编程机器人，机器人初始位置在原点<code>(0, 0)</code>。小伙伴事先给机器人输入一串指令<code>command</code>，机器人就会<strong>无限循环</strong>这条指令的步骤进行移动。指令有两种：</p> \n<ol> \n <li><code>U</code>: 向<code>y</code>轴正方向移动一格</li> \n <li><code>R</code>: 向<code>x</code>轴正方向移动一格。</li> \n</ol> \n<p>不幸的是，在 xy 平面上还有一些障碍物，他们的坐标用<code>obstacles</code>表示。机器人一旦碰到障碍物就会被<strong>损毁</strong>。</p> \n<p>给定终点坐标<code>(x, y)</code>，返回机器人能否<strong>完好</strong>地到达终点。如果能，返回<code>true</code>；否则返回<code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>command = \"URR\", obstacles = [], x = 3, y = 2\n<strong>输出：</strong>true\n<strong>解释：</strong>U(0, 1) -&gt; R(1, 1) -&gt; R(2, 1) -&gt; U(2, 2) -&gt; R(3, 2)。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>command = \"URR\", obstacles = [[2, 2]], x = 3, y = 2\n<strong>输出：</strong>false\n<strong>解释：</strong>机器人在到达终点前会碰到(2, 2)的障碍物。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>command = \"URR\", obstacles = [[4, 2]], x = 3, y = 2\n<strong>输出：</strong>true\n<strong>解释：</strong>到达终点后，再碰到障碍物也不影响返回结果。</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ol> \n <li><code>2 &lt;= command的长度 &lt;= 1000</code></li> \n <li><code>command</code>由<code>U，R</code>构成，且至少有一个<code>U</code>，至少有一个<code>R</code></li> \n <li><code>0 &lt;= x &lt;= 1e9, 0 &lt;= y &lt;= 1e9</code></li> \n <li><code>0 &lt;= obstacles的长度 &lt;= 1000</code></li> \n <li><code>obstacles[i]</code>不为原点或者终点</li> \n</ol>');
INSERT INTO `leecode` VALUES ('LCP 04. 覆盖', '<p>你有一块棋盘，棋盘上有一些格子已经坏掉了。你还有无穷块大小为<code>1 * 2</code>的多米诺骨牌，你想把这些骨牌<strong>不重叠</strong>地覆盖在<strong>完好</strong>的格子上，请找出你最多能在棋盘上放多少块骨牌？这些骨牌可以横着或者竖着放。</p> \n<p>&nbsp;</p> \n<p>输入：<code>n, m</code>代表棋盘的大小；<code>broken</code>是一个<code>b * 2</code>的二维数组，其中每个元素代表棋盘上每一个坏掉的格子的位置。</p> \n<p>输出：一个整数，代表最多能在棋盘上放的骨牌数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2, m = 3, broken = [[1, 0], [1, 1]]\n<strong>输出：</strong>2\n<strong>解释：</strong>我们最多可以放两块骨牌：[[0, 0], [0, 1]]以及[[0, 2], [1, 2]]。（见下图）</pre> \n<p><img style=\"height: 204px; width: 304px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/09/domino_example_1.jpg\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 3, m = 3, broken = []\n<strong>输出：</strong>4\n<strong>解释：</strong>下图是其中一种可行的摆放方式\n</pre> \n<p><img style=\"height: 304px; width: 304px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/09/domino_example_2.jpg\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ol> \n <li><code>1 &lt;= n &lt;= 8</code></li> \n <li><code>1 &lt;= m &lt;= 8</code></li> \n <li><code>0 &lt;= b &lt;= n * m</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('LCP 05. 发 LeetCoin', '<p>力扣决定给一个刷题团队发<code>LeetCoin</code>作为奖励。同时，为了监控给大家发了多少<code>LeetCoin</code>，力扣有时候也会进行查询。</p> \n<p>&nbsp;</p> \n<p>该刷题团队的管理模式可以用一棵树表示：</p> \n<ol> \n <li>团队只有一个负责人，编号为1。除了该负责人外，每个人有且仅有一个领导（负责人没有领导）；</li> \n <li>不存在循环管理的情况，如A管理B，B管理C，C管理A。</li> \n</ol> \n<p>&nbsp;</p> \n<p>力扣想进行的操作有以下三种：</p> \n<ol> \n <li>给团队的一个成员（也可以是负责人）发一定数量的<code>LeetCoin</code>；</li> \n <li>给团队的一个成员（也可以是负责人），以及他/她管理的所有人（即他/她的下属、他/她下属的下属，……），发一定数量的<code>LeetCoin</code>；</li> \n <li>查询某一个成员（也可以是负责人），以及他/她管理的所有人被发到的<code>LeetCoin</code>之和。</li> \n</ol> \n<p>&nbsp;</p> \n<p><strong>输入：</strong></p> \n<ol> \n <li><code>N</code>表示团队成员的个数（编号为1～N，负责人为1）；</li> \n <li><code>leadership</code>是大小为<code>(N&nbsp;- 1) * 2</code>的二维数组，其中每个元素<code>[a, b]</code>代表<code>b</code>是<code>a</code>的下属；</li> \n <li><code>operations</code>是一个长度为<code>Q</code>的二维数组，代表以时间排序的操作，格式如下： \n  <ol> \n   <li><code>operations[i][0] = 1</code>: 代表第一种操作，<code>operations[i][1]</code>代表成员的编号，<code>operations[i][2]</code>代表<code>LeetCoin</code>的数量；</li> \n   <li><code>operations[i][0] = 2</code>: 代表第二种操作，<code>operations[i][1]</code>代表成员的编号，<code>operations[i][2]</code>代表<code>LeetCoin</code>的数量；</li> \n   <li><code>operations[i][0] = 3</code>: 代表第三种操作，<code>operations[i][1]</code>代表成员的编号；</li> \n  </ol> </li> \n</ol> \n<p><strong>输出：</strong></p> \n<p>返回一个数组，数组里是每次<strong>查询</strong>的返回值（发<code>LeetCoin</code>的操作不需要任何返回值）。由于发的<code>LeetCoin</code>很多，请把每次查询的结果模<code>1e9+7 (1000000007)</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>N = 6, leadership = [[1, 2], [1, 6], [2, 3], [2, 5], [1, 4]], operations = [[1, 1, 500], [2, 2, 50], [3, 1], [2, 6, 15], [3, 1]]\n<strong>输出：</strong>[650, 665]\n<strong>解释：</strong>团队的管理关系见下图。\n第一次查询时，每个成员得到的LeetCoin的数量分别为（按编号顺序）：500, 50, 50, 0, 50, 0;\n第二次查询时，每个成员得到的LeetCoin的数量分别为（按编号顺序）：500, 50, 50, 0, 50, 15.\n</pre> \n<p><img style=\"height: 344px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/09/coin_example_1.jpg\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ol> \n <li><code>1 &lt;= N &lt;= 50000</code></li> \n <li><code>1 &lt;= Q &lt;= 50000</code></li> \n <li><code>operations[i][0] != 3 时，1 &lt;= operations[i][2]&nbsp;&lt;= 5000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('LCP 06. 拿硬币', '<p>桌上有 <code>n</code> 堆力扣币，每堆的数量保存在数组 <code>coins</code> 中。我们每次可以选择任意一堆，拿走其中的一枚或者两枚，求拿完所有力扣币的最少次数。</p> \n<p><strong>示例 1：</strong></p> \n<blockquote> \n <p>输入：<code>[4,2,1]</code></p> \n <p>输出：<code>4</code></p> \n <p>解释：第一堆力扣币最少需要拿 2 次，第二堆最少需要拿 1 次，第三堆最少需要拿 1 次，总共 4 次即可拿完。</p> \n</blockquote> \n<p><strong>示例 2：</strong></p> \n<blockquote> \n <p>输入：<code>[2,3,10]</code></p> \n <p>输出：<code>8</code></p> \n</blockquote> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 4</code></li> \n <li><code>1 &lt;= coins[i] &lt;= 10</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('LCP 07. 传递信息', '<p>小朋友 A 在和 ta 的小伙伴们玩传信息游戏，游戏规则如下：</p> \n<ol> \n <li>有 n 名玩家，所有玩家编号分别为 0 ～ n-1，其中小朋友 A 的编号为 0</li> \n <li>每个玩家都有固定的若干个可传信息的其他玩家（也可能没有）。传信息的关系是单向的（比如 A 可以向 B 传信息，但 B 不能向 A 传信息）。</li> \n <li>每轮信息必须需要传递给另一个人，且信息可重复经过同一个人</li> \n</ol> \n<p>给定总玩家数 <code>n</code>，以及按 <code>[玩家编号,对应可传递玩家编号]</code> 关系组成的二维数组 <code>relation</code>。返回信息从小 A (编号 0 ) 经过 <code>k</code> 轮传递到编号为 n-1 的小伙伴处的方案数；若不能到达，返回 0。</p> \n<p><strong>示例 1：</strong></p> \n<blockquote> \n <p>输入：<code>n = 5, relation = [[0,2],[2,1],[3,4],[2,3],[1,4],[2,0],[0,4]], k = 3</code></p> \n <p>输出：<code>3</code></p> \n <p>解释：信息从小 A 编号 0 处开始，经 3 轮传递，到达编号 4。共有 3 种方案，分别是 0-&gt;2-&gt;0-&gt;4， 0-&gt;2-&gt;1-&gt;4， 0-&gt;2-&gt;3-&gt;4。</p> \n</blockquote> \n<p><strong>示例 2：</strong></p> \n<blockquote> \n <p>输入：<code>n = 3, relation = [[0,2],[2,1]], k = 2</code></p> \n <p>输出：<code>0</code></p> \n <p>解释：信息不能从小 A 处经过 2 轮传递到编号 2</p> \n</blockquote> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 10</code></li> \n <li><code>1 &lt;= k &lt;= 5</code></li> \n <li><code>1 &lt;= relation.length &lt;= 90, 且 relation[i].length == 2</code></li> \n <li><code>0 &lt;= relation[i][0],relation[i][1] &lt; n 且 relation[i][0] != relation[i][1]</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('LCP 08. 剧情触发时间', '<p>在战略游戏中，玩家往往需要发展自己的势力来触发各种新的剧情。一个势力的主要属性有三种，分别是文明等级（<code>C</code>），资源储备（<code>R</code>）以及人口数量（<code>H</code>）。在游戏开始时（第 0 天），三种属性的值均为 0。</p> \n<p>随着游戏进程的进行，每一天玩家的三种属性都会对应<strong>增加</strong>，我们用一个二维数组 <code>increase</code> 来表示每天的增加情况。这个二维数组的每个元素是一个长度为 3 的一维数组，例如 <code>[[1,2,1],[3,4,2]]</code> 表示第一天三种属性分别增加 <code>1,2,1</code> 而第二天分别增加 <code>3,4,2</code>。</p> \n<p>所有剧情的触发条件也用一个二维数组 <code>requirements</code> 表示。这个二维数组的每个元素是一个长度为 3 的一维数组，对于某个剧情的触发条件 <code>c[i], r[i], h[i]</code>，如果当前 <code>C &gt;= c[i]</code> 且 <code>R &gt;= r[i]</code> 且 <code>H &gt;= h[i]</code> ，则剧情会被触发。</p> \n<p>根据所给信息，请计算每个剧情的触发时间，并以一个数组返回。如果某个剧情不会被触发，则该剧情对应的触发时间为 -1 。</p> \n<p><strong>示例 1：</strong></p> \n<blockquote> \n <p>输入： <code>increase = [[2,8,4],[2,5,0],[10,9,8]]</code> <code>requirements = [[2,11,3],[15,10,7],[9,17,12],[8,1,14]]</code></p> \n <p>输出: <code>[2,-1,3,-1]</code></p> \n <p>解释：</p> \n <p>初始时，C = 0，R = 0，H = 0</p> \n <p>第 1 天，C = 2，R = 8，H = 4</p> \n <p>第 2 天，C = 4，R = 13，H = 4，此时触发剧情 0</p> \n <p>第 3 天，C = 14，R = 22，H = 12，此时触发剧情 2</p> \n <p>剧情 1 和 3 无法触发。</p> \n</blockquote> \n<p><strong>示例 2：</strong></p> \n<blockquote> \n <p>输入： <code>increase = [[0,4,5],[4,8,8],[8,6,1],[10,10,0]]</code> <code>requirements = [[12,11,16],[20,2,6],[9,2,6],[10,18,3],[8,14,9]]</code></p> \n <p>输出: <code>[-1,4,3,3,3]</code></p> \n</blockquote> \n<p><strong>示例 3：</strong></p> \n<blockquote> \n <p>输入： <code>increase = [[1,1,1]]</code> <code>requirements = [[0,0,0]]</code></p> \n <p>输出: <code>[0]</code></p> \n</blockquote> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= increase.length &lt;= 10000</code></li> \n <li><code>1 &lt;= requirements.length &lt;= 100000</code></li> \n <li><code>0 &lt;= increase[i] &lt;= 10</code></li> \n <li><code>0 &lt;= requirements[i] &lt;= 100000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('LCP 09. 最小跳跃次数', '<p>为了给刷题的同学一些奖励，力扣团队引入了一个弹簧游戏机。游戏机由 <code>N</code> 个特殊弹簧排成一排，编号为 <code>0</code> 到 <code>N-1</code>。初始有一个小球在编号 <code>0</code> 的弹簧处。若小球在编号为 <code>i</code> 的弹簧处，通过按动弹簧，可以选择把小球向右弹射&nbsp;<code>jump[i]</code> 的距离，或者向左弹射到任意左侧弹簧的位置。也就是说，在编号为 <code>i</code> 弹簧处按动弹簧，小球可以弹向 <code>0</code> 到 <code>i-1</code> 中任意弹簧或者 <code>i+jump[i]</code> 的弹簧（若 <code>i+jump[i]&gt;=N</code> ，则表示小球弹出了机器）。小球位于编号 0 处的弹簧时不能再向左弹。</p> \n<p>为了获得奖励，你需要将小球弹出机器。请求出最少需要按动多少次弹簧，可以将小球从编号 <code>0</code> 弹簧弹出整个机器，即向右越过编号 <code>N-1</code> 的弹簧。</p> \n<p><strong>示例 1：</strong></p> \n<blockquote> \n <p>输入：<code>jump = [2, 5, 1, 1, 1, 1]</code></p> \n <p>输出：<code>3</code></p> \n <p>解释：小 Z 最少需要按动 3 次弹簧，小球依次到达的顺序为 0 -&gt; 2 -&gt; 1 -&gt; 6，最终小球弹出了机器。</p> \n</blockquote> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= jump.length &lt;= 10^6</code></li> \n <li><code>1 &lt;= jump[i] &lt;= 10000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('LCP 10. 二叉树任务调度', '<p>任务调度优化是计算机性能优化的关键任务之一。在任务众多时，不同的调度策略可能会得到不同的总体执行时间，因此寻求一个最优的调度方案是非常有必要的。</p> \n<p>通常任务之间是存在依赖关系的，即对于某个任务，你需要先<strong>完成</strong>他的前导任务（如果非空），才能开始执行该任务。<strong>我们保证任务的依赖关系是一棵二叉树，</strong>其中 <code>root</code> 为根任务，<code>root.left</code> 和 <code>root.right</code> 为他的两个前导任务（可能为空），<code>root.val</code> 为其自身的执行时间。</p> \n<p>在一个 CPU 核执行某个任务时，我们可以在任何时刻暂停当前任务的执行，并保留当前执行进度。在下次继续执行该任务时，会从之前停留的进度开始继续执行。暂停的时间可以不是整数。</p> \n<p>现在，系统有<strong>两个</strong> CPU 核，即我们可以同时执行两个任务，但是同一个任务不能同时在两个核上执行。给定这颗任务树，请求出所有任务执行完毕的最小时间。</p> \n<p><strong>示例 1：</strong></p> \n<blockquote> \n <p><img src=\"https://pic.leetcode-cn.com/3522fbf8ce4ebb20b79019124eb9870109fdfe97fe9da99f6c20c07ceb1c60b3-image.png\" alt=\"image.png\"></p> \n <p>输入：root = [47, 74, 31]</p> \n <p>输出：121</p> \n <p>解释：根节点的左右节点可以并行执行31分钟，剩下的43+47分钟只能串行执行，因此总体执行时间是121分钟。</p> \n</blockquote> \n<p><strong>示例 2：</strong></p> \n<blockquote> \n <p><img src=\"https://pic.leetcode-cn.com/13accf172ee4a660d241e25901595d55b759380b090890a17e6e7bd51a143e3f-image.png\" alt=\"image.png\"></p> \n <p>输入：root = [15, 21, null, 24, null, 27, 26]</p> \n <p>输出：87</p> \n</blockquote> \n<p><strong>示例 3：</strong></p> \n<blockquote> \n <p><img src=\"https://pic.leetcode-cn.com/bef743a12591aafb9047dd95d335b8083dfa66e8fdedc63f50fd406b4a9d163a-image.png\" alt=\"image.png\"></p> \n <p>输入：root = [1,3,2,null,null,4,4]</p> \n <p>输出：7.5</p> \n</blockquote> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= 节点数量 &lt;= 1000</code></li> \n <li><code>1 &lt;= 单节点执行时间 &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('LCP 11. 期望个数统计', '<p>某互联网公司一年一度的春招开始了，一共有 <code>n</code> 名面试者入选。每名面试者都会提交一份简历，公司会根据提供的简历资料产生一个预估的能力值，数值越大代表越有可能通过面试。</p> \n<p>小 A 和小 B 负责审核面试者，他们均有所有面试者的简历，并且将各自根据面试者能力值从大到小的顺序浏览。由于简历事先被打乱过，能力值相同的简历的出现顺序是从它们的全排列中<strong>等可能</strong>地取一个。现在给定 <code>n</code> 名面试者的能力值 <code>scores</code>，设 <code>X</code> 代表小 A 和小 B 的浏览顺序中出现在同一位置的简历数，求 <code>X</code> 的期望。</p> \n<p>提示：离散的非负随机变量的期望计算公式为 <img src=\"http://latex.codecogs.com/svg.latex?E%28X%29%3D%5Csum_%7Bk%3D1%7D%5E%7B%5Cinfty%7D%20k%20%5CPr%28X%20%3D%20k%29\" alt=\"1\">。在本题中，由于 <code>X</code> 的取值为 0 到 <code>n</code> 之间，期望计算公式可以是 <img src=\"http://latex.codecogs.com/svg.latex?E%28X%29%3D%5Csum_%7Bk%3D1%7D%5E%7Bn%7D%20k%20%5CPr%28X%20%3D%20k%29\" alt=\"2\">。</p> \n<p><strong>示例 1：</strong></p> \n<blockquote> \n <p>输入：<code>scores = [1,2,3]</code></p> \n <p>输出：<code>3</code></p> \n <p>解释：由于面试者能力值互不相同，小 A 和小 B 的浏览顺序一定是相同的。<code>X</code>的期望是 3 。</p> \n</blockquote> \n<p><strong>示例 2：</strong></p> \n<blockquote> \n <p>输入：<code>scores = [1,1]</code></p> \n <p>输出：<code>1</code></p> \n <p>解释：设两位面试者的编号为 0, 1。由于他们的能力值都是 1，小 A 和小 B 的浏览顺序都为从全排列 <code>[[0,1],[1,0]]</code> 中等可能地取一个。如果小 A 和小 B 的浏览顺序都是 <code>[0,1]</code> 或者 <code>[1,0]</code> ，那么出现在同一位置的简历数为 2 ，否则是 0 。所以 <code>X</code> 的期望是 (2+0+2+0) * 1/4 = 1</p> \n</blockquote> \n<p><strong>示例 3：</strong></p> \n<blockquote> \n <p>输入：<code>scores = [1,1,2]</code></p> \n <p>输出：<code>2</code></p> \n</blockquote> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= scores.length &lt;= 10^5</code></li> \n <li><code>0 &lt;= scores[i] &lt;= 10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('LCP 12. 小张刷题计划', '<p>为了提高自己的代码能力，小张制定了 <code>LeetCode</code> 刷题计划，他选中了 <code>LeetCode</code> 题库中的 <code>n</code> 道题，编号从 <code>0</code> 到 <code>n-1</code>，并计划在 <code>m</code> 天内<strong>按照题目编号顺序</strong>刷完所有的题目（注意，小张不能用多天完成同一题）。</p> \n<p>在小张刷题计划中，小张需要用 <code>time[i]</code> 的时间完成编号 <code>i</code> 的题目。此外，小张还可以使用场外求助功能，通过询问他的好朋友小杨题目的解法，可以省去该题的做题时间。为了防止“小张刷题计划”变成“小杨刷题计划”，小张每天最多使用一次求助。</p> \n<p>我们定义 <code>m</code> 天中做题时间最多的一天耗时为 <code>T</code>（小杨完成的题目不计入做题总时间）。请你帮小张求出最小的 <code>T</code>是多少。</p> \n<p><strong>示例 1：</strong></p> \n<blockquote> \n <p>输入：<code>time = [1,2,3,3], m = 2</code></p> \n <p>输出：<code>3</code></p> \n <p>解释：第一天小张完成前三题，其中第三题找小杨帮忙；第二天完成第四题，并且找小杨帮忙。这样做题时间最多的一天花费了 3 的时间，并且这个值是最小的。</p> \n</blockquote> \n<p><strong>示例 2：</strong></p> \n<blockquote> \n <p>输入：<code>time = [999,999,999], m = 4</code></p> \n <p>输出：<code>0</code></p> \n <p>解释：在前三天中，小张每天求助小杨一次，这样他可以在三天内完成所有的题目并不花任何时间。</p> \n</blockquote> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= time.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= time[i] &lt;= 10000</code></li> \n <li><code>1 &lt;= m &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('LCP 13. 寻宝', '<p>我们得到了一副藏宝图，藏宝图显示，在一个迷宫中存在着未被世人发现的宝藏。</p> \n<p>迷宫是一个二维矩阵，用一个字符串数组表示。它标识了唯一的入口（用 \'S\' 表示），和唯一的宝藏地点（用 \'T\' 表示）。但是，宝藏被一些隐蔽的机关保护了起来。在地图上有若干个机关点（用 \'M\' 表示），<strong>只有所有机关均被触发，才可以拿到宝藏。</strong></p> \n<p>要保持机关的触发，需要把一个重石放在上面。迷宫中有若干个石堆（用 \'O\' 表示），每个石堆都有<strong>无限</strong>个足够触发机关的重石。但是由于石头太重，我们一次只能搬<strong>一个</strong>石头到指定地点。</p> \n<p>迷宫中同样有一些墙壁（用 \'#\' 表示），我们不能走入墙壁。剩余的都是可随意通行的点（用 \'.\' 表示）。石堆、机关、起点和终点（无论是否能拿到宝藏）也是可以通行的。</p> \n<p>我们每步可以选择向上/向下/向左/向右移动一格，并且不能移出迷宫。搬起石头和放下石头不算步数。那么，从起点开始，我们最少需要多少步才能最后拿到宝藏呢？如果无法拿到宝藏，返回 -1 。</p> \n<p><strong>示例 1：</strong></p> \n<blockquote> \n <p>输入： [\"S#O\", \"M..\", \"M.T\"]</p> \n <p>输出：16</p> \n <p>解释：最优路线为： S-&gt;O, cost = 4, 去搬石头 O-&gt;第二行的M, cost = 3, M机关触发 第二行的M-&gt;O, cost = 3, 我们需要继续回去 O 搬石头。 O-&gt;第三行的M, cost = 4, 此时所有机关均触发 第三行的M-&gt;T, cost = 2，去T点拿宝藏。 总步数为16。 <img src=\"https://pic.leetcode-cn.com/6bfff669ad65d494cdc237bcedfec10a2b1ac2f2593c2bf97e9aecb41dc8a08b-%E5%9B%BE%E7%89%87.gif\" alt=\"图片.gif\"></p> \n</blockquote> \n<p><strong>示例 2：</strong></p> \n<blockquote> \n <p>输入： [\"S#O\", \"M.#\", \"M.T\"]</p> \n <p>输出：-1</p> \n <p>解释：我们无法搬到石头触发机关</p> \n</blockquote> \n<p><strong>示例 3：</strong></p> \n<blockquote> \n <p>输入： [\"S#O\", \"M.T\", \"M..\"]</p> \n <p>输出：17</p> \n <p>解释：注意终点也是可以通行的。</p> \n</blockquote> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= maze.length&nbsp;&lt;= 100</code></li> \n <li><code>1 &lt;= maze[i].length&nbsp;&lt;= 100</code></li> \n <li><code>maze[i].length == maze[j].length</code></li> \n <li>S 和 T 有且只有一个</li> \n <li>0 &lt;= M的数量 &lt;= 16</li> \n <li>0 &lt;= O的数量 &lt;= 40，题目保证当迷宫中存在 M 时，一定存在至少一个 O 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('LCP 14. 切分数组', '<p>给定一个整数数组 <code>nums</code> ，小李想将 <code>nums</code> 切割成若干个非空子数组，使得每个子数组最左边的数和最右边的数的最大公约数大于 1 。为了减少他的工作量，请求出最少可以切成多少个子数组。</p> \n<p><strong>示例 1：</strong></p> \n<blockquote> \n <p>输入：<code>nums = [2,3,3,2,3,3]</code></p> \n <p>输出：<code>2</code></p> \n <p>解释：最优切割为 [2,3,3,2] 和 [3,3] 。第一个子数组头尾数字的最大公约数为 2 ，第二个子数组头尾数字的最大公约数为 3 。</p> \n</blockquote> \n<p><strong>示例 2：</strong></p> \n<blockquote> \n <p>输入：<code>nums = [2,3,5,7]</code></p> \n <p>输出：<code>4</code></p> \n <p>解释：只有一种可行的切割：[2], [3], [5], [7]</p> \n</blockquote> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10^5</code></li> \n <li><code>2 &lt;= nums[i] &lt;= 10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('LCP 15. 游乐园的迷宫', '<p>小王来到了游乐园，她玩的第一个项目是模拟推销员。有一个二维平面地图，其中散布着 <code>N</code> 个推销点，编号 <code>0</code> 到 <code>N-1</code>，不存在三点共线的情况。每两点之间有一条直线相连。游戏没有规定起点和终点，但限定了每次转角的方向。首先，小王需要先选择两个点分别作为起点和终点，然后从起点开始访问剩余 <code>N-2</code> 个点恰好一次并回到终点。访问的顺序需要满足一串给定的长度为 <code>N-2</code> 由 <code>L</code> 和 <code>R</code> 组成的字符串 <code>direction</code>，表示从起点出发之后在每个顶点上转角的方向。根据这个提示，小王希望你能够帮她找到一个可行的遍历顺序，输出顺序下标（若有多个方案，输出任意一种）。可以证明这样的遍历顺序一定是存在的。</p> \n<p><img style=\"max-height:500px\" src=\"https://pic.leetcode-cn.com/595b60797d4a461287864a8cd05bba1d3b8760104ff83f43b902fd68477be9c3-Screenshot%202020-03-20%20at%2017.04.58.png\" alt=\"Screenshot 2020-03-20 at 17.04.58.png\"></p> \n<p>（上图：A-&gt;B-&gt;C 右转； 下图：D-&gt;E-&gt;F 左转）</p> \n<p><strong>示例 1：</strong></p> \n<blockquote> \n <p>输入：<code>points = [[1,1],[1,4],[3,2],[2,1]], direction = \"LL\"</code></p> \n <p>输入：<code>[0,2,1,3]</code></p> \n <p>解释：[0,2,1,3] 是符合\"LL\"的方案之一。在 [0,2,1,3] 方案中，0-&gt;2-&gt;1 是左转方向， 2-&gt;1-&gt;3 也是左转方向 <img style=\"max-height:300px\" src=\"https://pic.leetcode-cn.com/c01c1efc423b916267c2a3a170266c925c368d62afa047c267cc1020970e55d9-%E5%9B%BE%E7%89%87.gif\" alt=\"图片.gif\"></p> \n</blockquote> \n<p><strong>示例 2：</strong></p> \n<blockquote> \n <p>输入：<code>points = [[1,3],[2,4],[3,3],[2,1]], direction = \"LR\"</code></p> \n <p>输入：<code>[0,3,1,2]</code></p> \n <p>解释：[0,3,1,2] 是符合\"LR\"的方案之一。在 [0,3,1,2] 方案中，0-&gt;3-&gt;1 是左转方向， 3-&gt;1-&gt;2 是右转方向</p> \n</blockquote> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>3 &lt;= points.length &lt;= 1000 且 points[i].length == 2</code></li> \n <li><code>1 &lt;= points[i][0],points[i][1] &lt;= 10000</code></li> \n <li><code>direction.length == points.length - 2</code></li> \n <li><code>direction 只包含 \"L\",\"R\"</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('LCP 16. 游乐园的游览计划', '<p>又到了一年一度的春游时间，小吴计划去游乐场游玩 1 天，游乐场总共有 <code>N</code> 个游乐项目，编号从 <code>0</code> 到 <code>N-1</code>。小吴给每个游乐项目定义了一个非负整数值 <code>value[i]</code> 表示自己的喜爱值。两个游乐项目之间会有双向路径相连，整个游乐场总共有 <code>M</code> 条双向路径，保存在二维数组&nbsp;<code>edges</code>中。 小吴计划选择一个游乐项目 <code>A</code> 作为这一天游玩的重点项目。上午小吴准备游玩重点项目 <code>A</code> 以及与项目 <code>A</code> 相邻的两个项目 <code>B</code>、<code>C</code> （项目<code>A</code>、<code>B</code>与<code>C</code>要求是不同的项目，且项目<code>B</code>与项目<code>C</code>要求相邻），并返回 <code>A</code> ，即存在一条 <code>A-B-C-A</code> 的路径。 下午，小吴决定再游玩重点项目 <code>A</code>以及与<code>A</code>相邻的两个项目 <code>B\'</code>、<code>C\'</code>，（项目<code>A</code>、<code>B\'</code>与<code>C\'</code>要求是不同的项目，且项目<code>B\'</code>与项目<code>C\'</code>要求相邻），并返回 <code>A</code> ，即存在一条 <code>A-B\'-C\'-A</code> 的路径。下午游玩项目 <code>B\'</code>、<code>C\'</code> 可与上午游玩项目<code>B</code>、<code>C</code>存在重复项目。 小吴希望提前安排好游玩路径，使得喜爱值之和最大。请你返回满足游玩路径选取条件的最大喜爱值之和，如果没有这样的路径，返回 <code>0</code>。 注意：一天中重复游玩同一个项目并不能重复增加喜爱值了。例如：上下午游玩路径分别是 <code>A-B-C-A</code>与<code>A-C-D-A</code> 那么只能获得 <code>value[A] + value[B] + value[C] + value[D]</code> 的总和。</p> \n<p><strong>示例 1：</strong></p> \n<blockquote> \n <p>输入：<code>edges = [[0,1],[1,2],[0,2]], value = [1,2,3]</code></p> \n <p>输出：<code>6</code></p> \n <p>解释：喜爱值之和最高的方案之一是 0-&gt;1-&gt;2-&gt;0 与 0-&gt;2-&gt;1-&gt;0 。重复游玩同一点不重复计入喜爱值，返回1+2+3=6</p> \n</blockquote> \n<p><strong>示例 2：</strong></p> \n<blockquote> \n <p>输入：<code>edges = [[0,2],[2,1]], value = [1,2,5]</code></p> \n <p>输出：<code>0</code></p> \n <p>解释：无满足要求的游玩路径，返回 0</p> \n</blockquote> \n<p><strong>示例 3：</strong></p> \n<blockquote> \n <p>输入：<code>edges = [[0,1],[0,2],[0,3],[0,4],[0,5],[1,3],[2,4],[2,5],[3,4],[3,5],[4,5]], value = [7,8,6,8,9,7]</code></p> \n <p>输出：<code>39</code></p> \n <p>解释：喜爱值之和最高的方案之一是 3-&gt;0-&gt;1-&gt;3 与 3-&gt;4-&gt;5-&gt;3 。喜爱值最高为 7+8+8+9+7=39</p> \n</blockquote> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>3 &lt;= value.length &lt;= 10000</code></li> \n <li><code>1 &lt;=&nbsp;edges.length &lt;= 10000</code></li> \n <li><code>0 &lt;= edges[i][0],edges[i][1] &lt;&nbsp;value.length</code></li> \n <li><code>0 &lt;= value[i] &lt;= 10000</code></li> \n <li><code>edges中没有重复的边</code></li> \n <li><code>edges[i][0] != edges[i][1]</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 03. 数组中重复的数字', '<p>找出数组中重复的数字。</p> \n<p><br> 在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\n[2, 3, 1, 0, 2, 5, 3]\n<strong>输出：</strong>2 或 3 \n</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p><code>2 &lt;= n &lt;= 100000</code></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 04. 二维数组中的查找', '<p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p> \n<p>&nbsp;</p> \n<p><strong>示例:</strong></p> \n<p>现有矩阵 matrix 如下：</p> \n<pre>[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n</pre> \n<p>给定 target&nbsp;=&nbsp;<code>5</code>，返回&nbsp;<code>true</code>。</p> \n<p>给定&nbsp;target&nbsp;=&nbsp;<code>20</code>，返回&nbsp;<code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p><code>0 &lt;= n &lt;= 1000</code></p> \n<p><code>0 &lt;= m &lt;= 1000</code></p> \n<p>&nbsp;</p> \n<p><strong>注意：</strong>本题与主站 240 题相同：<a href=\"https://leetcode-cn.com/problems/search-a-2d-matrix-ii/\">https://leetcode-cn.com/problems/search-a-2d-matrix-ii/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 05. 替换空格', '<p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成\"%20\"。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"We are happy.\"\n<strong>输出：</strong>\"We%20are%20happy.\"</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p><code>0 &lt;= s 的长度 &lt;= 10000</code></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 06. 从尾到头打印链表', '<p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>head = [1,3,2]\n<strong>输出：</strong>[2,3,1]</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p><code>0 &lt;= 链表长度 &lt;= 10000</code></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 07. 重建二叉树', '<p>输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。</p> \n<p>假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<img src=\"https://assets.leetcode.com/uploads/2021/02/19/tree.jpg\" alt=\"\"> \n<pre><strong>Input:</strong> preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n<strong>Output:</strong> [3,9,20,null,null,15,7]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>Input:</strong> preorder = [-1], inorder = [-1]\n<strong>Output:</strong> [-1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p><code>0 &lt;= 节点个数 &lt;= 5000</code></p> \n<p>&nbsp;</p> \n<p><strong>注意</strong>：本题与主站 105 题重复：<a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\">https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 09. 用两个栈实现队列', '<p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 <code>appendTail</code> 和 <code>deleteHead</code> ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，<code>deleteHead</code>&nbsp;操作返回 -1 )</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\n[\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\"]\n[[],[3],[],[]]\n<strong>输出：</strong>[null,null,3,-1]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\n[\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"]\n[[],[],[5],[2],[],[]]\n<strong>输出：</strong>[null,-1,null,null,5,2]\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= values &lt;= 10000</code></li> \n <li><code>最多会对&nbsp;appendTail、deleteHead 进行&nbsp;10000&nbsp;次调用</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 10- I. 斐波那契数列', '<p>写一个函数，输入 <code>n</code> ，求斐波那契（Fibonacci）数列的第 <code>n</code> 项（即 <code>F(N)</code>）。斐波那契数列的定义如下：</p> \n<pre>F(0) = 0,&nbsp; &nbsp;F(1)&nbsp;= 1\nF(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</pre> \n<p>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p> \n<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 5\n<strong>输出：</strong>5\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= n &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 10- II. 青蛙跳台阶问题', '<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 <code>n</code>&nbsp;级的台阶总共有多少种跳法。</p> \n<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 7\n<strong>输出：</strong>21\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 0\n<strong>输出：</strong>1</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= n &lt;= 100</code></li> \n</ul> \n<p>注意：本题与主站 70 题相同：<a href=\"https://leetcode-cn.com/problems/climbing-stairs/\">https://leetcode-cn.com/problems/climbing-stairs/</a></p> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 11. 旋转数组的最小数字', '<p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组&nbsp;<code>[3,4,5,1,2]</code> 为 <code>[1,2,3,4,5]</code> 的一个旋转，该数组的最小值为1。&nbsp;&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[3,4,5,1,2]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[2,2,2,0,1]\n<strong>输出：</strong>0\n</pre> \n<p>注意：本题与主站 154 题相同：<a href=\"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/\">https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 12. 矩阵中的路径', '<p>给定一个&nbsp;<code>m x n</code> 二维字符网格&nbsp;<code>board</code> 和一个字符串单词&nbsp;<code>word</code> 。如果&nbsp;<code>word</code> 存在于网格中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> \n<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p> \n<p>&nbsp;</p> \n<p>例如，在下面的 3×4 的矩阵中包含单词 \"ABCCED\"（单词中的字母已标出）。</p> \n<p><img style=\"width: 322px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/11/04/word2.jpg\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>board = [[\"a\",\"b\"],[\"c\",\"d\"]], word = \"abcd\"\n<strong>输出：</strong>false\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= board.length &lt;= 200</code></li> \n <li><code>1 &lt;= board[i].length &lt;= 200</code></li> \n <li><code>board</code> 和 <code>word</code> 仅由大小写英文字母组成</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>注意：</strong>本题与主站 79 题相同：<a href=\"https://leetcode-cn.com/problems/word-search/\">https://leetcode-cn.com/problems/word-search/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 13. 机器人的运动范围', '<p>地上有一个m行n列的方格，从坐标 <code>[0,0]</code> 到坐标 <code>[m-1,n-1]</code> 。一个机器人从坐标 <code>[0, 0] </code>的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>m = 2, n = 3, k = 1\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>m = 3, n = 1, k = 0\n<strong>输出：</strong>1\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n,m &lt;= 100</code></li> \n <li><code>0 &lt;= k&nbsp;&lt;= 20</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 14- I. 剪绳子', '<p>给你一根长度为 <code>n</code> 的绳子，请把绳子剪成整数长度的 <code>m</code> 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 <code>k[0],k[1]...k[m-1]</code> 。请问 <code>k[0]*k[1]*...*k[m-1]</code> 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: </strong>2\n<strong>输出: </strong>1\n<strong>解释: </strong>2 = 1 + 1, 1 × 1 = 1</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入: </strong>10\n<strong>输出: </strong>36\n<strong>解释: </strong>10 = 3 + 3 + 4, 3 ×&nbsp;3 ×&nbsp;4 = 36</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 58</code></li> \n</ul> \n<p>注意：本题与主站 343 题相同：<a href=\"https://leetcode-cn.com/problems/integer-break/\">https://leetcode-cn.com/problems/integer-break/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 14- II. 剪绳子 II', '<p>给你一根长度为 <code>n</code> 的绳子，请把绳子剪成整数长度的 <code>m</code>&nbsp;段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 <code>k[0],k[1]...k[m - 1]</code> 。请问 <code>k[0]*k[1]*...*k[m - 1]</code> 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p> \n<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: </strong>2\n<strong>输出: </strong>1\n<strong>解释: </strong>2 = 1 + 1, 1 × 1 = 1</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入: </strong>10\n<strong>输出: </strong>36\n<strong>解释: </strong>10 = 3 + 3 + 4, 3 ×&nbsp;3 ×&nbsp;4 = 36</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= n &lt;= 1000</code></li> \n</ul> \n<p>注意：本题与主站 343 题相同：<a href=\"https://leetcode-cn.com/problems/integer-break/\">https://leetcode-cn.com/problems/integer-break/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 15. 二进制中1的个数', '<p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 \'1\' 的个数（也被称为&nbsp;<a href=\"http://en.wikipedia.org/wiki/Hamming_weight\">汉明重量</a>).）。</p> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li> \n <li>在 Java 中，编译器使用 <a href=\"https://baike.baidu.com/item/二进制补码/5295284\">二进制补码</a> 记法来表示有符号整数。因此，在上面的&nbsp;<strong>示例 3&nbsp;</strong>中，输入表示有符号整数 <code>-3</code>。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 11 (控制台输入 00000000000000000000000000001011)\n<strong>输出：</strong>3\n<strong>解释：</strong>输入的二进制串 <code><strong>00000000000000000000000000001011</strong>&nbsp;中，共有三位为 \'1\'。</code>\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 128 (控制台输入 00000000000000000000000010000000)\n<strong>输出：</strong>1\n<strong>解释：</strong>输入的二进制串 <strong>00000000000000000000000010000000</strong>&nbsp;中，共有一位为 \'1\'。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>n = 4294967293 (控制台输入 11111111111111111111111111111101，部分语言中 n = -3）\n<strong>输出：</strong>31\n<strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 中，共有 31 位为 \'1\'。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>输入必须是长度为 <code>32</code> 的 <strong>二进制串</strong> 。</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 191 题相同：<a href=\"https://leetcode-cn.com/problems/number-of-1-bits/\">https://leetcode-cn.com/problems/number-of-1-bits/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 16. 数值的整数次方', '<p>实现&nbsp;<a href=\"https://www.cplusplus.com/reference/valarray/pow/\">pow(<em>x</em>,&nbsp;<em>n</em>)</a>&nbsp;，即计算 x 的 n 次幂函数（即，x<sup>n</sup>）。不得使用库函数，同时不需要考虑大数问题。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>x = 2.00000, n = 10\n<strong>输出：</strong>1024.00000\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>x = 2.10000, n = 3\n<strong>输出：</strong>9.26100</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>x = 2.00000, n = -2\n<strong>输出：</strong>0.25000\n<strong>解释：</strong>2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>-100.0 &lt;&nbsp;x&nbsp;&lt; 100.0</code></li> \n <li><code>-2<sup>31</sup>&nbsp;&lt;= n &lt;=&nbsp;2<sup>31</sup>-1</code></li> \n <li><code>-10<sup>4</sup>&nbsp;&lt;= x<sup>n</sup>&nbsp;&lt;= 10<sup>4</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 50 题相同：<a href=\"https://leetcode-cn.com/problems/powx-n/\">https://leetcode-cn.com/problems/powx-n/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 17. 打印从1到最大的n位数', '<p>输入数字 <code>n</code>，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> n = 1\n<strong>输出:</strong> [1,2,3,4,5,6,7,8,9]\n</pre> \n<p>&nbsp;</p> \n<p>说明：</p> \n<ul> \n <li>用返回一个整数列表来代替打印</li> \n <li>n 为正整数</li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 18. 删除链表的节点', '<p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。</p> \n<p>返回删除后的链表的头节点。</p> \n<p><strong>注意：</strong>此题对比原题有改动</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> head = [4,5,1,9], val = 5\n<strong>输出:</strong> [4,1,9]\n<strong>解释: </strong>给定你链表中值为&nbsp;5&nbsp;的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> head = [4,5,1,9], val = 1\n<strong>输出:</strong> [4,5,9]\n<strong>解释: </strong>给定你链表中值为&nbsp;1&nbsp;的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.\n</pre> \n<p>&nbsp;</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li>题目保证链表中节点的值互不相同</li> \n <li>若使用 C 或 C++ 语言，你不需要 <code>free</code> 或 <code>delete</code> 被删除的节点</li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 19. 正则表达式匹配', '<p>请实现一个函数用来匹配包含<code>\'. \'</code>和<code>\'*\'</code>的正则表达式。模式中的字符<code>\'.\'</code>表示任意一个字符，而<code>\'*\'</code>表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串<code>\"aaa\"</code>与模式<code>\"a.a\"</code>和<code>\"ab*ac*a\"</code>匹配，但与<code>\"aa.a\"</code>和<code>\"ab*a\"</code>均不匹配。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong>\ns = \"aa\"\np = \"a\"\n<strong>输出:</strong> false\n<strong>解释:</strong> \"a\" 无法匹配 \"aa\" 整个字符串。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong>\ns = \"aa\"\np = \"a*\"\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;因为 \'*\' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 \'a\'。因此，字符串 \"aa\" 可被视为 \'a\' 重复了一次。\n</pre> \n<p><strong>示例&nbsp;3:</strong></p> \n<pre><strong>输入:</strong>\ns = \"ab\"\np = \".*\"\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;\".*\" 表示可匹配零个或多个（\'*\'）任意字符（\'.\'）。\n</pre> \n<p><strong>示例 4:</strong></p> \n<pre><strong>输入:</strong>\ns = \"aab\"\np = \"c*a*b\"\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;因为 \'*\' 表示零个或多个，这里 \'c\' 为 0 个, \'a\' 被重复一次。因此可以匹配字符串 \"aab\"。\n</pre> \n<p><strong>示例 5:</strong></p> \n<pre><strong>输入:</strong>\ns = \"mississippi\"\np = \"mis*is*p*.\"\n<strong>输出:</strong> false</pre> \n<ul> \n <li><code>s</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母。</li> \n <li><code>p</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母以及字符&nbsp;<code>.</code>&nbsp;和&nbsp;<code>*</code>，无连续的 <code>\'*\'</code>。</li> \n</ul> \n<p>注意：本题与主站 10&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/regular-expression-matching/\">https://leetcode-cn.com/problems/regular-expression-matching/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 20. 表示数值的字符串', '<p>请实现一个函数用来判断字符串是否表示<strong>数值</strong>（包括整数和小数）。</p> \n<p><strong>数值</strong>（按顺序）可以分成以下几个部分：</p> \n<ol> \n <li>若干空格</li> \n <li>一个&nbsp;<strong>小数</strong>&nbsp;或者&nbsp;<strong>整数</strong></li> \n <li>（可选）一个&nbsp;<code>\'e\'</code>&nbsp;或&nbsp;<code>\'E\'</code>&nbsp;，后面跟着一个&nbsp;<strong>整数</strong></li> \n <li>若干空格</li> \n</ol> \n<p><strong>小数</strong>（按顺序）可以分成以下几个部分：</p> \n<ol> \n <li>（可选）一个符号字符（<code>\'+\'</code> 或 <code>\'-\'</code>）</li> \n <li>下述格式之一： \n  <ol> \n   <li>至少一位数字，后面跟着一个点 <code>\'.\'</code></li> \n   <li>至少一位数字，后面跟着一个点 <code>\'.\'</code> ，后面再跟着至少一位数字</li> \n   <li>一个点 <code>\'.\'</code> ，后面跟着至少一位数字</li> \n  </ol> </li> \n</ol> \n<p><strong>整数</strong>（按顺序）可以分成以下几个部分：</p> \n<ol> \n <li>（可选）一个符号字符（<code>\'+\'</code> 或 <code>\'-\'</code>）</li> \n <li>至少一位数字</li> \n</ol> \n<p>部分<strong>数值</strong>列举如下：</p> \n<ul> \n <li><code>[\"+100\", \"5e2\", \"-123\", \"3.1416\", \"-1E-16\", \"0123\"]</code></li> \n</ul> \n<p>部分<strong>非数值</strong>列举如下：</p> \n<ul> \n <li><code>[\"12e\", \"1a3.14\", \"1.2.3\", \"+-5\", \"12e+5.4\"]</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"0\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"e\"\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \".\"\n<strong>输出：</strong>false</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"&nbsp;&nbsp;&nbsp;&nbsp;.1&nbsp;&nbsp;\"\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 20</code></li> \n <li><code>s</code> 仅含英文字母（大写和小写），数字（<code>0-9</code>），加号 <code>\'+\'</code> ，减号 <code>\'-\'</code> ，空格 <code>\' \'</code> 或者点 <code>\'.\'</code> 。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 21. 调整数组顺序使奇数位于偶数前面', '<p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>nums =&nbsp;[1,2,3,4]\n<strong>输出：</strong>[1,3,2,4] \n<strong>注：</strong>[3,1,2,4] 也是正确的答案之一。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= nums.length &lt;= 50000</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('剑指 Offer 22. 链表中倒数第k个节点', '<p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p> \n<p>例如，一个链表有 <code>6</code> 个节点，从头节点开始，它们的值依次是 <code>1、2、3、4、5、6</code>。这个链表的倒数第 <code>3</code> 个节点是值为 <code>4</code> 的节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre>给定一个链表: <strong>1-&gt;2-&gt;3-&gt;4-&gt;5</strong>, 和 <em>k </em><strong>= 2</strong>.\n\n返回链表 4<strong>-&gt;5</strong>.</pre>');
INSERT INTO `leecode` VALUES ('剑指 Offer 24. 反转链表', '<p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n<strong>输出:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p><code>0 &lt;= 节点个数 &lt;= 5000</code></p> \n<p>&nbsp;</p> \n<p><strong>注意</strong>：本题与主站 206 题相同：<a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\">https://leetcode-cn.com/problems/reverse-linked-list/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 25. 合并两个排序的链表', '<p>输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。</p> \n<p><strong>示例1：</strong></p> \n<pre><strong>输入：</strong>1-&gt;2-&gt;4, 1-&gt;3-&gt;4\n<strong>输出：</strong>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</pre> \n<p><strong>限制：</strong></p> \n<p><code>0 &lt;= 链表长度 &lt;= 1000</code></p> \n<p>注意：本题与主站 21 题相同：<a href=\"https://leetcode-cn.com/problems/merge-two-sorted-lists/\">https://leetcode-cn.com/problems/merge-two-sorted-lists/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 26. 树的子结构', '<p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p> \n<p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p> \n<p>例如:<br> 给定的树 A:</p> \n<p><code>&nbsp; &nbsp; &nbsp;3<br> &nbsp; &nbsp; / \\<br> &nbsp; &nbsp;4 &nbsp; 5<br> &nbsp; / \\<br> &nbsp;1 &nbsp; 2</code><br> 给定的树 B：</p> \n<p><code>&nbsp; &nbsp;4&nbsp;<br> &nbsp; /<br> &nbsp;1</code><br> 返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>A = [1,2,3], B = [3,1]\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>A = [3,4,5,1,2], B = [4,1]\n<strong>输出：</strong>true</pre> \n<p><strong>限制：</strong></p> \n<p><code>0 &lt;= 节点个数 &lt;= 10000</code></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 27. 二叉树的镜像', '<p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p> \n<p>例如输入：</p> \n<p><code>&nbsp; &nbsp; &nbsp;4<br> &nbsp; &nbsp;/ &nbsp; \\<br> &nbsp; 2 &nbsp; &nbsp; 7<br> &nbsp;/ \\ &nbsp; / \\<br> 1 &nbsp; 3 6 &nbsp; 9</code><br> 镜像输出：</p> \n<p><code>&nbsp; &nbsp; &nbsp;4<br> &nbsp; &nbsp;/ &nbsp; \\<br> &nbsp; 7 &nbsp; &nbsp; 2<br> &nbsp;/ \\ &nbsp; / \\<br> 9 &nbsp; 6 3&nbsp; &nbsp;1</code></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>root = [4,2,7,1,3,6,9]\n<strong>输出：</strong>[4,7,2,9,6,3,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p><code>0 &lt;= 节点个数 &lt;= 1000</code></p> \n<p>注意：本题与主站 226 题相同：<a href=\"https://leetcode-cn.com/problems/invert-binary-tree/\">https://leetcode-cn.com/problems/invert-binary-tree/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 28. 对称的二叉树', '<p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p> \n<p>例如，二叉树&nbsp;[1,2,2,3,4,4,3] 是对称的。</p> \n<p><code>&nbsp; &nbsp; 1<br> &nbsp; &nbsp;/ \\<br> &nbsp; 2 &nbsp; 2<br> &nbsp;/ \\ / \\<br> 3 &nbsp;4 4 &nbsp;3</code><br> 但是下面这个&nbsp;[1,2,2,null,3,null,3] 则不是镜像对称的:</p> \n<p><code>&nbsp; &nbsp; 1<br> &nbsp; &nbsp;/ \\<br> &nbsp; 2 &nbsp; 2<br> &nbsp; &nbsp;\\ &nbsp; \\<br> &nbsp; &nbsp;3 &nbsp; &nbsp;3</code></p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>root = [1,2,2,3,4,4,3]\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = [1,2,2,null,3,null,3]\n<strong>输出：</strong>false</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p><code>0 &lt;= 节点个数 &lt;= 1000</code></p> \n<p>注意：本题与主站 101 题相同：<a href=\"https://leetcode-cn.com/problems/symmetric-tree/\">https://leetcode-cn.com/problems/symmetric-tree/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 29. 顺时针打印矩阵', '<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>输出：</strong>[1,2,3,6,9,8,7,4,5]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>matrix =&nbsp;[[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n<strong>输出：</strong>[1,2,3,4,8,12,11,10,9,5,6,7]\n</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>0 &lt;= matrix.length &lt;= 100</code></li> \n <li><code>0 &lt;= matrix[i].length&nbsp;&lt;= 100</code></li> \n</ul> \n<p>注意：本题与主站 54 题相同：<a href=\"https://leetcode-cn.com/problems/spiral-matrix/\">https://leetcode-cn.com/problems/spiral-matrix/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 30. 包含min函数的栈', '<p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p> \n<p>&nbsp;</p> \n<p><strong>示例:</strong></p> \n<pre>MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.min();   --&gt; 返回 -3.\nminStack.pop();\nminStack.top();      --&gt; 返回 0.\nminStack.min();   --&gt; 返回 -2.\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li>各函数的调用总次数不超过 20000 次</li> \n</ol> \n<p>&nbsp;</p> \n<p>注意：本题与主站 155 题相同：<a href=\"https://leetcode-cn.com/problems/min-stack/\">https://leetcode-cn.com/problems/min-stack/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 31. 栈的压入、弹出序列', '<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n<strong>输出：</strong>true\n<strong>解释：</strong>我们可以按以下顺序执行：\npush(1), push(2), push(3), push(4), pop() -&gt; 4,\npush(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n<strong>输出：</strong>false\n<strong>解释：</strong>1 不能在 2 之前弹出。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>0 &lt;= pushed.length == popped.length &lt;= 1000</code></li> \n <li><code>0 &lt;= pushed[i], popped[i] &lt; 1000</code></li> \n <li><code>pushed</code>&nbsp;是&nbsp;<code>popped</code>&nbsp;的排列。</li> \n</ol> \n<p>注意：本题与主站 946 题相同：<a href=\"https://leetcode-cn.com/problems/validate-stack-sequences/\">https://leetcode-cn.com/problems/validate-stack-sequences/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 32 - I. 从上到下打印二叉树', '<p>从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。</p> \n<p>&nbsp;</p> \n<p>例如:<br> 给定二叉树:&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p> \n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre> \n<p>返回：</p> \n<pre>[3,9,20,15,7]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>节点总数 &lt;= 1000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('剑指 Offer 32 - II. 从上到下打印二叉树 II', '<p>从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。</p> \n<p>&nbsp;</p> \n<p>例如:<br> 给定二叉树:&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p> \n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre> \n<p>返回其层次遍历结果：</p> \n<pre>[\n  [3],\n  [9,20],\n  [15,7]\n]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>节点总数 &lt;= 1000</code></li> \n</ol> \n<p>注意：本题与主站 102 题相同：<a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\">https://leetcode-cn.com/problems/binary-tree-level-order-traversal/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 32 - III. 从上到下打印二叉树 III', '<p>请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。</p> \n<p>&nbsp;</p> \n<p>例如:<br> 给定二叉树:&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p> \n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre> \n<p>返回其层次遍历结果：</p> \n<pre>[\n  [3],\n  [20,9],\n  [15,7]\n]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>节点总数 &lt;= 1000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('剑指 Offer 33. 二叉搜索树的后序遍历序列', '<p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回&nbsp;<code>true</code>，否则返回&nbsp;<code>false</code>。假设输入的数组的任意两个数字都互不相同。</p> \n<p>&nbsp;</p> \n<p>参考以下这颗二叉搜索树：</p> \n<pre>     5\n    / \\\n   2   6\n  / \\\n 1   3</pre> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: </strong>[1,6,3,2,5]\n<strong>输出: </strong>false</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入: </strong>[1,3,2,6,5]\n<strong>输出: </strong>true</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>数组长度 &lt;= 1000</code></li> \n</ol>');
INSERT INTO `leecode` VALUES ('剑指 Offer 34. 二叉树中和为某一值的路径', '<p>输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。</p> \n<p>&nbsp;</p> \n<p><strong>示例:</strong><br> 给定如下二叉树，以及目标和&nbsp;<code>target = 22</code>，</p> \n<pre>              <strong>5</strong>\n             / \\\n            <strong>4</strong>   <strong>8</strong>\n           /   / \\\n          <strong>11</strong>  13  <strong>4</strong>\n         /  \\    / \\\n        7    <strong>2</strong>  <strong>5</strong>   1\n</pre> \n<p>返回:</p> \n<pre>[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>节点总数 &lt;= 10000</code></li> \n</ol> \n<p>注意：本题与主站 113&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/path-sum-ii/\">https://leetcode-cn.com/problems/path-sum-ii/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 35. 复杂链表的复制', '<p>请实现 <code>copyRandomList</code> 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 <code>next</code> 指针指向下一个节点，还有一个 <code>random</code> 指针指向链表中的任意节点或者 <code>null</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e1.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n<strong>输出：</strong>[[7,null],[13,0],[11,4],[10,2],[1,0]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [[1,1],[2,1]]\n<strong>输出：</strong>[[1,1],[2,1]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><strong><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e3.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>head = [[3,null],[3,0],[3,null]]\n<strong>输出：</strong>[[3,null],[3,0],[3,null]]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>head = []\n<strong>输出：</strong>[]\n<strong>解释：</strong>给定的链表为空（空指针），因此返回 null。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>-10000 &lt;= Node.val &lt;= 10000</code></li> \n <li><code>Node.random</code>&nbsp;为空（null）或指向链表中的节点。</li> \n <li>节点数目不超过 1000 。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>注意：</strong>本题与主站 138 题相同：<a href=\"https://leetcode-cn.com/problems/copy-list-with-random-pointer/\">https://leetcode-cn.com/problems/copy-list-with-random-pointer/</a></p> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 36. 二叉搜索树与双向链表', '<p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。</p> \n<p>&nbsp;</p> \n<p>为了让您更好地理解问题，以下面的二叉搜索树为例：</p> \n<p>&nbsp;</p> \n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png\"></p> \n<p>&nbsp;</p> \n<p>我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。</p> \n<p>下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。</p> \n<p>&nbsp;</p> \n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png\"></p> \n<p>&nbsp;</p> \n<p>特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。</p> \n<p>&nbsp;</p> \n<p><strong>注意：</strong>本题与主站 426 题相同：<a href=\"https://leetcode-cn.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/\">https://leetcode-cn.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/</a></p> \n<p><strong>注意：</strong>此题对比原题有改动。</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 37. 序列化二叉树', '<p>请实现两个函数，分别用来序列化和反序列化二叉树。</p> \n<p>你需要设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p> \n<p><strong>提示：</strong>输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅&nbsp;<a href=\"/faq/#binary-tree\">LeetCode 序列化二叉树的格式</a>。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<img style=\"width: 442px; height: 324px;\" src=\"https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>root = [1,2,3,null,null,4,5]\n<strong>输出：</strong>[1,2,3,null,null,4,5]\n</pre> \n<p>&nbsp;</p> \n<p>注意：本题与主站 297 题相同：<a href=\"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/\">https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 38. 字符串的排列', '<p>输入一个字符串，打印出该字符串中字符的所有排列。</p> \n<p>&nbsp;</p> \n<p>你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。</p> \n<p>&nbsp;</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入：</strong>s = \"abc\"\n<strong>输出：[</strong>\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"<strong>]</strong>\n</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p><code>1 &lt;= s 的长度 &lt;= 8</code></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 39. 数组中出现次数超过一半的数字', '<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。</p> \n<p>&nbsp;</p> \n<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> [1, 2, 3, 2, 2, 2, 5, 4, 2]\n<strong>输出:</strong> 2</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p><code>1 &lt;= 数组长度 &lt;= 50000</code></p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 169 题相同：<a href=\"https://leetcode-cn.com/problems/majority-element/\">https://leetcode-cn.com/problems/majority-element/</a></p> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 40. 最小的k个数', '<p>输入整数数组 <code>arr</code> ，找出其中最小的 <code>k</code> 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [3,2,1], k = 2\n<strong>输出：</strong>[1,2] 或者 [2,1]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [0,1,2,1], k = 1\n<strong>输出：</strong>[0]</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>0 &lt;= k &lt;= arr.length &lt;= 10000</code></li> \n <li><code>0 &lt;= arr[i]&nbsp;&lt;= 10000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 41. 数据流中的中位数', '<p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p> \n<p>例如，</p> \n<p>[2,3,4]&nbsp;的中位数是 3</p> \n<p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p> \n<p>设计一个支持以下两种操作的数据结构：</p> \n<ul> \n <li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li> \n <li>double findMedian() - 返回目前所有元素的中位数。</li> \n</ul> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：\n</strong>[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]\n<strong>输出：</strong>[null,null,null,1.50000,null,2.00000]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：\n</strong>[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[2],[],[3],[]]\n<strong>输出：</strong>[null,null,2.00000,null,2.50000]</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ul> \n <li>最多会对&nbsp;<code>addNum、findMedian</code> 进行&nbsp;<code>50000</code>&nbsp;次调用。</li> \n</ul> \n<p>注意：本题与主站 295 题相同：<a href=\"https://leetcode-cn.com/problems/find-median-from-data-stream/\">https://leetcode-cn.com/problems/find-median-from-data-stream/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 42. 连续子数组的最大和', '<p>输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。</p> \n<p>要求时间复杂度为O(n)。</p> \n<p>&nbsp;</p> \n<p><strong>示例1:</strong></p> \n<pre><strong>输入:</strong> nums = [-2,1,-3,4,-1,2,1,-5,4]\n<strong>输出:</strong> 6\n<strong>解释:</strong>&nbsp;连续子数组&nbsp;[4,-1,2,1] 的和最大，为&nbsp;6。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;arr.length &lt;= 10^5</code></li> \n <li><code>-100 &lt;= arr[i] &lt;= 100</code></li> \n</ul> \n<p>注意：本题与主站 53 题相同：<a href=\"https://leetcode-cn.com/problems/maximum-subarray/\">https://leetcode-cn.com/problems/maximum-subarray/</a></p> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 43. 1～n 整数中 1 出现的次数', '<p>输入一个整数 <code>n</code> ，求1～n这n个整数的十进制表示中1出现的次数。</p> \n<p>例如，输入12，1～12这些整数中包含1 的数字有1、10、11和12，1一共出现了5次。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 12\n<strong>输出：</strong>5\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 13\n<strong>输出：</strong>6</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;&nbsp;2^31</code></li> \n</ul> \n<p>注意：本题与主站 233 题相同：<a href=\"https://leetcode-cn.com/problems/number-of-digit-one/\">https://leetcode-cn.com/problems/number-of-digit-one/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 44. 数字序列中某一位的数字', '<p>数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。</p> \n<p>请写一个函数，求任意第n位对应的数字。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 11\n<strong>输出：</strong>0</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>0 &lt;= n &lt;&nbsp;2^31</code></li> \n</ul> \n<p>注意：本题与主站 400 题相同：<a href=\"https://leetcode-cn.com/problems/nth-digit/\">https://leetcode-cn.com/problems/nth-digit/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 45. 把数组排成最小的数', '<p>输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> <code>[10,2]</code>\n<strong>输出:</strong> \"<code>102\"</code></pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> <code>[3,30,34,5,9]</code>\n<strong>输出:</strong> \"<code>3033459\"</code></pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>0 &lt; nums.length &lt;= 100</code></li> \n</ul> \n<p><strong>说明: </strong></p> \n<ul> \n <li>输出结果可能非常大，所以你需要返回一个字符串而不是整数</li> \n <li>拼接起来的数字可能会有前导 0，最后结果不需要去掉前导 0</li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 46. 把数字翻译成字符串', '<p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> 12258\n<strong>输出:</strong> <code>5\n</code><strong>解释:</strong> 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= num &lt; 2<sup>31</sup></code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 47. 礼物的最大价值', '<p>在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> \n<code>[\n&nbsp; [1,3,1],\n&nbsp; [1,5,1],\n&nbsp; [4,2,1]\n]</code>\n<strong>输出:</strong> <code>12\n</code><strong>解释:</strong> 路径 1→3→5→2→1 可以拿到最多价值的礼物</pre> \n<p>&nbsp;</p> \n<p>提示：</p> \n<ul> \n <li><code>0 &lt; grid.length &lt;= 200</code></li> \n <li><code>0 &lt; grid[0].length &lt;= 200</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 48. 最长不含重复字符的子字符串', '<p>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入: </strong>\"abcabcbb\"\n<strong>输出: </strong>3 \n<strong>解释:</strong> 因为无重复字符的最长子串是 <code>\"abc\"，所以其</code>长度为 3。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>\"bbbbb\"\n<strong>输出: </strong>1\n<strong>解释: </strong>因为无重复字符的最长子串是 <code>\"b\"</code>，所以其长度为 1。\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入: </strong>\"pwwkew\"\n<strong>输出: </strong>3\n<strong>解释: </strong>因为无重复字符的最长子串是&nbsp;<code>\"wke\"</code>，所以其长度为 3。\n&nbsp;    请注意，你的答案必须是 <strong>子串 </strong>的长度，<code>\"pwke\"</code>&nbsp;是一个<em>子序列，</em>不是子串。\n</pre> \n<p>&nbsp;</p> \n<p>提示：</p> \n<ul> \n <li><code>s.length &lt;= 40000</code></li> \n</ul> \n<p>注意：本题与主站 3 题相同：<a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 49. 丑数', '<p>我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。</p> \n<p>&nbsp;</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> n = 10\n<strong>输出:</strong> 12\n<strong>解释: </strong><code>1, 2, 3, 4, 5, 6, 8, 9, 10, 12</code> 是前 10 个丑数。</pre> \n<p><strong>说明:&nbsp;</strong>&nbsp;</p> \n<ol> \n <li><code>1</code>&nbsp;是丑数。</li> \n <li><code>n</code>&nbsp;<strong>不超过</strong>1690。</li> \n</ol> \n<p>注意：本题与主站 264 题相同：<a href=\"https://leetcode-cn.com/problems/ugly-number-ii/\">https://leetcode-cn.com/problems/ugly-number-ii/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 50. 第一个只出现一次的字符', '<p>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。</p> \n<p><strong>示例:</strong></p> \n<pre>s = \"abaccdeff\"\n返回 \"b\"\n\ns = \"\" \n返回 \" \"\n</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p><code>0 &lt;= s 的长度 &lt;= 50000</code></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 51. 数组中的逆序对', '<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入</strong>: [7,5,6,4]\n<strong>输出</strong>: 5</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p><code>0 &lt;= 数组长度 &lt;= 50000</code></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 52. 两个链表的第一个公共节点', '<p>输入两个链表，找出它们的第一个公共节点。</p> \n<p>如下面的两个链表<strong>：</strong></p> \n<p><a href=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\"><img style=\"height: 130px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\" alt=\"\"></a></p> \n<p>在节点 c1 开始相交。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png\"><img style=\"height: 130px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png\" alt=\"\"></a></p> \n<pre><strong>输入：</strong>intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n<strong>输出：</strong>Reference of the node with value = 8\n<strong>输入解释：</strong>相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;2：</strong></p> \n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png\"><img style=\"height: 136px; width: 350px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png\" alt=\"\"></a></p> \n<pre><strong>输入：</strong>intersectVal&nbsp;= 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n<strong>输出：</strong>Reference of the node with value = 2\n<strong>输入解释：</strong>相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n</pre> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;3：</strong></p> \n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png\"><img style=\"height: 126px; width: 200px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png\" alt=\"\"></a></p> \n<pre><strong>输入：</strong>intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n<strong>输出：</strong>null\n<strong>输入解释：</strong>从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n<strong>解释：</strong>这两个链表不相交，因此返回 null。\n</pre> \n<p>&nbsp;</p> \n<p><strong>注意：</strong></p> \n<ul> \n <li>如果两个链表没有交点，返回 <code>null</code>.</li> \n <li>在返回结果后，两个链表仍须保持原有的结构。</li> \n <li>可假定整个链表结构中没有循环。</li> \n <li>程序尽量满足 O(<em>n</em>) 时间复杂度，且仅用 O(<em>1</em>) 内存。</li> \n <li>本题与主站 160 题相同：<a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a></li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 53 - I. 在排序数组中查找数字 I', '<p>统计一个数字在排序数组中出现的次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums = [<code>5,7,7,8,8,10]</code>, target = 8\n<strong>输出:</strong> 2</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> nums = [<code>5,7,7,8,8,10]</code>, target = 6\n<strong>输出:</strong> 0</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>-10<sup>9</sup>&nbsp;&lt;= nums[i]&nbsp;&lt;= 10<sup>9</sup></code></li> \n <li><code>nums</code>&nbsp;是一个非递减数组</li> \n <li><code>-10<sup>9</sup>&nbsp;&lt;= target&nbsp;&lt;= 10<sup>9</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>注意：</strong>本题与主站 34 题相同（仅返回值不同）：<a href=\"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/\">https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 53 - II. 0～n-1中缺失的数字', '<p>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [0,1,3]\n<strong>输出:</strong> 2\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> [0,1,2,3,4,5,6,7,9]\n<strong>输出:</strong> 8</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p><code>1 &lt;= 数组长度 &lt;= 10000</code></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 54. 二叉搜索树的第k大节点', '<p>给定一棵二叉搜索树，请找出其中第k大的节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n&nbsp;  2\n<strong>输出:</strong> 4</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n<strong>输出:</strong> 4</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p>1 ≤ k ≤ 二叉搜索树元素个数</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 55 - I. 二叉树的深度', '<p>输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。</p> \n<p>例如：</p> \n<p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p> \n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7</pre> \n<p>返回它的最大深度&nbsp;3 。</p> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ol> \n <li><code>节点总数 &lt;= 10000</code></li> \n</ol> \n<p>注意：本题与主站 104&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/\">https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 55 - II. 平衡二叉树', '<p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<p>给定二叉树 <code>[3,9,20,null,null,15,7]</code></p> \n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7</pre> \n<p>返回 <code>true</code> 。<br> <br> <strong>示例 2:</strong></p> \n<p>给定二叉树 <code>[1,2,2,3,3,null,null,4,4]</code></p> \n<pre>       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n</pre> \n<p>返回&nbsp;<code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>0 &lt;= 树的结点个数 &lt;= 10000</code></li> \n</ul> \n<p>注意：本题与主站 110&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/balanced-binary-tree/\">https://leetcode-cn.com/problems/balanced-binary-tree/</a></p> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 56 - I. 数组中数字出现的次数', '<p>一个整型数组 <code>nums</code> 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [4,1,4,6]\n<strong>输出：</strong>[1,6] 或 [6,1]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,10,4,1,4,3,3]\n<strong>输出：</strong>[2,10] 或 [10,2]</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>2 &lt;= nums.length &lt;= 10000</code></li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 56 - II. 数组中数字出现的次数 II', '<p>在一个数组 <code>nums</code> 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [3,4,3,3]\n<strong>输出：</strong>4\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [9,1,7,9,7,9,7]\n<strong>输出：</strong>1</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10000</code></li> \n <li><code>1 &lt;= nums[i] &lt; 2^31</code></li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 57 - II. 和为s的连续正数序列', '<p>输入一个正整数 <code>target</code> ，输出所有和为 <code>target</code> 的连续正整数序列（至少含有两个数）。</p> \n<p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>target = 9\n<strong>输出：</strong>[[2,3,4],[4,5]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>target = 15\n<strong>输出：</strong>[[1,2,3,4,5],[4,5,6],[7,8]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= target &lt;= 10^5</code></li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 57. 和为s的两个数字', '<p>输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [2,7,11,15], target = 9\n<strong>输出：</strong>[2,7] 或者 [7,2]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [10,26,30,31,47,60], target = 40\n<strong>输出：</strong>[10,30] 或者 [30,10]\n</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10^5</code></li> \n <li><code>1 &lt;= nums[i]&nbsp;&lt;= 10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 58 - I. 翻转单词顺序', '<p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串\"I am a student. \"，则输出\"student. a am I\"。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> \"<code>the sky is blue</code>\"\n<strong>输出:&nbsp;</strong>\"<code>blue is sky the</code>\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> \" &nbsp;hello world! &nbsp;\"\n<strong>输出:&nbsp;</strong>\"world! hello\"\n<strong>解释: </strong>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入:</strong> \"a good &nbsp; example\"\n<strong>输出:&nbsp;</strong>\"example good a\"\n<strong>解释: </strong>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n</pre> \n<p>&nbsp;</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li>无空格字符构成一个单词。</li> \n <li>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</li> \n <li>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</li> \n</ul> \n<p><strong>注意：</strong>本题与主站 151 题相同：<a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string/\">https://leetcode-cn.com/problems/reverse-words-in-a-string/</a></p> \n<p><strong>注意：</strong>此题对比原题有改动</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 58 - II. 左旋转字符串', '<p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串\"abcdefg\"和数字2，该函数将返回左旋转两位得到的结果\"cdefgab\"。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> s = \"abcdefg\", k = 2\n<strong>输出:&nbsp;</strong>\"cdefgab\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> s = \"lrloseumgh\", k = 6\n<strong>输出:&nbsp;</strong>\"umghlrlose\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt; s.length &lt;= 10000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 59 - I. 滑动窗口的最大值', '<p>给定一个数组 <code>nums</code> 和滑动窗口的大小 <code>k</code>，请找出所有滑动窗口里的最大值。</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> <em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>, 和 <em>k</em> = 3\n<strong>输出: </strong><code>[3,3,5,5,6,7] \n<strong>解释: </strong></code>\n  滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<p>你可以假设 <em>k </em>总是有效的，在输入数组不为空的情况下，1 ≤ k ≤&nbsp;输入数组的大小。</p> \n<p>注意：本题与主站 239 题相同：<a href=\"https://leetcode-cn.com/problems/sliding-window-maximum/\">https://leetcode-cn.com/problems/sliding-window-maximum/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 59 - II. 队列的最大值', '<p>请定义一个队列并实现函数 <code>max_value</code> 得到队列里的最大值，要求函数<code>max_value</code>、<code>push_back</code> 和 <code>pop_front</code> 的<strong>均摊</strong>时间复杂度都是O(1)。</p> \n<p>若队列为空，<code>pop_front</code> 和 <code>max_value</code>&nbsp;需要返回 -1</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> \n[\"MaxQueue\",\"push_back\",\"push_back\",\"max_value\",\"pop_front\",\"max_value\"]\n[[],[1],[2],[],[],[]]\n<strong>输出:&nbsp;</strong>[null,null,null,2,1,2]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> \n[\"MaxQueue\",\"pop_front\",\"max_value\"]\n[[],[],[]]\n<strong>输出:&nbsp;</strong>[null,-1,-1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= push_back,pop_front,max_value的总操作数&nbsp;&lt;= 10000</code></li> \n <li><code>1 &lt;= value &lt;= 10^5</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 60. n个骰子的点数', '<p>把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。</p> \n<p>&nbsp;</p> \n<p>你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> 1\n<strong>输出:</strong> [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> 2\n<strong>输出:</strong> [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p><code>1 &lt;= n &lt;= 11</code></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 61. 扑克牌中的顺子', '<p>从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> [1,2,3,4,5]\n<strong>输出:</strong> True</pre> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> [0,0,1,2,5]\n<strong>输出:</strong> True</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p>数组长度为 5&nbsp;</p> \n<p>数组的数取值为 [0, 13] .</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 62. 圆圈中最后剩下的数字', '<p>0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。</p> \n<p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> n = 5, m = 3\n<strong>输出:&nbsp;</strong>3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> n = 10, m = 17\n<strong>输出:&nbsp;</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= n&nbsp;&lt;= 10^5</code></li> \n <li><code>1 &lt;= m &lt;= 10^6</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 63. 股票的最大利润', '<p>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [7,1,5,3,6,4]\n<strong>输出:</strong> 5\n<strong>解释: </strong>在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> [7,6,4,3,1]\n<strong>输出:</strong> 0\n<strong>解释: </strong>在这种情况下, 没有交易完成, 所以最大利润为 0。</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<p><code>0 &lt;= 数组长度 &lt;= 10^5</code></p> \n<p>&nbsp;</p> \n<p><strong>注意：</strong>本题与主站 121 题相同：<a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/\">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 64. 求1+2+…+n', '<p>求 <code>1+2+...+n</code> ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> n = 3\n<strong>输出:&nbsp;</strong>6\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> n = 9\n<strong>输出:&nbsp;</strong>45\n</pre> \n<p>&nbsp;</p> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>1 &lt;= n&nbsp;&lt;= 10000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 65. 不用加减乘除做加法', '<p>写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。</p> \n<p>&nbsp;</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> a = 1, b = 1\n<strong>输出:</strong> 2</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>a</code>,&nbsp;<code>b</code>&nbsp;均可能是负数或 0</li> \n <li>结果不会溢出 32 位整数</li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 66. 构建乘积数组', '<p>给定一个数组 <code>A[0,1,…,n-1]</code>，请构建一个数组 <code>B[0,1,…,n-1]</code>，其中&nbsp;<code>B[i]</code> 的值是数组 <code>A</code> 中除了下标 <code>i</code> 以外的元素的积, 即&nbsp;<code>B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]</code>。不能使用除法。</p> \n<p>&nbsp;</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> [1,2,3,4,5]\n<strong>输出:</strong> [120,60,40,30,24]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>所有元素乘积之和不会溢出 32 位整数</li> \n <li><code>a.length &lt;= 100000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer 67. 把字符串转换成整数', '<p>写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。</p> \n<p>&nbsp;</p> \n<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p> \n<p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p> \n<p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p> \n<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p> \n<p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p> \n<p><strong>说明：</strong></p> \n<p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为&nbsp;[−2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>− 1]。如果数值超过这个范围，请返回 &nbsp;INT_MAX (2<sup>31&nbsp;</sup>− 1) 或&nbsp;INT_MIN (−2<sup>31</sup>) 。</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> \"42\"\n<strong>输出:</strong> 42\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> \"   -42\"\n<strong>输出:</strong> -42\n<strong>解释: </strong>第一个非空白字符为 \'-\', 它是一个负号。\n&nbsp;    我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n</pre> \n<p><strong>示例&nbsp;3:</strong></p> \n<pre><strong>输入:</strong> \"4193 with words\"\n<strong>输出:</strong> 4193\n<strong>解释:</strong> 转换截止于数字 \'3\' ，因为它的下一个字符不为数字。\n</pre> \n<p><strong>示例&nbsp;4:</strong></p> \n<pre><strong>输入:</strong> \"words and 987\"\n<strong>输出:</strong> 0\n<strong>解释:</strong> 第一个非空字符是 \'w\', 但它不是数字或正、负号。\n     因此无法执行有效的转换。</pre> \n<p><strong>示例&nbsp;5:</strong></p> \n<pre><strong>输入:</strong> \"-91283472332\"\n<strong>输出:</strong> -2147483648\n<strong>解释:</strong> 数字 \"-91283472332\" 超过 32 位有符号整数范围。 \n&nbsp;    因此返回 INT_MIN (−2<sup>31</sup>) 。\n</pre> \n<p>&nbsp;</p> \n<p>注意：本题与主站 8 题相同：<a href=\"https://leetcode-cn.com/problems/string-to-integer-atoi/\">https://leetcode-cn.com/problems/string-to-integer-atoi/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 68 - I. 二叉搜索树的最近公共祖先', '<p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p> \n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p> \n<p>例如，给定如下二叉搜索树:&nbsp; root =&nbsp;[6,2,8,0,4,7,9,null,null,3,5]</p> \n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n<strong>输出:</strong> 6 \n<strong>解释: </strong>节点 <code>2 </code>和节点 <code>8 </code>的最近公共祖先是 <code>6。</code>\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n<strong>输出:</strong> 2\n<strong>解释: </strong>节点 <code>2</code> 和节点 <code>4</code> 的最近公共祖先是 <code>2</code>, 因为根据定义最近公共祖先节点可以为节点本身。</pre> \n<p>&nbsp;</p> \n<p><strong>说明:</strong></p> \n<ul> \n <li>所有节点的值都是唯一的。</li> \n <li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li> \n</ul> \n<p>注意：本题与主站 235 题相同：<a href=\"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/\">https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer 68 - II. 二叉树的最近公共祖先', '<p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p> \n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p> \n<p>例如，给定如下二叉树:&nbsp; root =&nbsp;[3,5,1,6,2,0,8,null,null,7,4]</p> \n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/binarytree.png\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n<strong>输出:</strong> 3\n<strong>解释: </strong>节点 <code>5 </code>和节点 <code>1 </code>的最近公共祖先是节点 <code>3。</code>\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n<strong>输出:</strong> 5\n<strong>解释: </strong>节点 <code>5 </code>和节点 <code>4 </code>的最近公共祖先是节点 <code>5。</code>因为根据定义最近公共祖先节点可以为节点本身。\n</pre> \n<p>&nbsp;</p> \n<p><strong>说明:</strong></p> \n<ul> \n <li>所有节点的值都是唯一的。</li> \n <li>p、q 为不同节点且均存在于给定的二叉树中。</li> \n</ul> \n<p>注意：本题与主站 236 题相同：<a href=\"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/\">https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 001. 整数除法', '<p>给定两个整数 <code>a</code> 和 <code>b</code> ，求它们的除法的商 <code>a/b</code> ，要求不得使用乘号 <code>\'*\'</code>、除号 <code>\'/\'</code> 以及求余符号 <code>\'%\'</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>注意：</strong></p> \n<ul> \n <li>整数除法的结果应当截去（<code>truncate</code>）其小数部分，例如：<code>truncate(8.345) = 8</code>&nbsp;以及&nbsp;<code>truncate(-2.7335) = -2</code></li> \n <li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 <code>[−2<sup>31</sup>,&nbsp;2<sup>31</sup>−1]</code>。本题中，如果除法结果溢出，则返回 <code>2<sup>31&nbsp;</sup>− 1</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>a = 15, b = 2\n<strong>输出：</strong>7\n<strong><span style=\"white-space: pre-wrap;\">解释：</span></strong>15/2 = truncate(7.5) = 7\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>a = 7, b = -3\n<strong>输出：</strong><span style=\"white-space: pre-wrap;\">-2</span>\n<strong><span style=\"white-space: pre-wrap;\">解释：</span></strong>7/-3 = truncate(-2.33333..) = -2</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>a = 0, b = 1\n<strong>输出：</strong><span style=\"white-space: pre-wrap;\">0</span></pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>a = 1, b = 1\n<strong>输出：</strong><span style=\"white-space: pre-wrap;\">1</span></pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>-2<sup>31</sup>&nbsp;&lt;= a, b &lt;= 2<sup>31</sup>&nbsp;- 1</code></li> \n <li><code>b != 0</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 29&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/divide-two-integers/\">https://leetcode-cn.com/problems/divide-two-integers/</a></p> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 002. 二进制加法', '<p>给定两个 01 字符串&nbsp;<code>a</code>&nbsp;和&nbsp;<code>b</code>&nbsp;，请计算它们的和，并以二进制字符串的形式输出。</p> \n<p>输入为 <strong>非空 </strong>字符串且只包含数字&nbsp;<code>1</code>&nbsp;和&nbsp;<code>0</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> a = \"11\", b = \"10\"\n<strong>输出:</strong> \"101\"</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> a = \"1010\", b = \"1011\"\n<strong>输出:</strong> \"10101\"</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>每个字符串仅由字符 <code>\'0\'</code> 或 <code>\'1\'</code> 组成。</li> \n <li><code>1 &lt;= a.length, b.length &lt;= 10^4</code></li> \n <li>字符串如果不是 <code>\"0\"</code> ，就都不含前导零。</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 67&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/add-binary/\">https://leetcode-cn.com/problems/add-binary/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 003. 前 n 个数字二进制中 1 的个数', '<p>给定一个非负整数 <code>n</code><b>&nbsp;</b>，请计算 <code>0</code> 到 <code>n</code> 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>n =<strong> </strong>2\n<strong>输出: </strong>[0,1,1]\n<strong>解释: \n</strong>0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入: </strong>n =<strong> </strong>5\n<strong>输出: </strong><code>[0,1,1,2,1,2]\n</code><span style=\"white-space: pre-wrap;\"><strong>解释:</strong>\n</span>0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n3 --&gt; 11\n4 --&gt; 100\n5 --&gt; 101\n</pre> \n<p>&nbsp;</p> \n<p><strong>说明 :</strong></p> \n<ul> \n <li><code>0 &lt;= n &lt;= 10<sup>5</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶:</strong></p> \n<ul> \n <li>给出时间复杂度为&nbsp;<code>O(n*sizeof(integer))</code><strong>&nbsp;</strong>的解答非常容易。但你可以在线性时间&nbsp;<code>O(n)</code><strong>&nbsp;</strong>内用一趟扫描做到吗？</li> \n <li>要求算法的空间复杂度为&nbsp;<code>O(n)</code>&nbsp;。</li> \n <li>你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的&nbsp;<code>__builtin_popcount</code><strong>&nbsp;</strong>）来执行此操作。</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 338&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/counting-bits/\">https://leetcode-cn.com/problems/counting-bits/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 004. 只出现一次的数字', '<p>给你一个整数数组&nbsp;<code>nums</code> ，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次 。</strong>请你找出并返回那个只出现了一次的元素。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [2,2,3,2]\n<strong>输出：</strong>3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,1,0,1,0,1,100]\n<strong>输出：</strong>100\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>nums</code> 中，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次</strong></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 137&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/single-number-ii/\">https://leetcode-cn.com/problems/single-number-ii/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 005. 单词长度的最大乘积', '<p>给定一个字符串数组&nbsp;<code>words</code>，请计算当两个字符串 <code>words[i]</code> 和 <code>words[j]</code> 不包含相同字符时，它们长度的乘积的最大值。假设字符串中只包含英语的小写字母。如果没有不包含相同字符的一对字符串，返回 0。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> words = <code>[\"abcw\",\"baz\",\"foo\",\"bar\",\"fxyz\",\"abcdef\"]</code>\n<strong>输出: </strong><code>16 \n<strong>解释:</strong> 这两个单词为<strong> </strong></code><code>\"abcw\", \"fxyz\"</code>。它们不包含相同字符，且长度的乘积最大。</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> words = <code>[\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]</code>\n<strong>输出: </strong><code>4 \n<strong>解释: </strong></code>这两个单词为 <code>\"ab\", \"cd\"</code>。</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> words = <code>[\"a\",\"aa\",\"aaa\",\"aaaa\"]</code>\n<strong>输出: </strong><code>0 \n<strong>解释: </strong>不存在这样的两个单词。</code>\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= words.length &lt;= 1000</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 1000</code></li> \n <li><code>words[i]</code>&nbsp;仅包含小写字母</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 318&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/\">https://leetcode-cn.com/problems/maximum-product-of-word-lengths/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 006. 排序数组中两个数字之和', '<p>给定一个已按照<strong><em> </em>升序排列&nbsp; </strong>的整数数组&nbsp;<code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数&nbsp;<code>target</code> 。</p> \n<p>函数应该以长度为 <code>2</code> 的整数数组的形式返回这两个数的下标值<em>。</em><code>numbers</code> 的下标 <strong>从 0&nbsp;开始计数</strong> ，所以答案数组应当满足 <code>0&nbsp;&lt;= answer[0] &lt; answer[1] &lt;&nbsp;numbers.length</code>&nbsp;。</p> \n<p>假设数组中存在且只存在一对符合条件的数字，同时一个数字不能使用两次。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>numbers = [1,2,4,6,10], target = 8\n<strong>输出：</strong>[1,3]\n<strong>解释：</strong>2 与 6 之和等于目标数 8 。因此 index1 = 1, index2 = 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>numbers = [2,3,4], target = 6\n<strong>输出：</strong>[0,2]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>numbers = [-1,0], target = -1\n<strong>输出：</strong>[0,1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= numbers.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li> \n <li><code>numbers</code> 按 <strong>递增顺序</strong> 排列</li> \n <li><code>-1000 &lt;= target &lt;= 1000</code></li> \n <li>仅存在一个有效答案</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 167 题相似（下标起点不同）：<a href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/\">https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 007. 数组中和为 0 的三个数', '<p>给定一个包含 <code>n</code> 个整数的数组&nbsp;<code>nums</code>，判断&nbsp;<code>nums</code>&nbsp;中是否存在三个元素&nbsp;<code>a</code> ，<code>b</code> ，<code>c</code> <em>，</em>使得&nbsp;<code>a + b + c = 0</code> ？请找出所有和为 <code>0</code> 且&nbsp;<strong>不重复&nbsp;</strong>的三元组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [-1,0,1,2,-1,-4]\n<strong>输出：</strong>[[-1,-1,2],[-1,0,1]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = []\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [0]\n<strong>输出：</strong>[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= nums.length &lt;= 3000</code></li> \n <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 15&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/3sum/\">https://leetcode-cn.com/problems/3sum/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 008. 和大于等于 target 的最短子数组', '<p>给定一个含有&nbsp;<code>n</code><strong>&nbsp;</strong>个正整数的数组和一个正整数 <code>target</code><strong> 。</strong></p> \n<p>找出该数组中满足其和<strong> </strong><code>≥ target</code><strong> </strong>的长度最小的 <strong>连续子数组</strong>&nbsp;<code>[nums<sub>l</sub>, nums<sub>l+1</sub>, ..., nums<sub>r-1</sub>, nums<sub>r</sub>]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>target = 7, nums = [2,3,1,2,4,3]\n<strong>输出：</strong>2\n<strong>解释：</strong>子数组&nbsp;<code>[4,3]</code>&nbsp;是该条件下的长度最小的子数组。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>target = 4, nums = [1,4,4]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>target = 11, nums = [1,1,1,1,1,1,1,1]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p>提示：</p> \n<ul> \n <li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p>进阶：</p> \n<ul> \n <li>如果你已经实现<em> </em><code>O(n)</code> 时间复杂度的解法, 请尝试设计一个 <code>O(n log(n))</code> 时间复杂度的解法。</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 209&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/minimum-size-subarray-sum/\">https://leetcode-cn.com/problems/minimum-size-subarray-sum/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 009. 乘积小于 K 的子数组', '<p>给定一个正整数数组&nbsp;<code>nums</code>和整数 <code>k</code>&nbsp;，请找出该数组内乘积小于&nbsp;<code>k</code>&nbsp;的连续的子数组的个数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums = [10,5,2,6], k = 100\n<strong>输出:</strong> 8\n<strong>解释:</strong> 8 个乘积小于 100 的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。\n需要注意的是 [10,5,2] 并不是乘积小于100的子数组。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> nums = [1,2,3], k = 0\n<strong>输出:</strong> 0</pre> \n<p>&nbsp;</p> \n<p><strong>提示:&nbsp;</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> \n <li><code>0 &lt;= k &lt;= 10<sup>6</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 713&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/subarray-product-less-than-k/\">https://leetcode-cn.com/problems/subarray-product-less-than-k/</a>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 010. 和为 k 的子数组', '<p>给定一个整数数组和一个整数&nbsp;<code>k</code><strong> ，</strong>请找到该数组中和为&nbsp;<code>k</code><strong>&nbsp;</strong>的连续子数组的个数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1 :</strong></p> \n<pre><strong>输入:</strong>nums = [1,1,1], k = 2\n<strong>输出:</strong> 2\n<strong>解释:</strong> 此题 [1,1] 与 [1,1] 为两种不同的情况\n</pre> \n<p><strong>示例 2&nbsp;:</strong></p> \n<pre><strong>输入:</strong>nums = [1,2,3], k = 3\n<strong>输出:</strong> 2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> \n <li> <p><code>-10<sup>7</sup>&nbsp;&lt;= k &lt;= 10<sup>7</sup></code></p> </li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 560&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/subarray-sum-equals-k/\">https://leetcode-cn.com/problems/subarray-sum-equals-k/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 011. 0 和 1 个数相同的子数组', '<p>给定一个二进制数组 <code>nums</code> , 找到含有相同数量的 <code>0</code> 和 <code>1</code> 的最长连续子数组，并返回该子数组的长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums = [0,1]\n<strong>输出:</strong> 2\n<strong>说明:</strong> [0, 1] 是具有相同数量 0 和 1 的最长连续子数组。</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> nums = [0,1,0]\n<strong>输出:</strong> 2\n<strong>说明:</strong> [0, 1] (或 [1, 0]) 是具有相同数量 0 和 1 的最长连续子数组。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>nums[i]</code> 不是 <code>0</code> 就是 <code>1</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 525&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/contiguous-array/\">https://leetcode-cn.com/problems/contiguous-array/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 012. 左右两边子数组的和相等', '<p>给你一个整数数组&nbsp;<code>nums</code> ，请计算数组的 <strong>中心下标 </strong>。</p> \n<p>数组<strong> 中心下标</strong><strong> </strong>是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p> \n<p>如果中心下标位于数组最左端，那么左侧数之和视为 <code>0</code> ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p> \n<p>如果数组有多个中心下标，应该返回 <strong>最靠近左边</strong> 的那一个。如果数组不存在中心下标，返回 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,7,3,6,5,6]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n中心下标是 3 。\n左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，\n右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1, 2, 3]\n<strong>输出：</strong>-1\n<strong>解释：</strong>\n数组中不存在满足此条件的中心下标。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [2, 1, -1]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n中心下标是 0 。\n左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），\n右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 724&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/find-pivot-index/\">https://leetcode-cn.com/problems/find-pivot-index/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 013. 二维子矩阵的和', '<p><big><small>给定一个二维矩阵 <code>matrix</code>，</small></big>以下类型的多个请求：</p> \n<ul> \n <li><big><small>计算其子矩形范围内元素的总和，该子矩阵的左上角为 <code>(row1,&nbsp;col1)</code> ，右下角为 <code>(row2,&nbsp;col2)</code> 。</small></big></li> \n</ul> \n<p>实现 <code>NumMatrix</code> 类：</p> \n<ul> \n <li><code>NumMatrix(int[][] matrix)</code>&nbsp;给定整数矩阵 <code>matrix</code> 进行初始化</li> \n <li><code>int sumRegion(int row1, int col1, int row2, int col2)</code>&nbsp;返回<big><small>左上角</small></big><big><small> <code>(row1,&nbsp;col1)</code>&nbsp;、右下角&nbsp;<code>(row2,&nbsp;col2)</code></small></big>&nbsp;的子矩阵的元素总和。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 200px;\" src=\"https://pic.leetcode-cn.com/1626332422-wUpUHT-image.png\"></p> \n<pre><strong>输入:</strong> \n[\"NumMatrix\",\"sumRegion\",\"sumRegion\",\"sumRegion\"]\n[[[[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]],[2,1,4,3],[1,1,2,2],[1,2,2,4]]\n<strong>输出:</strong> \n[null, 8, 11, 12]\n\n<strong>解释:</strong>\nNumMatrix numMatrix = new NumMatrix([[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (红色矩形框的元素总和)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (绿色矩形框的元素总和)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (蓝色矩形框的元素总和)\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= m,&nbsp;n &lt;=&nbsp;200</code></li> \n <li><code>-10<sup>5</sup>&nbsp;&lt;= matrix[i][j] &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= row1 &lt;= row2 &lt; m</code></li> \n <li><code>0 &lt;= col1 &lt;= col2 &lt; n</code></li> \n <li>最多调用 <code>10<sup>4</sup></code> 次&nbsp;<code>sumRegion</code> 方法</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 304&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/range-sum-query-2d-immutable/\">https://leetcode-cn.com/problems/range-sum-query-2d-immutable/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 014. 字符串中的变位词', '<p>给定两个字符串&nbsp;<code>s1</code>&nbsp;和&nbsp;<code>s2</code>，写一个函数来判断 <code>s2</code> 是否包含 <code>s1</code><strong>&nbsp;</strong>的某个变位词。</p> \n<p>换句话说，第一个字符串的排列之一是第二个字符串的 <strong>子串</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: </strong>s1 = \"ab\" s2 = \"eidbaooo\"\n<strong>输出: </strong>True\n<strong>解释:</strong> s2 包含 s1 的排列之一 (\"ba\").\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入: </strong>s1= \"ab\" s2 = \"eidboaoo\"\n<strong>输出:</strong> False\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s1.length, s2.length &lt;= 10<sup>4</sup></code></li> \n <li><code>s1</code> 和 <code>s2</code> 仅包含小写字母</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 567&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/permutation-in-string/\">https://leetcode-cn.com/problems/permutation-in-string/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 015. 字符串中的所有变位词', '<p>给定两个字符串&nbsp;<code>s</code>&nbsp;和<b>&nbsp;</b><code>p</code>，找到&nbsp;<code>s</code><strong>&nbsp;</strong>中所有 <code>p</code> 的&nbsp;<strong>变位词&nbsp;</strong>的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p> \n<p><strong>变位词 </strong>指字母相同，但排列不同的字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入: </strong>s = \"cbaebabacd\", p = \"abc\"\n<strong>输出: </strong>[0,6]\n<strong>解释:</strong>\n起始索引等于 0 的子串是 \"cba\", 它是 \"abc\" 的变位词。\n起始索引等于 6 的子串是 \"bac\", 它是 \"abc\" 的变位词。\n</pre> \n<p><strong>&nbsp;示例 2:</strong></p> \n<pre><strong>输入: </strong>s = \"abab\", p = \"ab\"\n<strong>输出: </strong>[0,1,2]\n<strong>解释:</strong>\n起始索引等于 0 的子串是 \"ab\", 它是 \"ab\" 的变位词。\n起始索引等于 1 的子串是 \"ba\", 它是 \"ab\" 的变位词。\n起始索引等于 2 的子串是 \"ab\", 它是 \"ab\" 的变位词。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= s.length, p.length &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>s</code>&nbsp;和 <code>p</code> 仅包含小写字母</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 438&nbsp;题相同：&nbsp;<a style=\"background-color: rgb(255, 255, 255);\" href=\"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/\">https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 016. 不含重复字符的最长子字符串', '<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的&nbsp;<strong>最长连续子字符串&nbsp;</strong>的长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入: </strong>s = \"abcabcbb\"\n<strong>输出: </strong>3 \n<strong>解释:</strong> 因为无重复字符的最长子字符串是 <code>\"abc\"，所以其</code>长度为 3。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>s = \"bbbbb\"\n<strong>输出: </strong>1\n<strong>解释: </strong>因为无重复字符的最长子字符串是 <code>\"b\"</code>，所以其长度为 1。\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入: </strong>s = \"pwwkew\"\n<strong>输出: </strong>3\n<strong>解释: </strong>因为无重复字符的最长子串是&nbsp;<code>\"wke\"</code>，所以其长度为 3。\n&nbsp;    请注意，你的答案必须是 <strong>子串 </strong>的长度，<code>\"pwke\"</code>&nbsp;是一个<em>子序列，</em>不是子串。\n</pre> \n<p><strong>示例 4:</strong></p> \n<pre><strong>输入: </strong>s = \"\"\n<strong>输出: </strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> \n <li><code>s</code>&nbsp;由英文字母、数字、符号和空格组成</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 3&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 017. 含有所有字符的最短字符串', '<p>给定两个字符串 <code>s</code> 和&nbsp;<code>t</code> 。返回 <code>s</code> 中包含&nbsp;<code>t</code>&nbsp;的所有字符的最短子字符串。如果 <code>s</code> 中不存在符合条件的子字符串，则返回空字符串 <code>\"\"</code> 。</p> \n<p>如果 <code>s</code> 中存在多个符合条件的子字符串，返回任意一个。</p> \n<p>&nbsp;</p> \n<p><strong>注意： </strong>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"ADOBECODEBANC\", t = \"ABC\"\n<strong>输出：</strong>\"BANC\" \n<strong>解释：</strong>最短子字符串 \"BANC\" 包含了字符串 t 的所有字符 \'A\'、\'B\'、\'C\'</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"a\", t = \"a\"\n<strong>输出：</strong>\"a\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"a\", t = \"aa\"\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>t 中两个字符 \'a\' 均应包含在 s 的子串中，因此没有符合条件的子字符串，返回空字符串。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length, t.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s</code> 和 <code>t</code> 由英文字母组成</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你能设计一个在 <code>o(n)</code> 时间内解决此问题的算法吗？</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 76&nbsp;题相似（本题答案不唯一）：<a href=\"https://leetcode-cn.com/problems/minimum-window-substring/\">https://leetcode-cn.com/problems/minimum-window-substring/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 018. 有效的回文', '<p>给定一个字符串 <code>s</code> ，验证 <code>s</code>&nbsp;是否是&nbsp;<strong>回文串&nbsp;</strong>，只考虑字母和数字字符，可以忽略字母的大小写。</p> \n<p>本题中，将空字符串定义为有效的&nbsp;<strong>回文串&nbsp;</strong>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>s =<strong> </strong>\"A man, a plan, a canal: Panama\"\n<strong>输出:</strong> true\n<strong>解释：</strong>\"amanaplanacanalpanama\" 是回文串</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> s = \"race a car\"\n<strong>输出:</strong> false\n解释：\"raceacar\" 不是回文串</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li> \n <li>字符串 <code>s</code> 由 ASCII 字符组成</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 125&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/valid-palindrome/\">https://leetcode-cn.com/problems/valid-palindrome/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 019. 最多删除一个字符得到回文', '<p>给定一个非空字符串&nbsp;<code>s</code>，请判断如果&nbsp;<strong>最多 </strong>从字符串中删除一个字符能否得到一个回文字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> s = \"aba\"\n<strong>输出:</strong> true\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> s = \"abca\"\n<strong>输出:</strong> true\n<strong>解释:</strong> 可以删除 \"c\" 字符 或者 \"b\" 字符\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> s = \"abc\"\n<strong>输出:</strong> false</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> \n <li><code>s</code> 由小写英文字母组成</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 680&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/valid-palindrome-ii/\">https://leetcode-cn.com/problems/valid-palindrome-ii/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 020. 回文子字符串的个数', '<p>给定一个字符串 <code>s</code> ，请计算这个字符串中有多少个回文子字符串。</p> \n<p>具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"abc\"\n<strong>输出：</strong>3\n<strong>解释：</strong>三个回文子串: \"a\", \"b\", \"c\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s =<strong> </strong>\"aaa\"\n<strong>输出：</strong>6\n<strong>解释：</strong>6个回文子串: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 1000</code></li> \n <li><code>s</code> 由小写英文字母组成</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 647 题相同：<a href=\"https://leetcode-cn.com/problems/palindromic-substrings/\">https://leetcode-cn.com/problems/palindromic-substrings/</a>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 021. 删除链表的倒数第 n 个结点', '<p>给定一个链表，删除链表的倒数第&nbsp;<code>n</code><em>&nbsp;</em>个结点，并且返回链表的头结点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 542px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [1,2,3,4,5], n = 2\n<strong>输出：</strong>[1,2,3,5]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>head = [1], n = 1\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>head = [1,2], n = 1\n<strong>输出：</strong>[1]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表中结点的数目为 <code>sz</code></li> \n <li><code>1 &lt;= sz &lt;= 30</code></li> \n <li><code>0 &lt;= Node.val &lt;= 100</code></li> \n <li><code>1 &lt;= n &lt;= sz</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>能尝试使用一趟扫描实现吗？</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 19&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/\">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 022. 链表中环的入口节点', '<p>给定一个链表，返回链表开始入环的第一个节点。 从链表的头节点开始沿着 <code>next</code> 指针进入环的第一个节点为环的入口节点。如果链表无环，则返回&nbsp;<code>null</code>。</p> \n<p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意，<code>pos</code> 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</strong></p> \n<p><strong>说明：</strong>不允许修改给定的链表。</p> \n<ul> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 97px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [3,2,0,-4], pos = 1\n<strong>输出：</strong>返回索引为 1 的链表节点\n<strong>解释：</strong>链表中有一个环，其尾部连接到第二个节点。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<p><img style=\"height: 74px; width: 141px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [1,2], pos = 0\n<strong>输出：</strong>返回索引为 0 的链表节点\n<strong>解释：</strong>链表中有一个环，其尾部连接到第一个节点。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 45px; width: 45px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [1], pos = -1\n<strong>输出：</strong>返回 null\n<strong>解释：</strong>链表中没有环。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表中节点的数目范围在范围 <code>[0, 10<sup>4</sup>]</code> 内</li> \n <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> \n <li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>是否可以使用 <code>O(1)</code> 空间解决此题？</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 142&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/linked-list-cycle-ii/\">https://leetcode-cn.com/problems/linked-list-cycle-ii/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 023. 两个链表的第一个重合节点', '<p>给定两个单链表的头节点&nbsp;<code>headA</code> 和 <code>headB</code> ，请找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p> \n<p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p> \n<p><a href=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\"><img style=\"height: 130px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\" alt=\"\"></a></p> \n<p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p> \n<p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png\"><img style=\"height: 130px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png\" alt=\"\"></a></p> \n<pre><strong>输入：</strong>intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n<strong>输出：</strong>Intersected at \'8\'\n<strong>解释：</strong>相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。\n在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png\"><img style=\"height: 136px; width: 350px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png\" alt=\"\"></a></p> \n<pre><strong>输入：</strong>intersectVal&nbsp;= 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n<strong>输出：</strong>Intersected at \'2\'\n<strong>解释：</strong>相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。\n在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png\"><img style=\"height: 126px; width: 200px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png\" alt=\"\"></a></p> \n<pre><strong>输入：</strong>intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n<strong>输出：</strong>null\n<strong>解释：</strong>从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。\n由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n这两个链表不相交，因此返回 null 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>listA</code> 中节点数目为 <code>m</code></li> \n <li><code>listB</code> 中节点数目为 <code>n</code></li> \n <li><code>0 &lt;= m, n &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= skipA &lt;= m</code></li> \n <li><code>0 &lt;= skipB &lt;= n</code></li> \n <li>如果 <code>listA</code> 和 <code>listB</code> 没有交点，<code>intersectVal</code> 为 <code>0</code></li> \n <li>如果 <code>listA</code> 和 <code>listB</code> 有交点，<code>intersectVal == listA[skipA + 1] == listB[skipB + 1]</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>能否设计一个时间复杂度 <code>O(n)</code> 、仅用 <code>O(1)</code> 内存的解决方案？</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 160&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 024. 反转链表', '<p>给定单链表的头节点 <code>head</code> ，请反转链表，并返回反转后的链表的头节点。</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <img style=\"width: 302px;\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>head = [1,2,3,4,5]\n<strong>输出：</strong>[5,4,3,2,1]\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <img style=\"width: 102px;\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>head = [1,2]\n<strong>输出：</strong>[2,1]\n</pre> \n  <p><strong>示例 3：</strong></p> \n  <pre><strong>输入：</strong>head = []\n<strong>输出：</strong>[]\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li>链表中节点的数目范围是 <code>[0, 5000]</code></li> \n   <li><code>-5000 &lt;= Node.val &lt;= 5000</code></li> \n  </ul> \n  <p>&nbsp;</p> \n  <p><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p> \n </div> \n</div> \n<p>&nbsp;</p> \n<p>注意：本题与主站 206&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\">https://leetcode-cn.com/problems/reverse-linked-list/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 025. 链表中的两数相加', '<p>给定两个 <strong>非空链表</strong> <code>l1</code>和 <code>l2</code>&nbsp;来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。</p> \n<p>可以假设除了数字 0 之外，这两个数字都不会以零开头。</p> \n<p>&nbsp;</p> \n<p><strong>示例1：</strong></p> \n<p><img style=\"width: 302px;\" src=\"https://pic.leetcode-cn.com/1626420025-fZfzMX-image.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>l1 = [7,2,4,3], l2 = [5,6,4]\n<strong>输出：</strong>[7,8,0,7]\n</pre> \n<p><strong>示例2：</strong></p> \n<pre><strong>输入：</strong>l1 = [2,4,3], l2 = [5,6,4]\n<strong>输出：</strong>[8,0,7]\n</pre> \n<p><strong>示例3：</strong></p> \n<pre><strong>输入：</strong>l1 = [0], l2 = [0]\n<strong>输出：</strong>[0]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表的长度范围为<code> [1, 100]</code></li> \n <li><code>0 &lt;= node.val &lt;= 9</code></li> \n <li>输入数据保证链表代表的数字无前导 0</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>如果输入链表不能修改该如何处理？换句话说，不能对列表中的节点进行翻转。</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 445&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/add-two-numbers-ii/\">https://leetcode-cn.com/problems/add-two-numbers-ii/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 026. 重排链表', '<p>给定一个单链表 <code>L</code><em> </em>的头节点 <code>head</code> ，单链表 <code>L</code> 表示为：</p> \n<p><code>&nbsp;L<sub>0&nbsp;</sub>→ L<sub>1&nbsp;</sub>→ … → L<sub>n-1&nbsp;</sub>→ L<sub>n&nbsp;</sub></code><br> 请将其重新排列后变为：</p> \n<p><code>L<sub>0&nbsp;</sub>→&nbsp;L<sub>n&nbsp;</sub>→&nbsp;L<sub>1&nbsp;</sub>→&nbsp;L<sub>n-1&nbsp;</sub>→&nbsp;L<sub>2&nbsp;</sub>→&nbsp;L<sub>n-2&nbsp;</sub>→ …</code></p> \n<p>不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<p><img style=\"width: 240px;\" src=\"https://pic.leetcode-cn.com/1626420311-PkUiGI-image.png\" alt=\"\"></p> \n<pre><strong>输入: </strong>head = [1,2,3,4]\n<strong>输出: </strong>[1,4,2,3]</pre> \n<p><strong>示例 2:</strong></p> \n<p><img style=\"width: 320px;\" src=\"https://pic.leetcode-cn.com/1626420320-YUiulT-image.png\" alt=\"\"></p> \n<pre><strong>输入: </strong>head = [1,2,3,4,5]\n<strong>输出: </strong>[1,5,2,4,3]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表的长度范围为 <code>[1, 5 * 10<sup>4</sup>]</code></li> \n <li><code>1 &lt;= node.val &lt;= 1000</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 143&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/reorder-list/\">https://leetcode-cn.com/problems/reorder-list/</a>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 027. 回文链表', '<p>给定一个链表的 <strong>头节点&nbsp;</strong><code>head</code><strong>&nbsp;，</strong>请判断其是否为回文链表。</p> \n<p>如果一个链表是回文，那么链表节点序列从前往后看和从后往前看是相同的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img src=\"https://pic.leetcode-cn.com/1626421737-LjXceN-image.png\" alt=\"\"></strong></p> \n<pre><strong>输入:</strong> head = [1,2,3,3,2,1]\n<strong>输出:</strong> true</pre> \n<p><strong>示例 2：</strong></p> \n<p><strong><img style=\"width: 138px; height: 62px;\" src=\"https://pic.leetcode-cn.com/1626422231-wgvnWh-image.png\" alt=\"\"></strong></p> \n<pre><strong>输入:</strong> head = [1,2]\n<strong>输出:</strong> fasle\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表 L 的长度范围为 <code>[1, 10<sup><span style=\"font-size: 9.449999809265137px;\">5</span></sup>]</code></li> \n <li><code>0&nbsp;&lt;= node.val &lt;= 9</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>能否用&nbsp;O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 234&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/palindrome-linked-list/\">https://leetcode-cn.com/problems/palindrome-linked-list/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 028. 展平多级双向链表', '<p>多级双向链表中，除了指向下一个节点和前一个节点指针之外，它还有一个子链表指针，可能指向单独的双向链表。这些子列表也可能会有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。</p> \n<p>给定位于列表第一级的头节点，请扁平化列表，即将这样的多级双向链表展平成普通的双向链表，使所有结点出现在单级双链表中。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n<strong>输出：</strong>[1,2,3,7,8,11,12,9,10,4,5,6]\n<strong>解释：\n</strong>\n输入的多级列表如下图所示：\n\n<img style=\"height: 363px; width: 640px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlist.png\">\n\n扁平化后的链表如下图：\n\n<img style=\"height: 80px; width: 1100px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlistflattened.png\">\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>head = [1,2,null,3]\n<strong>输出：</strong>[1,3,2]\n<strong>解释：\n\n</strong>输入的多级列表如下图所示：\n\n  1---2---NULL\n  |\n  3---NULL\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>head = []\n<strong>输出：</strong>[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>如何表示测试用例中的多级链表？</strong></p> \n<p>以 <strong>示例 1</strong> 为例：</p> \n<pre> 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL</pre> \n<p>序列化其中的每一级之后：</p> \n<pre>[1,2,3,4,5,6,null]\n[7,8,9,10,null]\n[11,12,null]\n</pre> \n<p>为了将每一级都序列化到一起，我们需要每一级中添加值为 null 的元素，以表示没有节点连接到上一级的上级节点。</p> \n<pre>[1,2,3,4,5,6,null]\n[null,null,7,8,9,10,null]\n[null,11,12,null]\n</pre> \n<p>合并所有序列化结果，并去除末尾的 null 。</p> \n<pre>[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>节点数目不超过 <code>1000</code></li> \n <li><code>1 &lt;= Node.val &lt;= 10^5</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 430&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/\">https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 029. 排序的循环链表', '<p>给定循环升序列表中的一个点，写一个函数向这个列表中插入一个新元素&nbsp;<code>insertVal</code> ，使这个列表仍然是循环升序的。</p> \n<p>给定的可以是这个列表中任意一个顶点的指针，并不一定是这个列表中最小元素的指针。</p> \n<p>如果有多个满足条件的插入位置，可以选择任意一个位置插入新的值，插入后整个列表仍然保持有序。</p> \n<p>如果列表为空（给定的节点是 <code>null</code>），需要创建一个循环有序列表并返回这个节点。否则。请返回原先给定的节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 149px; width: 250px;\" src=\"https://assets.leetcode.com/uploads/2019/01/19/example_1_before_65p.jpg\" alt=\"\"><br> &nbsp;</p> \n<pre><strong>输入：</strong>head = [3,4,1], insertVal = 2\n<strong>输出：</strong>[3,4,1,2]\n<strong>解释：</strong>在上图中，有一个包含三个元素的循环有序列表，你获得值为 3 的节点的指针，我们需要向表中插入元素 2 。新插入的节点应该在 1 和 3 之间，插入之后，整个列表如上图所示，最后返回节点 3 。\n\n<img style=\"height: 149px; width: 250px;\" src=\"https://assets.leetcode.com/uploads/2019/01/19/example_1_after_65p.jpg\" alt=\"\">\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>head = [], insertVal = 1\n<strong>输出：</strong>[1]\n<strong>解释：</strong>列表为空（给定的节点是 <code>null</code>），创建一个循环有序列表并返回这个节点。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>head = [1], insertVal = 0\n<strong>输出：</strong>[1,0]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= Number of Nodes &lt;= 5 * 10^4</code></li> \n <li><code><font face=\"monospace\">-10^6 &lt;= Node.val &lt;= 10^6</font></code></li> \n <li><code>-10^6 &lt;=&nbsp;insertVal &lt;= 10^6</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 708&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/insert-into-a-sorted-circular-linked-list/\">https://leetcode-cn.com/problems/insert-into-a-sorted-circular-linked-list/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 030. 插入、删除和随机访问都是 O(1) 的容器', '<p>设计一个支持在<em>平均&nbsp;</em>时间复杂度 <strong>O(1)</strong>&nbsp;下，执行以下操作的数据结构：</p> \n<ul> \n <li><code>insert(val)</code>：当元素 <code>val</code> 不存在时返回 <code>true</code>&nbsp;，并向集合中插入该项，否则返回 <code>false</code> 。</li> \n <li><code>remove(val)</code>：当元素 <code>val</code> 存在时返回 <code>true</code>&nbsp;，并从集合中移除该项，否则返回 <code>true</code>&nbsp;。</li> \n <li><code>getRandom</code>：随机返回现有集合中的一项。每个元素应该有&nbsp;<strong>相同的概率&nbsp;</strong>被返回。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 :</strong></p> \n<pre><strong>输入: </strong>inputs = [\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]\n<strong>输出: </strong>[null, true, false, true, 2, true, false, 2]\n<strong>解释:\n</strong>RandomizedSet randomSet = new RandomizedSet();  // 初始化一个空的集合\nrandomSet.insert(1); // 向集合中插入 1 ， 返回 true 表示 1 被成功地插入\n\nrandomSet.remove(2); // 返回 false，表示集合中不存在 2 \n\nrandomSet.insert(2); // 向集合中插入 2 返回 true ，集合现在包含 [1,2] \n\nrandomSet.getRandom(); // getRandom 应随机返回 1 或 2 \n  \nrandomSet.remove(1); // 从集合中移除 1 返回 true 。集合现在包含 [2] \n\nrandomSet.insert(2); // 2 已在集合中，所以返回 false \n\nrandomSet.getRandom(); // 由于 2 是集合中唯一的数字，getRandom 总是返回 2 \n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>-2<sup>31</sup>&nbsp;&lt;= val &lt;= 2<sup>31</sup>&nbsp;- 1</code></li> \n <li>最多进行<code> 2 * 10<sup>5</sup></code> 次&nbsp;<code>insert</code> ， <code>remove</code> 和 <code>getRandom</code> 方法调用</li> \n <li>当调用&nbsp;<code>getRandom</code> 方法时，集合中至少有一个元素</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 380&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/insert-delete-getrandom-o1/\">https://leetcode-cn.com/problems/insert-delete-getrandom-o1/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 031. 最近最少使用缓存', '<div class=\"title__3Vvk\"> \n <p>运用所掌握的数据结构，设计和实现一个&nbsp; <a href=\"https://baike.baidu.com/item/LRU\">LRU (Least Recently Used，最近最少使用) 缓存机制</a> 。</p> \n <p>实现 <code>LRUCache</code> 类：</p> \n <ul> \n  <li><code>LRUCache(int capacity)</code> 以正整数作为容量&nbsp;<code>capacity</code> 初始化 LRU 缓存</li> \n  <li><code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li> \n  <li><code>void put(int key, int value)</code>&nbsp;如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</li> \n </ul> \n <p>&nbsp;</p> \n <p><strong>示例：</strong></p> \n <pre><strong>输入</strong>\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n<strong>输出</strong>\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\n<strong>解释</strong>\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // 缓存是 {1=1}\nlRUCache.put(2, 2); // 缓存是 {1=1, 2=2}\nlRUCache.get(1);    // 返回 1\nlRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}\nlRUCache.get(2);    // 返回 -1 (未找到)\nlRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}\nlRUCache.get(1);    // 返回 -1 (未找到)\nlRUCache.get(3);    // 返回 3\nlRUCache.get(4);    // 返回 4\n</pre> \n <p>&nbsp;</p> \n <p><strong>提示：</strong></p> \n <ul> \n  <li><code>1 &lt;= capacity &lt;= 3000</code></li> \n  <li><code>0 &lt;= key &lt;= 10000</code></li> \n  <li><code>0 &lt;= value &lt;= 10<sup>5</sup></code></li> \n  <li>最多调用 <code>2 * 10<sup>5</sup></code> 次 <code>get</code> 和 <code>put</code></li> \n </ul> \n</div> \n<p>&nbsp;</p> \n<p><strong>进阶</strong>：是否可以在&nbsp;<code>O(1)</code> 时间复杂度内完成这两种操作？</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 146&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/lru-cache/\">https://leetcode-cn.com/problems/lru-cache/</a>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 032. 有效的变位词', '<p>给定两个字符串 <code>s</code> 和 <code>t</code> ，编写一个函数来判断它们是不是一组变位词（字母异位词）。</p> \n<p><strong>注意：</strong>若&nbsp;<code><em>s</em></code> 和 <code><em>t</em></code><em>&nbsp;</em>中每个字符出现的次数都相同且<strong>字符顺序不完全相同</strong>，则称&nbsp;<code><em>s</em></code> 和 <code><em>t</em></code><em>&nbsp;</em>互为变位词（字母异位词）。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> s = \"anagram\", t = \"nagaram\"\n<strong>输出:</strong> true\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> s = \"rat\", t = \"car\"\n<strong>输出: </strong>false</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> s = \"a\", t = \"a\"\n<strong>输出: </strong>false</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= s.length, t.length &lt;= 5 * 10<sup>4</sup></code></li> \n <li><code>s</code>&nbsp;and&nbsp;<code>t</code>&nbsp;仅包含小写字母</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶:&nbsp;</strong>如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 242&nbsp;题相似（字母异位词定义不同）：<a href=\"https://leetcode-cn.com/problems/valid-anagram/\">https://leetcode-cn.com/problems/valid-anagram/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 033. 变位词组', '<p>给定一个字符串数组 <code>strs</code> ，将&nbsp;<strong>变位词&nbsp;</strong>组合在一起。 可以按任意顺序返回结果列表。</p> \n<p><strong>注意：</strong>若两个字符串中每个字符出现的次数都相同，则称它们互为变位词。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> strs = <code>[\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]</code>\n<strong>输出: </strong>[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> strs = <code>[\"\"]</code>\n<strong>输出: </strong>[[\"\"]]\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> strs = <code>[\"a\"]</code>\n<strong>输出: </strong>[[\"a\"]]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= strs.length &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= strs[i].length &lt;= 100</code></li> \n <li><code>strs[i]</code>&nbsp;仅包含小写字母</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 49&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/group-anagrams/\">https://leetcode-cn.com/problems/group-anagrams/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 034. 外星语言是否排序', '<p>某种外星语也使用英文小写字母，但可能顺序 <code>order</code> 不同。字母表的顺序（<code>order</code>）是一些小写字母的排列。</p> \n<p>给定一组用外星语书写的单词 <code>words</code>，以及其字母表的顺序 <code>order</code>，只有当给定的单词在这种外星语中按字典序排列时，返回 <code>true</code>；否则，返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"\n<strong>输出：</strong>true\n<strong>解释：</strong>在该语言的字母表中，\'h\' 位于 \'l\' 之前，所以单词序列是按字典序排列的。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"\n<strong>输出：</strong>false\n<strong>解释：</strong>在该语言的字母表中，\'d\' 位于 \'l\' 之后，那么 words[0] &gt; words[1]，因此单词序列不是按字典序排列的。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"\n<strong>输出：</strong>false\n<strong>解释：</strong>当前三个字符 \"app\" 匹配时，第二个字符串相对短一些，然后根据词典编纂规则 \"apple\" &gt; \"app\"，因为 \'l\' &gt; \'∅\'，其中 \'∅\' 是空白字符，定义为比任何其他字符都小（<a href=\"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E5%BA%8F\">更多信息</a>）。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 100</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 20</code></li> \n <li><code>order.length == 26</code></li> \n <li>在&nbsp;<code>words[i]</code>&nbsp;和&nbsp;<code>order</code>&nbsp;中的所有字符都是英文小写字母。</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 953&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/verifying-an-alien-dictionary/\">https://leetcode-cn.com/problems/verifying-an-alien-dictionary/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 035. 最小时间差', '<p>给定一个 24 小时制（小时:分钟 <strong>\"HH:MM\"</strong>）的时间列表，找出列表中任意两个时间的最小时间差并以分钟数表示。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>timePoints = [\"23:59\",\"00:00\"]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>timePoints = [\"00:00\",\"23:59\",\"00:00\"]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= timePoints &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>timePoints[i]</code> 格式为 <strong>\"HH:MM\"</strong></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 539&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/minimum-time-difference/\">https://leetcode-cn.com/problems/minimum-time-difference/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 036. 后缀表达式', '<p>根据<a href=\"https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437\"> 逆波兰表示法</a>，求该后缀表达式的计算结果。</p> \n<p>有效的算符包括&nbsp;<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>&nbsp;。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p> \n<p>&nbsp;</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li>整数除法只保留整数部分。</li> \n <li>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\n<strong>输出：</strong>9\n<strong>解释：</strong>该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\n<strong>输出：</strong>6\n<strong>解释：</strong>该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<pre><strong>输入：</strong>tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\n<strong>输出：</strong>22\n<strong>解释：</strong>\n该算式转化为常见的中缀算术表达式为：\n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= tokens.length &lt;= 10<sup>4</sup></code></li> \n <li><code>tokens[i]</code> 要么是一个算符（<code>\"+\"</code>、<code>\"-\"</code>、<code>\"*\"</code> 或 <code>\"/\"</code>），要么是一个在范围 <code>[-200, 200]</code> 内的整数</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>逆波兰表达式：</strong></p> \n<p>逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。</p> \n<ul> \n <li>平常使用的算式则是一种中缀表达式，如 <code>( 1 + 2 ) * ( 3 + 4 )</code> 。</li> \n <li>该算式的逆波兰表达式写法为 <code>( ( 1 2 + ) ( 3 4 + ) * )</code> 。</li> \n</ul> \n<p>逆波兰表达式主要有以下两个优点：</p> \n<ul> \n <li>去掉括号后表达式无歧义，上式即便写成 <code>1 2 + 3 4 + * </code>也可以依据次序计算出正确结果。</li> \n <li>适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中。</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 150&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/\">https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 037. 小行星碰撞', '<p>给定一个整数数组 <code>asteroids</code>，表示在同一行的小行星。</p> \n<p>对于数组中的每一个元素，其绝对值表示小行星的大小，正负表示小行星的移动方向（正表示向右移动，负表示向左移动）。每一颗小行星以相同的速度移动。</p> \n<p>找出碰撞后剩下的所有小行星。碰撞规则：两个行星相互碰撞，较小的行星会爆炸。如果两颗行星大小相同，则两颗行星都会爆炸。两颗移动方向相同的行星，永远不会发生碰撞。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>asteroids = [5,10,-5]\n<strong>输出：</strong>[5,10]\n<b>解释：</b>10 和 -5 碰撞后只剩下 10 。 5 和 10 永远不会发生碰撞。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>asteroids = [8,-8]\n<strong>输出：</strong>[]\n<b>解释：</b>8 和 -8 碰撞后，两者都发生爆炸。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>asteroids = [10,2,-5]\n<strong>输出：</strong>[10]\n<b>解释：</b>2 和 -5 发生碰撞后剩下 -5 。10 和 -5 发生碰撞后剩下 10 。</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>asteroids = [-2,-1,1,2]\n<strong>输出：</strong>[-2,-1,1,2]\n<b>解释</b><strong>：</strong>-2 和 -1 向左移动，而 1 和 2 向右移动。 由于移动方向相同的行星不会发生碰撞，所以最终没有行星发生碰撞。 </pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= asteroids.length&nbsp;&lt;= 10<sup>4</sup></code></li> \n <li><code>-1000 &lt;= asteroids[i] &lt;= 1000</code></li> \n <li><code>asteroids[i] != 0</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 735&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/asteroid-collision/\">https://leetcode-cn.com/problems/asteroid-collision/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 038. 每日温度', '<p>请根据每日 <code>气温</code> 列表 <code>temperatures</code>&nbsp;，重新生成一个列表，要求其对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用&nbsp;<code>0</code> 来代替。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> <code>temperatures</code> = [73,74,75,71,69,72,76,73]\n<strong>输出:</strong>&nbsp;[1,1,4,2,1,1,0,0]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> temperatures = [30,40,50,60]\n<strong>输出:</strong>&nbsp;[1,1,1,0]\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> temperatures = [30,60,90]\n<strong>输出: </strong>[1,1,0]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;temperatures.length &lt;= 10<sup>5</sup></code></li> \n <li><code>30 &lt;=&nbsp;temperatures[i]&nbsp;&lt;= 100</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 739&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/daily-temperatures/\">https://leetcode-cn.com/problems/daily-temperatures/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 039. 直方图最大矩形面积', '<p>给定非负整数数组 <code>heights</code>&nbsp;，数组中的数字用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 <code>1</code> 。</p> \n<p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<p><img src=\"https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg\"></p> \n<pre><strong>输入：</strong>heights = [2,1,5,6,2,3]\n<strong>输出：</strong>10\n<strong>解释：</strong>最大的矩形为图中红色区域，面积为 10\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img src=\"https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg\"></p> \n<pre><strong>输入：</strong> heights = [2,4]\n<b>输出：</b> 4</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= heights.length &lt;=10<sup>5</sup></code></li> \n <li><code>0 &lt;= heights[i] &lt;= 10<sup>4</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 84&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/largest-rectangle-in-histogram/\">https://leetcode-cn.com/problems/largest-rectangle-in-histogram/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 040. 矩阵中最大的矩形', '<p>给定一个由&nbsp;<code>0</code> 和 <code>1</code>&nbsp;组成的矩阵 <code>matrix</code>&nbsp;，找出只包含 <code>1</code> 的最大矩形，并返回其面积。</p> \n<p><strong>注意：</strong>此题 <code>matrix</code>&nbsp;输入格式为一维 <code>01</code> 字符串数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 402px; height: 322px;\" src=\"https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>matrix = [\"10100\",\"10111\",\"11111\",\"10010\"]\n<strong>输出：</strong>6\n<strong>解释：</strong>最大矩形如上图所示。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>matrix = []\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>matrix = [\"0\"]\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>matrix = [\"1\"]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>matrix = [\"00\"]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>rows == matrix.length</code></li> \n <li><code>cols == matrix[0].length</code></li> \n <li><code>0 &lt;= row, cols &lt;= 200</code></li> \n <li><code>matrix[i][j]</code> 为 <code>\'0\'</code> 或 <code>\'1\'</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 85 题相同（输入参数格式不同）：&nbsp;<a href=\"https://leetcode-cn.com/problems/maximal-rectangle/\">https://leetcode-cn.com/problems/maximal-rectangle/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 041. 滑动窗口的平均值', '<p>给定一个整数数据流和一个窗口大小，根据该滑动窗口的大小，计算滑动窗口里所有数字的平均值。</p> \n<p>实现 <code>MovingAverage</code> 类：</p> \n<ul> \n <li><code>MovingAverage(int size)</code> 用窗口大小 <code>size</code> 初始化对象。</li> \n <li><code>double next(int val)</code>&nbsp;成员函数 <code>next</code>&nbsp;每次调用的时候都会往滑动窗口增加一个整数，请计算并返回数据流中最后 <code>size</code> 个值的移动平均值，即滑动窗口里所有数字的平均值。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\ninputs = [\"MovingAverage\", \"next\", \"next\", \"next\", \"next\"]\ninputs = [[3], [1], [10], [3], [5]]\n<strong>输出：</strong>\n[null, 1.0, 5.5, 4.66667, 6.0]\n\n<strong>解释：</strong>\nMovingAverage movingAverage = new MovingAverage(3);\nmovingAverage.next(1); // 返回 1.0 = 1 / 1\nmovingAverage.next(10); // 返回 5.5 = (1 + 10) / 2\nmovingAverage.next(3); // 返回 4.66667 = (1 + 10 + 3) / 3\nmovingAverage.next(5); // 返回 6.0 = (10 + 3 + 5) / 3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= size &lt;= 1000</code></li> \n <li><code>-10<sup>5</sup> &lt;= val &lt;= 10<sup>5</sup></code></li> \n <li>最多调用 <code>next</code> 方法 <code>10<sup>4</sup></code> 次</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 346&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/moving-average-from-data-stream/\">https://leetcode-cn.com/problems/moving-average-from-data-stream/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 042. 最近请求次数', '<p>写一个&nbsp;<code>RecentCounter</code>&nbsp;类来计算特定时间范围内最近的请求。</p> \n<p>请实现 <code>RecentCounter</code> 类：</p> \n<ul> \n <li><code>RecentCounter()</code> 初始化计数器，请求数为 0 。</li> \n <li><code>int ping(int t)</code> 在时间 <code>t</code> 添加一个新请求，其中 <code>t</code> 表示以毫秒为单位的某个时间，并返回过去 <code>3000</code> 毫秒内发生的所有请求数（包括新请求）。确切地说，返回在 <code>[t-3000, t]</code> 内发生的请求数。</li> \n</ul> \n<p><strong>保证</strong> 每次对 <code>ping</code> 的调用都使用比之前更大的 <code>t</code> 值。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\ninputs = [\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\ninputs = [[], [1], [100], [3001], [3002]]\n<strong>输出：</strong>\n[null, 1, 2, 3, 3]\n\n<strong>解释：</strong>\nRecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = [<strong>1</strong>]，范围是 [-2999,1]，返回 1\nrecentCounter.ping(100);   // requests = [<strong>1</strong>, <strong>100</strong>]，范围是 [-2900,100]，返回 2\nrecentCounter.ping(3001);  // requests = [<strong>1</strong>, <strong>100</strong>, <strong>3001</strong>]，范围是 [1,3001]，返回 3\nrecentCounter.ping(3002);  // requests = [1, <strong>100</strong>, <strong>3001</strong>, <strong>3002</strong>]，范围是 [2,3002]，返回 3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= t &lt;= 10<sup>9</sup></code></li> \n <li>保证每次对 <code>ping</code> 调用所使用的 <code>t</code> 值都 <strong>严格递增</strong></li> \n <li>至多调用 <code>ping</code> 方法 <code>10<sup>4</sup></code> 次</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 933&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/number-of-recent-calls/\">https://leetcode-cn.com/problems/number-of-recent-calls/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 043. 往完全二叉树添加节点', '<p>完全二叉树是每一层（除最后一层外）都是完全填充（即，节点数达到最大，第 <code>n</code> 层有 <code>2<sup>n-1</sup></code>&nbsp;个节点）的，并且所有的节点都尽可能地集中在左侧。</p> \n<p>设计一个用完全二叉树初始化的数据结构&nbsp;<code>CBTInserter</code>，它支持以下几种操作：</p> \n<ul> \n <li><code>CBTInserter(TreeNode root)</code>&nbsp;使用根节点为&nbsp;<code>root</code>&nbsp;的给定树初始化该数据结构；</li> \n <li><code>CBTInserter.insert(int v)</code>&nbsp; 向树中插入一个新节点，节点类型为 <code>TreeNode</code>，值为 <code>v</code> 。使树保持完全二叉树的状态，<strong>并返回插入的新节点的父节点的值</strong>；</li> \n <li><code>CBTInserter.get_root()</code> 将返回树的根节点。</li> \n</ul> \n<p>&nbsp;</p> \n<ol> \n</ol> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>inputs = [\"CBTInserter\",\"insert\",\"get_root\"], inputs = [[[1]],[2],[]]\n<strong>输出：</strong>[null,1,[1,2]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>inputs = [\"CBTInserter\",\"insert\",\"insert\",\"get_root\"], inputs = [[[1,2,3,4,5,6]],[7],[8],[]]\n<strong>输出：</strong>[null,3,4,[1,2,3,4,5,6,7,8]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>最初给定的树是完全二叉树，且包含&nbsp;<code>1</code>&nbsp;到&nbsp;<code>1000</code>&nbsp;个节点。</li> \n <li>每个测试用例最多调用&nbsp;<code>CBTInserter.insert</code>&nbsp; 操作&nbsp;<code>10000</code>&nbsp;次。</li> \n <li>给定节点或插入节点的每个值都在&nbsp;<code>0</code>&nbsp;到&nbsp;<code>5000</code>&nbsp;之间。</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 919&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/complete-binary-tree-inserter/\">https://leetcode-cn.com/problems/complete-binary-tree-inserter/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 044. 二叉树每层的最大值', '<p>给定一棵二叉树的根节点&nbsp;<code>root</code> ，请找出该二叉树中每一层的最大值。</p> \n<p>&nbsp;</p> \n<p><strong>示例1：</strong></p> \n<pre><strong>输入: </strong>root = [1,3,2,5,3,null,9]\n<strong>输出: </strong>[1,3,9]\n<strong>解释:</strong>\n          1\n         / \\\n        3   2\n       / \\   \\  \n      5   3   9 \n</pre> \n<p><strong>示例2：</strong></p> \n<pre><strong>输入: </strong>root = [1,2,3]\n<strong>输出: </strong>[1,3]\n<strong>解释:</strong>\n          1\n         / \\\n        2   3\n</pre> \n<p><strong>示例3：</strong></p> \n<pre><strong>输入: </strong>root = [1]\n<strong>输出: </strong>[1]\n</pre> \n<p><strong>示例4：</strong></p> \n<pre><strong>输入: </strong>root = [1,null,2]\n<strong>输出: </strong>[1,2]\n<strong>解释:</strong>      \n&nbsp;          1 \n&nbsp;           \\\n&nbsp;            2     \n</pre> \n<p><strong>示例5：</strong></p> \n<pre><strong>输入: </strong>root = []\n<strong>输出: </strong>[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>二叉树的节点个数的范围是 <code>[0,10<sup>4</sup>]</code></li> \n <li><code>-2<sup>31</sup>&nbsp;&lt;= Node.val &lt;= 2<sup>31</sup>&nbsp;- 1</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 515&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/find-largest-value-in-each-tree-row/\">https://leetcode-cn.com/problems/find-largest-value-in-each-tree-row/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 045. 二叉树最底层最左边的值', '<p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，请找出该二叉树的&nbsp;<strong>最底层&nbsp;最左边&nbsp;</strong>节点的值。</p> \n<p>假设二叉树中至少有一个节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<p><img style=\"width: 182px;\" src=\"https://assets.leetcode.com/uploads/2020/12/14/tree1.jpg\"></p> \n<pre><strong>输入: </strong>root = [2,1,3]\n<strong>输出: </strong>1\n</pre> \n<p><strong>示例 2: </strong></p> \n<p><img style=\"width: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/12/14/tree2.jpg\"><strong> </strong></p> \n<pre><strong>输入: </strong>[1,2,3,4,null,5,6,null,null,7]\n<strong>输出: </strong>7\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li>二叉树的节点个数的范围是 <code>[1,10<sup>4</sup>]</code></li> \n <li><code>-2<sup>31</sup>&nbsp;&lt;= Node.val &lt;= 2<sup>31</sup>&nbsp;- 1</code>&nbsp;</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 513&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/find-bottom-left-tree-value/\">https://leetcode-cn.com/problems/find-bottom-left-tree-value/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 046. 二叉树的右侧视图', '<p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<p><img style=\"width: 270px;\" src=\"https://assets.leetcode.com/uploads/2021/02/14/tree.jpg\"></p> \n<pre><strong>输入:</strong>&nbsp;[1,2,3,null,5,null,4]\n<strong>输出:</strong>&nbsp;[1,3,4]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong>&nbsp;[1,null,3]\n<strong>输出:</strong>&nbsp;[1,3]\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong>&nbsp;[]\n<strong>输出:</strong>&nbsp;[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li>二叉树的节点个数的范围是 <code>[0,100]</code></li> \n <li><code>-100&nbsp;&lt;= Node.val &lt;= 100</code>&nbsp;</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 199&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/binary-tree-right-side-view/\">https://leetcode-cn.com/problems/binary-tree-right-side-view/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 047. 二叉树剪枝', '<p>给定一个二叉树 <strong>根节点</strong>&nbsp;<code>root</code>&nbsp;，树的每个节点的值要么是 <code>0</code>，要么是 <code>1</code>。请剪除该二叉树中所有节点的值为 <code>0</code> 的子树。</p> \n<p>节点 <code>node</code> 的子树为&nbsp;<code>node</code> 本身，以及所有 <code>node</code>&nbsp;的后代。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> [1,null,0,0,1]\n<strong>输出: </strong>[1,null,0,null,1] \n<strong>解释:</strong> \n只有红色节点满足条件“所有不包含 1 的子树”。\n右图为返回的答案。\n\n<img style=\"width:450px\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png\" alt=\"\">\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> [1,0,1,0,0,0,1]\n<strong>输出: </strong>[1,null,1,null,1]\n<strong>解释:</strong> \n\n<img style=\"width:450px\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png\" alt=\"\">\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> [1,1,0,1,1,0,1,0]\n<strong>输出: </strong>[1,1,0,1,1,null,1]\n<strong>解释:</strong> \n\n<img style=\"width:450px\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png\" alt=\"\">\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li>二叉树的节点个数的范围是 <code>[1,200]</code></li> \n <li>二叉树节点的值只会是 <code>0</code> 或 <code>1</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 814&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/binary-tree-pruning/\">https://leetcode-cn.com/problems/binary-tree-pruning/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 048. 序列化与反序列化二叉树', '<p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p> \n<p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 442px; height: 324px;\" src=\"https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [1,2,3,null,null,4,5]\n<strong>输出：</strong>[1,2,3,null,null,4,5]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = []\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [1]\n<strong>输出：</strong>[1]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>root = [1,2]\n<strong>输出：</strong>[1,2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅&nbsp;<a href=\"/faq/#binary-tree\">LeetCode 序列化二叉树的格式</a>。你并非必须采取这种方式，也可以采用其他的方法解决这个问题。</li> \n <li>树中结点数在范围 <code>[0, 10<sup>4</sup>]</code> 内</li> \n <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 297&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/\">https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/</a>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 049. 从根节点到叶节点的路径数字之和', '<p>给定一个二叉树的根节点 <code>root</code> ，树中每个节点都存放有一个 <code>0</code> 到 <code>9</code> 之间的数字。</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p>每条从根节点到叶节点的路径都代表一个数字：</p> \n  <ul> \n   <li>例如，从根节点到叶节点的路径 <code>1 -&gt; 2 -&gt; 3</code> 表示数字 <code>123</code> 。</li> \n  </ul> \n  <p>计算从根节点到叶节点生成的 <strong>所有数字之和</strong> 。</p> \n  <p><strong>叶节点</strong> 是指没有子节点的节点。</p> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <img style=\"width: 212px; height: 182px;\" src=\"https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>root = [1,2,3]\n<strong>输出：</strong>25\n<strong>解释：</strong>\n从根到叶子节点路径 <code>1-&gt;2</code> 代表数字 <code>12</code>\n从根到叶子节点路径 <code>1-&gt;3</code> 代表数字 <code>13</code>\n因此，数字总和 = 12 + 13 = <code>25</code></pre> \n  <p><strong>示例 2：</strong></p> \n  <img style=\"width: 292px; height: 302px;\" src=\"https://assets.leetcode.com/uploads/2021/02/19/num2tree.jpg\" alt=\"\"> \n  <pre><strong>输入：</strong>root = [4,9,0,5,1]\n<strong>输出：</strong>1026\n<strong>解释：</strong>\n从根到叶子节点路径 <code>4-&gt;9-&gt;5</code> 代表数字 495\n从根到叶子节点路径 <code>4-&gt;9-&gt;1</code> 代表数字 491\n从根到叶子节点路径 <code>4-&gt;0</code> 代表数字 40\n因此，数字总和 = 495 + 491 + 40 = <code>1026</code>\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li>树中节点的数目在范围 <code>[1, 1000]</code> 内</li> \n   <li><code>0 &lt;= Node.val &lt;= 9</code></li> \n   <li>树的深度不超过 <code>10</code></li> \n  </ul> \n </div> \n</div> \n<p>&nbsp;</p> \n<p>注意：本题与主站 129&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/\">https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 050. 向下的路径节点之和', '<p>给定一个二叉树的根节点 <code>root</code>&nbsp;，和一个整数 <code>targetSum</code> ，求该二叉树里节点值之和等于 <code>targetSum</code> 的 <strong>路径</strong> 的数目。</p> \n<p><strong>路径</strong> 不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 452px;\" src=\"https://assets.leetcode.com/uploads/2021/04/09/pathsum3-1-tree.jpg\"></p> \n<pre><strong>输入：</strong>root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\n<strong>输出：</strong>3\n<strong>解释：</strong>和等于 8 的路径有 3 条，如图所示。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n<strong>输出：</strong>3\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li>二叉树的节点个数的范围是 <code>[0,1000]</code></li> \n <li><code>-10<sup><span style=\"font-size: 9.449999809265137px;\">9</span></sup>&nbsp;&lt;= Node.val &lt;= 10<sup><span style=\"font-size: 9.449999809265137px;\">9</span></sup></code>&nbsp;</li> \n <li><code>-1000&nbsp;&lt;= targetSum&nbsp;&lt;= 1000</code>&nbsp;</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 437&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/path-sum-iii/\">https://leetcode-cn.com/problems/path-sum-iii/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 051. 节点之和最大的路径', '<p><strong>路径</strong> 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 <strong>至多出现一次</strong> 。该路径<strong> 至少包含一个 </strong>节点，且不一定经过根节点。</p> \n<p><strong>路径和</strong> 是路径中各节点值的总和。</p> \n<p>给定一个二叉树的根节点 <code>root</code> ，返回其 <strong>最大路径和</strong>，即所有路径上节点值之和的最大值。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 322px; height: 182px;\" src=\"https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [1,2,3]\n<strong>输出：</strong>6\n<strong>解释：</strong>最优路径是 2 -&gt; 1 -&gt; 3 ，路径和为 2 + 1 + 3 = 6</pre> \n<p><strong>示例 2：</strong></p> \n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [-10,9,20,null,null,15,7]\n<strong>输出：</strong>42\n<strong>解释：</strong>最优路径是 15 -&gt; 20 -&gt; 7 ，路径和为 15 + 20 + 7 = 42\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点数目范围是 <code>[1, 3 * 10<sup>4</sup>]</code></li> \n <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 124&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/\">https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 052. 展平二叉搜索树', '<p>给你一棵二叉搜索树，请&nbsp;<strong>按中序遍历</strong> 将其重新排列为一棵递增顺序搜索树，使树中最左边的节点成为树的根节点，并且每个节点没有左子节点，只有一个右子节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 600px; height: 350px;\" src=\"https://assets.leetcode.com/uploads/2020/11/17/ex1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\n<strong>输出：</strong>[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 300px; height: 114px;\" src=\"https://assets.leetcode.com/uploads/2020/11/17/ex2.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [5,1,7]\n<strong>输出：</strong>[1,null,5,null,7]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点数的取值范围是 <code>[1, 100]</code></li> \n <li><code>0 &lt;= Node.val &lt;= 1000</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 897&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/increasing-order-search-tree/\">https://leetcode-cn.com/problems/increasing-order-search-tree/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 053. 二叉搜索树中的中序后继', '<p>给定一棵二叉搜索树和其中的一个节点 <code>p</code> ，找到该节点在树中的中序后继。如果节点没有中序后继，请返回 <code>null</code> 。</p> \n<p>节点&nbsp;<code>p</code>&nbsp;的后继是值比&nbsp;<code>p.val</code>&nbsp;大的节点中键值最小的节点，即按中序遍历的顺序节点 <code>p</code> 的下一个节点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 117px; width: 122px;\" src=\"https://assets.leetcode.com/uploads/2019/01/23/285_example_1.PNG\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [2,1,3], p = 1\n<strong>输出：</strong>2\n<strong>解释：</strong>这里 1 的中序后继是 2。请注意 p 和返回值都应是 TreeNode 类型。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<p><img style=\"height: 229px; width: 246px;\" src=\"https://assets.leetcode.com/uploads/2019/01/23/285_example_2.PNG\" alt=\"\"></p> \n<pre><strong>输入：</strong>root = [5,3,6,2,4,null,null,1], p = 6\n<strong>输出：</strong>null\n<strong>解释：</strong>因为给出的节点没有中序后继，所以答案就返回 <code>null 了。</code>\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点的数目在范围 <code>[1, 10<sup>4</sup>]</code> 内。</li> \n <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> \n <li>树中各节点的值均保证唯一。</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 285&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/inorder-successor-in-bst/\">https://leetcode-cn.com/problems/inorder-successor-in-bst/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 054. 所有大于等于节点的值之和', '<p><span style=\"font-size:10.5pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:10.5000pt\"><span style=\"font-family:宋体\"><font face=\"宋体\">给定一个二叉搜索树，请将它的每个</font></span></span></span></span>节点<span style=\"font-size:10.5pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:10.5000pt\"><span style=\"font-family:宋体\"><font face=\"宋体\">的值替换成树中大于或者等于该</font></span></span></span></span>节点<span style=\"font-size:10.5pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:10.5000pt\"><span style=\"font-family:宋体\"><font face=\"宋体\">值的所有</font></span></span></span></span>节点<span style=\"font-size:10.5pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:10.5000pt\"><span style=\"font-family:宋体\"><font face=\"宋体\">值之和。</font></span></span></span></span></p> \n<p style=\"margin:0pt 0pt 0.0001pt; text-align:justify\">&nbsp;</p> \n<p>提醒一下，二叉搜索树满足下列约束条件：</p> \n<ul> \n <li>节点的左子树仅包含键<strong> 小于 </strong>节点键的节点。</li> \n <li>节点的右子树仅包含键<strong> 大于</strong> 节点键的节点。</li> \n <li>左右子树也必须是二叉搜索树。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><strong><img style=\"height: 364px; width: 534px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/05/03/tree.png\" alt=\"\"></strong></p> \n<pre><strong>输入：</strong>root<strong> </strong>=<strong> </strong>[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\n<strong>输出：</strong>[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>root = [0,null,1]\n<strong>输出：</strong>[1,null,1]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>root = [1,0,2]\n<strong>输出：</strong>[3,3,2]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>root = [3,2,4,1]\n<strong>输出：</strong>[7,9,4,10]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中的节点数介于 <code>0</code>&nbsp;和 <code>10<sup>4</sup></code><sup>&nbsp;</sup>之间。</li> \n <li>每个节点的值介于 <code>-10<sup>4</sup></code>&nbsp;和&nbsp;<code>10<sup>4</sup></code>&nbsp;之间。</li> \n <li>树中的所有值 <strong>互不相同</strong> 。</li> \n <li>给定的树为二叉搜索树。</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：</p> \n<ul> \n <li>本题与主站 538&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/convert-bst-to-greater-tree/\">https://leetcode-cn.com/problems/convert-bst-to-greater-tree/</a></li> \n <li>本题与主站 1038&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree/\">https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree/</a></li> \n</ul>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 055. 二叉搜索树迭代器', '<p>实现一个二叉搜索树迭代器类<code>BSTIterator</code> ，表示一个按中序遍历二叉搜索树（BST）的迭代器：</p> \n<div class=\"original__bRMd\"> \n <div> \n  <ul> \n   <li><code>BSTIterator(TreeNode root)</code> 初始化 <code>BSTIterator</code> 类的一个对象。BST 的根节点 <code>root</code> 会作为构造函数的一部分给出。指针应初始化为一个不存在于 BST 中的数字，且该数字小于 BST 中的任何元素。</li> \n   <li><code>boolean hasNext()</code> 如果向指针右侧遍历存在数字，则返回 <code>true</code> ；否则返回 <code>false</code> 。</li> \n   <li><code>int next()</code>将指针向右移动，然后返回指针处的数字。</li> \n  </ul> \n  <p>注意，指针初始化为一个不存在于 BST 中的数字，所以对 <code>next()</code> 的首次调用将返回 BST 中的最小元素。</p> \n </div> \n</div> \n<p>可以假设&nbsp;<code>next()</code>&nbsp;调用总是有效的，也就是说，当调用 <code>next()</code>&nbsp;时，BST 的中序遍历中至少存在一个下一个数字。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<p><img style=\"width: 189px; height: 178px;\" src=\"https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png\" alt=\"\"></p> \n<pre><strong>输入</strong>\ninputs = [\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\ninputs = [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\n<strong>输出</strong>\n[null, 3, 7, true, 9, true, 15, true, 20, false]\n\n<strong>解释</strong>\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // 返回 3\nbSTIterator.next();    // 返回 7\nbSTIterator.hasNext(); // 返回 True\nbSTIterator.next();    // 返回 9\nbSTIterator.hasNext(); // 返回 True\nbSTIterator.next();    // 返回 15\nbSTIterator.hasNext(); // 返回 True\nbSTIterator.next();    // 返回 20\nbSTIterator.hasNext(); // 返回 False\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>树中节点的数目在范围 <code>[1, 10<sup>5</sup>]</code> 内</li> \n <li><code>0 &lt;= Node.val &lt;= 10<sup>6</sup></code></li> \n <li>最多调用 <code>10<sup>5</sup></code> 次 <code>hasNext</code> 和 <code>next</code> 操作</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你可以设计一个满足下述条件的解决方案吗？<code>next()</code> 和 <code>hasNext()</code> 操作均摊时间复杂度为 <code>O(1)</code> ，并使用 <code>O(h)</code> 内存。其中 <code>h</code> 是树的高度。</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 173&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/binary-search-tree-iterator/\">https://leetcode-cn.com/problems/binary-search-tree-iterator/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 056. 二叉搜索树中两个节点之和', '<p>给定一个二叉搜索树的 <strong>根节点</strong> <code>root</code>&nbsp;和一个整数 <code>k</code> , 请判断该二叉搜索树中是否存在两个节点它们的值之和等于 <code>k</code> 。假设二叉搜索树中节点的值均唯一。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: </strong>root =<strong> </strong>[8,6,10,5,7,9,11], k = 12\n<strong>输出: </strong>true\n<strong>解释: </strong>节点 5 和节点 7 之和等于 12\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入: </strong>root =<strong> </strong>[8,6,10,5,7,9,11], k = 22\n<strong>输出: </strong>false\n<strong>解释: </strong>不存在两个节点值之和为 22 的节点\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>二叉树的节点个数的范围是&nbsp;&nbsp;<code>[1, 10<sup>4</sup>]</code>.</li> \n <li><code>-10<sup>4</sup>&nbsp;&lt;= Node.val &lt;= 10<sup>4</sup></code></li> \n <li><code>root</code>&nbsp;为二叉搜索树</li> \n <li><code>-10<sup>5</sup>&nbsp;&lt;= k &lt;= 10<sup>5</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 653 题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/\">https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 057. 值和下标之差都在给定的范围内', '<p>给你一个整数数组 <code>nums</code> 和两个整数&nbsp;<code>k</code> 和 <code>t</code> 。请你判断是否存在 <b>两个不同下标</b> <code>i</code> 和 <code>j</code>，使得&nbsp;<code>abs(nums[i] - nums[j]) &lt;= t</code> ，同时又满足 <code>abs(i - j) &lt;= k</code><em> </em>。</p> \n<p>如果存在则返回 <code>true</code>，不存在返回 <code>false</code>。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,1], k<em> </em>= 3, t = 0\n<strong>输出：</strong>true</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,0,1,1], k<em> </em>=<em> </em>1, t = 2\n<strong>输出：</strong>true</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1,5,9,1,5,9], k = 2, t = 3\n<strong>输出：</strong>false</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> \n <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>0 &lt;= k &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= t &lt;= 2<sup>31</sup> - 1</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 220&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/contains-duplicate-iii/\">https://leetcode-cn.com/problems/contains-duplicate-iii/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 058. 日程表', '<p>请实现一个 <code>MyCalendar</code> 类来存放你的日程安排。如果要添加的时间内没有其他安排，则可以存储这个新的日程安排。</p> \n<p><code>MyCalendar</code> 有一个 <code>book(int start, int end)</code>方法。它意味着在 start 到 end 时间内增加一个日程安排，注意，这里的时间是半开区间，即 <code>[start, end)</code>, 实数&nbsp;<code>x</code> 的范围为， &nbsp;<code>start &lt;= x &lt; end</code>。</p> \n<p>当两个日程安排有一些时间上的交叉时（例如两个日程安排都在同一时间内），就会产生重复预订。</p> \n<p>每次调用 <code>MyCalendar.book</code>方法时，如果可以将日程安排成功添加到日历中而不会导致重复预订，返回 <code>true</code>。否则，返回 <code>false</code>&nbsp;并且不要将该日程安排添加到日历中。</p> \n<p>请按照以下步骤调用 <code>MyCalendar</code> 类: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p> \n<p>&nbsp;</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:\n</strong>[\"MyCalendar\",\"book\",\"book\",\"book\"]\n[[],[10,20],[15,25],[20,30]]\n<strong>输出:</strong> [null,true,false,true]\n<strong>解释:</strong> \nMyCalendar myCalendar = new MyCalendar();\nMyCalendar.book(10, 20); // returns true \nMyCalendar.book(15, 25); // returns false ，第二个日程安排不能添加到日历中，因为时间 15 已经被第一个日程安排预定了\nMyCalendar.book(20, 30); // returns true ，第三个日程安排可以添加到日历中，因为第一个日程安排并不包含时间 20 \n</pre> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>每个测试用例，调用&nbsp;<code>MyCalendar.book</code>&nbsp;函数最多不超过&nbsp;<code>1000</code>次。</li> \n <li><code>0 &lt;= start &lt; end &lt;= 10<sup>9</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 729&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/my-calendar-i/\">https://leetcode-cn.com/problems/my-calendar-i/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 059. 数据流的第 K 大数值', '<p>设计一个找到数据流中第 <code>k</code> 大元素的类（class）。注意是排序后的第 <code>k</code> 大元素，不是第 <code>k</code> 个不同的元素。</p> \n<p>请实现 <code>KthLargest</code>&nbsp;类：</p> \n<ul> \n <li><code>KthLargest(int k, int[] nums)</code> 使用整数 <code>k</code> 和整数流 <code>nums</code> 初始化对象。</li> \n <li><code>int add(int val)</code> 将 <code>val</code> 插入数据流 <code>nums</code> 后，返回当前数据流中第 <code>k</code> 大的元素。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\n<strong>输出：</strong>\n[null, 4, 5, 5, 8, 8]\n\n<strong>解释：</strong>\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n <li><code>-10<sup>4</sup> &lt;= val &lt;= 10<sup>4</sup></code></li> \n <li>最多调用 <code>add</code> 方法 <code>10<sup>4</sup></code> 次</li> \n <li>题目数据保证，在查找第 <code>k</code> 大元素时，数组中至少有 <code>k</code> 个元素</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 703&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/\">https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 060. 出现频率最高的 k 个数字', '<p>给定一个整数数组 <code>nums</code> 和一个整数 <code>k</code>&nbsp;，请返回其中出现频率前 <code>k</code> 高的元素。可以按 <strong>任意顺序</strong> 返回答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>nums = [1,1,1,2,2,3], k = 2\n<strong>输出: </strong>[1,2]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>nums = [1], k = 1\n<strong>输出: </strong>[1]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>k</code> 的取值范围是 <code>[1, 数组中不相同的元素的个数]</code></li> \n <li>题目数据保证答案唯一，换句话说，数组中前 <code>k</code> 个高频元素的集合是唯一的</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>所设计算法的时间复杂度 <strong>必须</strong> 优于 <code>O(n log n)</code> ，其中 <code>n</code><em>&nbsp;</em>是数组大小。</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 347&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/top-k-frequent-elements/\">https://leetcode-cn.com/problems/top-k-frequent-elements/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 061. 和最小的 k 个数对', '<p>给定两个以升序排列的整数数组 <code>nums1</code> 和<strong> </strong><code>nums2</code><strong>&nbsp;</strong>,&nbsp;以及一个整数 <code>k</code><strong>&nbsp;</strong>。</p> \n<p>定义一对值&nbsp;<code>(u,v)</code>，其中第一个元素来自&nbsp;<code>nums1</code>，第二个元素来自 <code>nums2</code><strong>&nbsp;</strong>。</p> \n<p>请找到和最小的 <code>k</code>&nbsp;个数对&nbsp;<code>(u<sub>1</sub>,v<sub>1</sub>)</code>, <code>&nbsp;(u<sub>2</sub>,v<sub>2</sub>)</code> &nbsp;... &nbsp;<code>(u<sub>k</sub>,v<sub>k</sub>)</code>&nbsp;。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums1 = [1,7,11], nums2 = [2,4,6], k = 3\n<strong>输出:</strong> [1,2],[1,4],[1,6]\n<strong>解释: </strong>返回序列中的前 3 对数：\n    [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>nums1 = [1,1,2], nums2 = [1,2,3], k = 2\n<strong>输出: </strong>[1,1],[1,1]\n<strong>解释: </strong>返回序列中的前 2 对数：\n&nbsp;    [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入: </strong>nums1 = [1,2], nums2 = [3], k = 3 \n<strong>输出:</strong> [1,3],[2,3]\n<strong>解释: </strong>也可能序列中所有的数对都被返回:[1,3],[2,3]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li> \n <li><code>nums1</code>, <code>nums2</code> 均为升序排列</li> \n <li><code>1 &lt;= k &lt;= 1000</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 373&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/\">https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 062. 实现前缀树', '<p><strong><a href=\"https://baike.baidu.com/item/字典树/9825209?fr=aladdin\">Trie</a></strong>（发音类似 \"try\"）或者说 <strong>前缀树</strong> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p> \n<p>请你实现 Trie 类：</p> \n<ul> \n <li><code>Trie()</code> 初始化前缀树对象。</li> \n <li><code>void insert(String word)</code> 向前缀树中插入字符串 <code>word</code> 。</li> \n <li><code>boolean search(String word)</code> 如果字符串 <code>word</code> 在前缀树中，返回 <code>true</code>（即，在检索之前已经插入）；否则，返回 <code>false</code> 。</li> \n <li><code>boolean startsWith(String prefix)</code> 如果之前已经插入的字符串&nbsp;<code>word</code> 的前缀之一为 <code>prefix</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入</strong>\ninputs = [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\ninputs = [[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n<strong>输出</strong>\n[null, null, true, false, true, null, true]\n\n<strong>解释</strong>\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // 返回 True\ntrie.search(\"app\");     // 返回 False\ntrie.startsWith(\"app\"); // 返回 True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // 返回 True\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li> \n <li><code>word</code> 和 <code>prefix</code> 仅由小写英文字母组成</li> \n <li><code>insert</code>、<code>search</code> 和 <code>startsWith</code> 调用次数 <strong>总计</strong> 不超过 <code>3 * 10<sup>4</sup></code> 次</li> \n</ul> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 208 题相同：<a href=\"https://leetcode-cn.com/problems/implement-trie-prefix-tree/\">https://leetcode-cn.com/problems/implement-trie-prefix-tree/</a>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 063. 替换单词', '<p>在英语中，有一个叫做&nbsp;<code>词根(root)</code> 的概念，它可以跟着其他一些词组成另一个较长的单词——我们称这个词为&nbsp;<code>继承词(successor)</code>。例如，词根<code>an</code>，跟随着单词&nbsp;<code>other</code>(其他)，可以形成新的单词&nbsp;<code>another</code>(另一个)。</p> \n<p>现在，给定一个由许多词根组成的词典和一个句子，需要将句子中的所有<code>继承词</code>用<code>词根</code>替换掉。如果<code>继承词</code>有许多可以形成它的<code>词根</code>，则用最短的词根替换它。</p> \n<p>需要输出替换之后的句子。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\n<strong>输出：</strong>\"the cat was rat by the bat\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"\n<strong>输出：</strong>\"a a b c\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>dictionary = [\"a\", \"aa\", \"aaa\", \"aaaa\"], sentence = \"a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa\"\n<strong>输出：</strong>\"a a a a a a a a bbb baba a\"\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>dictionary = [\"catt\",\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\n<strong>输出：</strong>\"the cat was rat by the bat\"\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>dictionary = [\"ac\",\"ab\"], sentence = \"it is abnormal that this solution is accepted\"\n<strong>输出：</strong>\"it is ab that this solution is ac\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= dictionary.length&nbsp;&lt;= 1000</code></li> \n <li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li> \n <li><code>dictionary[i]</code>&nbsp;仅由小写字母组成。</li> \n <li><code>1 &lt;= sentence.length &lt;= 10^6</code></li> \n <li><code>sentence</code>&nbsp;仅由小写字母和空格组成。</li> \n <li><code>sentence</code> 中单词的总量在范围 <code>[1, 1000]</code> 内。</li> \n <li><code>sentence</code> 中每个单词的长度在范围 <code>[1, 1000]</code> 内。</li> \n <li><code>sentence</code> 中单词之间由一个空格隔开。</li> \n <li><code>sentence</code>&nbsp;没有前导或尾随空格。</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 648&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/replace-words/\">https://leetcode-cn.com/problems/replace-words/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 064. 神奇的字典', '<p>设计一个使用单词列表进行初始化的数据结构，单词列表中的单词 <strong>互不相同</strong> 。 如果给出一个单词，请判定能否只将这个单词中<strong>一个</strong>字母换成另一个字母，使得所形成的新单词存在于已构建的神奇字典中。</p> \n<p>实现 <code>MagicDictionary</code> 类：</p> \n<ul> \n <li><code>MagicDictionary()</code> 初始化对象</li> \n <li><code>void buildDict(String[]&nbsp;dictionary)</code> 使用字符串数组&nbsp;<code>dictionary</code> 设定该数据结构，<code>dictionary</code> 中的字符串互不相同</li> \n <li><code>bool search(String searchWord)</code> 给定一个字符串 <code>searchWord</code> ，判定能否只将字符串中<strong> 一个 </strong>字母换成另一个字母，使得所形成的新字符串能够与字典中的任一字符串匹配。如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li> \n</ul> \n<p>&nbsp;</p> \n<div class=\"top-view__1vxA\"> \n <div class=\"original__bRMd\"> \n  <div> \n   <p><strong>示例：</strong></p> \n   <pre><strong>输入</strong>\ninputs = [\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\ninputs = [[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]\n<strong>输出</strong>\n[null, null, false, true, false, false]\n\n<strong>解释</strong>\nMagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict([\"hello\", \"leetcode\"]);\nmagicDictionary.search(\"hello\"); // 返回 False\nmagicDictionary.search(\"hhllo\"); // 将第二个 \'h\' 替换为 \'e\' 可以匹配 \"hello\" ，所以返回 True\nmagicDictionary.search(\"hell\"); // 返回 False\nmagicDictionary.search(\"leetcoded\"); // 返回 False\n</pre> \n   <p>&nbsp;</p> \n   <p><strong>提示：</strong></p> \n   <ul> \n    <li><code>1 &lt;=&nbsp;dictionary.length &lt;= 100</code></li> \n    <li><code>1 &lt;=&nbsp;dictionary[i].length &lt;= 100</code></li> \n    <li><code>dictionary[i]</code> 仅由小写英文字母组成</li> \n    <li><code>dictionary</code> 中的所有字符串 <strong>互不相同</strong></li> \n    <li><code>1 &lt;=&nbsp;searchWord.length &lt;= 100</code></li> \n    <li><code>searchWord</code> 仅由小写英文字母组成</li> \n    <li><code>buildDict</code> 仅在 <code>search</code> 之前调用一次</li> \n    <li>最多调用 <code>100</code> 次 <code>search</code></li> \n   </ul> \n  </div> \n </div> \n</div> \n<p>&nbsp;</p> \n<p>注意：本题与主站 676&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/implement-magic-dictionary/\">https://leetcode-cn.com/problems/implement-magic-dictionary/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 065. 最短的单词编码', '<p>单词数组&nbsp;<code>words</code> 的 <strong>有效编码</strong> 由任意助记字符串 <code>s</code> 和下标数组 <code>indices</code> 组成，且满足：</p> \n<ul> \n <li><code>words.length == indices.length</code></li> \n <li>助记字符串 <code>s</code> 以 <code>\'#\'</code> 字符结尾</li> \n <li>对于每个下标 <code>indices[i]</code> ，<code>s</code> 的一个从 <code>indices[i]</code> 开始、到下一个 <code>\'#\'</code> 字符结束（但不包括 <code>\'#\'</code>）的 <strong>子字符串</strong> 恰好与 <code>words[i]</code> 相等</li> \n</ul> \n<p>给定一个单词数组&nbsp;<code>words</code> ，返回成功对 <code>words</code> 进行编码的最小助记字符串 <code>s</code> 的长度 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>words = [\"time\", \"me\", \"bell\"]\n<strong>输出：</strong>10\n<strong>解释：</strong>一组有效编码为 s = <code>\"time#bell#\" 和 indices = [0, 2, 5</code>] 。\nwords[0] = \"time\" ，s 开始于 indices[0] = 0 到下一个 \'#\' 结束的子字符串，如加粗部分所示 \"<strong>time</strong>#bell#\"\nwords[1] = \"me\" ，s 开始于 indices[1] = 2 到下一个 \'#\' 结束的子字符串，如加粗部分所示 \"ti<strong>me</strong>#bell#\"\nwords[2] = \"bell\" ，s 开始于 indices[2] = 5 到下一个 \'#\' 结束的子字符串，如加粗部分所示 \"time#<strong>bell</strong>#\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>words = [\"t\"]\n<strong>输出：</strong>2\n<strong>解释：</strong>一组有效编码为 s = \"t#\" 和 indices = [0] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 2000</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 7</code></li> \n <li><code>words[i]</code> 仅由小写字母组成</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 820&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/short-encoding-of-words/\">https://leetcode-cn.com/problems/short-encoding-of-words/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 066. 单词之和', '<p>实现一个 <code>MapSum</code> 类，支持两个方法，<code>insert</code>&nbsp;和&nbsp;<code>sum</code>：</p> \n<ul> \n <li><code>MapSum()</code> 初始化 <code>MapSum</code> 对象</li> \n <li><code>void insert(String key, int val)</code> 插入 <code>key-val</code> 键值对，字符串表示键 <code>key</code> ，整数表示值 <code>val</code> 。如果键 <code>key</code> 已经存在，那么原来的键值对将被替代成新的键值对。</li> \n <li><code>int sum(string prefix)</code> 返回所有以该前缀 <code>prefix</code> 开头的键 <code>key</code> 的值的总和。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\ninputs = [\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\ninputs = [[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]\n<strong>输出：</strong>\n[null, null, 3, null, 5]\n\n<strong>解释：</strong>\nMapSum mapSum = new MapSum();\nmapSum.insert(\"apple\", 3);  \nmapSum.sum(\"ap\");           // return 3 (<u>ap</u>ple = 3)\nmapSum.insert(\"app\", 2);    \nmapSum.sum(\"ap\");           // return 5 (<u>ap</u>ple + <u>ap</u>p = 3 + 2 = 5)\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= key.length, prefix.length &lt;= 50</code></li> \n <li><code>key</code> 和 <code>prefix</code> 仅由小写英文字母组成</li> \n <li><code>1 &lt;= val &lt;= 1000</code></li> \n <li>最多调用 <code>50</code> 次 <code>insert</code> 和 <code>sum</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 677&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/map-sum-pairs/\">https://leetcode-cn.com/problems/map-sum-pairs/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 067. 最大的异或', '<p>给定一个整数数组 <code>nums</code> ，返回<em> </em><code>nums[i] XOR nums[j]</code> 的最大运算结果，其中 <code>0 ≤ i ≤ j &lt; n</code> 。</p> \n<p>&nbsp;</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p><strong>示例 1：</strong></p> \n  <pre><strong>输入：</strong>nums = [3,10,5,25,2,8]\n<strong>输出：</strong>28\n<strong>解释：</strong>最大运算结果是 5 XOR 25 = 28.</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>nums = [0]\n<strong>输出：</strong>0\n</pre> \n  <p><strong>示例 3：</strong></p> \n  <pre><strong>输入：</strong>nums = [2,4]\n<strong>输出：</strong>6\n</pre> \n  <p><strong>示例 4：</strong></p> \n  <pre><strong>输入：</strong>nums = [8,10,2]\n<strong>输出：</strong>10\n</pre> \n  <p><strong>示例 5：</strong></p> \n  <pre><strong>输入：</strong>nums = [14,70,53,83,49,91,36,80,92,51,66,70]\n<strong>输出：</strong>127\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> \n   <li><code>0 &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> \n  </ul> \n </div> \n</div> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你可以在 <code>O(n)</code> 的时间解决这个问题吗？</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 421&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/\">https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 068. 查找插入位置', '<p>给定一个排序的整数数组 <code>nums</code>&nbsp;和一个整数目标值<code> target</code> ，请在数组中找到&nbsp;<code>target&nbsp;</code>，并返回其下标。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p> \n<p>请必须使用时间复杂度为 <code>O(log n)</code> 的算法。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums = [1,3,5,6], target = 5\n<strong>输出:</strong> 2\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> nums = [1,3,5,6], target = 2\n<strong>输出:</strong> 1\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> nums = [1,3,5,6], target = 7\n<strong>输出:</strong> 4\n</pre> \n<p><strong>示例 4:</strong></p> \n<pre><strong>输入:</strong> nums = [1,3,5,6], target = 0\n<strong>输出:</strong> 0\n</pre> \n<p><strong>示例 5:</strong></p> \n<pre><strong>输入:</strong> nums = [1], target = 0\n<strong>输出:</strong> 0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n <li><code>nums</code> 为<strong>无重复元素</strong>的<strong>升序</strong>排列数组</li> \n <li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 35&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/search-insert-position/\">https://leetcode-cn.com/problems/search-insert-position/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 069. 山峰数组的顶部', '<p>符合下列属性的数组 <code>arr</code> 称为 <strong>山峰数组</strong>（<strong>山脉数组）</strong> ：</p> \n<ul> \n <li><code>arr.length &gt;= 3</code></li> \n <li>存在 <code>i</code>（<code>0 &lt; i&nbsp;&lt; arr.length - 1</code>）使得： \n  <ul> \n   <li><code>arr[0] &lt; arr[1] &lt; ... arr[i-1] &lt; arr[i] </code></li> \n   <li><code>arr[i] &gt; arr[i+1] &gt; ... &gt; arr[arr.length - 1]</code></li> \n  </ul> </li> \n</ul> \n<p>给定由整数组成的山峰数组 <code>arr</code> ，返回任何满足 <code>arr[0] &lt; arr[1] &lt; ... arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code> 的下标 <code>i</code>&nbsp;，即山峰顶部。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>arr = [0,1,0]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>arr = [1,3,5,4,2]\n<strong>输出：2</strong>\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>arr = [0,10,5,2]\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>arr = [3,4,5,1]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>arr = [24,69,100,99,79,78,67,36,26,19]\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> \n <li><code>0 &lt;= arr[i] &lt;= 10<sup>6</sup></code></li> \n <li>题目数据保证 <code>arr</code> 是一个山脉数组</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>很容易想到时间复杂度 <code>O(n)</code> 的解决方案，你可以设计一个 <code>O(log(n))</code> 的解决方案吗？</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 852&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/\">https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 070. 排序数组中只出现一次的数字', '<p>给定一个只包含整数的有序数组 <code>nums</code>&nbsp;，每个元素都会出现两次，唯有一个数只会出现一次，请找出这个唯一的数字。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums = [1,1,2,3,3,4,4,8,8]\n<strong>输出:</strong> 2\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> nums =  [3,3,7,7,10,11,11]\n<strong>输出:</strong> 10\n</pre> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p></p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= nums[i]&nbsp;&lt;= 10<sup>5</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶:</strong>&nbsp;采用的方案可以在 <code>O(log n)</code> 时间复杂度和 <code>O(1)</code> 空间复杂度中运行吗？</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 540&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/single-element-in-a-sorted-array/\">https://leetcode-cn.com/problems/single-element-in-a-sorted-array/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 071. 按权重生成随机数', '<p>给定一个正整数数组&nbsp;<code>w</code> ，其中&nbsp;<code>w[i]</code>&nbsp;代表下标 <code>i</code>&nbsp;的权重（下标从 <code>0</code> 开始），请写一个函数&nbsp;<code>pickIndex</code>&nbsp;，它可以随机地获取下标 <code>i</code>，选取下标 <code>i</code>&nbsp;的概率与&nbsp;<code>w[i]</code>&nbsp;成正比。</p> \n<ol> \n</ol> \n<p>例如，对于 <code>w = [1, 3]</code>，挑选下标 <code>0</code> 的概率为 <code>1 / (1 + 3)&nbsp;= 0.25</code> （即，25%），而选取下标 <code>1</code> 的概率为 <code>3 / (1 + 3)&nbsp;= 0.75</code>（即，75%）。</p> \n<p>也就是说，选取下标 <code>i</code> 的概率为 <code>w[i] / sum(w)</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\ninputs = [\"Solution\",\"pickIndex\"]\ninputs = [[[1]],[]]\n<strong>输出：</strong>\n[null,0]\n<strong>解释：</strong>\nSolution solution = new Solution([1]);\nsolution.pickIndex(); // 返回 0，因为数组中只有一个元素，所以唯一的选择是返回下标 0。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\ninputs = [\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\ninputs = [[[1,3]],[],[],[],[],[]]\n<strong>输出：</strong>\n[null,1,1,1,1,0]\n<strong>解释：</strong>\nSolution solution = new Solution([1, 3]);\nsolution.pickIndex(); // 返回 1，返回下标 1，返回该下标概率为 3/4 。\nsolution.pickIndex(); // 返回 1\nsolution.pickIndex(); // 返回 1\nsolution.pickIndex(); // 返回 1\nsolution.pickIndex(); // 返回 0，返回下标 0，返回该下标概率为 1/4 。\n\n由于这是一个随机问题，允许多个答案，因此下列输出都可以被认为是正确的:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\n诸若此类。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= w.length &lt;= 10000</code></li> \n <li><code>1 &lt;= w[i] &lt;= 10^5</code></li> \n <li><code>pickIndex</code>&nbsp;将被调用不超过&nbsp;<code>10000</code>&nbsp;次</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 528&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/random-pick-with-weight/\">https://leetcode-cn.com/problems/random-pick-with-weight/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 072. 求平方根', '<p>给定一个非负整数 <code>x</code> ，计算并返回 <code>x</code> 的平方根，即实现&nbsp;<code>int sqrt(int x)</code>&nbsp;函数。</p> \n<p>正数的平方根有两个，只输出其中的正数平方根。</p> \n<p>如果平方根不是整数，输出只保留整数的部分，小数部分将被舍去。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> x = 4\n<strong>输出:</strong> 2\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> x = 8\n<strong>输出:</strong> 2\n<strong>解释:</strong> 8 的平方根是 2.82842...，由于小数部分将被舍去，所以返回 2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>0 &lt;= x &lt;= 2<sup>31</sup>&nbsp;- 1</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 69&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/sqrtx/\">https://leetcode-cn.com/problems/sqrtx/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 073. 狒狒吃香蕉', '<p>狒狒喜欢吃香蕉。这里有&nbsp;<code>N</code>&nbsp;堆香蕉，第 <code>i</code> 堆中有&nbsp;<code>piles[i]</code>&nbsp;根香蕉。警卫已经离开了，将在&nbsp;<code>H</code>&nbsp;小时后回来。</p> \n<p>狒狒可以决定她吃香蕉的速度&nbsp;<code>K</code>&nbsp;（单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉 <code>K</code> 根。如果这堆香蕉少于 <code>K</code> 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉，下一个小时才会开始吃另一堆的香蕉。&nbsp;&nbsp;</p> \n<p>狒狒喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。</p> \n<p>返回她可以在 <code>H</code> 小时内吃掉所有香蕉的最小速度 <code>K</code>（<code>K</code> 为整数）。</p> \n<p>&nbsp;</p> \n<ul> \n</ul> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: </strong>piles = [3,6,7,11], H = 8\n<strong>输出: </strong>4\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入: </strong>piles = [30,11,23,4,20], H = 5\n<strong>输出: </strong>30\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<pre><strong>输入: </strong>piles = [30,11,23,4,20], H = 6\n<strong>输出: </strong>23\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= piles.length &lt;= 10^4</code></li> \n <li><code>piles.length &lt;= H &lt;= 10^9</code></li> \n <li><code>1 &lt;= piles[i] &lt;= 10^9</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 875&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/koko-eating-bananas/\">https://leetcode-cn.com/problems/koko-eating-bananas/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 074. 合并区间', '<p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>intervals = [[1,3],[2,6],[8,10],[15,18]]\n<strong>输出：</strong>[[1,6],[8,10],[15,18]]\n<strong>解释：</strong>区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>intervals = [[1,4],[4,5]]\n<strong>输出：</strong>[[1,5]]\n<strong>解释：</strong>区间 [1,4] 和 [4,5] 可被视为重叠区间。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li> \n <li><code>intervals[i].length == 2</code></li> \n <li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 56&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/merge-intervals/\">https://leetcode-cn.com/problems/merge-intervals/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 075. 数组相对排序', '<p>给定两个数组，<code>arr1</code> 和&nbsp;<code>arr2</code>，</p> \n<ul> \n <li><code>arr2</code>&nbsp;中的元素各不相同</li> \n <li><code>arr2</code> 中的每个元素都出现在&nbsp;<code>arr1</code>&nbsp;中</li> \n</ul> \n<p>对 <code>arr1</code>&nbsp;中的元素进行排序，使 <code>arr1</code> 中项的相对顺序和&nbsp;<code>arr2</code>&nbsp;中的相对顺序相同。未在&nbsp;<code>arr2</code>&nbsp;中出现过的元素需要按照升序放在&nbsp;<code>arr1</code>&nbsp;的末尾。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]\n<strong>输出：</strong>[2,2,2,1,4,3,3,9,6,7,19]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= arr1.length, arr2.length &lt;= 1000</code></li> \n <li><code>0 &lt;= arr1[i], arr2[i] &lt;= 1000</code></li> \n <li><code>arr2</code>&nbsp;中的元素&nbsp;<code>arr2[i]</code>&nbsp;各不相同</li> \n <li><code>arr2</code> 中的每个元素&nbsp;<code>arr2[i]</code>&nbsp;都出现在&nbsp;<code>arr1</code>&nbsp;中</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 1122&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/relative-sort-array/\">https://leetcode-cn.com/problems/relative-sort-array/</a>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 076. 数组中的第 k 大的数字', '<p>给定整数数组 <code>nums</code> 和整数 <code>k</code>，请返回数组中第 <code><strong>k</strong></code> 个最大的元素。</p> \n<p>请注意，你需要找的是数组排序后的第 <code>k</code> 个最大的元素，而不是第 <code>k</code> 个不同的元素。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> <code>[3,2,1,5,6,4] 和</code> k = 2\n<strong>输出:</strong> 5\n</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> <code>[3,2,3,1,2,4,5,5,6] 和</code> k = 4\n<strong>输出:</strong> 4</pre> \n<p>&nbsp;</p> \n<p><strong>提示： </strong></p> \n<ul> \n <li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-10<sup>4</sup>&nbsp;&lt;= nums[i] &lt;= 10<sup>4</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 215&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/\">https://leetcode-cn.com/problems/kth-largest-element-in-an-array/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 077. 链表排序', '<p>给定链表的头结点&nbsp;<code>head</code>&nbsp;，请将其按 <strong>升序</strong> 排列并返回 <strong>排序后的链表</strong> 。</p> \n<ul> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 302px;\" src=\"https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg\" alt=\"\"></p> \n<pre><b>输入：</b>head = [4,2,1,3]\n<b>输出：</b>[1,2,3,4]\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 402px;\" src=\"https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg\" alt=\"\"></p> \n<pre><b>输入：</b>head = [-1,5,3,4,0]\n<b>输出：</b>[-1,0,3,4,5]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><b>输入：</b>head = []\n<b>输出：</b>[]\n</pre> \n<p>&nbsp;</p> \n<p><b>提示：</b></p> \n<ul> \n <li>链表中节点的数目在范围&nbsp;<code>[0, 5 * 10<sup>4</sup>]</code>&nbsp;内</li> \n <li><code>-10<sup>5</sup>&nbsp;&lt;= Node.val &lt;= 10<sup>5</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><b>进阶：</b>你可以在&nbsp;<code>O(n&nbsp;log&nbsp;n)</code> 时间复杂度和常数级空间复杂度下，对链表进行排序吗？</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 148&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/sort-list/\">https://leetcode-cn.com/problems/sort-list/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 078. 合并排序链表', '<p>给定一个链表数组，每个链表都已经按升序排列。</p> \n<p>请将所有链表合并到一个升序链表中，返回合并后的链表。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>lists = [[1,4,5],[1,3,4],[2,6]]\n<strong>输出：</strong>[1,1,2,3,4,4,5,6]\n<strong>解释：</strong>链表数组如下：\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\n将它们合并到一个有序链表中得到。\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>lists = []\n<strong>输出：</strong>[]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>lists = [[]]\n<strong>输出：</strong>[]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>k == lists.length</code></li> \n <li><code>0 &lt;= k &lt;= 10^4</code></li> \n <li><code>0 &lt;= lists[i].length &lt;= 500</code></li> \n <li><code>-10^4 &lt;= lists[i][j] &lt;= 10^4</code></li> \n <li><code>lists[i]</code> 按 <strong>升序</strong> 排列</li> \n <li><code>lists[i].length</code> 的总和不超过 <code>10^4</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 23&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/merge-k-sorted-lists/\">https://leetcode-cn.com/problems/merge-k-sorted-lists/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 079. 所有子集', '<p>给定一个整数数组&nbsp;<code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p> \n<p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3]\n<strong>输出：</strong>[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0]\n<strong>输出：</strong>[[],[0]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 10</code></li> \n <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> \n <li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 78&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/subsets/\">https://leetcode-cn.com/problems/subsets/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 080. 含有 k 个元素的组合', '<p>给定两个整数 <code>n</code> 和 <code>k</code>，返回 <code>1 ... n</code> 中所有可能的 <code>k</code> 个数的组合。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong>&nbsp;n = 4, k = 2\n<strong>输出:</strong>\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong>&nbsp;n = 1, k = 1\n<strong>输出: </strong>[[1]]</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 20</code></li> \n <li><code>1 &lt;= k &lt;= n</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 77&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/combinations/\">https://leetcode-cn.com/problems/combinations/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 081. 允许重复选择元素的组合', '<p>给定一个<strong>无重复元素</strong>的正整数数组&nbsp;<code>candidates</code>&nbsp;和一个正整数&nbsp;<code>target</code>&nbsp;，找出&nbsp;<code>candidates</code>&nbsp;中所有可以使数字和为目标数&nbsp;<code>target</code>&nbsp;的唯一组合。</p> \n<p><code>candidates</code>&nbsp;中的数字可以无限制重复被选取。如果至少一个所选数字数量不同，则两种组合是唯一的。&nbsp;</p> \n<p>对于给定的输入，保证和为&nbsp;<code>target</code> 的唯一组合数少于 <code>150</code> 个。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入: </strong>candidates = <code>[2,3,6,7], </code>target = <code>7</code>\n<strong>输出: </strong>[[7],[2,2,3]]\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入: </strong>candidates = [2,3,5]<code>, </code>target = 8\n<strong>输出: </strong>[[2,2,2,2],[2,3,3],[3,5]]</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入: </strong>candidates = <code>[2], </code>target = <span style=\"white-space: pre-wrap;\">1</span>\n<strong>输出: </strong>[]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入: </strong>candidates = <code>[1], </code>target = <code>1</code>\n<strong>输出: </strong>[[1]]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入: </strong>candidates = <code>[1], </code>target = <code>2</code>\n<strong>输出: </strong>[[1,1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= candidates.length &lt;= 30</code></li> \n <li><code>1 &lt;= candidates[i] &lt;= 200</code></li> \n <li><code>candidate</code> 中的每个元素都是独一无二的。</li> \n <li><code>1 &lt;= target &lt;= 500</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 39&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/combination-sum/\">https://leetcode-cn.com/problems/combination-sum/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 082. 含有重复元素集合的组合', '<p>给定一个可能有重复数字的整数数组&nbsp;<code>candidates</code>&nbsp;和一个目标数&nbsp;<code>target</code>&nbsp;，找出&nbsp;<code>candidates</code>&nbsp;中所有可以使数字和为&nbsp;<code>target</code>&nbsp;的组合。</p> \n<p><code>candidates</code>&nbsp;中的每个数字在每个组合中只能使用一次，解集不能包含重复的组合。&nbsp;</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> candidates =&nbsp;<code>[10,1,2,7,6,1,5]</code>, target =&nbsp;<code>8</code>,\n<strong>输出:</strong>\n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> candidates =&nbsp;[2,5,2,1,2], target =&nbsp;5,\n<strong>输出:</strong>\n[\n[1,2,2],\n[5]\n]</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;candidates.length &lt;= 100</code></li> \n <li><code>1 &lt;=&nbsp;candidates[i] &lt;= 50</code></li> \n <li><code>1 &lt;= target &lt;= 30</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 40&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/combination-sum-ii/\">https://leetcode-cn.com/problems/combination-sum-ii/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 083. 没有重复元素集合的全排列', '<p>给定一个不含重复数字的整数数组 <code>nums</code> ，返回其 <strong>所有可能的全排列</strong> 。可以 <strong>按任意顺序</strong> 返回答案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3]\n<strong>输出：</strong>[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,1]\n<strong>输出：</strong>[[0,1],[1,0]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [1]\n<strong>输出：</strong>[[1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 6</code></li> \n <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> \n <li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 46&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/permutations/\">https://leetcode-cn.com/problems/permutations/</a>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 084. 含有重复元素集合的全排列', '<p>给定一个可包含重复数字的整数集合&nbsp;<code>nums</code> ，<strong>按任意顺序</strong> 返回它所有不重复的全排列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,2]\n<strong>输出：</strong>\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3]\n<strong>输出：</strong>[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 8</code></li> \n <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 47&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/permutations-ii/\">https://leetcode-cn.com/problems/permutations-ii/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 085. 生成匹配的括号', '<p>正整数&nbsp;<code>n</code>&nbsp;代表生成括号的对数，请设计一个函数，用于能够生成所有可能的并且 <strong>有效的 </strong>括号组合。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>n = 3\n<strong>输出：</strong>[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>[\"()\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 8</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 22&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/generate-parentheses/\">https://leetcode-cn.com/problems/generate-parentheses/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 086. 分割回文子字符串', '<p>给定一个字符串 <code>s</code> ，请将 <code>s</code> 分割成一些子串，使每个子串都是 <strong>回文串</strong> ，返回 s 所有可能的分割方案。</p> \n<p><strong>回文串</strong>&nbsp;是正着读和反着读都一样的字符串。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s =<strong> </strong>\"google\"\n<strong>输出：</strong>[[\"g\",\"o\",\"o\",\"g\",\"l\",\"e\"],[\"g\",\"oo\",\"g\",\"l\",\"e\"],[\"goog\",\"l\",\"e\"]]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"aab\"\n<strong>输出：</strong>[[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"a\"\n<strong>输出：</strong>[[\"a\"]<span style=\"font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);\">&nbsp;</span></pre> \n<p>&nbsp;</p> \n<p><b>提示：</b></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 16</code></li> \n <li><code>s </code>仅由小写英文字母组成</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 131&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/palindrome-partitioning/\">https://leetcode-cn.com/problems/palindrome-partitioning/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 087. 复原 IP', '<p>给定一个只包含数字的字符串 <code>s</code> ，用以表示一个 IP 地址，返回所有可能从&nbsp;<code>s</code> 获得的 <strong>有效 IP 地址 </strong>。你可以按任何顺序返回答案。</p> \n<p><strong>有效 IP 地址</strong> 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 <code>0</code>），整数之间用 <code>\'.\'</code> 分隔。</p> \n<p>例如：\"0.1.2.201\" 和 \"192.168.1.1\" 是 <strong>有效</strong> IP 地址，但是 \"0.011.255.245\"、\"192.168.1.312\" 和 \"192.168@1.1\" 是 <strong>无效</strong> IP 地址。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s = \"25525511135\"\n<strong>输出：</strong>[\"255.255.11.135\",\"255.255.111.35\"]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s = \"0000\"\n<strong>输出：</strong>[\"0.0.0.0\"]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s = \"1111\"\n<strong>输出：</strong>[\"1.1.1.1\"]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>s = \"010010\"\n<strong>输出：</strong>[\"0.10.0.10\",\"0.100.1.0\"]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>s = \"10203040\"\n<strong>输出：</strong>[\"10.20.30.40\",\"102.0.30.40\",\"10.203.0.40\"]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s.length &lt;= 3000</code></li> \n <li><code>s</code> 仅由数字组成</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 93&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/restore-ip-addresses/\">https://leetcode-cn.com/problems/restore-ip-addresses/</a>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 088. 爬楼梯的最少成本', '<p>数组的每个下标作为一个阶梯，第 <code>i</code> 个阶梯对应着一个非负数的体力花费值&nbsp;<code>cost[i]</code>（下标从 <code>0</code> 开始）。</p> \n<p>每当爬上一个阶梯都要花费对应的体力值，一旦支付了相应的体力值，就可以选择向上爬一个阶梯或者爬两个阶梯。</p> \n<p>请找出达到楼层顶部的最低花费。在开始时，你可以选择从下标为 0 或 1 的元素作为初始阶梯。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>cost = [10, 15, 20]\n<strong>输出：</strong>15\n<strong>解释：</strong>最低花费是从 cost[1] 开始，然后走两步即可到阶梯顶，一共花费 15 。\n</pre> \n<p><strong>&nbsp;示例 2：</strong></p> \n<pre><strong>输入：</strong>cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\n<strong>输出：</strong>6\n<strong>解释：</strong>最低花费方式是从 cost[0] 开始，逐个经过那些 1 ，跳过 cost[3] ，一共花费 6 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= cost.length &lt;= 1000</code></li> \n <li><code>0 &lt;= cost[i] &lt;= 999</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 746&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/min-cost-climbing-stairs/\">https://leetcode-cn.com/problems/min-cost-climbing-stairs/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 089. 房屋偷盗', '<p>一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响小偷偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p> \n<p>给定一个代表每个房屋存放金额的非负整数数组 <code>nums</code>&nbsp;，请计算<strong>&nbsp;不触动警报装置的情况下 </strong>，一夜之内能够偷窃到的最高金额。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums =<strong> </strong>[1,2,3,1]\n<strong>输出：</strong>4\n<strong>解释：</strong>偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n&nbsp;    偷窃到的最高金额 = 1 + 3 = 4 。</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums =<strong> </strong>[2,7,9,3,1]\n<strong>输出：</strong>12\n<strong>解释：</strong>偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。\n&nbsp;    偷窃到的最高金额 = 2 + 9 + 1 = 12 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 100</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 400</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 198&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/house-robber/\">https://leetcode-cn.com/problems/house-robber/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 090. 环形房屋偷盗', '<p>一个专业的小偷，计划偷窃一个环形街道上沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 <strong>围成一圈</strong> ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong> 。</p> \n<p>给定一个代表每个房屋存放金额的非负整数数组 <code>nums</code> ，请计算&nbsp;<strong>在不触动警报装置的情况下</strong> ，今晚能够偷窃到的最高金额。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>nums = [2,3,2]\n<strong>输出：</strong>3\n<strong>解释：</strong>你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,1]\n<strong>输出：</strong>4\n<strong>解释：</strong>你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。\n&nbsp;    偷窃到的最高金额 = 1 + 3 = 4 。</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>nums = [0]\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 100</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 213&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/house-robber-ii/\">https://leetcode-cn.com/problems/house-robber-ii/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 091. 粉刷房子', '<p>假如有一排房子，共 <code>n</code> 个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。</p> \n<p>当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个&nbsp;<code>n x 3</code><em>&nbsp;</em>的正整数矩阵 <code>costs</code> 来表示的。</p> \n<p>例如，<code>costs[0][0]</code> 表示第 0 号房子粉刷成红色的成本花费；<code>costs[1][2]</code>&nbsp;表示第 1 号房子粉刷成绿色的花费，以此类推。</p> \n<p>请计算出粉刷完所有房子最少的花费成本。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: </strong>costs = [[17,2,17],[16,16,5],[14,3,19]]\n<strong>输出: </strong>10\n<strong>解释: </strong>将 0 号房子粉刷成蓝色，1 号房子粉刷成绿色，2 号房子粉刷成蓝色<strong>。</strong>\n&nbsp;    最少花费: 2 + 5 + 3 = 10。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入: </strong>costs = [[7,6,2]]\n<strong>输出: 2</strong>\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>costs.length == n</code></li> \n <li><code>costs[i].length == 3</code></li> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>1 &lt;= costs[i][j] &lt;= 20</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 256&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/paint-house/\">https://leetcode-cn.com/problems/paint-house/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 092. 翻转字符', '<p>如果一个由&nbsp;<code>\'0\'</code> 和 <code>\'1\'</code>&nbsp;组成的字符串，是以一些 <code>\'0\'</code>（可能没有 <code>\'0\'</code>）后面跟着一些 <code>\'1\'</code>（也可能没有 <code>\'1\'</code>）的形式组成的，那么该字符串是&nbsp;<strong>单调递增&nbsp;</strong>的。</p> \n<p>我们给出一个由字符 <code>\'0\'</code> 和 <code>\'1\'</code>&nbsp;组成的字符串 <font face=\"Menlo, Monaco, Consolas, Courier New, monospace\" color=\"#c7254e\"><span style=\"caret-color: rgb(199, 37, 78); font-size: 12.600000381469727px; background-color: rgb(249, 242, 244);\">s</span></font>，我们可以将任何&nbsp;<code>\'0\'</code> 翻转为&nbsp;<code>\'1\'</code>&nbsp;或者将&nbsp;<code>\'1\'</code>&nbsp;翻转为&nbsp;<code>\'0\'</code>。</p> \n<p>返回使 <font face=\"Menlo, Monaco, Consolas, Courier New, monospace\" color=\"#c7254e\"><span style=\"caret-color: rgb(199, 37, 78); font-size: 12.600000381469727px; background-color: rgb(249, 242, 244);\">s</span></font>&nbsp;<strong>单调递增&nbsp;</strong>的最小翻转次数。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>s =<strong> </strong>\"00110\"\n<strong>输出：</strong>1\n<strong>解释：</strong>我们翻转最后一位得到 00111.\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s =<strong> </strong>\"010110\"\n<strong>输出：</strong>2\n<strong>解释：</strong>我们翻转得到 011111，或者是 000111。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s =<strong> </strong>\"00011000\"\n<strong>输出：</strong>2\n<strong>解释：</strong>我们翻转得到 00000000。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= s.length &lt;= 20000</code></li> \n <li><font face=\"Menlo, Monaco, Consolas, Courier New, monospace\" color=\"#c7254e\"><span style=\"caret-color: rgb(199, 37, 78); font-size: 12.600000381469727px; background-color: rgb(249, 242, 244);\">s</span></font> 中只包含字符&nbsp;<code>\'0\'</code>&nbsp;和&nbsp;<code>\'1\'</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 926&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/flip-string-to-monotone-increasing/\">https://leetcode-cn.com/problems/flip-string-to-monotone-increasing/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 093. 最长斐波那契数列', '<p>如果序列&nbsp;<code>X_1, X_2, ..., X_n</code>&nbsp;满足下列条件，就说它是&nbsp;<em>斐波那契式&nbsp;</em>的：</p> \n<ul> \n <li><code>n &gt;= 3</code></li> \n <li>对于所有&nbsp;<code>i + 2 &lt;= n</code>，都有&nbsp;<code>X_i + X_{i+1} = X_{i+2}</code></li> \n</ul> \n<p>给定一个<strong>严格递增</strong>的正整数数组形成序列 <code>arr</code>&nbsp;，找到 <code>arr</code> 中最长的斐波那契式的子序列的长度。如果一个不存在，返回&nbsp;&nbsp;0 。</p> \n<p><em>（回想一下，子序列是从原序列&nbsp; <code>arr</code> 中派生出来的，它从 <code>arr</code> 中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如，&nbsp;<code>[3, 5, 8]</code>&nbsp;是&nbsp;<code>[3, 4, 5, 6, 7, 8]</code>&nbsp;的一个子序列）</em></p> \n<p>&nbsp;</p> \n<ul> \n</ul> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: </strong>arr =<strong> </strong>[1,2,3,4,5,6,7,8]\n<strong>输出: </strong>5\n<strong>解释: </strong>最长的斐波那契式子序列为 [1,2,3,5,8] 。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入: </strong>arr =<strong> </strong>[1,3,7,11,12,14,18]\n<strong>输出: </strong>3\n<strong>解释</strong>: 最长的斐波那契式子序列有 [1,11,12]、[3,11,14] 以及 [7,11,18] 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>3 &lt;= arr.length &lt;= 1000</code></li> \n <li> <p><code>1 &lt;= arr[i] &lt; arr[i + 1] &lt;= 10^9</code></p> </li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 873&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/length-of-longest-fibonacci-subsequence/\">https://leetcode-cn.com/problems/length-of-longest-fibonacci-subsequence/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 094. 最少回文分割', '<p>给定一个字符串 <code>s</code>，请将 <code>s</code> 分割成一些子串，使每个子串都是回文串。</p> \n<p>返回符合要求的 <strong>最少分割次数</strong> 。</p> \n<div class=\"original__bRMd\"> \n <div> \n  <p>&nbsp;</p> \n  <p><strong>示例 1：</strong></p> \n  <pre><strong>输入：</strong>s = \"aab\"\n<strong>输出：</strong>1\n<strong>解释：</strong>只需一次分割就可将&nbsp;s<em> </em>分割成 [\"aa\",\"b\"] 这样两个回文子串。\n</pre> \n  <p><strong>示例 2：</strong></p> \n  <pre><strong>输入：</strong>s = \"a\"\n<strong>输出：</strong>0\n</pre> \n  <p><strong>示例 3：</strong></p> \n  <pre><strong>输入：</strong>s = \"ab\"\n<strong>输出：</strong>1\n</pre> \n  <p>&nbsp;</p> \n  <p><strong>提示：</strong></p> \n  <ul> \n   <li><code>1 &lt;= s.length &lt;= 2000</code></li> \n   <li><code>s</code> 仅由小写英文字母组成</li> \n  </ul> \n </div> \n</div> \n<p>&nbsp;</p> \n<p>注意：本题与主站 132&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/palindrome-partitioning-ii/\">https://leetcode-cn.com/problems/palindrome-partitioning-ii/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 095. 最长公共子序列', '<p>给定两个字符串&nbsp;<code>text1</code> 和&nbsp;<code>text2</code>，返回这两个字符串的最长 <strong>公共子序列</strong> 的长度。如果不存在 <strong>公共子序列</strong> ，返回 <code>0</code> 。</p> \n<p>一个字符串的&nbsp;<strong>子序列</strong><em>&nbsp;</em>是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p> \n<ul> \n <li>例如，<code>\"ace\"</code> 是 <code>\"abcde\"</code> 的子序列，但 <code>\"aec\"</code> 不是 <code>\"abcde\"</code> 的子序列。</li> \n</ul> \n<p>两个字符串的 <strong>公共子序列</strong> 是这两个字符串所共同拥有的子序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>text1 = \"abcde\", text2 = \"ace\" \n<strong>输出：</strong>3  \n<strong>解释：</strong>最长公共子序列是 \"ace\" ，它的长度为 3 。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>text1 = \"abc\", text2 = \"abc\"\n<strong>输出：</strong>3\n<strong>解释：</strong>最长公共子序列是 \"abc\" ，它的长度为 3 。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>text1 = \"abc\", text2 = \"def\"\n<strong>输出：</strong>0\n<strong>解释：</strong>两个字符串没有公共子序列，返回 0 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li> \n <li><code>text1</code> 和&nbsp;<code>text2</code> 仅由小写英文字符组成。</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 1143&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/longest-common-subsequence/\">https://leetcode-cn.com/problems/longest-common-subsequence/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 096. 字符串交织', '<p>给定三个字符串&nbsp;<code>s1</code>、<code>s2</code>、<code>s3</code>，请判断&nbsp;<code>s3</code>&nbsp;能不能由&nbsp;<code>s1</code>&nbsp;和&nbsp;<code>s2</code><em>&nbsp;</em><strong>交织（交错）</strong>&nbsp;组成。</p> \n<p>两个字符串 <code>s</code> 和 <code>t</code> <strong>交织</strong>&nbsp;的定义与过程如下，其中每个字符串都会被分割成若干 <strong>非空</strong> 子字符串：</p> \n<ul> \n <li><code>s = s<sub>1</sub> + s<sub>2</sub> + ... + s<sub>n</sub></code></li> \n <li><code>t = t<sub>1</sub> + t<sub>2</sub> + ... + t<sub>m</sub></code></li> \n <li><code>|n - m| &lt;= 1</code></li> \n <li><b>交织</b> 是 <code>s<sub>1</sub> + t<sub>1</sub> + s<sub>2</sub> + t<sub>2</sub> + s<sub>3</sub> + t<sub>3</sub> + ...</code> 或者 <code>t<sub>1</sub> + s<sub>1</sub> + t<sub>2</sub> + s<sub>2</sub> + t<sub>3</sub> + s<sub>3</sub> + ...</code></li> \n</ul> \n<p><strong>提示：</strong><code>a + b</code> 意味着字符串 <code>a</code> 和 <code>b</code> 连接。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 561px; height: 203px;\" src=\"https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n<strong>输出：</strong>true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n<strong>输出：</strong>false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>s1 = \"\", s2 = \"\", s3 = \"\"\n<strong>输出：</strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s1.length, s2.length &lt;= 100</code></li> \n <li><code>0 &lt;= s3.length &lt;= 200</code></li> \n <li><code>s1</code>、<code>s2</code>、和 <code>s3</code> 都由小写英文字母组成</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 97&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/interleaving-string/\">https://leetcode-cn.com/problems/interleaving-string/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 097. 子序列的数目', '<p>给定一个字符串 <code>s</code><strong> </strong>和一个字符串 <code>t</code> ，计算在 <code>s</code> 的子序列中 <code>t</code> 出现的个数。</p> \n<p>字符串的一个 <strong>子序列</strong> 是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，<code>\"ACE\"</code>&nbsp;是&nbsp;<code>\"ABCDE\"</code>&nbsp;的一个子序列，而&nbsp;<code>\"AEC\"</code>&nbsp;不是）</p> \n<p>题目数据保证答案符合 32 位带符号整数范围。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>s = \"rabbbit\", t = \"rabbit\"<code>\n<strong>输出</strong></code><strong>：</strong><code>3\n</code><strong>解释：</strong>\n如下图所示, 有 3 种可以从 s 中得到 <code>\"rabbit\" 的方案</code>。\n<code><strong><u>rabb</u></strong>b<strong><u>it</u></strong></code>\n<code><strong><u>ra</u></strong>b<strong><u>bbit</u></strong></code>\n<code><strong><u>rab</u></strong>b<strong><u>bit</u></strong></code></pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>s = \"babgbag\", t = \"bag\"\n<code><strong>输出</strong></code><strong>：</strong><code>5\n</code><strong>解释：</strong>\n如下图所示, 有 5 种可以从 s 中得到 <code>\"bag\" 的方案</code>。 \n<code><strong><u>ba</u></strong>b<u><strong>g</strong></u>bag</code>\n<code><strong><u>ba</u></strong>bgba<strong><u>g</u></strong></code>\n<code><u><strong>b</strong></u>abgb<strong><u>ag</u></strong></code>\n<code>ba<u><strong>b</strong></u>gb<u><strong>ag</strong></u></code>\n<code>babg<strong><u>bag</u></strong></code>\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= s.length, t.length &lt;= 1000</code></li> \n <li><code>s</code> 和 <code>t</code> 由英文字母组成</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 115&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/distinct-subsequences/\">https://leetcode-cn.com/problems/distinct-subsequences/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 098. 路径的数目', '<p>一个机器人位于一个 <code>m x n</code><em>&nbsp;</em>网格的左上角 （起始点在下图中标记为 “Start” ）。</p> \n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p> \n<p>问总共有多少条不同的路径？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png\"></p> \n<pre><strong>输入：</strong>m = 3, n = 7\n<strong>输出：</strong>28</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>m = 3, n = 2\n<strong>输出：</strong>3\n<strong>解释：</strong>\n从左上角开始，总共有 3 条路径可以到达右下角。\n1. 向右 -&gt; 向下 -&gt; 向下\n2. 向下 -&gt; 向下 -&gt; 向右\n3. 向下 -&gt; 向右 -&gt; 向下\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>m = 7, n = 3\n<strong>输出：</strong>28\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>m = 3, n = 3\n<strong>输出：</strong>6</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= m, n &lt;= 100</code></li> \n <li>题目数据保证答案小于等于 <code>2 * 10<sup>9</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 62&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/unique-paths/\">https://leetcode-cn.com/problems/unique-paths/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 099. 最小路径之和', '<p>给定一个包含非负整数的 <code><em>m</em>&nbsp;x&nbsp;<em>n</em></code>&nbsp;网格&nbsp;<code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p> \n<p><strong>说明：</strong>一个机器人每次只能向下或者向右移动一步。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 242px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>grid = [[1,3,1],[1,5,1],[4,2,1]]\n<strong>输出：</strong>7\n<strong>解释：</strong>因为路径 1→3→1→1→1 的总和最小。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>grid = [[1,2,3],[4,5,6]]\n<strong>输出：</strong>12\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 200</code></li> \n <li><code>0 &lt;= grid[i][j] &lt;= 100</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 64&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/minimum-path-sum/\">https://leetcode-cn.com/problems/minimum-path-sum/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 100. 三角形中最小路径之和', '<p>给定一个三角形 <code>triangle</code> ，找出自顶向下的最小路径和。</p> \n<p>每一步只能移动到下一行中相邻的结点上。<strong>相邻的结点 </strong>在这里指的是 <strong>下标</strong> 与 <strong>上一层结点下标</strong> 相同或者等于 <strong>上一层结点下标 + 1</strong> 的两个结点。也就是说，如果正位于当前行的下标 <code>i</code> ，那么下一步可以移动到下一行的下标 <code>i</code> 或 <code>i + 1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n<strong>输出：</strong>11\n<strong>解释：</strong>如下面简图所示：\n   <strong>2</strong>\n  <strong>3</strong> 4\n 6 <strong>5</strong> 7\n4 <strong>1</strong> 8 3\n自顶向下的最小路径和为&nbsp;11（即，2&nbsp;+&nbsp;3&nbsp;+&nbsp;5&nbsp;+&nbsp;1&nbsp;= 11）。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>triangle = [[-10]]\n<strong>输出：</strong>-10\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= triangle.length &lt;= 200</code></li> \n <li><code>triangle[0].length == 1</code></li> \n <li><code>triangle[i].length == triangle[i - 1].length + 1</code></li> \n <li><code>-10<sup>4</sup> &lt;= triangle[i][j] &lt;= 10<sup>4</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你可以只使用 <code>O(n)</code>&nbsp;的额外空间（<code>n</code> 为三角形的总行数）来解决这个问题吗？</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 120&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/triangle/\">https://leetcode-cn.com/problems/triangle/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 101. 分割等和子串', '<p>给定一个非空的正整数数组 <code>nums</code> ，请判断能否将这些数字分成元素和相等的两部分。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,5,11,5]\n<strong>输出：</strong>true\n<strong>解释：</strong>nums<strong> </strong>可以分割成 [1, 5, 5] 和 [11] 。</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3,5]\n<strong>输出：</strong>false\n<strong>解释：</strong>nums<strong> </strong>不可以分为和相等的两部分\n</pre> \n<p>&nbsp;</p> \n<p></p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 200</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 100</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 416&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/partition-equal-subset-sum/\">https://leetcode-cn.com/problems/partition-equal-subset-sum/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 102. 加减的目标值', '<p>给定一个正整数数组 <code>nums</code> 和一个整数 <code>target</code> 。</p> \n<p>向数组中的每个整数前添加&nbsp;<code>\'+\'</code> 或 <code>\'-\'</code> ，然后串联起所有整数，可以构造一个 <strong>表达式</strong> ：</p> \n<ul> \n <li>例如，<code>nums = [2, 1]</code> ，可以在 <code>2</code> 之前添加 <code>\'+\'</code> ，在 <code>1</code> 之前添加 <code>\'-\'</code> ，然后串联起来得到表达式 <code>\"+2-1\"</code> 。</li> \n</ul> \n<p>返回可以通过上述方法构造的、运算结果等于 <code>target</code> 的不同 <strong>表达式</strong> 的数目。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,1,1,1,1], target = 3\n<strong>输出：</strong>5\n<strong>解释：</strong>一共有 5 种方法让最终目标和为 3 。\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [1], target = 1\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 20</code></li> \n <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> \n <li><code>0 &lt;= sum(nums[i]) &lt;= 1000</code></li> \n <li><code>-1000 &lt;= target &lt;= 1000</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 494&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/target-sum/\">https://leetcode-cn.com/problems/target-sum/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 103. 最少的硬币数目', '<p>给定不同面额的硬币 <code>coins</code> 和一个总金额 <code>amount</code>。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回&nbsp;<code>-1</code>。</p> \n<p>你可以认为每种硬币的数量是无限的。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1：</strong></p> \n<pre><strong>输入：</strong>coins = <code>[1, 2, 5]</code>, amount = <code>11</code>\n<strong>输出：</strong><code>3</code> \n<strong>解释：</strong>11 = 5 + 5 + 1</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>coins = <code>[2]</code>, amount = <code>3</code>\n<strong>输出：</strong>-1</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>coins = [1], amount = 0\n<strong>输出：</strong>0\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>coins = [1], amount = 1\n<strong>输出：</strong>1\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>coins = [1], amount = 2\n<strong>输出：</strong>2\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= coins.length &lt;= 12</code></li> \n <li><code>1 &lt;= coins[i] &lt;= 2<sup>31</sup> - 1</code></li> \n <li><code>0 &lt;= amount &lt;= 10<sup>4</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 322&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/coin-change/\">https://leetcode-cn.com/problems/coin-change/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 104. 排列的数目', '<p>给定一个由 <strong>不同</strong>&nbsp;正整数组成的数组 <code>nums</code> ，和一个目标整数 <code>target</code> 。请从 <code>nums</code> 中找出并返回总和为 <code>target</code> 的元素组合的个数。数组中的数字可以在一次排列中出现任意次，但是顺序不同的序列被视作不同的组合。</p> \n<p>题目数据保证答案符合 32 位整数范围。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [1,2,3], target = 4\n<strong>输出：</strong>7\n<strong>解释：</strong>\n所有可能的组合为：\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\n请注意，顺序不同的序列被视作不同的组合。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [9], target = 3\n<strong>输出：</strong>0\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= nums.length &lt;= 200</code></li> \n <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> \n <li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li> \n <li><code>1 &lt;= target &lt;= 1000</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>如果给定的数组中含有负数会发生什么？问题会产生何种变化？如果允许负数出现，需要向题目中添加哪些限制条件？</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 377&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/combination-sum-iv/\">https://leetcode-cn.com/problems/combination-sum-iv/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 105. 岛屿的最大面积', '<p>给定一个由&nbsp;<code>0</code> 和 <code>1</code> 组成的非空二维数组&nbsp;<code>grid</code>&nbsp;，用来表示海洋岛屿地图。</p> \n<p>一个&nbsp;<strong>岛屿</strong>&nbsp;是由一些相邻的&nbsp;<code>1</code>&nbsp;(代表土地) 构成的组合，这里的「相邻」要求两个 <code>1</code> 必须在水平或者竖直方向上相邻。你可以假设&nbsp;<code>grid</code> 的四个边缘都被 <code>0</code>（代表水）包围着。</p> \n<p>找到给定的二维数组中最大的岛屿面积。如果没有岛屿，则返回面积为 <code>0</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<p><img style=\"width: 452px;\" src=\"https://pic.leetcode-cn.com/1626667010-nSGPXz-image.png\" alt=\"\"></p> \n<pre><strong>输入: </strong>grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\n<strong>输出: </strong>6\n<strong>解释: </strong>对于上面这个给定矩阵应返回&nbsp;<code>6</code>。注意答案不应该是 <code>11</code> ，因为岛屿只能包含水平或垂直的四个方向的 <code>1</code> 。</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>grid = [[0,0,0,0,0,0,0,0]]\n<strong>输出: </strong>0</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == grid.length</code></li> \n <li><code>n == grid[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 50</code></li> \n <li><code>grid[i][j] is either 0 or 1</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 695&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/max-area-of-island/\">https://leetcode-cn.com/problems/max-area-of-island/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 106. 二分图', '<p>存在一个 <strong>无向图</strong> ，图中有 <code>n</code> 个节点。其中每个节点都有一个介于 <code>0</code> 到 <code>n - 1</code> 之间的唯一编号。</p> \n<p>给定一个二维数组 <code>graph</code>&nbsp;，表示图，其中 <code>graph[u]</code> 是一个节点数组，由节点 <code>u</code> 的邻接节点组成。形式上，对于&nbsp;<code>graph[u]</code> 中的每个 <code>v</code> ，都存在一条位于节点 <code>u</code> 和节点 <code>v</code> 之间的无向边。该无向图同时具有以下属性：</p> \n<ul> \n <li>不存在自环（<code>graph[u]</code> 不包含 <code>u</code>）。</li> \n <li>不存在平行边（<code>graph[u]</code> 不包含重复值）。</li> \n <li>如果 <code>v</code> 在 <code>graph[u]</code> 内，那么 <code>u</code> 也应该在 <code>graph[v]</code> 内（该图是无向图）</li> \n <li>这个图可能不是连通图，也就是说两个节点 <code>u</code> 和 <code>v</code> 之间可能不存在一条连通彼此的路径。</li> \n</ul> \n<p><strong>二分图</strong> 定义：如果能将一个图的节点集合分割成两个独立的子集 <code>A</code> 和 <code>B</code> ，并使图中的每一条边的两个节点一个来自 <code>A</code> 集合，一个来自 <code>B</code> 集合，就将这个图称为 <strong>二分图</strong> 。</p> \n<p>如果图是二分图，返回 <code>true</code><em> </em>；否则，返回 <code>false</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 222px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\n<strong>输出：</strong>false\n<strong>解释：</strong><code>不能将节点分割成两个独立的子集，</code>以使每条边都连通一个子集中的一个节点与另一个子集中的一个节点。</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 222px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>graph = [[1,3],[0,2],[1,3],[0,2]]\n<strong>输出：</strong>true\n<strong>解释：</strong><code>可以将节点分成两组: {0, 2} 和 {1, 3} 。</code></pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>graph.length == n</code></li> \n <li><code>1 &lt;= n &lt;= 100</code></li> \n <li><code>0 &lt;= graph[u].length &lt; n</code></li> \n <li><code>0 &lt;= graph[u][i] &lt;= n - 1</code></li> \n <li><code>graph[u]</code> 不会包含 <code>u</code></li> \n <li><code>graph[u]</code> 的所有值 <strong>互不相同</strong></li> \n <li>如果 <code>graph[u]</code> 包含 <code>v</code>，那么 <code>graph[v]</code> 也会包含 <code>u</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 785&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/is-graph-bipartite/\">https://leetcode-cn.com/problems/is-graph-bipartite/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 107. 矩阵中的距离', '<p>给定一个由 <code>0</code> 和 <code>1</code> 组成的矩阵 <code>mat</code>&nbsp;，请输出一个大小相同的矩阵，其中每一个格子是 <code>mat</code> 中对应位置元素到最近的 <code>0</code> 的距离。</p> \n<p>两个相邻元素间的距离为 <code>1</code> 。</p> \n<p>&nbsp;</p> \n<p><b>示例 1：</b></p> \n<p><img style=\"width: 150px;\" src=\"https://pic.leetcode-cn.com/1626667201-NCWmuP-image.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>mat =<strong> </strong>[[0,0,0],[0,1,0],[0,0,0]]\n<strong>输出：</strong>[[0,0,0],[0,1,0],[0,0,0]]\n</pre> \n<p><b>示例 2：</b></p> \n<p><img style=\"width: 150px;\" src=\"https://pic.leetcode-cn.com/1626667205-xFxIeK-image.png\" alt=\"\"></p> \n<pre><b>输入：</b>mat =<b> </b>[[0,0,0],[0,1,0],[1,1,1]]\n<strong>输出：</strong>[[0,0,0],[0,1,0],[1,2,1]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == mat.length</code></li> \n <li><code>n == mat[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 10<sup>4</sup></code></li> \n <li><code>1 &lt;= m * n &lt;= 10<sup>4</sup></code></li> \n <li><code>mat[i][j] is either 0 or 1.</code></li> \n <li><code>mat</code> 中至少有一个 <code>0&nbsp;</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 542&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/01-matrix/\">https://leetcode-cn.com/problems/01-matrix/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 108. 单词演变', '<p>在字典（单词列表）&nbsp;<code>wordList</code> 中，从单词 <code>beginWord</code><em>&nbsp;</em>和 <code>endWord</code> 的 <strong>转换序列 </strong>是一个按下述规格形成的序列：</p> \n<ul> \n <li>序列中第一个单词是 <code>beginWord</code> 。</li> \n <li>序列中最后一个单词是 <code>endWord</code> 。</li> \n <li>每次转换只能改变一个字母。</li> \n <li>转换过程中的中间单词必须是字典&nbsp;<code>wordList</code> 中的单词。</li> \n</ul> \n<p>给定两个长度相同但内容不同的单词<em> </em><code>beginWord</code><em>&nbsp;</em>和 <code>endWord</code> 和一个字典 <code>wordList</code> ，找到从&nbsp;<code>beginWord</code> 到&nbsp;<code>endWord</code> 的 <strong>最短转换序列</strong> 中的 <strong>单词数目</strong> 。如果不存在这样的转换序列，返回 0。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n<strong>输出：</strong>5\n<strong>解释：</strong>一个最短转换序列是 \"hit\" -&gt; \"hot\" -&gt; \"dot\" -&gt; \"dog\" -&gt; \"cog\", 返回它的长度 5。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n<strong>输出：</strong>0\n<strong>解释：</strong>endWord \"cog\" 不在字典中，所以无法进行转换。</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= beginWord.length &lt;= 10</code></li> \n <li><code>endWord.length == beginWord.length</code></li> \n <li><code>1 &lt;= wordList.length &lt;= 5000</code></li> \n <li><code>wordList[i].length == beginWord.length</code></li> \n <li><code>beginWord</code>、<code>endWord</code> 和 <code>wordList[i]</code> 由小写英文字母组成</li> \n <li><code>beginWord != endWord</code></li> \n <li><code>wordList</code> 中的所有字符串 <strong>互不相同</strong></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 127&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/word-ladder/\">https://leetcode-cn.com/problems/word-ladder/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 109. 开密码锁', '<p>一个密码锁由 4&nbsp;个环形拨轮组成，每个拨轮都有 10 个数字： <code>\'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\'</code> 。每个拨轮可以自由旋转：例如把 <code>\'9\'</code> 变为&nbsp;<code>\'0\'</code>，<code>\'0\'</code> 变为 <code>\'9\'</code> 。每次旋转都只能旋转一个拨轮的一位数字。</p> \n<p>锁的初始数字为 <code>\'0000\'</code> ，一个代表四个拨轮的数字的字符串。</p> \n<p>列表 <code>deadends</code> 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。</p> \n<p>字符串 <code>target</code> 代表可以解锁的数字，请给出解锁需要的最小旋转次数，如果无论如何不能解锁，返回 <code>-1</code> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入：</strong>deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"\n<strong>输出：</strong>6\n<strong>解释：</strong>\n可能的移动序列为 \"0000\" -&gt; \"1000\" -&gt; \"1100\" -&gt; \"1200\" -&gt; \"1201\" -&gt; \"1202\" -&gt; \"0202\"。\n注意 \"0000\" -&gt; \"0001\" -&gt; \"0002\" -&gt; \"0102\" -&gt; \"0202\" 这样的序列是不能解锁的，因为当拨动到 \"0102\" 时这个锁就会被锁定。\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> deadends = [\"8888\"], target = \"0009\"\n<strong>输出：</strong>1\n<strong>解释：</strong>\n把最后一位反向旋转一次即可 \"0000\" -&gt; \"0009\"。\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"\n<strong>输出：</strong>-1\n<strong>解释：\n</strong>无法旋转到目标数字且不被锁定。\n</pre> \n<p><strong>示例 4:</strong></p> \n<pre><strong>输入:</strong> deadends = [\"0000\"], target = \"8888\"\n<strong>输出：</strong>-1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;=&nbsp;deadends.length &lt;= 500</code></li> \n <li><code><font face=\"monospace\">deadends[i].length == 4</font></code></li> \n <li><code><font face=\"monospace\">target.length == 4</font></code></li> \n <li><code>target</code> <strong>不在</strong> <code>deadends</code> 之中</li> \n <li><code>target</code> 和 <code>deadends[i]</code> 仅由若干位数字组成</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 752&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/open-the-lock/\">https://leetcode-cn.com/problems/open-the-lock/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 110. 所有路径', '<p>给定一个有&nbsp;<code>n</code>&nbsp;个节点的有向无环图，用二维数组&nbsp;<code>graph</code>&nbsp;表示，请找到所有从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>&nbsp;的路径并输出（不要求按顺序）。</p> \n<p><code>graph</code>&nbsp;的第 <code>i</code> 个数组中的单元都表示有向图中 <code>i</code>&nbsp;号节点所能到达的下一些结点（译者注：有向图是有方向的，即规定了 a→b 你就不能从 b→a ），若为空，就是没有下一个节点了。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 242px; width: 242px;\" src=\"https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>graph = [[1,2],[3],[3],[]]\n<strong>输出：</strong>[[0,1,3],[0,2,3]]\n<strong>解释：</strong>有两条路径 0 -&gt; 1 -&gt; 3 和 0 -&gt; 2 -&gt; 3\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 301px; width: 423px;\" src=\"https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>graph = [[4,3,1],[3,2,4],[3],[4],[]]\n<strong>输出：</strong>[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>graph = [[1],[]]\n<strong>输出：</strong>[[0,1]]\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong>graph = [[1,2,3],[2],[3],[]]\n<strong>输出：</strong>[[0,1,2,3],[0,2,3],[0,3]]\n</pre> \n<p><strong>示例 5：</strong></p> \n<pre><strong>输入：</strong>graph = [[1,3],[2],[3],[]]\n<strong>输出：</strong>[[0,1,2,3],[0,3]]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>n == graph.length</code></li> \n <li><code>2 &lt;= n &lt;= 15</code></li> \n <li><code>0 &lt;= graph[i][j] &lt; n</code></li> \n <li><code>graph[i][j] != i</code>&nbsp;</li> \n <li>保证输入为有向无环图 <code>(GAD)</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 797&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/all-paths-from-source-to-target/\">https://leetcode-cn.com/problems/all-paths-from-source-to-target/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 111. 计算除法', '<p>给定一个变量对数组 <code>equations</code> 和一个实数值数组 <code>values</code> 作为已知条件，其中 <code>equations[i] = [A<sub>i</sub>, B<sub>i</sub>]</code> 和 <code>values[i]</code> 共同表示等式 <code>A<sub>i</sub> / B<sub>i</sub> = values[i]</code> 。每个 <code>A<sub>i</sub></code> 或 <code>B<sub>i</sub></code> 是一个表示单个变量的字符串。</p> \n<p>另有一些以数组 <code>queries</code> 表示的问题，其中 <code>queries[j] = [C<sub>j</sub>, D<sub>j</sub>]</code> 表示第 <code>j</code> 个问题，请你根据已知条件找出 <code>C<sub>j</sub> / D<sub>j</sub> = ?</code> 的结果作为答案。</p> \n<p>返回 <strong>所有问题的答案</strong> 。如果存在某个无法确定的答案，则用 <code>-1.0</code> 替代这个答案。如果问题中出现了给定的已知条件中没有出现的字符串，也需要用 <code>-1.0</code> 替代这个答案。</p> \n<p><strong>注意：</strong>输入总是有效的。可以假设除法运算中不会出现除数为 0 的情况，且不存在任何矛盾的结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\n<strong>输出：</strong>[6.00000,0.50000,-1.00000,1.00000,-1.00000]\n<strong>解释：</strong>\n条件：<em>a / b = 2.0</em>, <em>b / c = 3.0</em>\n问题：<em>a / c = ?</em>, <em>b / a = ?</em>, <em>a / e = ?</em>, <em>a / a = ?</em>, <em>x / x = ?</em>\n结果：[6.0, 0.5, -1.0, 1.0, -1.0 ]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\n<strong>输出：</strong>[3.75000,0.40000,5.00000,0.20000]\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]\n<strong>输出：</strong>[0.50000,2.00000,-1.00000,-1.00000]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= equations.length &lt;= 20</code></li> \n <li><code>equations[i].length == 2</code></li> \n <li><code>1 &lt;= A<sub>i</sub>.length, B<sub>i</sub>.length &lt;= 5</code></li> \n <li><code>values.length == equations.length</code></li> \n <li><code>0.0 &lt; values[i] &lt;= 20.0</code></li> \n <li><code>1 &lt;= queries.length &lt;= 20</code></li> \n <li><code>queries[i].length == 2</code></li> \n <li><code>1 &lt;= C<sub>j</sub>.length, D<sub>j</sub>.length &lt;= 5</code></li> \n <li><code>A<sub>i</sub>, B<sub>i</sub>, C<sub>j</sub>, D<sub>j</sub></code> 由小写英文字母与数字组成</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 399&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/evaluate-division/\">https://leetcode-cn.com/problems/evaluate-division/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 112. 最长递增路径', '<p>给定一个&nbsp;<code>m x n</code> 整数矩阵&nbsp;<code>matrix</code> ，找出其中 <strong>最长递增路径</strong> 的长度。</p> \n<p>对于每个单元格，你可以往上，下，左，右四个方向移动。 <strong>不能</strong> 在 <strong>对角线</strong> 方向上移动或移动到 <strong>边界外</strong>（即不允许环绕）。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 242px; height: 242px;\" src=\"https://assets.leetcode.com/uploads/2021/01/05/grid1.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>matrix = [[9,9,4],[6,6,8],[2,1,1]]\n<strong>输出：</strong>4 \n<strong>解释：</strong>最长递增路径为&nbsp;<code>[1, 2, 6, 9]</code>。</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 253px; height: 253px;\" src=\"https://assets.leetcode.com/uploads/2021/01/27/tmp-grid.jpg\" alt=\"\"></p> \n<pre><strong>输入：</strong>matrix = [[3,4,5],[3,2,6],[2,2,1]]\n<strong>输出：</strong>4 \n<strong>解释：</strong>最长递增路径是&nbsp;<code>[3, 4, 5, 6]</code>。注意不允许在对角线方向上移动。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>matrix = [[1]]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>m == matrix.length</code></li> \n <li><code>n == matrix[i].length</code></li> \n <li><code>1 &lt;= m, n &lt;= 200</code></li> \n <li><code>0 &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 329&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/longest-increasing-path-in-a-matrix/\">https://leetcode-cn.com/problems/longest-increasing-path-in-a-matrix/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 113. 课程顺序', '<p>现在总共有 <code>numCourses</code>&nbsp;门课需要选，记为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>numCourses-1</code>。</p> \n<p>给定一个数组&nbsp;<code>prerequisites</code> ，它的每一个元素&nbsp;<code>prerequisites[i]</code>&nbsp;表示两门课程之间的先修顺序。&nbsp;例如&nbsp;<code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>&nbsp;表示想要学习课程 <code>a<sub>i</sub></code>&nbsp;，需要先完成课程 <code>b<sub>i</sub></code>&nbsp;。</p> \n<p>请根据给出的总课程数 &nbsp;<code>numCourses</code> 和表示先修顺序的&nbsp;<code>prerequisites</code>&nbsp;得出一个可行的修课序列。</p> \n<p>可能会有多个正确的顺序，只要任意返回一种就可以了。如果不可能完成所有课程，返回一个空数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> numCourses = 2, prerequisites = [[1,0]] \n<strong>输出: </strong><code>[0,1]</code>\n<strong>解释:</strong>&nbsp;总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 <code>[0,1] 。</code></pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\n<strong>输出: </strong><code>[0,1,2,3] or [0,2,1,3]</code>\n<strong>解释:</strong>&nbsp;总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。\n&nbsp;因此，一个正确的课程顺序是&nbsp;<code>[0,1,2,3]</code> 。另一个正确的排序是&nbsp;<code>[0,2,1,3]</code> 。\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> numCourses = 1, prerequisites = [] \n<strong>输出: </strong><code>[0]</code>\n<strong>解释:</strong>&nbsp;总共 1 门课，直接修第一门课就可。</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>1 &lt;= numCourses &lt;= 2000</code></li> \n <li><code>0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1)</code></li> \n <li><code>prerequisites[i].length == 2</code></li> \n <li><code>0 &lt;= ai, bi &lt; numCourses</code></li> \n <li><code>ai != bi</code></li> \n <li><code>prerequisites</code>&nbsp;中不存在重复元素</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 210&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/course-schedule-ii/\">https://leetcode-cn.com/problems/course-schedule-ii/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 114. 外星文字典', '<p>现有一种使用英语字母的外星文语言，这门语言的字母顺序与英语顺序不同。</p> \n<p>给定一个字符串列表 <code>words</code> ，作为这门语言的词典，<code>words</code> 中的字符串已经 <strong>按这门新语言的字母顺序进行了排序</strong> 。</p> \n<p>请你根据该词典还原出此语言中已知的字母顺序，并 <strong>按字母递增顺序</strong> 排列。若不存在合法字母顺序，返回 <code>\"\"</code> 。若存在多种可能的合法字母顺序，返回其中 <strong>任意一种</strong> 顺序即可。</p> \n<p>字符串 <code>s</code> <strong>字典顺序小于</strong> 字符串 <code>t</code> 有两种情况：</p> \n<ul> \n <li>在第一个不同字母处，如果 <code>s</code> 中的字母在这门外星语言的字母顺序中位于 <code>t</code> 中字母之前，那么&nbsp;<code>s</code> 的字典顺序小于 <code>t</code> 。</li> \n <li>如果前面 <code>min(s.length, t.length)</code> 字母都相同，那么 <code>s.length &lt; t.length</code> 时，<code>s</code> 的字典顺序也小于 <code>t</code> 。</li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>words = [\"wrt\",\"wrf\",\"er\",\"ett\",\"rftt\"]\n<strong>输出：</strong>\"wertf\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>words = [\"z\",\"x\"]\n<strong>输出：</strong>\"zx\"\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>words = [\"z\",\"x\",\"z\"]\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>不存在合法字母顺序，因此返回 <code>\"\" 。</code>\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= words.length &lt;= 100</code></li> \n <li><code>1 &lt;= words[i].length &lt;= 100</code></li> \n <li><code>words[i]</code> 仅由小写英文字母组成</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 269&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/alien-dictionary/\">https://leetcode-cn.com/problems/alien-dictionary/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 115. 重建序列', '<p>请判断原始的序列&nbsp;<code>org</code>&nbsp;是否可以从序列集&nbsp;<code>seqs</code>&nbsp;中唯一地 <strong>重建&nbsp;</strong>。</p> \n<p>序列&nbsp;<code>org</code>&nbsp;是 1 到 n 整数的排列，其中 1 ≤ n ≤ 10<sup>4</sup>。<strong>重建&nbsp;</strong>是指在序列集 <code>seqs</code> 中构建最短的公共超序列，即&nbsp;&nbsp;<code>seqs</code>&nbsp;中的任意序列都是该最短序列的子序列。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入: </strong>org = [1,2,3], seqs = [[1,2],[1,3]]\n<strong>输出: </strong>false\n<strong>解释：</strong>[1,2,3] 不是可以被重建的唯一的序列，因为 [1,3,2] 也是一个合法的序列。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入: </strong>org = [1,2,3], seqs = [[1,2]]\n<strong>输出: </strong>false\n<strong>解释：</strong>可以重建的序列只有 [1,2]。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入: </strong>org = [1,2,3], seqs = [[1,2],[1,3],[2,3]]\n<strong>输出: </strong>true\n<strong>解释：</strong>序列 [1,2], [1,3] 和 [2,3] 可以被唯一地重建为原始的序列 [1,2,3]。\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入: </strong>org = [4,1,5,2,6,3], seqs = [[5,2,6,3],[4,1,5,2]]\n<strong>输出: </strong>true\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> \n <li><code>org</code> 是数字 <code>1</code> 到 <code>n</code> 的一个排列</li> \n <li><code>1 &lt;= segs[i].length &lt;= 10<sup>5</sup></code></li> \n <li><code>seqs[i][j]</code> 是 <code>32</code> 位有符号整数</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 444&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/sequence-reconstruction/\">https://leetcode-cn.com/problems/sequence-reconstruction/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 116. 朋友圈', '<div class=\"original__bRMd\"> \n <p>一个班上有 <code>n</code> 个同学，其中一些彼此是朋友，另一些不是。朋友关系是可以传递的，如果&nbsp;<font face=\"Menlo, Monaco, Consolas, Courier New, monospace\" color=\"#c7254e\"><span style=\"caret-color: rgb(199, 37, 78); font-size: 12.600000381469727px; background-color: rgb(249, 242, 244);\">a</span></font>&nbsp;与&nbsp;<code>b</code>&nbsp;直接是朋友，且&nbsp;<code>b</code> 与&nbsp;<code>c</code>&nbsp;是直接朋友，那么&nbsp;<code>a</code> 与&nbsp;<code>c</code>&nbsp;就是间接朋友。</p> \n <p>定义&nbsp;<strong>朋友圈&nbsp;</strong>就是一组直接或者间接朋友的同学集合。</p> \n <p>给定一个 <code>n x n</code> 的矩阵 <code>isConnected</code>&nbsp;表示班上的朋友关系，其中 <code>isConnected[i][j] = 1</code> 表示第&nbsp;<code>i</code>&nbsp;个同学和第&nbsp;<code>j</code>&nbsp;个同学是直接朋友，而 <code>isConnected[i][j] = 0</code> 表示二人不是直接朋友。</p> \n <p>返回矩阵中 <b>朋友圈</b>的数量。</p> \n <p>&nbsp;</p> \n <p><strong>示例 1：</strong></p> \n <img style=\"width: 222px; height: 142px;\" src=\"https://assets.leetcode.com/uploads/2020/12/24/graph1.jpg\" alt=\"\"> \n <pre><strong>输入：</strong><code>isConnected</code> = [[1,1,0],[1,1,0],[0,0,1]]\n<strong>输出：</strong>2\n</pre> \n <p><strong>示例 2：</strong></p> \n <img style=\"width: 222px; height: 142px;\" src=\"https://assets.leetcode.com/uploads/2020/12/24/graph2.jpg\" alt=\"\"> \n <pre><strong>输入：</strong><code>isConnected</code><strong> </strong>= [[1,0,0],[0,1,0],[0,0,1]]\n<strong>输出：</strong>3\n</pre> \n <p>&nbsp;</p> \n <p><strong>提示：</strong></p> \n <ul> \n  <li><code>1 &lt;= n &lt;= 200</code></li> \n  <li><code>n == isConnected.length</code></li> \n  <li><code>n == isConnected[i].length</code></li> \n  <li><code>isConnected[i][j]</code> 为 <code>1</code> 或 <code>0</code></li> \n  <li><code>isConnected[i][i] == 1</code></li> \n  <li><code>isConnected[i][j] == isConnected[j][i]</code></li> \n </ul> \n</div> \n<p>&nbsp;</p> \n<p>注意：本题与主站 547&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/number-of-provinces/\">https://leetcode-cn.com/problems/number-of-provinces/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 117. 相似的字符串', '<p>如果交换字符串&nbsp;<code>X</code> 中的两个不同位置的字母，使得它和字符串&nbsp;<code>Y</code> 相等，那么称 <code>X</code> 和 <code>Y</code> 两个字符串相似。如果这两个字符串本身是相等的，那它们也是相似的。</p> \n<p>例如，<code>\"tars\"</code> 和 <code>\"rats\"</code> 是相似的 (交换 <code>0</code> 与 <code>2</code> 的位置)；&nbsp;<code>\"rats\"</code> 和 <code>\"arts\"</code> 也是相似的，但是 <code>\"star\"</code> 不与 <code>\"tars\"</code>，<code>\"rats\"</code>，或 <code>\"arts\"</code> 相似。</p> \n<p>总之，它们通过相似性形成了两个关联组：<code>{\"tars\", \"rats\", \"arts\"}</code> 和 <code>{\"star\"}</code>。注意，<code>\"tars\"</code> 和 <code>\"arts\"</code> 是在同一组中，即使它们并不相似。形式上，对每个组而言，要确定一个单词在组中，只需要这个词和该组中至少一个单词相似。</p> \n<p>给定一个字符串列表 <code>strs</code>。列表中的每个字符串都是 <code>strs</code> 中其它所有字符串的一个&nbsp;<strong>字母异位词&nbsp;</strong>。请问 <code>strs</code> 中有多少个相似字符串组？</p> \n<p><strong>字母异位词（anagram）</strong>，一种把某个字符串的字母的位置（顺序）加以改换所形成的新词。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>strs = [\"tars\",\"rats\",\"arts\",\"star\"]\n<strong>输出：</strong>2\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>strs = [\"omv\",\"ovm\"]\n<strong>输出：</strong>1\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= strs.length &lt;= 300</code></li> \n <li><code>1 &lt;= strs[i].length &lt;= 300</code></li> \n <li><code>strs[i]</code> 只包含小写字母。</li> \n <li><code>strs</code> 中的所有单词都具有相同的长度，且是彼此的字母异位词。</li> \n</ul> \n<p>&nbsp; &nbsp;</p> \n<p>注意：本题与主站 839&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/similar-string-groups/\">https://leetcode-cn.com/problems/similar-string-groups/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 118. 多余的边', '<p>树可以看成是一个连通且 <strong>无环&nbsp;</strong>的&nbsp;<strong>无向&nbsp;</strong>图。</p> \n<p>给定往一棵&nbsp;<code>n</code> 个节点 (节点值&nbsp;<code>1～n</code>) 的树中添加一条边后的图。添加的边的两个顶点包含在 <code>1</code> 到 <code>n</code>&nbsp;中间，且这条附加的边不属于树中已存在的边。图的信息记录于长度为 <code>n</code> 的二维数组 <code>edges</code>&nbsp;，<code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>&nbsp;表示图中在 <code>ai</code> 和 <code>bi</code> 之间存在一条边。</p> \n<p>请找出一条可以删去的边，删除后可使得剩余部分是一个有着 <code>n</code> 个节点的树。如果有多个答案，则返回数组&nbsp;<code>edges</code>&nbsp;中最后出现的边。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"width: 152px;\" src=\"https://pic.leetcode-cn.com/1626676174-hOEVUL-image.png\" alt=\"\"></p> \n<pre><strong>输入:</strong> edges = [[1,2],[1,3],[2,3]]\n<strong>输出:</strong> [2,3]\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"width: 250px;\" src=\"https://pic.leetcode-cn.com/1626676179-kGxcmu-image.png\" alt=\"\"></p> \n<pre><strong>输入:</strong> edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]\n<strong>输出:</strong> [1,4]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示:</strong></p> \n<ul> \n <li><code>n == edges.length</code></li> \n <li><code>3 &lt;= n &lt;= 1000</code></li> \n <li><code>edges[i].length == 2</code></li> \n <li><code>1 &lt;= ai&nbsp;&lt; bi&nbsp;&lt;= edges.length</code></li> \n <li><code>ai != bi</code></li> \n <li><code>edges</code> 中无重复元素</li> \n <li>给定的图是连通的&nbsp;</li> \n</ul> \n<p>&nbsp;</p> \n<p>注意：本题与主站 684&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/redundant-connection/\">https://leetcode-cn.com/problems/redundant-connection/</a></p>');
INSERT INTO `leecode` VALUES ('剑指 Offer II 119. 最长连续序列', '<p>给定一个未排序的整数数组 <code>nums</code> ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>nums = [100,4,200,1,3,2]\n<strong>输出：</strong>4\n<strong>解释：</strong>最长数字连续序列是 <code>[1, 2, 3, 4]。它的长度为 4。</code></pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>nums = [0,3,7,2,5,8,4,6,0,1]\n<strong>输出：</strong>9\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> \n <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>可以设计并实现时间复杂度为&nbsp;<code>O(n)</code><em> </em>的解决方案吗？</p> \n<p>&nbsp;</p> \n<p>注意：本题与主站 128&nbsp;题相同：&nbsp;<a href=\"https://leetcode-cn.com/problems/longest-consecutive-sequence/\">https://leetcode-cn.com/problems/longest-consecutive-sequence/</a></p>');
INSERT INTO `leecode` VALUES ('面试题 01.01. 判定字符是否唯一', '<p>实现一个算法，确定一个字符串 <code>s</code> 的所有字符是否全都不同。</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> <code>s</code> = \"leetcode\"\n<strong>输出:</strong> false \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> <code>s</code> = \"abc\"\n<strong>输出:</strong> true\n</pre> \n<p><strong>限制：</strong></p> \n<ul> \n <li><code>0 &lt;= len(s) &lt;= 100 </code></li> \n <li>如果你不使用额外的数据结构，会很加分。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 01.02. 判定是否互为字符重排', '<p>给定两个字符串 <code>s1</code> 和 <code>s2</code>，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> <code>s1</code> = \"abc\", <code>s2</code> = \"bca\"\n<strong>输出:</strong> true \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> <code>s1</code> = \"abc\", <code>s2</code> = \"bad\"\n<strong>输出:</strong> false\n</pre> \n<p><strong>说明：</strong></p> \n<ul> \n <li><code>0 &lt;= len(s1) &lt;= 100 </code></li> \n <li><code>0 &lt;= len(s2) &lt;= 100 </code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 01.03. URL化', '<p>URL化。编写一种方法，将字符串中的空格全部替换为<code>%20</code>。假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。（注：用<code>Java</code>实现的话，请使用字符数组实现，以便直接在数组上操作。）</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入</strong>：\"Mr John Smith    \", 13\n<strong>输出</strong>：\"Mr%20John%20Smith\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入</strong>：\"               \", 5\n<strong>输出</strong>：\"%20%20%20%20%20\"\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>字符串长度在 [0, 500000] 范围内。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 01.04. 回文排列', '<p>给定一个字符串，编写一个函数判定其是否为某个回文串的排列之一。</p> \n<p>回文串是指正反两个方向都一样的单词或短语。排列是指字母的重新排列。</p> \n<p>回文串不一定是字典当中的单词。</p> \n<p>&nbsp;</p> \n<p><strong>示例1：</strong></p> \n<pre><strong>输入：\"</strong>tactcoa\"\n<strong>输出：</strong>true（排列有\"tacocat\"、\"atcocta\"，等等）\n</pre> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('面试题 01.05. 一次编辑', '<p>字符串有三种编辑操作:插入一个字符、删除一个字符或者替换一个字符。 给定两个字符串，编写一个函数判定它们是否只需要一次(或者零次)编辑。</p> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:</strong> \nfirst = \"pale\"\nsecond = \"ple\"\n<strong>输出:</strong> True</pre> \n<p>&nbsp;</p> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> \nfirst = \"pales\"\nsecond = \"pal\"\n<strong>输出:</strong> False\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 01.06. 字符串压缩', '<p>字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串<code>aabcccccaaa</code>会变为<code>a2b1c5a3</code>。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。</p> \n<p> <strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：\"aabcccccaaa\"\n<strong> 输出</strong>：\"a2b1c5a3\"\n</pre> \n<p> <strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：\"abbccd\"\n<strong> 输出</strong>：\"abbccd\"\n<strong> 解释</strong>：\"abbccd\"压缩后为\"a1b2c2d1\"，比原字符串长度更长。\n</pre> \n<p><strong>提示：</strong></p> \n<ol> \n <li>字符串长度在[0, 50000]范围内。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 01.07. 旋转矩阵', '<p>给你一幅由 <code>N × N</code> 矩阵表示的图像，其中每个像素的大小为 4 字节。请你设计一种算法，将图像旋转 90 度。</p> \n<p>不占用额外内存空间能否做到？</p> \n<p>&nbsp;</p> \n<p><strong>示例 1:</strong></p> \n<pre>给定 <strong>matrix</strong> = \n[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n],\n\n<strong>原地</strong>旋转输入矩阵，使其变为:\n[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre>给定 <strong>matrix</strong> =\n[\n  [ 5, 1, 9,11],\n  [ 2, 4, 8,10],\n  [13, 3, 6, 7],\n  [15,14,12,16]\n], \n\n<strong>原地</strong>旋转输入矩阵，使其变为:\n[\n  [15,13, 2, 5],\n  [14, 3, 4, 1],\n  [12, 6, 8, 9],\n  [16, 7,10,11]\n]\n</pre> \n<p><strong>注意</strong>：本题与主站 48&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/rotate-image/\">https://leetcode-cn.com/problems/rotate-image/</a></p>');
INSERT INTO `leecode` VALUES ('面试题 01.08. 零矩阵', '<p>编写一种算法，若M × N矩阵中某个元素为0，则将其所在的行与列清零。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\n[\n  [1,1,1],\n  [1,0,1],\n  [1,1,1]\n]\n<strong>输出：</strong>\n[\n  [1,0,1],\n  [0,0,0],\n  [1,0,1]\n]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\n[\n  [0,1,2,0],\n  [3,4,5,2],\n  [1,3,1,5]\n]\n<strong>输出：</strong>\n[\n  [0,0,0,0],\n  [0,4,5,0],\n  [0,3,1,0]\n]\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 01.09. 字符串轮转', '<p>字符串轮转。给定两个字符串<code>s1</code>和<code>s2</code>，请编写代码检查<code>s2</code>是否为<code>s1</code>旋转而成（比如，<code>waterbottle</code>是<code>erbottlewat</code>旋转后的字符串）。</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：s1 = \"waterbottle\", s2 = \"erbottlewat\"\n<strong> 输出</strong>：True\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：s1 = \"aa\", s2 = \"aba\"\n<strong> 输出</strong>：False\n</pre> \n<ol> \n</ol> \n<p><strong>提示：</strong></p> \n<ol> \n <li>字符串长度在[0, 100000]范围内。</li> \n</ol> \n<p><strong>说明:</strong></p> \n<ol> \n <li>你能只调用一次检查子串的方法吗？</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 02.01. 移除重复节点', '<p>编写代码，移除未排序链表中的重复节点。保留最开始出现的节点。</p> \n<p> <strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：[1, 2, 3, 3, 2, 1]\n<strong> 输出</strong>：[1, 2, 3]\n</pre> \n<p> <strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：[1, 1, 1, 1, 2]\n<strong> 输出</strong>：[1, 2]\n</pre> \n<p><strong>提示：</strong></p> \n<ol> \n <li>链表长度在[0, 20000]范围内。</li> \n <li>链表元素在[0, 20000]范围内。</li> \n</ol> \n<p> <strong>进阶：</strong></p> \n<p>如果不得使用临时缓冲区，该怎么解决？</p>');
INSERT INTO `leecode` VALUES ('面试题 02.02. 返回倒数第 k 个节点', '<p>实现一种算法，找出单向链表中倒数第 k 个节点。返回该节点的值。</p> \n<p><strong>注意：</strong>本题相对原题稍作改动</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5 和 <em>k</em> = 2\n<strong>输出： </strong>4</pre> \n<p><strong>说明：</strong></p> \n<p>给定的 <em>k</em>&nbsp;保证是有效的。</p>');
INSERT INTO `leecode` VALUES ('面试题 02.03. 删除中间节点', '<p>若链表中的某个节点，既不是链表头节点，也不是链表尾节点，则称其为该链表的「中间节点」。</p> \n<p>假定已知链表的某一个中间节点，请实现一种算法，将该节点从链表中删除。</p> \n<p>例如，传入节点&nbsp;<code>c</code>（位于单向链表&nbsp;<code>a-&gt;b-&gt;c-&gt;d-&gt;e-&gt;f</code>&nbsp;中），将其删除后，剩余链表为&nbsp;<code>a-&gt;b-&gt;d-&gt;e-&gt;f</code></p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>节点&nbsp;5&nbsp;（位于单向链表&nbsp;4-&gt;5-&gt;1-&gt;9&nbsp;中）\n<strong>输出：</strong>不返回任何数据，从链表中删除传入的节点 5，使链表变为&nbsp;4-&gt;1-&gt;9\n</pre> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('面试题 02.04. 分割链表', '<p>给你一个链表的头节点 <code>head</code> 和一个特定值<em> </em><code>x</code> ，请你对链表进行分隔，使得所有 <strong>小于</strong> <code>x</code> 的节点都出现在 <strong>大于或等于</strong> <code>x</code> 的节点之前。</p> \n<p>你不需要&nbsp;<strong>保留</strong>&nbsp;每个分区中各节点的初始相对位置。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<img style=\"width: 662px; height: 222px;\" src=\"https://assets.leetcode.com/uploads/2021/01/04/partition.jpg\" alt=\"\"> \n<pre><strong>输入：</strong>head = [1,4,3,2,5,2], x = 3\n<strong>输出</strong>：[1,2,2,4,3,5]\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>head = [2,1], x = 2\n<strong>输出</strong>：[1,2]\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>链表中节点的数目在范围 <code>[0, 200]</code> 内</li> \n <li><code>-100 &lt;= Node.val &lt;= 100</code></li> \n <li><code>-200 &lt;= x &lt;= 200</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 02.05. 链表求和', '<p>给定两个用链表表示的整数，每个节点包含一个数位。</p> \n<p>这些数位是反向存放的，也就是个位排在链表首部。</p> \n<p>编写函数对这两个整数求和，并用链表形式返回结果。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>(7 -&gt; 1 -&gt; 6) + (5 -&gt; 9 -&gt; 2)，即617 + 295\n<strong>输出：</strong>2 -&gt; 1 -&gt; 9，即912\n</pre> \n<p><strong>进阶：</strong>思考一下，假设这些数位是正向存放的，又该如何解决呢?</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>(6 -&gt; 1 -&gt; 7) + (2 -&gt; 9 -&gt; 5)，即617 + 295\n<strong>输出：</strong>9 -&gt; 1 -&gt; 2，即912\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 02.06. 回文链表', '<p>编写一个函数，检查输入的链表是否是回文的。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入： </strong>1-&gt;2\n<strong>输出：</strong> false \n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入： </strong>1-&gt;2-&gt;2-&gt;1\n<strong>输出：</strong> true \n</pre> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong><br> 你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p>');
INSERT INTO `leecode` VALUES ('面试题 02.07. 链表相交', '<p>给你两个单链表的头节点&nbsp;<code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p> \n<p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p> \n<p><a href=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\"><img style=\"height: 130px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\" alt=\"\"></a></p> \n<p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p> \n<p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png\"><img style=\"height: 130px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png\" alt=\"\"></a></p> \n<pre><strong>输入：</strong>intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n<strong>输出：</strong>Intersected at \'8\'\n<strong>解释：</strong>相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。\n在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n</pre> \n<p><strong>示例&nbsp;2：</strong></p> \n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png\"><img style=\"height: 136px; width: 350px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png\" alt=\"\"></a></p> \n<pre><strong>输入：</strong>intersectVal&nbsp;= 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n<strong>输出：</strong>Intersected at \'2\'\n<strong>解释：</strong>相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。\n在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n</pre> \n<p><strong>示例&nbsp;3：</strong></p> \n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png\"><img style=\"height: 126px; width: 200px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png\" alt=\"\"></a></p> \n<pre><strong>输入：</strong>intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n<strong>输出：</strong>null\n<strong>解释：</strong>从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。\n由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n这两个链表不相交，因此返回 null 。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>listA</code> 中节点数目为 <code>m</code></li> \n <li><code>listB</code> 中节点数目为 <code>n</code></li> \n <li><code>0 &lt;= m, n &lt;= 3 * 10<sup>4</sup></code></li> \n <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> \n <li><code>0 &lt;= skipA &lt;= m</code></li> \n <li><code>0 &lt;= skipB &lt;= n</code></li> \n <li>如果 <code>listA</code> 和 <code>listB</code> 没有交点，<code>intersectVal</code> 为 <code>0</code></li> \n <li>如果 <code>listA</code> 和 <code>listB</code> 有交点，<code>intersectVal == listA[skipA + 1] == listB[skipB + 1]</code></li> \n</ul> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong>你能否设计一个时间复杂度 <code>O(n)</code> 、仅用 <code>O(1)</code> 内存的解决方案？</p>');
INSERT INTO `leecode` VALUES ('面试题 02.08. 环路检测', '<p>给定一个链表，如果它是有环链表，实现一个算法返回环路的<code>开头节点</code>。若环不存在，请返回 <code>null</code>。</p> \n<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<p><img style=\"height: 97px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [3,2,0,-4], pos = 1\n<strong>输出：</strong>tail connects to node index 1\n<strong>解释：</strong>链表中有一个环，其尾部连接到第二个节点。\n</pre> \n<p><strong>示例 2：</strong></p> \n<p><img style=\"height: 74px; width: 141px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [1,2], pos = 0\n<strong>输出：</strong>tail connects to node index 0\n<strong>解释：</strong>链表中有一个环，其尾部连接到第一个节点。\n</pre> \n<p><strong>示例 3：</strong></p> \n<p><img style=\"height: 45px; width: 45px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" alt=\"\"></p> \n<pre><strong>输入：</strong>head = [1], pos = -1\n<strong>输出：</strong>no cycle\n<strong>解释：</strong>链表中没有环。</pre> \n<p>&nbsp;</p> \n<p><strong>进阶：</strong></p> \n<ul> \n <li>你是否可以不用额外空间解决此题？</li> \n</ul> \n<p>&nbsp;</p>');
INSERT INTO `leecode` VALUES ('面试题 03.01. 三合一', '<p>三合一。描述如何只用一个数组来实现三个栈。</p> \n<p>你应该实现<code>push(stackNum, value)</code>、<code>pop(stackNum)</code>、<code>isEmpty(stackNum)</code>、<code>peek(stackNum)</code>方法。<code>stackNum</code>表示栈下标，<code>value</code>表示压入的值。</p> \n<p>构造函数会传入一个<code>stackSize</code>参数，代表每个栈的大小。</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：\n[\"TripleInOne\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"isEmpty\"]\n[[1], [0, 1], [0, 2], [0], [0], [0], [0]]\n<strong> 输出</strong>：\n[null, null, null, 1, -1, -1, true]\n<strong>说明</strong>：当栈为空时`pop, peek`返回-1，当栈满时`push`不压入元素。\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：\n[\"TripleInOne\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"peek\"]\n[[2], [0, 1], [0, 2], [0, 3], [0], [0], [0], [0]]\n<strong> 输出</strong>：\n[null, null, null, null, 2, 1, -1, -1]\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 03.02. 栈的最小值', '<p>请设计一个栈，除了常规栈支持的pop与push函数以外，还支持min函数，该函数返回栈元素中的最小值。执行push、pop和min操作的时间复杂度必须为O(1)。</p>\n<br>\n<p><strong>示例：</strong></p>\n<pre>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin();   --&gt; 返回 -3.<br>minStack.pop();<br>minStack.top();      --&gt; 返回 0.<br>minStack.getMin();   --&gt; 返回 -2.</pre>\n<p></p>');
INSERT INTO `leecode` VALUES ('面试题 03.03. 堆盘子', '<p>堆盘子。设想有一堆盘子，堆太高可能会倒下来。因此，在现实生活中，盘子堆到一定高度时，我们就会另外堆一堆盘子。请实现数据结构<code>SetOfStacks</code>，模拟这种行为。<code>SetOfStacks</code>应该由多个栈组成，并且在前一个栈填满时新建一个栈。此外，<code>SetOfStacks.push()</code>和<code>SetOfStacks.pop()</code>应该与普通栈的操作方法相同（也就是说，pop()返回的值，应该跟只有一个栈时的情况一样）。 进阶：实现一个<code>popAt(int index)</code>方法，根据指定的子栈，执行pop操作。</p> \n<p>当某个栈为空时，应当删除该栈。当栈中没有元素或不存在该栈时，<code>pop</code>，<code>popAt</code>&nbsp;应返回 -1.</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：\n[\"StackOfPlates\", \"push\", \"push\", \"popAt\", \"pop\", \"pop\"]\n[[1], [1], [2], [1], [], []]\n<strong> 输出</strong>：\n[null, null, null, 2, 1, -1]\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：\n[\"StackOfPlates\", \"push\", \"push\", \"push\", \"popAt\", \"popAt\", \"popAt\"]\n[[2], [1], [2], [3], [0], [0], [0]]\n<strong> 输出</strong>：\n[null, null, null, null, 2, 1, 3]\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 03.04. 化栈为队', '<p>实现一个MyQueue类，该类用两个栈来实现一个队列。</p>\n<br>\n<p><strong>示例：</strong></p>\n<pre>MyQueue queue = new MyQueue();<br><br>queue.push(1);<br>queue.push(2);<br>queue.peek();  // 返回 1<br>queue.pop();   // 返回 1<br>queue.empty(); // 返回 false</pre>\n<p></p>\n<br>\n<p><strong>说明：</strong><br></p>\n<ul>\n <li>你只能使用标准的栈操作 -- 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code> 和 <code>is empty</code> 操作是合法的。</li>\n <li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>\n <li>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</li>\n</ul>\n<p></p>');
INSERT INTO `leecode` VALUES ('面试题 03.05. 栈排序', '<p>栈排序。 编写程序，对栈进行排序使最小元素位于栈顶。最多只能使用一个其他的临时栈存放数据，但不得将元素复制到别的数据结构（如数组）中。该栈支持如下操作：<code>push</code>、<code>pop</code>、<code>peek</code> 和 <code>isEmpty</code>。当栈为空时，<code>peek</code>&nbsp;返回 -1。</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：\n[\"SortedStack\", \"push\", \"push\", \"peek\", \"pop\", \"peek\"]\n[[], [1], [2], [], [], []]\n<strong> 输出</strong>：\n[null,null,null,1,null,2]\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>： \n[\"SortedStack\", \"pop\", \"pop\", \"push\", \"pop\", \"isEmpty\"]\n[[], [], [], [1], [], []]\n<strong> 输出</strong>：\n[null,null,null,null,null,true]\n</pre> \n<p><strong>说明:</strong></p> \n<ol> \n <li>栈中的元素数目在[0, 5000]范围内。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 03.06. 动物收容所', '<p>动物收容所。有家动物收容所只收容狗与猫，且严格遵守“先进先出”的原则。在收养该收容所的动物时，收养人只能收养所有动物中“最老”（由其进入收容所的时间长短而定）的动物，或者可以挑选猫或狗（同时必须收养此类动物中“最老”的）。换言之，收养人不能自由挑选想收养的对象。请创建适用于这个系统的数据结构，实现各种操作方法，比如<code>enqueue</code>、<code>dequeueAny</code>、<code>dequeueDog</code>和<code>dequeueCat</code>。允许使用Java内置的LinkedList数据结构。</p> \n<p><code>enqueue</code>方法有一个<code>animal</code>参数，<code>animal[0]</code>代表动物编号，<code>animal[1]</code>代表动物种类，其中 0 代表猫，1 代表狗。</p> \n<p><code>dequeue*</code>方法返回一个列表<code>[动物编号, 动物种类]</code>，若没有可以收养的动物，则返回<code>[-1,-1]</code>。</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：\n[\"AnimalShelf\", \"enqueue\", \"enqueue\", \"dequeueCat\", \"dequeueDog\", \"dequeueAny\"]\n[[], [[0, 0]], [[1, 0]], [], [], []]\n<strong> 输出</strong>：\n[null,null,null,[0,0],[-1,-1],[1,0]]\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：\n[\"AnimalShelf\", \"enqueue\", \"enqueue\", \"enqueue\", \"dequeueDog\", \"dequeueCat\", \"dequeueAny\"]\n[[], [[0, 0]], [[1, 0]], [[2, 1]], [], [], []]\n<strong> 输出</strong>：\n[null,null,null,null,[2,1],[0,0],[1,0]]\n</pre> \n<p><strong>说明:</strong></p> \n<ol> \n <li>收纳所的最大容量为20000</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 04.01. 节点间通路', '<p>节点间通路。给定有向图，设计一个算法，找出两个节点之间是否存在一条路径。</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：n = 3, graph = [[0, 1], [0, 2], [1, 2], [1, 2]], start = 0, target = 2\n<strong> 输出</strong>：true\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：n = 5, graph = [[0, 1], [0, 2], [0, 4], [0, 4], [0, 1], [1, 3], [1, 4], [1, 3], [2, 3], [3, 4]], start = 0, target = 4\n<strong> 输出</strong> true\n</pre> \n<p><strong>提示：</strong></p> \n<ol> \n <li>节点数量n在[0, 1e5]范围内。</li> \n <li>节点编号大于等于 0 小于 n。</li> \n <li>图中可能存在自环和平行边。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 04.02. 最小高度树', '<p>给定一个有序整数数组，元素各不相同且按升序排列，编写一个算法，创建一棵高度最小的二叉搜索树。</p>\n<strong>示例:</strong>\n<pre>给定有序数组: [-10,-3,0,5,9],<br><br>一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：<br><br>          0 <br>         / \\ <br>       -3   9 <br>       /   / <br>     -10  5 <br></pre>');
INSERT INTO `leecode` VALUES ('面试题 04.03. 特定深度节点链表', '<p>给定一棵二叉树，设计一个算法，创建含有某一深度上所有节点的链表（比如，若一棵树的深度为 <code>D</code>，则会创建出 <code>D</code> 个链表）。返回一个包含所有深度的链表的数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>[1,2,3,4,5,null,7,8]\n\n        1\n       /  \\ \n      2    3\n     / \\    \\ \n    4   5    7\n   /\n  8\n\n<strong>输出：</strong>[[1],[2,3],[4,5,7],[8]]\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 04.04. 检查平衡性', '<p>实现一个函数，检查二叉树是否平衡。在这个问题中，平衡树的定义如下：任意一个节点，其两棵子树的高度差不超过 1。</p>\n<br>\n<strong>示例 1:</strong>\n<pre>给定二叉树 [3,9,20,null,null,15,7]<br>    3<br>   / \\<br>  9  20<br>    /  \\<br>   15   7<br>返回 true 。</pre>\n<strong>示例 2:</strong>\n<br>\n<pre>给定二叉树 [1,2,2,3,3,null,null,4,4]<br>      1<br>     / \\<br>    2   2<br>   / \\<br>  3   3<br> / \\<br>4   4<br>返回&nbsp;false 。</pre>');
INSERT INTO `leecode` VALUES ('面试题 04.05. 合法二叉搜索树', '<p>实现一个函数，检查一棵二叉树是否为二叉搜索树。</p>\n<strong>示例&nbsp;1:</strong>\n<pre><strong>输入:</strong><br>    2<br>   / \\<br>  1   3<br><strong>输出:</strong> true<br></pre>\n<strong>示例&nbsp;2:</strong>\n<pre><strong>输入:</strong><br>    5<br>   / \\<br>  1   4<br>&nbsp;    / \\<br>&nbsp;   3   6<br><strong>输出:</strong> false<br><strong>解释:</strong> 输入为: [5,1,4,null,null,3,6]。<br>&nbsp;    根节点的值为 5 ，但是其右子节点值为 4 。</pre>');
INSERT INTO `leecode` VALUES ('面试题 04.06. 后继者', '<p>设计一个算法，找出二叉搜索树中指定节点的“下一个”节点（也即中序后继）。</p> \n<p>如果指定节点没有对应的“下一个”节点，则返回<code>null</code>。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> root = <code>[2,1,3], p = 1\n\n  2\n / \\\n1   3\n</code>\n<strong>输出:</strong> 2</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> root = <code>[5,3,6,2,4,null,null,1], p = 6\n\n      5\n     / \\\n    3   6\n   / \\\n  2   4\n /   \n1\n</code>\n<strong>输出:</strong> null</pre>');
INSERT INTO `leecode` VALUES ('面试题 04.08. 首个共同祖先', '<p>设计并实现一个算法，找出二叉树中某两个节点的第一个共同祖先。不得将其他的节点存储在另外的数据结构中。注意：这不一定是二叉搜索树。</p> \n<p>例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4]</p> \n<pre>    3\n   / \\\n  5   1\n / \\ / \\\n6  2 0  8\n  / \\\n 7   4\n</pre> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n<strong>输出:</strong> 3\n<strong>解释:</strong> 节点 5 和节点 1 的最近公共祖先是节点 3。</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n<strong>输出:</strong> 5\n<strong>解释:</strong> 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</pre> \n<p><strong>说明:</strong></p> \n<pre>所有节点的值都是唯一的。\np、q 为不同节点且均存在于给定的二叉树中。</pre>');
INSERT INTO `leecode` VALUES ('面试题 04.09. 二叉搜索树序列', '<p>从左向右遍历一个数组，通过不断将其中的元素插入树中可以逐步地生成一棵二叉搜索树。给定一个由不同节点组成的二叉搜索树，输出所有可能生成此树的数组。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong><br> 给定如下二叉树</p> \n<pre>        2\n       / \\\n      1   3\n</pre> \n<p>返回：</p> \n<pre>[\n   [2,1,3],\n   [2,3,1]\n]\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 04.10. 检查子树', '<p>检查子树。你有两棵非常大的二叉树：T1，有几万个节点；T2，有几万个节点。设计一个算法，判断 T2 是否为 T1 的子树。</p> \n<p>如果 T1 有这么一个节点 n，其子树与 T2 一模一样，则 T2 为 T1 的子树，也就是说，从节点 n 处把树砍断，得到的树与 T2 完全相同。</p> \n<p><strong>注意：</strong>此题相对书上原题略有改动。</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：t1 = [1, 2, 3], t2 = [2]\n<strong> 输出</strong>：true\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：t1 = [1, null, 2, 4], t2 = [3, 2]\n<strong> 输出</strong>：false\n</pre> \n<p><strong>提示：</strong></p> \n<ol> \n <li>树的节点数目范围为[0, 20000]。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 04.12. 求和路径', '<p>给定一棵二叉树，其中每个节点都含有一个整数数值(该值或正或负)。设计一个算法，打印节点数值总和等于某个给定值的所有路径的数量。注意，路径不一定非得从二叉树的根节点或叶节点开始或结束，但是其方向必须向下(只能从父节点指向子节点方向)。</p> \n<p><strong>示例:</strong><br> 给定如下二叉树，以及目标和&nbsp;<code>sum = 22</code>，</p> \n<pre>              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\    / \\\n        7    2  5   1\n</pre> \n<p>返回:</p> \n<pre>3\n<strong>解释：</strong>和为 22&nbsp;的路径有：[5,4,11,2], [5,8,4,5], [4,11,7]</pre> \n<p>提示：</p> \n<ul> \n <li><code>节点总数 &lt;= 10000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 05.01. 插入', '<p>给定两个整型数字 <code>N</code> 与 <code>M</code>，以及表示比特位置的 <code>i</code> 与 <code>j</code>（<code>i &lt;= j</code>，且从 0 位开始计算）。</p> \n<p>编写一种方法，使 <code>M</code> 对应的二进制数字插入 <code>N</code> 对应的二进制数字的第 <code>i ~ j</code> 位区域，不足之处用 <code>0</code> 补齐。具体插入过程如图所示。</p> \n<p><img style=\"width: 267px; height: 200px;\" src=\"https://pic.leetcode-cn.com/1610104070-NuLVQi-05.01.gif\" alt=\"\"></p> \n<p>题目保证从 <code>i</code> 位到 <code>j</code> 位足以容纳 <code>M</code>， 例如： <code>M = 10011</code>，则 <code>i～j</code> 区域至少可容纳 5 位。</p> \n<p>&nbsp;</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：N = 1024(10000000000), M = 19(10011), i = 2, j = 6\n<strong> 输出</strong>：N = 1100(10001001100)\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>： N = 0, M = 31(11111), i = 0, j = 4\n<strong> 输出</strong>：N = 31(11111)\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 05.02. 二进制数转字符串', '<p>二进制数转字符串。给定一个介于0和1之间的实数（如0.72），类型为double，打印它的二进制表达式。如果该数字无法精确地用32位以内的二进制表示，则打印“ERROR”。</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：0.625\n<strong> 输出</strong>：\"0.101\"\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：0.1\n<strong> 输出</strong>：\"ERROR\"\n<strong> 提示</strong>：0.1无法被二进制准确表示\n</pre> \n<p><strong>提示：</strong></p> \n<ol> \n <li>32位包括输出中的\"0.\"这两位。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 05.03. 翻转数位', '<p>给定一个32位整数 <code>num</code>，你可以将一个数位从0变为1。请编写一个程序，找出你能够获得的最长的一串1的长度。</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入:</strong> <code>num</code> = 1775(11011101111<sub>2</sub>)\n<strong>输出:</strong> 8\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入:</strong> <code>num</code> = 7(0111<sub>2</sub>)\n<strong>输出:</strong> 4\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 05.04. 下一个数', '<p>下一个数。给定一个正整数，找出与其二进制表达式中1的个数相同且大小最接近的那两个数（一个略大，一个略小）。</p> \n<p> <strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：num = 2（或者0b10）\n<strong> 输出</strong>：[4, 1] 或者（[0b100, 0b1]）\n</pre> \n<p> <strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：num = 1\n<strong> 输出</strong>：[2, -1]\n</pre> \n<p> <strong>提示:</strong></p> \n<ol> \n <li><code>num</code>的范围在[1, 2147483647]之间；</li> \n <li>如果找不到前一个或者后一个满足条件的正数，那么输出 -1。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 05.06. 整数转换', '<p>整数转换。编写一个函数，确定需要改变几个位才能将整数A转成整数B。</p> \n<p> <strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：A = 29 （或者0b11101）, B = 15（或者0b01111）\n<strong> 输出</strong>：2\n</pre> \n<p> <strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：A = 1，B = 2\n<strong> 输出</strong>：2\n</pre> \n<p> <strong>提示:</strong></p> \n<ol> \n <li>A，B范围在[-2147483648, 2147483647]之间</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 05.07. 配对交换', '<p>配对交换。编写程序，交换某个整数的奇数位和偶数位，尽量使用较少的指令（也就是说，位0与位1交换，位2与位3交换，以此类推）。</p> \n<p> <strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：num = 2（或者0b10）\n<strong> 输出</strong> 1 (或者 0b01)\n</pre> \n<p> <strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：num = 3\n<strong> 输出</strong>：3\n</pre> \n<p> <strong>提示:</strong></p> \n<ol> \n <li><code>num</code>的范围在[0, 2^30 - 1]之间，不会发生整数溢出。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 05.08. 绘制直线', '<p>绘制直线。有个单色屏幕存储在一个一维数组中，使得32个连续像素可以存放在一个 int 里。屏幕宽度为<code>w</code>，且<code>w</code>可被32整除（即一个 int 不会分布在两行上），屏幕高度可由数组长度及屏幕宽度推算得出。请实现一个函数，绘制从点<code>(x1, y)</code>到点<code>(x2, y)</code>的水平线。</p> \n<p>给出数组的长度 <code>length</code>，宽度 <code>w</code>（以比特为单位）、直线开始位置 <code>x1</code>（比特为单位）、直线结束位置 <code>x2</code>（比特为单位）、直线所在行数&nbsp;<code>y</code>。返回绘制过后的数组。</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：length = 1, w = 32, x1 = 30, x2 = 31, y = 0\n<strong> 输出</strong>：[3]\n<strong> 说明</strong>：在第0行的第30位到第31为画一条直线，屏幕表示为[0b000000000000000000000000000000011]\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：length = 3, w = 96, x1 = 0, x2 = 95, y = 0\n<strong> 输出</strong>：[-1, -1, -1]\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 08.01. 三步问题', '<p>三步问题。有个小孩正在上楼梯，楼梯有n阶台阶，小孩一次可以上1阶、2阶或3阶。实现一种方法，计算小孩有多少种上楼梯的方式。结果可能很大，你需要对结果模1000000007。</p> \n<p> <strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：n = 3 \n<strong> 输出</strong>：4\n<strong> 说明</strong>: 有四种走法\n</pre> \n<p> <strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：n = 5\n<strong> 输出</strong>：13\n</pre> \n<p> <strong>提示:</strong></p> \n<ol> \n <li>n范围在[1, 1000000]之间</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 08.02. 迷路的机器人', '<p>设想有个机器人坐在一个网格的左上角，网格 r 行 c 列。机器人只能向下或向右移动，但不能走到一些被禁止的网格（有障碍物）。设计一种算法，寻找机器人从左上角移动到右下角的路径。</p> \n<p><img style=\"height: 183px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\"></p> \n<p>网格中的障碍物和空位置分别用 <code>1</code> 和 <code>0</code> 来表示。</p> \n<p>返回一条可行的路径，路径由经过的网格的行号和列号组成。左上角为 0 行 0 列。如果没有可行的路径，返回空数组。</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入:\n</strong>[\n&nbsp; [<strong>0</strong>,<strong>0</strong>,<strong>0</strong>],\n&nbsp; [0,1,<strong>0</strong>],\n&nbsp; [0,0,<strong>0</strong>]\n]\n<strong>输出:</strong> [[0,0],[0,1],[0,2],[1,2],[2,2]]\n<strong>解释: \n</strong>输入中标粗的位置即为输出表示的路径，即\n0行0列（左上角） -&gt; 0行1列 -&gt; 0行2列 -&gt; 1行2列 -&gt; 2行2列（右下角）</pre> \n<p><strong>说明：</strong><em>r</em>&nbsp;和 <em>c </em>的值均不超过 100。</p>');
INSERT INTO `leecode` VALUES ('面试题 08.03. 魔术索引', '<p>魔术索引。 在数组<code>A[0...n-1]</code>中，有所谓的魔术索引，满足条件<code>A[i] = i</code>。给定一个有序整数数组，编写一种方法找出魔术索引，若有的话，在数组A中找出一个魔术索引，如果没有，则返回-1。若有多个魔术索引，返回索引值最小的一个。</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：nums = [0, 2, 3, 4, 5]\n<strong> 输出</strong>：0\n<strong> 说明</strong>: 0下标的元素为0\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：nums = [1, 1, 1]\n<strong> 输出</strong>：1\n</pre> \n<p><strong>说明:</strong></p> \n<ol> \n <li>nums长度在[1, 1000000]之间</li> \n <li>此题为原书中的 Follow-up，即数组中可能包含重复元素的版本</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 08.04. 幂集', '<p>幂集。编写一种方法，返回某集合的所有子集。集合中<strong>不包含重复的元素</strong>。</p> \n<p>说明：解集不能包含重复的子集。</p> \n<p><strong>示例:</strong></p> \n<pre><strong> 输入</strong>： nums = [1,2,3]\n<strong> 输出</strong>：\n[\n  [3],\n&nbsp; [1],\n&nbsp; [2],\n&nbsp; [1,2,3],\n&nbsp; [1,3],\n&nbsp; [2,3],\n&nbsp; [1,2],\n&nbsp; []\n]\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 08.05. 递归乘法', '<p>递归乘法。 写一个递归函数，不使用 * 运算符， 实现两个正整数的相乘。可以使用加号、减号、位移，但要吝啬一些。</p> \n<p> <strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：A = 1, B = 10\n<strong> 输出</strong>：10\n</pre> \n<p> <strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：A = 3, B = 4\n<strong> 输出</strong>：12\n</pre> \n<p> <strong>提示:</strong></p> \n<ol> \n <li>保证乘法范围不会溢出</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 08.06. 汉诺塔问题', '<p>在经典汉诺塔问题中，有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上(即每一个盘子只能放在更大的盘子上面)。移动圆盘时受到以下限制:<br> (1) 每次只能移动一个盘子;<br> (2) 盘子只能从柱子顶端滑出移到下一根柱子;<br> (3) 盘子只能叠在比它大的盘子上。</p> \n<p>请编写程序，用栈将所有盘子从第一根柱子移到最后一根柱子。</p> \n<p>你需要原地修改栈。</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：A = [2, 1, 0], B = [], C = []\n<strong> 输出</strong>：C = [2, 1, 0]\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：A = [1, 0], B = [], C = []\n<strong> 输出</strong>：C = [1, 0]\n</pre> \n<p><strong>提示:</strong></p> \n<ol> \n <li>A中盘子的数目不大于14个。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 08.07. 无重复字符串的排列组合', '<p>无重复字符串的排列组合。编写一种方法，计算某字符串的所有排列组合，字符串每个字符均不相同。</p> \n<p> <strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：S = \"qwe\"\n<strong> 输出</strong>：[\"qwe\", \"qew\", \"wqe\", \"weq\", \"ewq\", \"eqw\"]\n</pre> \n<p> <strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：S = \"ab\"\n<strong> 输出</strong>：[\"ab\", \"ba\"]\n</pre> \n<p> <strong>提示:</strong></p> \n<ol> \n <li>字符都是英文字母。</li> \n <li>字符串长度在[1, 9]之间。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 08.08. 有重复字符串的排列组合', '<p>有重复字符串的排列组合。编写一种方法，计算某字符串的所有排列组合。</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：S = \"qqe\"\n<strong> 输出</strong>：[\"eqq\",\"qeq\",\"qqe\"]\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：S = \"ab\"\n<strong> 输出</strong>：[\"ab\", \"ba\"]\n</pre> \n<p><strong>提示:</strong></p> \n<ol> \n <li>字符都是英文字母。</li> \n <li>字符串长度在[1, 9]之间。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 08.09. 括号', '<p>括号。设计一种算法，打印n对括号的所有合法的（例如，开闭一一对应）组合。</p> \n<p>说明：解集不能包含重复的子集。</p> \n<p>例如，给出&nbsp;n = 3，生成结果为：</p> \n<pre>[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 08.10. 颜色填充', '<p>编写函数，实现许多图片编辑软件都支持的「颜色填充」功能。</p> \n<p>待填充的图像用二维数组 <code>image</code> 表示，元素为初始颜色值。初始坐标点的行坐标为 <code>sr</code> 列坐标为 <code>sc</code>。需要填充的新颜色为 <code>newColor</code> 。</p> \n<p>「周围区域」是指颜色相同且在上、下、左、右四个方向上存在相连情况的若干元素。</p> \n<p>请用新颜色填充初始坐标点的周围区域，并返回填充后的图像。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入</strong>：\nimage = [[1,1,1],[1,1,0],[1,0,1]] \nsr = 1, sc = 1, newColor = 2\n<strong>输出</strong>：[[2,2,2],[2,2,0],[2,0,1]]\n<strong>解释</strong>: \n初始坐标点位于图像的正中间，坐标 (sr,sc)=(1,1) 。\n初始坐标点周围区域上所有符合条件的像素点的颜色都被更改成 2 。\n注意，右下角的像素没有更改为 2 ，因为它不属于初始坐标点的周围区域。\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>image</code> 和&nbsp;<code>image[0]</code>&nbsp;的长度均在范围&nbsp;[1, 50] 内。</li> \n <li>初始坐标点 <code>(sr,sc)</code> 满足&nbsp;<code>0 &lt;= sr &lt; image.length</code> 和&nbsp;<code>0 &lt;= sc &lt; image[0].length</code> 。</li> \n <li><code>image[i][j]</code> 和&nbsp;<code>newColor</code>&nbsp;表示的颜色值在范围&nbsp;<code>[0, 65535]</code> 内。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 08.11. 硬币', '<p>硬币。给定数量不限的硬币，币值为25分、10分、5分和1分，编写代码计算n分有几种表示法。(结果可能会很大，你需要将结果模上1000000007)</p> \n<p> <strong>示例1:</strong></p> \n<pre><strong> 输入</strong>: n = 5\n<strong> 输出</strong>：2\n<strong> 解释</strong>: 有两种方式可以凑成总金额:\n5=5\n5=1+1+1+1+1\n</pre> \n<p> <strong>示例2:</strong></p> \n<pre><strong> 输入</strong>: n = 10\n<strong> 输出</strong>：4\n<strong> 解释</strong>: 有四种方式可以凑成总金额:\n10=10\n10=5+5\n10=5+1+1+1+1+1\n10=1+1+1+1+1+1+1+1+1+1\n</pre> \n<p> <strong>说明：</strong></p> \n<p>注意:</p> \n<p>你可以假设：</p> \n<ul> \n <li>0 &lt;= n (总金额) &lt;= 1000000</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 08.12. 八皇后', '<p>设计一种算法，打印 N 皇后在 N × N 棋盘上的各种摆法，其中每个皇后都不同行、不同列，也不在对角线上。这里的“对角线”指的是所有的对角线，不只是平分整个棋盘的那两条对角线。</p> \n<p><strong>注意：</strong>本题相对原题做了扩展</p> \n<p><strong>示例:</strong></p> \n<pre><strong> 输入</strong>：4\n<strong> 输出</strong>：[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n<strong> 解释</strong>: 4 皇后问题存在如下两个不同的解法。\n[\n&nbsp;[\".Q..\", &nbsp;// 解法 1\n&nbsp; \"...Q\",\n&nbsp; \"Q...\",\n&nbsp; \"..Q.\"],\n\n&nbsp;[\"..Q.\", &nbsp;// 解法 2\n&nbsp; \"Q...\",\n&nbsp; \"...Q\",\n&nbsp; \".Q..\"]\n]\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 08.13. 堆箱子', '<p>堆箱子。给你一堆n个箱子，箱子宽 wi、深 di、高 hi。箱子不能翻转，将箱子堆起来时，下面箱子的宽度、高度和深度必须大于上面的箱子。实现一种方法，搭出最高的一堆箱子。箱堆的高度为每个箱子高度的总和。</p> \n<p>输入使用数组<code>[wi, di, hi]</code>表示每个箱子。</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>：box = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n<strong> 输出</strong>：6\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：box = [[1, 1, 1], [2, 3, 4], [2, 6, 7], [3, 4, 5]]\n<strong> 输出</strong>：10\n</pre> \n<p><strong>提示:</strong></p> \n<ol> \n <li>箱子的数目不大于3000个。</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 08.14. 布尔运算', '<p>给定一个布尔表达式和一个期望的布尔结果 result，布尔表达式由 <code>0</code> (false)、<code>1</code> (true)、<code>&amp;</code> (AND)、 <code>|</code> (OR) 和 <code>^</code> (XOR) 符号组成。实现一个函数，算出有几种可使该表达式得出 result 值的括号方法。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>s = \"1^0|0|1\", result = 0\n\n<strong>输出: </strong>2\n<strong>解释:</strong>&nbsp;两种可能的括号方法是\n1^(0|(0|1))\n1^((0|0)|1)\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>s = \"0&amp;0&amp;0&amp;1^1|0\", result = 1\n\n<strong>输出: </strong>10</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li>运算符的数量不超过 19 个</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 10.01. 合并排序的数组', '<p>给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。</p> \n<p>初始化&nbsp;A 和 B 的元素数量分别为&nbsp;<em>m</em> 和 <em>n</em>。</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong>\nA = [1,2,3,0,0,0], m = 3\nB = [2,5,6],       n = 3\n\n<strong>输出:</strong>&nbsp;[1,2,2,3,5,6]</pre> \n<p><strong>说明:</strong></p> \n<ul> \n <li><code>A.length == n + m</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 10.02. 变位词组', '<p>编写一种方法，对字符串数组进行排序，将所有变位词组合在一起。变位词是指字母相同，但排列不同的字符串。</p> \n<p><strong>注意：</strong>本题相对原题稍作修改</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> <code>[\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]</code>,\n<strong>输出:</strong>\n[\n  [\"ate\",\"eat\",\"tea\"],\n  [\"nat\",\"tan\"],\n  [\"bat\"]\n]</pre> \n<p><strong>说明：</strong></p> \n<ul> \n <li>所有输入均为小写字母。</li> \n <li>不考虑答案输出的顺序。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 10.03. 搜索旋转数组', '<p>搜索旋转数组。给定一个排序后的数组，包含n个整数，但这个数组已被旋转过很多次了，次数不详。请编写代码找出数组中的某个元素，假设数组元素原先是按升序排列的。若有多个相同元素，返回索引值最小的一个。</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>: arr = [15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14], target = 5\n<strong> 输出</strong>: 8（元素5在该数组中的索引）\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：arr = [15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14], target = 11\n<strong> 输出</strong>：-1 （没有找到）\n</pre> \n<p><strong>提示:</strong></p> \n<ol> \n <li>arr 长度范围在[1, 1000000]之间</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 10.05. 稀疏数组搜索', '<p>稀疏数组搜索。有个排好序的字符串数组，其中散布着一些空字符串，编写一种方法，找出给定字符串的位置。</p> \n<p><strong>示例1:</strong></p> \n<pre><strong> 输入</strong>: words = [\"at\", \"\", \"\", \"\", \"ball\", \"\", \"\", \"car\", \"\", \"\",\"dad\", \"\", \"\"], s = \"ta\"\n<strong> 输出</strong>：-1\n<strong> 说明</strong>: 不存在返回-1。\n</pre> \n<p><strong>示例2:</strong></p> \n<pre><strong> 输入</strong>：words = [\"at\", \"\", \"\", \"\", \"ball\", \"\", \"\", \"car\", \"\", \"\",\"dad\", \"\", \"\"], s = \"ball\"\n<strong> 输出</strong>：4\n</pre> \n<p><strong>提示:</strong></p> \n<ol> \n <li>words的长度在[1, 1000000]之间</li> \n</ol>');
INSERT INTO `leecode` VALUES ('面试题 10.09. 排序矩阵查找', '<p>给定M×N矩阵，每一行、每一列都按升序排列，请编写代码找出某元素。</p> \n<p><strong>示例:</strong></p> \n<p>现有矩阵 matrix 如下：</p> \n<pre>[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n</pre> \n<p>给定 target&nbsp;=&nbsp;<code>5</code>，返回&nbsp;<code>true</code>。</p> \n<p>给定&nbsp;target&nbsp;=&nbsp;<code>20</code>，返回&nbsp;<code>false</code>。</p>');
INSERT INTO `leecode` VALUES ('面试题 10.10. 数字流的秩', '<p>假设你正在读取一串整数。每隔一段时间，你希望能找出数字 x 的秩(小于或等于 x 的值的个数)。请实现数据结构和算法来支持这些操作，也就是说：</p> \n<p>实现 <code>track(int x)</code>&nbsp;方法，每读入一个数字都会调用该方法；</p> \n<p>实现 <code>getRankOfNumber(int x)</code> 方法，返回小于或等于 x 的值的个数。</p> \n<p><strong>注意：</strong>本题相对原题稍作改动</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong>\n[\"StreamRank\", \"getRankOfNumber\", \"track\", \"getRankOfNumber\"]\n[[], [1], [0], [0]]\n<strong>输出:\n</strong>[null,0,null,1]\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>x &lt;= 50000</code></li> \n <li><code>track</code>&nbsp;和&nbsp;<code>getRankOfNumber</code> 方法的调用次数均不超过 2000 次</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 10.11. 峰与谷', '<p>在一个整数数组中，“峰”是大于或等于相邻整数的元素，相应地，“谷”是小于或等于相邻整数的元素。例如，在数组{5, 8, 4, 2, 3, 4, 6}中，{8, 6}是峰， {5, 2}是谷。现在给定一个整数数组，将该数组按峰与谷的交替顺序排序。</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入: </strong>[5, 3, 1, 2, 3]\n<strong>输出:</strong>&nbsp;[5, 1, 3, 2, 3]\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>nums.length &lt;= 10000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.01. 交换数字', '<p>编写一个函数，不用临时变量，直接交换<code>numbers = [a, b]</code>中<code>a</code>与<code>b</code>的值。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入:</strong> numbers = [1,2]\n<strong>输出:</strong> [2,1]\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>numbers.length == 2</code></li> \n <li><code>-2147483647 &lt;= numbers[i] &lt;=&nbsp;2147483647</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.02. 单词频率', '<p>设计一个方法，找出任意指定单词在一本书中的出现频率。</p> \n<p>你的实现应该支持如下操作：</p> \n<ul> \n <li><code>WordsFrequency(book)</code>构造函数，参数为字符串数组构成的一本书</li> \n <li><code>get(word)</code>查询指定单词在书中出现的频率</li> \n</ul> \n<p><strong>示例：</strong></p> \n<pre>WordsFrequency wordsFrequency = new WordsFrequency({\"i\", \"have\", \"an\", \"apple\", \"he\", \"have\", \"a\", \"pen\"});\nwordsFrequency.get(\"you\"); //返回0，\"you\"没有出现过\nwordsFrequency.get(\"have\"); //返回2，\"have\"出现2次\nwordsFrequency.get(\"an\"); //返回1\nwordsFrequency.get(\"apple\"); //返回1\nwordsFrequency.get(\"pen\"); //返回1\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>book[i]</code>中只包含小写字母</li> \n <li><code>1 &lt;= book.length &lt;= 100000</code></li> \n <li><code>1 &lt;= book[i].length &lt;= 10</code></li> \n <li><code>get</code>函数的调用次数不会超过100000</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.03. 交点', '<p>给定两条线段（表示为起点<code>start = {X1, Y1}</code>和终点<code>end = {X2, Y2}</code>），如果它们有交点，请计算其交点，没有交点则返回空值。</p> \n<p>要求浮点型误差不超过<code>10^-6</code>。若有多个交点（线段重叠）则返回 X 值最小的点，X 坐标相同则返回 Y 值最小的点。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>\nline1 = {0, 0}, {1, 0}\nline2 = {1, 1}, {0, -1}\n<strong>输出：</strong> {0.5, 0}\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>\nline1 = {0, 0}, {3, 3}\nline2 = {1, 1}, {2, 2}\n<strong>输出：</strong> {1, 1}\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>\nline1 = {0, 0}, {1, 1}\nline2 = {1, 0}, {2, 1}\n<strong>输出：</strong> {}，两条线段没有交点\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li>坐标绝对值不会超过 2^7</li> \n <li>输入的坐标均是有效的二维坐标</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.04. 井字游戏', '<p>设计一个算法，判断玩家是否赢了井字游戏。输入是一个 N x N 的数组棋盘，由字符\" \"，\"X\"和\"O\"组成，其中字符\" \"代表一个空位。</p> \n<p>以下是井字游戏的规则：</p> \n<ul> \n <li>玩家轮流将字符放入空位（\" \"）中。</li> \n <li>第一个玩家总是放字符\"O\"，且第二个玩家总是放字符\"X\"。</li> \n <li>\"X\"和\"O\"只允许放置在空位中，不允许对已放有字符的位置进行填充。</li> \n <li>当有N个相同（且非空）的字符填充任何行、列或对角线时，游戏结束，对应该字符的玩家获胜。</li> \n <li>当所有位置非空时，也算为游戏结束。</li> \n <li>如果游戏结束，玩家不允许再放置字符。</li> \n</ul> \n<p>如果游戏存在获胜者，就返回该游戏的获胜者使用的字符（\"X\"或\"O\"）；如果游戏以平局结束，则返回 \"Draw\"；如果仍会有行动（游戏未结束），则返回 \"Pending\"。</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong> board = [\"O X\",\" XO\",\"X O\"]\n<strong>输出：</strong> \"X\"\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong> board = [\"OOX\",\"XXO\",\"OXO\"]\n<strong>输出：</strong> \"Draw\"\n<strong>解释：</strong> 没有玩家获胜且不存在空位\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong> board = [\"OOX\",\"XXO\",\"OX \"]\n<strong>输出：</strong> \"Pending\"\n<strong>解释：</strong> 没有玩家获胜且仍存在空位\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= board.length == board[i].length &lt;= 100</code></li> \n <li>输入一定遵循井字棋规则</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.05. 阶乘尾数', '<p>设计一个算法，算出 n 阶乘有多少个尾随零。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> 3\n<strong>输出:</strong> 0\n<strong>解释:</strong>&nbsp;3! = 6, 尾数中没有零。</pre> \n<p><strong>示例&nbsp;2:</strong></p> \n<pre><strong>输入:</strong> 5\n<strong>输出:</strong> 1\n<strong>解释:</strong>&nbsp;5! = 120, 尾数中有 1 个零.</pre> \n<p><strong>说明: </strong>你算法的时间复杂度应为&nbsp;<em>O</em>(log&nbsp;<em>n</em>)<em>&nbsp;</em>。</p>');
INSERT INTO `leecode` VALUES ('面试题 16.06. 最小差', '<p>给定两个整数数组<code>a</code>和<code>b</code>，计算具有最小差绝对值的一对数值（每个数组中取一个值），并返回该对数值的差</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>{1, 3, 15, 11, 2}, {23, 127, 235, 19, 8}\n<strong>输出：</strong>3，即数值对(11, 8)\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= a.length, b.length &lt;= 100000</code></li> \n <li><code>-2147483648 &lt;= a[i], b[i] &lt;= 2147483647</code></li> \n <li>正确结果在区间 <code>[0, 2147483647]</code> 内</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.07. 最大数值', '<p>编写一个方法，找出两个数字<code>a</code>和<code>b</code>中最大的那一个。不得使用if-else或其他比较运算符。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong> a = 1, b = 2\n<strong>输出：</strong> 2\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 16.08. 整数的英语表示', '<p>给定一个整数，打印该整数的英文描述。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> 123\n<strong>输出:</strong> \"One Hundred Twenty Three\"\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> 12345\n<strong>输出:</strong> \"Twelve Thousand Three Hundred Forty Five\"</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> 1234567\n<strong>输出:</strong> \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"</pre> \n<p><strong>示例 4:</strong></p> \n<pre><strong>输入:</strong> 1234567891\n<strong>输出:</strong> \"One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One\"</pre> \n<p>注意：本题与&nbsp;273 题相同：<a href=\"https://leetcode-cn.com/problems/integer-to-english-words/\">https://leetcode-cn.com/problems/integer-to-english-words/</a></p>');
INSERT INTO `leecode` VALUES ('面试题 16.09. 运算', '<p>请实现整数数字的乘法、减法和除法运算，运算结果均为整数数字，程序中只允许使用加法运算符和逻辑运算符，允许程序中出现正负常数，不允许使用位运算。</p> \n<p>你的实现应该支持如下操作：</p> \n<ul> \n <li><code>Operations()</code> 构造函数</li> \n <li><code>minus(a, b)</code> 减法，返回<code>a - b</code></li> \n <li><code>multiply(a, b)</code> 乘法，返回<code>a * b</code></li> \n <li><code>divide(a, b)</code> 除法，返回<code>a / b</code></li> \n</ul> \n<p><strong>示例：</strong></p> \n<pre>Operations operations = new Operations();\noperations.minus(1, 2); //返回-1\noperations.multiply(3, 4); //返回12\noperations.divide(5, -2); //返回-2\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li>你可以假设函数输入一定是有效的，例如不会出现除法分母为0的情况</li> \n <li>单个用例的函数调用次数不会超过1000次</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.10. 生存人数', '<p>给定 N 个人的出生年份和死亡年份，第 <code>i</code> 个人的出生年份为 <code>birth[i]</code>，死亡年份为 <code>death[i]</code>，实现一个方法以计算生存人数最多的年份。</p> \n<p>你可以假设所有人都出生于 1900 年至 2000 年（含 1900 和 2000 ）之间。如果一个人在某一年的任意时期处于生存状态，那么他应该被纳入那一年的统计中。例如，生于 1908 年、死于 1909 年的人应当被列入 1908 年和 1909 年的计数。</p> \n<p>如果有多个年份生存人数相同且均为最大值，输出其中最小的年份。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\nbirth = {1900, 1901, 1950}\ndeath = {1948, 1951, 2000}\n<strong>输出：</strong> 1901\n</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt; birth.length == death.length &lt;= 10000</code></li> \n <li><code>birth[i] &lt;= death[i]</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.11. 跳水板', '<p>你正在使用一堆木板建造跳水板。有两种类型的木板，其中长度较短的木板长度为<code>shorter</code>，长度较长的木板长度为<code>longer</code>。你必须正好使用<code>k</code>块木板。编写一个方法，生成跳水板所有可能的长度。</p> \n<p>返回的长度需要从小到大排列。</p> \n<p><strong>示例 1</strong></p> \n<pre><code><strong>输入：</strong>\nshorter = 1\nlonger = 2\nk = 3\n<strong>输出：</strong> [3,4,5,6]\n<strong>解释：</strong>\n可以使用 3 次 shorter，得到结果 3；使用 2 次 shorter 和 1 次 longer，得到结果 4 。以此类推，得到最终结果。</code></pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li>0 &lt; shorter &lt;= longer</li> \n <li>0 &lt;= k &lt;= 100000</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.13. 平分正方形', '<p>给定两个正方形及一个二维平面。请找出将这两个正方形分割成两半的一条直线。假设正方形顶边和底边与 x 轴平行。</p> \n<p>每个正方形的数据<code>square</code>包含3个数值，正方形的左下顶点坐标<code>[X,Y] = [square[0],square[1]]</code>，以及正方形的边长<code>square[2]</code>。所求直线穿过两个正方形会形成4个交点，请返回4个交点形成线段的两端点坐标（两个端点即为4个交点中距离最远的2个点，这2个点所连成的线段一定会穿过另外2个交点）。2个端点坐标<code>[X<sub>1</sub>,Y<sub>1</sub>]</code>和<code>[X<sub>2</sub>,Y<sub>2</sub>]</code>的返回格式为<code>{X<sub>1</sub>,Y<sub>1</sub>,X<sub>2</sub>,Y<sub>2</sub>}</code>，要求若<code>X<sub>1</sub> != X<sub>2</sub></code>，需保证<code>X<sub>1</sub> &lt; X<sub>2</sub></code>，否则需保证<code>Y<sub>1</sub> &lt;= Y<sub>2</sub></code>。</p> \n<p>若同时有多条直线满足要求，则选择斜率最大的一条计算并返回（与Y轴平行的直线视为斜率无穷大）。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\nsquare1 = {-1, -1, 2}\nsquare2 = {0, -1, 2}\n<strong>输出：</strong> {-1,0,2,0}\n<strong>解释：</strong> 直线 y = 0 能将两个正方形同时分为等面积的两部分，返回的两线段端点为[-1,0]和[2,0]\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>square.length == 3</code></li> \n <li><code>square[2] &gt; 0</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.14. 最佳直线', '<p>给定一个二维平面及平面上的 N 个点列表<code>Points</code>，其中第<code>i</code>个点的坐标为<code>Points[i]=[X<sub>i</sub>,Y<sub>i</sub>]</code>。请找出一条直线，其通过的点的数目最多。</p> \n<p>设穿过最多点的直线所穿过的全部点编号从小到大排序的列表为<code>S</code>，你仅需返回<code>[S[0],S[1]]</code>作为答案，若有多条直线穿过了相同数量的点，则选择<code>S[0]</code>值较小的直线返回，<code>S[0]</code>相同则选择<code>S[1]</code>值较小的直线返回。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong> [[0,0],[1,1],[1,0],[2,0]]\n<strong>输出：</strong> [0,2]\n<strong>解释：</strong> 所求直线穿过的3个点的编号为[0,2,3]\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>2 &lt;= len(Points) &lt;= 300</code></li> \n <li><code>len(Points[i]) = 2</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.15. 珠玑妙算', '<p>珠玑妙算游戏（the game of master mind）的玩法如下。</p> \n<p>计算机有4个槽，每个槽放一个球，颜色可能是红色（R）、黄色（Y）、绿色（G）或蓝色（B）。例如，计算机可能有RGGB 4种（槽1为红色，槽2、3为绿色，槽4为蓝色）。作为用户，你试图猜出颜色组合。打个比方，你可能会猜YRGB。要是猜对某个槽的颜色，则算一次“猜中”；要是只猜对颜色但槽位猜错了，则算一次“伪猜中”。注意，“猜中”不能算入“伪猜中”。</p> \n<p>给定一种颜色组合<code>solution</code>和一个猜测<code>guess</code>，编写一个方法，返回猜中和伪猜中的次数<code>answer</code>，其中<code>answer[0]</code>为猜中的次数，<code>answer[1]</code>为伪猜中的次数。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong> solution=\"RGBY\",guess=\"GGRR\"\n<strong>输出：</strong> [1,1]\n<strong>解释：</strong> 猜中1次，伪猜中1次。\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>len(solution) = len(guess) = 4</code></li> \n <li><code>solution</code>和<code>guess</code>仅包含<code>\"R\"</code>,<code>\"G\"</code>,<code>\"B\"</code>,<code>\"Y\"</code>这4种字符</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.16. 部分排序', '<p>给定一个整数数组，编写一个函数，找出索引<code>m</code>和<code>n</code>，只要将索引区间<code>[m,n]</code>的元素排好序，整个数组就是有序的。注意：<code>n-m</code>尽量最小，也就是说，找出符合条件的最短序列。函数返回值为<code>[m,n]</code>，若不存在这样的<code>m</code>和<code>n</code>（例如整个数组是有序的），请返回<code>[-1,-1]</code>。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong> [1,2,4,7,10,11,7,12,6,7,16,18,19]\n<strong>输出：</strong> [3,9]\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= len(array) &lt;= 1000000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.17. 连续数列', '<p>给定一个整数数组，找出总和最大的连续数列，并返回总和。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong> [-2,1,-3,4,-1,2,1,-5,4]\n<strong>输出：</strong> 6\n<strong>解释：</strong> 连续子数组 [4,-1,2,1] 的和最大，为 6。\n</pre> \n<p><strong>进阶：</strong></p> \n<p>如果你已经实现复杂度为 O(<em>n</em>) 的解法，尝试使用更为精妙的分治法求解。</p>');
INSERT INTO `leecode` VALUES ('面试题 16.18. 模式匹配', '<p>你有两个字符串，即<code>pattern</code>和<code>value</code>。 <code>pattern</code>字符串由字母<code>\"a\"</code>和<code>\"b\"</code>组成，用于描述字符串中的模式。例如，字符串<code>\"catcatgocatgo\"</code>匹配模式<code>\"aabab\"</code>（其中<code>\"cat\"</code>是<code>\"a\"</code>，<code>\"go\"</code>是<code>\"b\"</code>），该字符串也匹配像<code>\"a\"</code>、<code>\"ab\"</code>和<code>\"b\"</code>这样的模式。但需注意<code>\"a\"</code>和<code>\"b\"</code>不能同时表示相同的字符串。编写一个方法判断<code>value</code>字符串是否匹配<code>pattern</code>字符串。</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong> pattern = \"abba\", value = \"dogcatcatdog\"\n<strong>输出：</strong> true\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong> pattern = \"abba\", value = \"dogcatcatfish\"\n<strong>输出：</strong> false\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong> pattern = \"aaaa\", value = \"dogcatcatdog\"\n<strong>输出：</strong> false\n</pre> \n<p><strong>示例 4：</strong></p> \n<pre><strong>输入：</strong> pattern = \"abba\", value = \"dogdogdogdog\"\n<strong>输出：</strong> true\n<strong>解释：</strong> \"a\"=\"dogdog\",b=\"\"，反之也符合规则\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= len(pattern) &lt;= 1000</code></li> \n <li><code>0 &lt;= len(value) &lt;= 1000</code></li> \n <li>你可以假设<code>pattern</code>只包含字母<code>\"a\"</code>和<code>\"b\"</code>，<code>value</code>仅包含小写字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.19. 水域大小', '<p>你有一个用于表示一片土地的整数矩阵<code>land</code>，该矩阵中每个点的值代表对应地点的海拔高度。若值为0则表示水域。由垂直、水平或对角连接的水域为池塘。池塘的大小是指相连接的水域的个数。编写一个方法来计算矩阵中所有池塘的大小，返回值需要从小到大排序。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\n[\n  [0,2,1,0],\n  [0,1,0,1],\n  [1,1,0,1],\n  [0,1,0,1]\n]\n<strong>输出：</strong> [1,2,4]\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt; len(land) &lt;= 1000</code></li> \n <li><code>0 &lt; len(land[i]) &lt;= 1000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.20. T9键盘', '<p>在老式手机上，用户通过数字键盘输入，手机将提供与这些数字相匹配的单词列表。每个数字映射到0至4个字母。给定一个数字序列，实现一个算法来返回匹配单词的列表。你会得到一张含有有效单词的列表。映射如下图所示：</p> \n<p><img style=\"width: 200px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/17_telephone_keypad.png\"></p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> num = \"8733\", words = [\"tree\", \"used\"]\n<strong>输出:</strong> [\"tree\", \"used\"]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> num = \"2\", words = [\"a\", \"b\", \"c\", \"d\"]\n<strong>输出:</strong> [\"a\", \"b\", \"c\"]</pre> \n<p>提示：</p> \n<ul> \n <li><code>num.length &lt;= 1000</code></li> \n <li><code>words.length &lt;= 500</code></li> \n <li><code>words[i].length == num.length</code></li> \n <li><code>num</code>中不会出现 0, 1 这两个数字</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.21. 交换和', '<p>给定两个整数数组，请交换一对数值（每个数组中取一个数值），使得两个数组所有元素的和相等。</p> \n<p>返回一个数组，第一个元素是第一个数组中要交换的元素，第二个元素是第二个数组中要交换的元素。若有多个答案，返回任意一个均可。若无满足条件的数值，返回空数组。</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> array1 = [4, 1, 2, 1, 1, 2], array2 = [3, 6, 3, 3]\n<strong>输出:</strong> [1, 3]\n</pre> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> array1 = <code>[1, 2, 3], array2 = [4, 5, 6]</code>\n<strong>输出: </strong>[]</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>1 &lt;= array1.length, array2.length &lt;= 100000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.22. 兰顿蚂蚁', '<p>一只蚂蚁坐在由白色和黑色方格构成的无限网格上。开始时，网格全白，蚂蚁面向右侧。每行走一步，蚂蚁执行以下操作。</p> \n<p>(1) 如果在白色方格上，则翻转方格的颜色，向右(顺时针)转 90 度，并向前移动一个单位。<br> (2) 如果在黑色方格上，则翻转方格的颜色，向左(逆时针方向)转 90 度，并向前移动一个单位。</p> \n<p>编写程序来模拟蚂蚁执行的前 K 个动作，并返回最终的网格。</p> \n<p>网格由数组表示，每个元素是一个字符串，代表网格中的一行，黑色方格由&nbsp;<code>\'X\'</code>&nbsp;表示，白色方格由&nbsp;<code>\'_\'</code>&nbsp;表示，蚂蚁所在的位置由&nbsp;<code>\'L\'</code>, <code>\'U\'</code>, <code>\'R\'</code>, <code>\'D\'</code>&nbsp;表示，分别表示蚂蚁&nbsp;左、上、右、下 的朝向。只需要返回能够包含蚂蚁走过的所有方格的最小矩形。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> 0\n<strong>输出: </strong>[\"R\"]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> 2\n<strong>输出:\n</strong>[\n&nbsp; \"_X\",\n&nbsp; \"LX\"\n]\n</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> 5\n<strong>输出:\n</strong>[\n&nbsp; \"_U\",\n&nbsp; \"X_\",\n&nbsp; \"XX\"\n]\n</pre> \n<p><strong>说明：</strong></p> \n<ul> \n <li><code>K &lt;= 100000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.24. 数对和', '<p>设计一个算法，找出数组中两数之和为指定值的所有整数对。一个数只能属于一个数对。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> nums = [5,6,5], target = 11\n<strong>输出: </strong>[[5,6]]</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> nums = [5,6,5,6], target = 11\n<strong>输出: </strong>[[5,6],[5,6]]</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>nums.length &lt;= 100000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 16.25. LRU 缓存', '<p>设计和构建一个“最近最少使用”缓存，该缓存会删除最近最少使用的项目。缓存应该从键映射到值(允许你插入和检索特定键对应的值)，并在初始化时指定最大容量。当缓存被填满时，它应该删除最近最少使用的项目。</p> \n<p>它应该支持以下操作： 获取数据 <code>get</code> 和 写入数据 <code>put</code> 。</p> \n<p>获取数据 <code>get(key)</code> - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。<br> 写入数据 <code>put(key, value)</code> - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。</p> \n<p><strong>示例:</strong></p> \n<pre>LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // 返回  1\ncache.put(3, 3);    // 该操作会使得密钥 2 作废\ncache.get(2);       // 返回 -1 (未找到)\ncache.put(4, 4);    // 该操作会使得密钥 1 作废\ncache.get(1);       // 返回 -1 (未找到)\ncache.get(3);       // 返回  3\ncache.get(4);       // 返回  4\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 16.26. 计算器', '<p>给定一个包含正整数、加(+)、减(-)、乘(*)、除(/)的算数表达式(括号除外)，计算其结果。</p> \n<p>表达式仅包含非负整数，<code>+</code>， <code>-</code> ，<code>*</code>，<code>/</code> 四种运算符和空格&nbsp;<code>&nbsp;</code>。 整数除法仅保留整数部分。</p> \n<p><strong>示例&nbsp;1:</strong></p> \n<pre><strong>输入: </strong>\"3+2*2\"\n<strong>输出:</strong> 7\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> \" 3/2 \"\n<strong>输出:</strong> 1</pre> \n<p><strong>示例 3:</strong></p> \n<pre><strong>输入:</strong> \" 3+5 / 2 \"\n<strong>输出:</strong> 5\n</pre> \n<p><strong>说明：</strong></p> \n<ul> \n <li>你可以假设所给定的表达式都是有效的。</li> \n <li>请<strong>不要</strong>使用内置的库函数 <code>eval</code>。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.01. 不用加号的加法', '<p>设计一个函数把两个数字相加。不得使用 + 或者其他算术运算符。</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> a = 1, b = 1\n<strong>输出:</strong> 2</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>a</code>,&nbsp;<code>b</code>&nbsp;均可能是负数或 0</li> \n <li>结果不会溢出 32 位整数</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.04. 消失的数字', '<p>数组<code>nums</code>包含从<code>0</code>到<code>n</code>的所有整数，但其中缺了一个。请编写代码找出那个缺失的整数。你有办法在O(n)时间内完成吗？</p> \n<p><strong>注意：</strong>本题相对书上原题稍作改动</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[3,0,1]\n<strong>输出：</strong>2</pre> \n<p>&nbsp;</p> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[9,6,4,2,3,5,7,0,1]\n<strong>输出：</strong>8\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 17.05. 字母与数字', '<p>给定一个放有字母和数字的数组，找到最长的子数组，且包含的字母和数字的个数相同。</p> \n<p>返回该子数组，若存在多个最长子数组，返回左端点下标值最小的子数组。若不存在这样的数组，返回一个空数组。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>[\"A\",\"1\",\"B\",\"C\",\"D\",\"2\",\"3\",\"4\",\"E\",\"5\",\"F\",\"G\",\"6\",\"7\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\"]\n\n<strong>输出: </strong>[\"A\",\"1\",\"B\",\"C\",\"D\",\"2\",\"3\",\"4\",\"E\",\"5\",\"F\",\"G\",\"6\",\"7\"]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入: </strong>[\"A\",\"A\"]\n\n<strong>输出: </strong>[]\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>array.length &lt;= 100000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.06. 2出现的次数', '<p>编写一个方法，计算从 0 到 n (含 n) 中数字 2 出现的次数。</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入: </strong>25\n<strong>输出: </strong>9\n<strong>解释: </strong>(2, 12, 20, 21, 22, 23, 24, 25)(注意 22 应该算作两次)</pre> \n<p>提示：</p> \n<ul> \n <li><code>n &lt;= 10^9</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.07. 婴儿名字', '<p>每年，政府都会公布一万个最常见的婴儿名字和它们出现的频率，也就是同名婴儿的数量。有些名字有多种拼法，例如，John 和 Jon 本质上是相同的名字，但被当成了两个名字公布出来。给定两个列表，一个是名字及对应的频率，另一个是本质相同的名字对。设计一个算法打印出每个真实名字的实际频率。注意，如果 John 和 Jon 是相同的，并且 Jon 和 Johnny 相同，则 John 与 Johnny 也相同，即它们有传递和对称性。</p> \n<p>在结果列表中，选择<strong> 字典序最小 </strong>的名字作为真实名字。</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>names = [\"John(15)\",\"Jon(12)\",\"Chris(13)\",\"Kris(4)\",\"Christopher(19)\"], synonyms = [\"(Jon,John)\",\"(John,Johnny)\",\"(Chris,Kris)\",\"(Chris,Christopher)\"]\n<strong>输出：</strong>[\"John(27)\",\"Chris(36)\"]</pre> \n<p>&nbsp;</p> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>names.length &lt;= 100000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.08. 马戏团人塔', '<p>有个马戏团正在设计叠罗汉的表演节目，一个人要站在另一人的肩膀上。出于实际和美观的考虑，在上面的人要比下面的人矮一点且轻一点。已知马戏团每个人的身高和体重，请编写代码计算叠罗汉最多能叠几个人。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>height = [65,70,56,75,60,68] weight = [100,150,90,190,95,110]\n<strong>输出：</strong>6\n<strong>解释：</strong>从上往下数，叠罗汉最多能叠 6 层：(56,90), (60,95), (65,100), (68,110), (70,150), (75,190)</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>height.length == weight.length &lt;= 10000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.09. 第 k 个数', '<p>有些数的素因子只有 3，5，7，请设计一个算法找出第 k 个数。注意，不是必须有这些素因子，而是必须不包含其他的素因子。例如，前几个数按顺序应该是 1，3，5，7，9，15，21。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入: </strong>k = 5\n\n<strong>输出: </strong>9\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 17.10. 主要元素', '<p>数组中占比超过一半的元素称之为主要元素。给你一个<strong> 整数 </strong>数组，找出其中的主要元素。若没有，返回 <code>-1</code> 。请设计时间复杂度为 <code>O(N)</code> 、空间复杂度为 <code>O(1)</code> 的解决方案。</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong>[1,2,5,9,5,9,5,5,5]\n<strong>输出：</strong>5</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong>[3,2]\n<strong>输出：</strong>-1</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong>[2,2,1,1,1,2,2]\n<strong>输出：</strong>2</pre>');
INSERT INTO `leecode` VALUES ('面试题 17.11. 单词距离', '<p>有个内含单词的超大文本文件，给定任意两个单词，找出在这个文件中这两个单词的最短距离(相隔单词数)。如果寻找过程在这个文件中会重复多次，而每次寻找的单词不同，你能对此优化吗?</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>words = [\"I\",\"am\",\"a\",\"student\",\"from\",\"a\",\"university\",\"in\",\"a\",\"city\"], word1 = \"a\", word2 = \"student\"\n<strong>输出：</strong>1</pre> \n<p>提示：</p> \n<ul> \n <li><code>words.length &lt;= 100000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.12. BiNode', '<p>二叉树数据结构<code>TreeNode</code>可用来表示单向链表（其中<code>left</code>置空，<code>right</code>为下一个链表节点）。实现一个方法，把二叉搜索树转换为单向链表，要求依然符合二叉搜索树的性质，转换操作应是原址的，也就是在原始的二叉搜索树上直接修改。</p> \n<p>返回转换后的单向链表的头节点。</p> \n<p><strong>注意：</strong>本题相对原题稍作改动</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong> [4,2,5,1,3,null,6,0]\n<strong>输出：</strong> [0,null,1,null,2,null,3,null,4,null,5,null,6]\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li>节点数量不会超过 100000。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.13. 恢复空格', '<p>哦，不！你不小心把一个长篇文章中的空格、标点都删掉了，并且大写也弄成了小写。像句子<code>\"I reset the computer. It still didn’t boot!\"</code>已经变成了<code>\"iresetthecomputeritstilldidntboot\"</code>。在处理标点符号和大小写之前，你得先把它断成词语。当然了，你有一本厚厚的词典<code>dictionary</code>，不过，有些词没在词典里。假设文章用<code>sentence</code>表示，设计一个算法，把文章断开，要求未识别的字符最少，返回未识别的字符数。</p> \n<p><strong>注意：</strong>本题相对原题稍作改动，只需返回未识别的字符数</p> \n<p>&nbsp;</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\ndictionary = [\"looked\",\"just\",\"like\",\"her\",\"brother\"]\nsentence = \"jesslookedjustliketimherbrother\"\n<strong>输出：</strong> 7\n<strong>解释：</strong> 断句后为\"<strong>jess</strong> looked just like <strong>tim</strong> her brother\"，共7个未识别字符。\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= len(sentence) &lt;= 1000</code></li> \n <li><code>dictionary</code>中总字符数不超过 150000。</li> \n <li>你可以认为<code>dictionary</code>和<code>sentence</code>中只包含小写字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.14. 最小K个数', '<p>设计一个算法，找出数组中最小的k个数。以任意顺序返回这k个数均可。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong> arr = [1,3,5,7,2,4,6,8], k = 4\n<strong>输出：</strong> [1,2,3,4]\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= len(arr) &lt;= 100000</code></li> \n <li><code>0 &lt;= k &lt;= min(100000, len(arr))</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.15. 最长单词', '<p>给定一组单词<code>words</code>，编写一个程序，找出其中的最长单词，且该单词由这组单词中的其他单词组合而成。若有多个长度相同的结果，返回其中字典序最小的一项，若没有符合要求的单词则返回空字符串。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong> [\"cat\",\"banana\",\"dog\",\"nana\",\"walk\",\"walker\",\"dogwalker\"]\n<strong>输出：</strong> \"dogwalker\"\n<strong>解释：</strong> \"dogwalker\"可由\"dog\"和\"walker\"组成。\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= len(words) &lt;= 200</code></li> \n <li><code>1 &lt;= len(words[i]) &lt;= 100</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.16. 按摩师', '<p>一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。</p> \n<p><strong>注意：</strong>本题相对原题稍作改动</p> \n<p>&nbsp;</p> \n<p><strong>示例 1：</strong></p> \n<pre><strong>输入：</strong> [1,2,3,1]\n<strong>输出：</strong> 4\n<strong>解释：</strong> 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。\n</pre> \n<p><strong>示例 2：</strong></p> \n<pre><strong>输入：</strong> [2,7,9,3,1]\n<strong>输出：</strong> 12\n<strong>解释：</strong> 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。\n</pre> \n<p><strong>示例 3：</strong></p> \n<pre><strong>输入：</strong> [2,1,4,5,3,1,1,3]\n<strong>输出：</strong> 12\n<strong>解释：</strong> 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 17.17. 多次搜索', '<p>给定一个较长字符串<code>big</code>和一个包含较短字符串的数组<code>smalls</code>，设计一个方法，根据<code>smalls</code>中的每一个较短字符串，对<code>big</code>进行搜索。输出<code>smalls</code>中的字符串在<code>big</code>里出现的所有位置<code>positions</code>，其中<code>positions[i]</code>为<code>smalls[i]</code>出现的所有位置。</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：</strong>\nbig = \"mississippi\"\nsmalls = [\"is\",\"ppi\",\"hi\",\"sis\",\"i\",\"ssippi\"]\n<strong>输出：</strong> [[1,4],[8],[],[3],[1,4,7,10],[5]]\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>0 &lt;= len(big) &lt;= 1000</code></li> \n <li><code>0 &lt;= len(smalls[i]) &lt;= 1000</code></li> \n <li><code>smalls</code>的总字符数不会超过 100000。</li> \n <li>你可以认为<code>smalls</code>中没有重复字符串。</li> \n <li>所有出现的字符均为英文小写字母。</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.18. 最短超串', '<p>假设你有两个数组，一个长一个短，短的元素均不相同。找到长数组中包含短数组所有的元素的最短子数组，其出现顺序无关紧要。</p> \n<p>返回最短子数组的左端点和右端点，如有多个满足条件的子数组，返回左端点最小的一个。若不存在，返回空数组。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong>\nbig = <code>[7,5,9,0,2,1,3,<strong>5,7,9,1</strong>,1,5,8,8,9,7]\nsmall = [1,5,9]</code>\n<strong>输出: </strong>[7,10]</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong>\nbig = <code>[1,2,3]\nsmall = [4]</code>\n<strong>输出: </strong>[]</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>big.length&nbsp;&lt;= 100000</code></li> \n <li><code>1 &lt;= small.length&nbsp;&lt;= 100000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.19. 消失的两个数字', '<p>给定一个数组，包含从 1 到 N 所有的整数，但其中缺了两个数字。你能在 O(N) 时间内只用 O(1) 的空间找到它们吗？</p> \n<p>以任意顺序返回这两个数字均可。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> <code>[1]</code>\n<strong>输出: </strong>[2,3]</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> <code>[2,3]</code>\n<strong>输出: </strong>[1,4]</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>nums.length &lt;=&nbsp;30000</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.20. 连续中值', '<p>随机产生数字并传递给一个方法。你能否完成这个方法，在每次产生新值时，寻找当前所有值的中间值（中位数）并保存。</p> \n<p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p> \n<p>例如，</p> \n<p>[2,3,4]&nbsp;的中位数是 3</p> \n<p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p> \n<p>设计一个支持以下两种操作的数据结构：</p> \n<ul> \n <li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li> \n <li>double findMedian() - 返回目前所有元素的中位数。</li> \n</ul> \n<p><strong>示例：</strong></p> \n<pre>addNum(1)\naddNum(2)\nfindMedian() -&gt; 1.5\naddNum(3) \nfindMedian() -&gt; 2\n</pre>');
INSERT INTO `leecode` VALUES ('面试题 17.21. 直方图的水量', '<p>给定一个直方图(也称柱状图)，假设有人从上面源源不断地倒水，最后直方图能存多少水量?直方图的宽度为 1。</p> \n<p><img style=\"height: 161px; width: 412px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png\"></p> \n<p><small>上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的直方图，在这种情况下，可以接 6 个单位的水（蓝色部分表示水）。&nbsp;<strong>感谢 Marcos</strong> 贡献此图。</small></p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> [0,1,0,2,1,0,1,3,2,1,2,1]\n<strong>输出:</strong> 6</pre>');
INSERT INTO `leecode` VALUES ('面试题 17.22. 单词转换', '<p>给定字典中的两个词，长度相等。写一个方法，把一个词转换成另一个词， 但是一次只能改变一个字符。每一步得到的新词都必须能在字典中找到。</p> \n<p>编写一个程序，返回一个可能的转换序列。如有多个可能的转换序列，你可以返回任何一个。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong>\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\n<strong>输出:</strong>\n[\"hit\",\"hot\",\"dot\",\"lot\",\"log\",\"cog\"]\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong>\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\n<strong>输出: </strong>[]\n\n<strong>解释:</strong>&nbsp;<em>endWord</em> \"cog\" 不在字典中，所以不存在符合要求的转换序列。</pre>');
INSERT INTO `leecode` VALUES ('面试题 17.23. 最大黑方阵', '<p>给定一个方阵，其中每个单元(像素)非黑即白。设计一个算法，找出 4 条边皆为黑色像素的最大子方阵。</p> \n<p>返回一个数组 <code>[r, c, size]</code> ，其中&nbsp;<code>r</code>,&nbsp;<code>c</code>&nbsp;分别代表子方阵左上角的行号和列号，<code>size</code> 是子方阵的边长。若有多个满足条件的子方阵，返回 <code>r</code> 最小的，若 <code>r</code> 相同，返回 <code>c</code> 最小的子方阵。若无满足条件的子方阵，返回空数组。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:\n</strong>[\n&nbsp;  [1,0,1],\n&nbsp;  [<strong>0,0</strong>,1],\n&nbsp;  [<strong>0,0</strong>,1]\n]\n<strong>输出: </strong>[1,0,2]\n<strong>解释: </strong>输入中 0 代表黑色，1 代表白色，标粗的元素即为满足条件的最大子方阵\n</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:\n</strong>[\n&nbsp;  [<strong>0</strong>,1,1],\n&nbsp;  [1,0,1],\n&nbsp;  [1,1,0]\n]\n<strong>输出: </strong>[0,0,1]\n</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>matrix.length == matrix[0].length &lt;= 200</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.24. 最大子矩阵', '<p>给定一个正整数、负整数和 0 组成的 N × M&nbsp;矩阵，编写代码找出元素总和最大的子矩阵。</p> \n<p>返回一个数组 <code>[r1, c1, r2, c2]</code>，其中 <code>r1</code>, <code>c1</code> 分别代表子矩阵左上角的行号和列号，<code>r2</code>, <code>c2</code> 分别代表右下角的行号和列号。若有多个满足条件的子矩阵，返回任意一个均可。</p> \n<p><strong>注意：</strong>本题相对书上原题稍作改动</p> \n<p><strong>示例：</strong></p> \n<pre><strong>输入：\n</strong><code>[\n&nbsp;  [-1,<strong>0</strong>],\n&nbsp;  [0,-1]\n]</code>\n<strong>输出：</strong>[0,1,0,1]\n<strong>解释：</strong>输入中标粗的元素即为输出所表示的矩阵</pre> \n<p>&nbsp;</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li><code>1 &lt;= matrix.length, matrix[0].length &lt;= 200</code></li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.25. 单词矩阵', '<p>给定一份单词的清单，设计一个算法，创建由字母组成的面积最大的矩形，其中每一行组成一个单词(自左向右)，每一列也组成一个单词(自上而下)。不要求这些单词在清单里连续出现，但要求所有行等长，所有列等高。</p> \n<p>如果有多个面积最大的矩形，输出任意一个均可。一个单词可以重复使用。</p> \n<p><strong>示例 1:</strong></p> \n<pre><strong>输入:</strong> <code>[\"this\", \"real\", \"hard\", \"trh\", \"hea\", \"iar\", \"sld\"]</code>\n<strong>输出:\n</strong><code>[\n&nbsp;  \"this\",\n&nbsp;  \"real\",\n&nbsp;  \"hard\"</code>\n]</pre> \n<p><strong>示例 2:</strong></p> \n<pre><strong>输入:</strong> <code>[\"aa\"]</code>\n<strong>输出: </strong>[\"aa\",\"aa\"]</pre> \n<p><strong>说明：</strong></p> \n<ul> \n <li><code>words.length &lt;= 1000</code></li> \n <li><code>words[i].length &lt;= 100</code></li> \n <li>数据保证单词足够随机</li> \n</ul>');
INSERT INTO `leecode` VALUES ('面试题 17.26. 稀疏相似度', '<p>两个(具有不同单词的)文档的交集(intersection)中元素的个数除以并集(union)中元素的个数，就是这两个文档的相似度。例如，{1, 5, 3} 和 {1, 7, 2, 3} 的相似度是 0.4，其中，交集的元素有 2 个，并集的元素有 5 个。给定一系列的长篇文档，每个文档元素各不相同，并与一个 ID 相关联。它们的相似度非常“稀疏”，也就是说任选 2 个文档，相似度都很接近 0。请设计一个算法返回每对文档的 ID 及其相似度。只需输出相似度大于 0 的组合。请忽略空文档。为简单起见，可以假定每个文档由一个含有不同整数的数组表示。</p> \n<p>输入为一个二维数组 <code>docs</code>，<code>docs[i]</code>&nbsp;表示&nbsp;id 为 <code>i</code> 的文档。返回一个数组，其中每个元素是一个字符串，代表每对相似度大于 0 的文档，其格式为 <code>{id1},{id2}: {similarity}</code>，其中 <code>id1</code> 为两个文档中较小的 id，<code>similarity</code> 为相似度，精确到小数点后 4 位。以任意顺序返回数组均可。</p> \n<p><strong>示例:</strong></p> \n<pre><strong>输入:</strong> \n<code>[\n&nbsp; [14, 15, 100, 9, 3],\n&nbsp; [32, 1, 9, 3, 5],\n&nbsp; [15, 29, 2, 6, 8, 7],\n&nbsp; [7, 10]\n]</code>\n<strong>输出:</strong>\n[\n&nbsp; \"0,1: 0.2500\",\n&nbsp; \"0,2: 0.1000\",\n&nbsp; \"2,3: 0.1429\"\n]</pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li><code>docs.length &lt;= 500</code></li> \n <li><code>docs[i].length &lt;= 500</code></li> \n</ul>');
